// Generated from SQLParser.g4 by ANTLR 4.4
package ru.taximaxim.codekeeper.ui.sqledit.antlrv4;


import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		FUNCTION=52, ISODOW=202, OVERWRITE=234, FUNCTIONS=53, ROW=102, PRECISION=240, 
		ILIKE=62, TYPES=279, ENABLE=178, Character_String_Literal=375, NOT=85, 
		EXCEPT=41, FOREIGN=48, CACHE=148, PRIVILEGES=98, BYTEA=331, MONTH=221, 
		STATEMENT=118, CHARACTER=152, TYPE=278, BlockComment=370, VARBIT=299, 
		STDDEV_POP=265, CREATE=24, COMMENTS=159, ESC_SEQUENCES=376, USING=134, 
		UNLOGGED=281, NOT_EQUAL=347, TIMEZONE_MINUTE=275, VERTICAL_BAR=361, VARIADIC=136, 
		TIMESTAMPTZ=325, RIGHT_BRACKET=366, VALID=283, REGEXP=246, FAMILY=186, 
		GEQ=351, HANDLER=59, STDDEV_SAMP=266, DIVIDE=357, DISABLE=174, BLOB=330, 
		REPLICA=248, STRICT=119, PRESERVE=96, ASC=10, GROUPING=191, SUBPARTITION=267, 
		VALIDATOR=135, KEY=78, SETOF=116, TEMP=122, ELSE=37, NUMBER=368, BOOL=297, 
		TRAILING=125, DEFINER=172, SEMI_COLON=344, INT=306, RLIKE=251, LEADING=79, 
		RESTRICT=106, SERVER=256, PROCEDURAL=100, TABLESPACE=269, MILLISECONDS=217, 
		REAL=311, INTERSECT=71, GROUP=57, LANGUAGE=205, SEQUENCES=113, OUT=90, 
		REAL_NUMBER=369, NONE=224, USER=282, TRIM=276, LEFT_PAREN=352, LOCATION=210, 
		SEARCH=253, END=38, N_DISTINCT=226, CONSTRAINT=20, TIMEZONE_HOUR=274, 
		RENAME=247, CAST_EXPRESSION=340, ALTER=6, OPTION=231, ISOYEAR=203, UUID=327, 
		NCHAR=319, PLAIN=239, ONLY=230, EXECUTE=44, LEFT_BRACKET=365, OWNER=95, 
		INPUT=198, TABLE=121, VARCHAR=318, FLOAT=313, VERSION=289, MICROSECONDS=215, 
		IMMUTABLE=64, ASYMMETRIC=9, SUM=268, N_DISTINCT_INHERITED=227, UnterminatedQuotedIdentifier=374, 
		OWNED=94, EndDollarStringConstant=382, Space=378, INOUT=73, STORAGE=264, 
		TIME=322, AS=4, RIGHT_PAREN=353, THEN=124, MAXVALUE=214, COLLATION=18, 
		LEFT=80, REPLACE=105, AVG=145, ZONE=295, TRUNCATE=129, COLUMN=157, TRUSTED=126, 
		PLUS=354, EXISTS=182, HEADER=60, NVARCHAR=320, Not_Similar_To=337, RETURNS=107, 
		LIKE=81, COLLATE=17, ADD=1, INTEGER=307, OUTER=89, BY=147, DEFERRABLE=29, 
		TO=277, INHERIT=194, SET=257, RIGHT=109, HAVING=58, MIN=218, SESSION=115, 
		MINUS=355, TEXT=326, HOUR=193, QuotedIdentifier=373, FORCE_QUOTE=49, CONCATENATION_OPERATOR=346, 
		CONVERSION=22, UNION=130, CURRENT=166, COLON=343, COMMIT=160, SCHEMA=111, 
		DATABASE=26, DECIMAL=316, DROP=177, BIGINT=308, WHEN=138, VALIDATE=284, 
		CONCURRENTLY=161, ROWS=103, START=261, BIT=298, LARGE=206, REVOKE=108, 
		NATURAL=84, FORMAT=189, PUBLIC=241, AGGREGATE=2, EXTENSION=45, BETWEEN=146, 
		OPTIONS=232, DELIMITER=32, FIRST=188, CAST=16, WEEK=291, EXTERNAL=184, 
		DOUBLE_QUOTE=363, VARYING=288, RESET=249, REGCONFIG=245, TRIGGER=127, 
		CASE=14, CHAR=317, INT8=303, ENCODING=39, COUNT=164, DAY=169, FORCE_NOT_NULL=50, 
		CASCADE=15, COST=163, INT2=301, INT1=300, Identifier=372, INT4=302, ISCACHABLE=201, 
		EXTENDED=183, QUOTE=362, MODULAR=358, INVOKER=75, FULL=51, DICTIONARY=173, 
		THAN=272, QUARTER=243, INSERT=199, ESCAPE=40, INHERITS=67, CONNECT=19, 
		ALWAYS=143, INTERSECTION=200, LESS=208, TINYINT=304, BOTH=13, Similar_To_Case_Insensitive=338, 
		DOUBLE=314, ADMIN=142, SYMMETRIC=120, VOID=335, ISSTRICT=204, EACH=36, 
		LAST=207, COMMENT=158, SELECT=114, INTO=72, ARRAY=144, UNIQUE=131, COALESCE=156, 
		SECOND=254, ROLE=101, RULE=110, VIEW=137, EPOCH=179, ROLLUP=252, NULL=86, 
		WITHOUT=141, NO=223, STDIN=263, EVERY=181, ON=229, RESTART=250, MATCH=212, 
		PRIMARY=97, DELETE=31, INET4=332, NUMERIC=315, LOCAL=83, LIST=209, OF=87, 
		EXCLUDING=43, TABLES=270, UNDERLINE=360, SEQUENCE=112, Not_Similar_To_Case_Insensitive=339, 
		CUBE=165, NATIONAL=222, CALLED=149, STATISTICS=262, VAR_POP=287, OR=92, 
		FILTER=187, CHECK=153, INLINE=69, FROM=54, FALSE=46, COLLECT=155, BeginDollarStringConstant=377, 
		PARSER=235, DISTINCT=34, TEMPORARY=123, TIMESTAMP=324, SIMPLE=259, DOLLAR=364, 
		OVER=233, CONSTRAINTS=21, WHERE=139, DEC=170, VAR_SAMP=286, NULLIF=225, 
		MAIN=211, CLASS=150, Text_between_Dollar=381, TIMETZ=323, INNER=70, BIT_AND=367, 
		YEAR=294, TIMEZONE=273, ORDER=93, AUTHORIZATION=11, LIMIT=82, DECADE=171, 
		GTH=350, CYCLE=167, White_Space=379, MAX=213, UPDATE=132, LineComment=371, 
		DEFERRED=30, FOR=47, FLOAT4=309, CONFIGURATION=162, FLOAT8=310, AND=7, 
		CROSS=25, Similar_To=336, INTERVAL=334, USAGE=133, IF=61, INDEX=195, OIDS=88, 
		BOOLEAN=296, IN=65, MINVALUE=219, UNKNOWN=280, MULTIPLY=356, OBJECT=228, 
		COMMA=345, REFERENCES=104, PARTITION=237, IS=76, PARTITIONS=238, COPY=23, 
		SOME=117, EQUAL=342, ALL=5, DOT=359, EXTRACT=185, CENTURY=151, STABLE=260, 
		SECURITY=255, PARTIAL=236, DOW=175, EXCLUDE=42, WITH=140, INITIALLY=68, 
		DOY=176, FUSION=190, GRANT=56, VARBINARY=329, VOLATILE=290, OPERATOR=91, 
		DEFAULT=27, VALUES=285, HASH=192, RANGE=244, MILLENNIUM=216, INDEXES=196, 
		PURGE=242, BEFORE=12, AFTER=3, INSTEAD=74, EVENT=180, WRAPPER=293, TRUE=128, 
		JOIN=77, PROCEDURE=99, SIMILAR=258, DOMAIN=35, DEFAULTS=28, LTH=348, INCREMENT=197, 
		ANY=8, INET=333, TEMPLATE=271, BAD=380, ASSIGN=341, REGCLASS=312, IMMEDIATE=63, 
		CLUSTER=154, WINDOW=292, BINARY=328, DESC=33, DATE=321, MINUTE=220, GLOBAL=55, 
		DATA=168, INCLUDING=66, LEQ=349, SMALLINT=305;
	public static final String[] tokenNames = {
		"<INVALID>", "ADD", "AGGREGATE", "AFTER", "AS", "ALL", "ALTER", "AND", 
		"ANY", "ASYMMETRIC", "ASC", "AUTHORIZATION", "BEFORE", "BOTH", "CASE", 
		"CASCADE", "CAST", "COLLATE", "COLLATION", "CONNECT", "CONSTRAINT", "CONSTRAINTS", 
		"CONVERSION", "COPY", "CREATE", "CROSS", "DATABASE", "DEFAULT", "DEFAULTS", 
		"DEFERRABLE", "DEFERRED", "DELETE", "DELIMITER", "DESC", "DISTINCT", "DOMAIN", 
		"EACH", "ELSE", "END", "ENCODING", "ESCAPE", "EXCEPT", "EXCLUDE", "EXCLUDING", 
		"EXECUTE", "EXTENSION", "FALSE", "FOR", "FOREIGN", "FORCE_QUOTE", "FORCE_NOT_NULL", 
		"FULL", "FUNCTION", "FUNCTIONS", "FROM", "GLOBAL", "GRANT", "GROUP", "HAVING", 
		"HANDLER", "HEADER", "IF", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IN", "INCLUDING", 
		"INHERITS", "INITIALLY", "INLINE", "INNER", "INTERSECT", "INTO", "INOUT", 
		"INSTEAD", "INVOKER", "IS", "JOIN", "KEY", "LEADING", "LEFT", "LIKE", 
		"LIMIT", "LOCAL", "NATURAL", "NOT", "NULL", "OF", "OIDS", "OUTER", "OUT", 
		"OPERATOR", "OR", "ORDER", "OWNED", "OWNER", "PRESERVE", "PRIMARY", "PRIVILEGES", 
		"PROCEDURE", "PROCEDURAL", "ROLE", "ROW", "ROWS", "REFERENCES", "REPLACE", 
		"RESTRICT", "RETURNS", "REVOKE", "RIGHT", "RULE", "SCHEMA", "SEQUENCE", 
		"SEQUENCES", "SELECT", "SESSION", "SETOF", "SOME", "STATEMENT", "STRICT", 
		"SYMMETRIC", "TABLE", "TEMP", "TEMPORARY", "THEN", "TRAILING", "TRUSTED", 
		"TRIGGER", "TRUE", "TRUNCATE", "UNION", "UNIQUE", "UPDATE", "USAGE", "USING", 
		"VALIDATOR", "VARIADIC", "VIEW", "WHEN", "WHERE", "WITH", "WITHOUT", "ADMIN", 
		"ALWAYS", "ARRAY", "AVG", "BETWEEN", "BY", "CACHE", "CALLED", "CLASS", 
		"CENTURY", "CHARACTER", "CHECK", "CLUSTER", "COLLECT", "COALESCE", "COLUMN", 
		"COMMENT", "COMMENTS", "COMMIT", "CONCURRENTLY", "CONFIGURATION", "COST", 
		"COUNT", "CUBE", "CURRENT", "CYCLE", "DATA", "DAY", "DEC", "DECADE", "DEFINER", 
		"DICTIONARY", "DISABLE", "DOW", "DOY", "DROP", "ENABLE", "EPOCH", "EVENT", 
		"EVERY", "EXISTS", "EXTENDED", "EXTERNAL", "EXTRACT", "FAMILY", "FILTER", 
		"FIRST", "FORMAT", "FUSION", "GROUPING", "HASH", "HOUR", "INHERIT", "INDEX", 
		"INDEXES", "INCREMENT", "INPUT", "INSERT", "INTERSECTION", "ISCACHABLE", 
		"ISODOW", "ISOYEAR", "ISSTRICT", "LANGUAGE", "LARGE", "LAST", "LESS", 
		"LIST", "LOCATION", "MAIN", "MATCH", "MAX", "MAXVALUE", "MICROSECONDS", 
		"MILLENNIUM", "MILLISECONDS", "MIN", "MINVALUE", "MINUTE", "MONTH", "NATIONAL", 
		"NO", "NONE", "NULLIF", "N_DISTINCT", "N_DISTINCT_INHERITED", "OBJECT", 
		"ON", "ONLY", "OPTION", "OPTIONS", "OVER", "OVERWRITE", "PARSER", "PARTIAL", 
		"PARTITION", "PARTITIONS", "PLAIN", "PRECISION", "PUBLIC", "PURGE", "QUARTER", 
		"RANGE", "REGCONFIG", "REGEXP", "RENAME", "REPLICA", "RESET", "RESTART", 
		"RLIKE", "ROLLUP", "SEARCH", "SECOND", "SECURITY", "SERVER", "SET", "SIMILAR", 
		"SIMPLE", "STABLE", "START", "STATISTICS", "STDIN", "STORAGE", "STDDEV_POP", 
		"STDDEV_SAMP", "SUBPARTITION", "SUM", "TABLESPACE", "TABLES", "TEMPLATE", 
		"THAN", "TIMEZONE", "TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TRIM", "TO", 
		"TYPE", "TYPES", "UNKNOWN", "UNLOGGED", "USER", "VALID", "VALIDATE", "VALUES", 
		"VAR_SAMP", "VAR_POP", "VARYING", "VERSION", "VOLATILE", "WEEK", "WINDOW", 
		"WRAPPER", "YEAR", "ZONE", "BOOLEAN", "BOOL", "BIT", "VARBIT", "INT1", 
		"INT2", "INT4", "INT8", "TINYINT", "SMALLINT", "INT", "INTEGER", "BIGINT", 
		"FLOAT4", "FLOAT8", "REAL", "REGCLASS", "FLOAT", "DOUBLE", "NUMERIC", 
		"DECIMAL", "CHAR", "VARCHAR", "NCHAR", "NVARCHAR", "DATE", "TIME", "TIMETZ", 
		"TIMESTAMP", "TIMESTAMPTZ", "TEXT", "UUID", "BINARY", "VARBINARY", "BLOB", 
		"BYTEA", "INET4", "INET", "INTERVAL", "VOID", "'~'", "'!~'", "'~*'", "'!~*'", 
		"CAST_EXPRESSION", "':='", "'='", "':'", "';'", "','", "CONCATENATION_OPERATOR", 
		"NOT_EQUAL", "'<'", "'<='", "'>'", "'>='", "'('", "')'", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'.'", "'_'", "'|'", "'''", "'\"'", "'$'", "'['", 
		"']'", "'&'", "NUMBER", "REAL_NUMBER", "BlockComment", "LineComment", 
		"Identifier", "QuotedIdentifier", "UnterminatedQuotedIdentifier", "Character_String_Literal", 
		"ESC_SEQUENCES", "BeginDollarStringConstant", "' '", "White_Space", "BAD", 
		"Text_between_Dollar", "EndDollarStringConstant"
	};
	public static final int
		RULE_sql = 0, RULE_statement = 1, RULE_data_statement = 2, RULE_copy_statement = 3, 
		RULE_copy_option = 4, RULE_schema_statement = 5, RULE_schema_create = 6, 
		RULE_schema_alter = 7, RULE_alter_function_statement = 8, RULE_alter_schema_statement = 9, 
		RULE_alter_language_statement = 10, RULE_alter_table_statement = 11, RULE_table_action = 12, 
		RULE_attribute_option_value = 13, RULE_table_constraint_using_index = 14, 
		RULE_table_attribute_option = 15, RULE_function_action = 16, RULE_alter_default_privileges = 17, 
		RULE_abbreviated_grant_or_revoke = 18, RULE_alter_sequence_statement = 19, 
		RULE_alter_view_statement = 20, RULE_index_statement = 21, RULE_create_extension_statement = 22, 
		RULE_create_language_statement = 23, RULE_create_event_trigger = 24, RULE_set_statement = 25, 
		RULE_set_statement_value = 26, RULE_create_trigger_statement = 27, RULE_revoke_statement = 28, 
		RULE_revoke_from_cascade_restrict = 29, RULE_grant_statement = 30, RULE_grant_to_rule = 31, 
		RULE_comment_on_statement = 32, RULE_create_function_statement = 33, RULE_function_column_name_type = 34, 
		RULE_function_parameters = 35, RULE_function_def_value = 36, RULE_function_body = 37, 
		RULE_function_arguments = 38, RULE_function_attribute = 39, RULE_argmode = 40, 
		RULE_function_definition = 41, RULE_function_definition_name_paren = 42, 
		RULE_functions_definition_schema = 43, RULE_create_sequence_statement = 44, 
		RULE_sequence_body = 45, RULE_create_schema_statement = 46, RULE_create_view_statement = 47, 
		RULE_create_table_statement = 48, RULE_table_body = 49, RULE_table_column_definition = 50, 
		RULE_like_option = 51, RULE_table_constraint = 52, RULE_column_constraint = 53, 
		RULE_check_boolean_expression = 54, RULE_storage_parameter = 55, RULE_with_storage_parameter = 56, 
		RULE_storage_parameter_oid = 57, RULE_on_commit = 58, RULE_table_space = 59, 
		RULE_action = 60, RULE_index_parameters = 61, RULE_table_elements = 62, 
		RULE_field_element = 63, RULE_field_type = 64, RULE_param_clause = 65, 
		RULE_param = 66, RULE_method_specifier = 67, RULE_table_space_specifier = 68, 
		RULE_table_space_name = 69, RULE_table_partitioning_clauses = 70, RULE_range_partitions = 71, 
		RULE_range_value_clause_list = 72, RULE_range_value_clause = 73, RULE_hash_partitions = 74, 
		RULE_individual_hash_partitions = 75, RULE_individual_hash_partition = 76, 
		RULE_hash_partitions_by_quantity = 77, RULE_list_partitions = 78, RULE_list_value_clause_list = 79, 
		RULE_list_value_partition = 80, RULE_column_partitions = 81, RULE_partition_by_columns = 82, 
		RULE_partition_name = 83, RULE_drop_table_statement = 84, RULE_identifier = 85, 
		RULE_nonreserved_keywords = 86, RULE_unsigned_literal = 87, RULE_general_literal = 88, 
		RULE_datetime_literal = 89, RULE_time_literal = 90, RULE_timestamp_literal = 91, 
		RULE_date_literal = 92, RULE_data_type = 93, RULE_predefined_type = 94, 
		RULE_network_type = 95, RULE_character_string_type = 96, RULE_type_length = 97, 
		RULE_national_character_string_type = 98, RULE_binary_large_object_string_type = 99, 
		RULE_numeric_type = 100, RULE_exact_numeric_type = 101, RULE_approximate_numeric_type = 102, 
		RULE_precision_param = 103, RULE_boolean_type = 104, RULE_datetime_type = 105, 
		RULE_bit_type = 106, RULE_binary_type = 107, RULE_value_expression_primary = 108, 
		RULE_parenthesized_value_expression = 109, RULE_nonparenthesized_value_expression_primary = 110, 
		RULE_unsigned_value_specification = 111, RULE_unsigned_numeric_literal = 112, 
		RULE_signed_numerical_literal = 113, RULE_set_function_specification = 114, 
		RULE_aggregate_function = 115, RULE_general_set_function = 116, RULE_set_function_type = 117, 
		RULE_filter_clause = 118, RULE_grouping_operation = 119, RULE_case_expression = 120, 
		RULE_case_abbreviation = 121, RULE_case_specification = 122, RULE_simple_case = 123, 
		RULE_searched_case = 124, RULE_simple_when_clause = 125, RULE_searched_when_clause = 126, 
		RULE_else_clause = 127, RULE_result = 128, RULE_cast_specification = 129, 
		RULE_cast_operand = 130, RULE_cast_target = 131, RULE_value_expression = 132, 
		RULE_array_expression = 133, RULE_all_array = 134, RULE_bit_operation = 135, 
		RULE_common_value_expression = 136, RULE_numeric_value_expression = 137, 
		RULE_term = 138, RULE_factor = 139, RULE_array = 140, RULE_numeric_primary = 141, 
		RULE_value_expression_primary_cast = 142, RULE_sign = 143, RULE_numeric_value_function = 144, 
		RULE_extract_expression = 145, RULE_extract_field = 146, RULE_time_zone_field = 147, 
		RULE_extract_source = 148, RULE_string_value_expression = 149, RULE_character_value_expression = 150, 
		RULE_character_factor = 151, RULE_character_primary = 152, RULE_string_value_function = 153, 
		RULE_trim_function = 154, RULE_trim_operands = 155, RULE_trim_specification = 156, 
		RULE_boolean_value_expression = 157, RULE_or_predicate = 158, RULE_and_predicate = 159, 
		RULE_boolean_factor = 160, RULE_boolean_test = 161, RULE_is_clause = 162, 
		RULE_truth_value = 163, RULE_boolean_primary = 164, RULE_boolean_predicand = 165, 
		RULE_parenthesized_boolean_value_expression = 166, RULE_row_value_expression = 167, 
		RULE_row_value_special_case = 168, RULE_explicit_row_value_constructor = 169, 
		RULE_row_value_predicand = 170, RULE_row_value_constructor_predicand = 171, 
		RULE_table_expression = 172, RULE_from_clause = 173, RULE_table_reference_list = 174, 
		RULE_table_reference = 175, RULE_joined_table = 176, RULE_joined_table_primary = 177, 
		RULE_cross_join = 178, RULE_qualified_join = 179, RULE_natural_join = 180, 
		RULE_union_join = 181, RULE_join_type = 182, RULE_outer_join_type = 183, 
		RULE_outer_join_type_part2 = 184, RULE_join_specification = 185, RULE_join_condition = 186, 
		RULE_named_columns_join = 187, RULE_table_primary = 188, RULE_column_name_list = 189, 
		RULE_alias_def = 190, RULE_alias_table = 191, RULE_derived_table = 192, 
		RULE_where_clause = 193, RULE_search_condition = 194, RULE_groupby_clause = 195, 
		RULE_grouping_element_list = 196, RULE_grouping_element = 197, RULE_ordinary_grouping_set = 198, 
		RULE_ordinary_grouping_set_list = 199, RULE_rollup_list = 200, RULE_cube_list = 201, 
		RULE_empty_grouping_set = 202, RULE_having_clause = 203, RULE_row_value_predicand_list = 204, 
		RULE_query_expression = 205, RULE_query_expression_body = 206, RULE_non_join_query_expression = 207, 
		RULE_query_term = 208, RULE_non_join_query_term = 209, RULE_query_primary = 210, 
		RULE_non_join_query_primary = 211, RULE_simple_table = 212, RULE_explicit_table = 213, 
		RULE_table_or_query_name = 214, RULE_schema_qualified_name = 215, RULE_query_specification = 216, 
		RULE_select_list = 217, RULE_select_sublist = 218, RULE_derived_column = 219, 
		RULE_qualified_asterisk = 220, RULE_set_qualifier = 221, RULE_column_reference = 222, 
		RULE_as_clause = 223, RULE_over_clause = 224, RULE_column_reference_list = 225, 
		RULE_scalar_subquery = 226, RULE_row_subquery = 227, RULE_table_subquery = 228, 
		RULE_subquery = 229, RULE_predicate = 230, RULE_comparison_predicate = 231, 
		RULE_comp_op = 232, RULE_between_predicate = 233, RULE_between_predicate_part_2 = 234, 
		RULE_in_predicate = 235, RULE_in_predicate_value = 236, RULE_in_value_list = 237, 
		RULE_pattern_matching_predicate = 238, RULE_pattern_matcher = 239, RULE_negativable_matcher = 240, 
		RULE_regex_matcher = 241, RULE_null_predicate = 242, RULE_quantified_comparison_predicate = 243, 
		RULE_quantifier = 244, RULE_all = 245, RULE_some = 246, RULE_exists_predicate = 247, 
		RULE_unique_predicate = 248, RULE_primary_datetime_field = 249, RULE_non_second_primary_datetime_field = 250, 
		RULE_extended_datetime_field = 251, RULE_orderby_clause = 252, RULE_sort_specifier_paren = 253, 
		RULE_sort_specifier_list = 254, RULE_sort_specifier = 255, RULE_order_specification = 256, 
		RULE_limit_clause = 257, RULE_null_ordering = 258;
	public static final String[] ruleNames = {
		"sql", "statement", "data_statement", "copy_statement", "copy_option", 
		"schema_statement", "schema_create", "schema_alter", "alter_function_statement", 
		"alter_schema_statement", "alter_language_statement", "alter_table_statement", 
		"table_action", "attribute_option_value", "table_constraint_using_index", 
		"table_attribute_option", "function_action", "alter_default_privileges", 
		"abbreviated_grant_or_revoke", "alter_sequence_statement", "alter_view_statement", 
		"index_statement", "create_extension_statement", "create_language_statement", 
		"create_event_trigger", "set_statement", "set_statement_value", "create_trigger_statement", 
		"revoke_statement", "revoke_from_cascade_restrict", "grant_statement", 
		"grant_to_rule", "comment_on_statement", "create_function_statement", 
		"function_column_name_type", "function_parameters", "function_def_value", 
		"function_body", "function_arguments", "function_attribute", "argmode", 
		"function_definition", "function_definition_name_paren", "functions_definition_schema", 
		"create_sequence_statement", "sequence_body", "create_schema_statement", 
		"create_view_statement", "create_table_statement", "table_body", "table_column_definition", 
		"like_option", "table_constraint", "column_constraint", "check_boolean_expression", 
		"storage_parameter", "with_storage_parameter", "storage_parameter_oid", 
		"on_commit", "table_space", "action", "index_parameters", "table_elements", 
		"field_element", "field_type", "param_clause", "param", "method_specifier", 
		"table_space_specifier", "table_space_name", "table_partitioning_clauses", 
		"range_partitions", "range_value_clause_list", "range_value_clause", "hash_partitions", 
		"individual_hash_partitions", "individual_hash_partition", "hash_partitions_by_quantity", 
		"list_partitions", "list_value_clause_list", "list_value_partition", "column_partitions", 
		"partition_by_columns", "partition_name", "drop_table_statement", "identifier", 
		"nonreserved_keywords", "unsigned_literal", "general_literal", "datetime_literal", 
		"time_literal", "timestamp_literal", "date_literal", "data_type", "predefined_type", 
		"network_type", "character_string_type", "type_length", "national_character_string_type", 
		"binary_large_object_string_type", "numeric_type", "exact_numeric_type", 
		"approximate_numeric_type", "precision_param", "boolean_type", "datetime_type", 
		"bit_type", "binary_type", "value_expression_primary", "parenthesized_value_expression", 
		"nonparenthesized_value_expression_primary", "unsigned_value_specification", 
		"unsigned_numeric_literal", "signed_numerical_literal", "set_function_specification", 
		"aggregate_function", "general_set_function", "set_function_type", "filter_clause", 
		"grouping_operation", "case_expression", "case_abbreviation", "case_specification", 
		"simple_case", "searched_case", "simple_when_clause", "searched_when_clause", 
		"else_clause", "result", "cast_specification", "cast_operand", "cast_target", 
		"value_expression", "array_expression", "all_array", "bit_operation", 
		"common_value_expression", "numeric_value_expression", "term", "factor", 
		"array", "numeric_primary", "value_expression_primary_cast", "sign", "numeric_value_function", 
		"extract_expression", "extract_field", "time_zone_field", "extract_source", 
		"string_value_expression", "character_value_expression", "character_factor", 
		"character_primary", "string_value_function", "trim_function", "trim_operands", 
		"trim_specification", "boolean_value_expression", "or_predicate", "and_predicate", 
		"boolean_factor", "boolean_test", "is_clause", "truth_value", "boolean_primary", 
		"boolean_predicand", "parenthesized_boolean_value_expression", "row_value_expression", 
		"row_value_special_case", "explicit_row_value_constructor", "row_value_predicand", 
		"row_value_constructor_predicand", "table_expression", "from_clause", 
		"table_reference_list", "table_reference", "joined_table", "joined_table_primary", 
		"cross_join", "qualified_join", "natural_join", "union_join", "join_type", 
		"outer_join_type", "outer_join_type_part2", "join_specification", "join_condition", 
		"named_columns_join", "table_primary", "column_name_list", "alias_def", 
		"alias_table", "derived_table", "where_clause", "search_condition", "groupby_clause", 
		"grouping_element_list", "grouping_element", "ordinary_grouping_set", 
		"ordinary_grouping_set_list", "rollup_list", "cube_list", "empty_grouping_set", 
		"having_clause", "row_value_predicand_list", "query_expression", "query_expression_body", 
		"non_join_query_expression", "query_term", "non_join_query_term", "query_primary", 
		"non_join_query_primary", "simple_table", "explicit_table", "table_or_query_name", 
		"schema_qualified_name", "query_specification", "select_list", "select_sublist", 
		"derived_column", "qualified_asterisk", "set_qualifier", "column_reference", 
		"as_clause", "over_clause", "column_reference_list", "scalar_subquery", 
		"row_subquery", "table_subquery", "subquery", "predicate", "comparison_predicate", 
		"comp_op", "between_predicate", "between_predicate_part_2", "in_predicate", 
		"in_predicate_value", "in_value_list", "pattern_matching_predicate", "pattern_matcher", 
		"negativable_matcher", "regex_matcher", "null_predicate", "quantified_comparison_predicate", 
		"quantifier", "all", "some", "exists_predicate", "unique_predicate", "primary_datetime_field", 
		"non_second_primary_datetime_field", "extended_datetime_field", "orderby_clause", 
		"sort_specifier_paren", "sort_specifier_list", "sort_specifier", "order_specification", 
		"limit_clause", "null_ordering"
	};

	@Override
	public String getGrammarFileName() { return "SQLParser.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }



	public SQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class SqlContext extends ParserRuleContext {
		public TerminalNode SEMI_COLON(int i) {
			return getToken(SQLParser.SEMI_COLON, i);
		}
		public List<TerminalNode> SEMI_COLON() { return getTokens(SQLParser.SEMI_COLON); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public TerminalNode EOF() { return getToken(SQLParser.EOF, 0); }
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public SqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSql(this);
		}
	}

	public final SqlContext sql() throws RecognitionException {
		SqlContext _localctx = new SqlContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(523);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << COPY) | (1L << CREATE) | (1L << GRANT))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (REVOKE - 105)) | (1L << (SELECT - 105)) | (1L << (TABLE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)) | (1L << (LEFT_PAREN - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0)) {
				{
				{
				setState(518); statement();
				setState(519); match(SEMI_COLON);
				}
				}
				setState(525);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(526); match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Data_statementContext data_statement() {
			return getRuleContext(Data_statementContext.class,0);
		}
		public Schema_statementContext schema_statement() {
			return getRuleContext(Schema_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_statement);
		try {
			setState(530);
			switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(528); data_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(529); schema_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_statementContext extends ParserRuleContext {
		public Copy_statementContext copy_statement() {
			return getRuleContext(Copy_statementContext.class,0);
		}
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterData_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitData_statement(this);
		}
	}

	public final Data_statementContext data_statement() throws RecognitionException {
		Data_statementContext _localctx = new Data_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_data_statement);
		try {
			setState(534);
			switch (_input.LA(1)) {
			case REPLACE:
			case SELECT:
			case TABLE:
			case ADMIN:
			case ALWAYS:
			case ARRAY:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVER:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STDIN:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case LEFT_PAREN:
			case DOUBLE_QUOTE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(532); query_expression();
				}
				break;
			case COPY:
				enterOuterAlt(_localctx, 2);
				{
				setState(533); copy_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext table_name;
		public Schema_qualified_nameContext column_name;
		public Query_specificationContext query;
		public IdentifierContext filename;
		public Copy_optionContext option;
		public TerminalNode COPY() { return getToken(SQLParser.COPY, 0); }
		public Copy_optionContext copy_option(int i) {
			return getRuleContext(Copy_optionContext.class,i);
		}
		public List<Copy_optionContext> copy_option() {
			return getRuleContexts(Copy_optionContext.class);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode STDIN() { return getToken(SQLParser.STDIN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Copy_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCopy_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCopy_statement(this);
		}
	}

	public final Copy_statementContext copy_statement() throws RecognitionException {
		Copy_statementContext _localctx = new Copy_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_copy_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(536); match(COPY);
			setState(552);
			switch (_input.LA(1)) {
			case REPLACE:
			case ADMIN:
			case ALWAYS:
			case ARRAY:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVER:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STDIN:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case DOUBLE_QUOTE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(537); ((Copy_statementContext)_localctx).table_name = schema_qualified_name();
				setState(549);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(538); match(LEFT_PAREN);
					setState(539); ((Copy_statementContext)_localctx).column_name = schema_qualified_name();
					setState(544);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(540); match(COMMA);
						setState(541); ((Copy_statementContext)_localctx).column_name = schema_qualified_name();
						}
						}
						setState(546);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(547); match(RIGHT_PAREN);
					}
				}

				}
				break;
			case SELECT:
				{
				{
				setState(551); ((Copy_statementContext)_localctx).query = query_specification();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(554);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(557);
			switch ( getInterpreter().adaptivePredict(_input,6,_ctx) ) {
			case 1:
				{
				setState(555); ((Copy_statementContext)_localctx).filename = identifier();
				}
				break;
			case 2:
				{
				setState(556); match(STDIN);
				}
				break;
			}
			setState(573);
			_la = _input.LA(1);
			if (_la==WITH || _la==LEFT_PAREN) {
				{
				setState(560);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(559); match(WITH);
					}
				}

				setState(562); match(LEFT_PAREN);
				setState(563); ((Copy_statementContext)_localctx).option = copy_option();
				setState(568);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(564); match(COMMA);
					setState(565); ((Copy_statementContext)_localctx).option = copy_option();
					}
					}
					setState(570);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(571); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Copy_optionContext extends ParserRuleContext {
		public IdentifierContext format_name;
		public Truth_valueContext boolean_val;
		public IdentifierContext delimiter_character;
		public IdentifierContext null_string;
		public IdentifierContext quote_character;
		public IdentifierContext escape_character;
		public Schema_qualified_nameContext column_name;
		public IdentifierContext encoding_name;
		public TerminalNode ESCAPE() { return getToken(SQLParser.ESCAPE, 0); }
		public TerminalNode FORMAT() { return getToken(SQLParser.FORMAT, 0); }
		public TerminalNode HEADER() { return getToken(SQLParser.HEADER, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public TerminalNode DELIMITER() { return getToken(SQLParser.DELIMITER, 0); }
		public TerminalNode ENCODING() { return getToken(SQLParser.ENCODING, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode FORCE_NOT_NULL() { return getToken(SQLParser.FORCE_NOT_NULL, 0); }
		public TerminalNode OIDS() { return getToken(SQLParser.OIDS, 0); }
		public TerminalNode QUOTE() { return getToken(SQLParser.QUOTE, 0); }
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode FORCE_QUOTE() { return getToken(SQLParser.FORCE_QUOTE, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Copy_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copy_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCopy_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCopy_option(this);
		}
	}

	public final Copy_optionContext copy_option() throws RecognitionException {
		Copy_optionContext _localctx = new Copy_optionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_copy_option);
		int _la;
		try {
			setState(622);
			switch (_input.LA(1)) {
			case FORMAT:
				enterOuterAlt(_localctx, 1);
				{
				setState(575); match(FORMAT);
				setState(576); ((Copy_optionContext)_localctx).format_name = identifier();
				}
				break;
			case OIDS:
				enterOuterAlt(_localctx, 2);
				{
				setState(577); match(OIDS);
				setState(579);
				_la = _input.LA(1);
				if (_la==FALSE || _la==TRUE || _la==UNKNOWN) {
					{
					setState(578); ((Copy_optionContext)_localctx).boolean_val = truth_value();
					}
				}

				}
				break;
			case DELIMITER:
				enterOuterAlt(_localctx, 3);
				{
				setState(581); match(DELIMITER);
				setState(582); ((Copy_optionContext)_localctx).delimiter_character = identifier();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 4);
				{
				setState(583); match(NULL);
				setState(584); ((Copy_optionContext)_localctx).null_string = identifier();
				}
				break;
			case HEADER:
				enterOuterAlt(_localctx, 5);
				{
				setState(585); match(HEADER);
				setState(587);
				_la = _input.LA(1);
				if (_la==FALSE || _la==TRUE || _la==UNKNOWN) {
					{
					setState(586); ((Copy_optionContext)_localctx).boolean_val = truth_value();
					}
				}

				}
				break;
			case QUOTE:
				enterOuterAlt(_localctx, 6);
				{
				setState(589); match(QUOTE);
				setState(590); ((Copy_optionContext)_localctx).quote_character = identifier();
				}
				break;
			case ESCAPE:
				enterOuterAlt(_localctx, 7);
				{
				setState(591); match(ESCAPE);
				setState(592); ((Copy_optionContext)_localctx).escape_character = identifier();
				}
				break;
			case FORCE_QUOTE:
				enterOuterAlt(_localctx, 8);
				{
				setState(593); match(FORCE_QUOTE);
				setState(606);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					{
					setState(594); match(LEFT_PAREN);
					setState(595); ((Copy_optionContext)_localctx).column_name = schema_qualified_name();
					setState(600);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(596); match(COMMA);
						setState(597); ((Copy_optionContext)_localctx).column_name = schema_qualified_name();
						}
						}
						setState(602);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(603); match(RIGHT_PAREN);
					}
					}
					break;
				case MULTIPLY:
					{
					setState(605); match(MULTIPLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FORCE_NOT_NULL:
				enterOuterAlt(_localctx, 9);
				{
				setState(608); match(FORCE_NOT_NULL);
				setState(609); match(LEFT_PAREN);
				setState(610); ((Copy_optionContext)_localctx).column_name = schema_qualified_name();
				setState(615);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(611); match(COMMA);
					setState(612); ((Copy_optionContext)_localctx).column_name = schema_qualified_name();
					}
					}
					setState(617);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(618); match(RIGHT_PAREN);
				}
				break;
			case ENCODING:
				enterOuterAlt(_localctx, 10);
				{
				setState(620); match(ENCODING);
				setState(621); ((Copy_optionContext)_localctx).encoding_name = identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_statementContext extends ParserRuleContext {
		public Drop_table_statementContext drop_table_statement() {
			return getRuleContext(Drop_table_statementContext.class,0);
		}
		public Schema_createContext schema_create() {
			return getRuleContext(Schema_createContext.class,0);
		}
		public Schema_alterContext schema_alter() {
			return getRuleContext(Schema_alterContext.class,0);
		}
		public Schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchema_statement(this);
		}
	}

	public final Schema_statementContext schema_statement() throws RecognitionException {
		Schema_statementContext _localctx = new Schema_statementContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_schema_statement);
		try {
			setState(627);
			switch (_input.LA(1)) {
			case CREATE:
			case GRANT:
			case REVOKE:
			case COMMENT:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(624); schema_create();
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(625); schema_alter();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 3);
				{
				setState(626); drop_table_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_createContext extends ParserRuleContext {
		public Create_function_statementContext create_function_statement() {
			return getRuleContext(Create_function_statementContext.class,0);
		}
		public Create_table_statementContext create_table_statement() {
			return getRuleContext(Create_table_statementContext.class,0);
		}
		public Create_sequence_statementContext create_sequence_statement() {
			return getRuleContext(Create_sequence_statementContext.class,0);
		}
		public Index_statementContext index_statement() {
			return getRuleContext(Index_statementContext.class,0);
		}
		public Create_language_statementContext create_language_statement() {
			return getRuleContext(Create_language_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Create_extension_statementContext create_extension_statement() {
			return getRuleContext(Create_extension_statementContext.class,0);
		}
		public Comment_on_statementContext comment_on_statement() {
			return getRuleContext(Comment_on_statementContext.class,0);
		}
		public Revoke_statementContext revoke_statement() {
			return getRuleContext(Revoke_statementContext.class,0);
		}
		public Grant_statementContext grant_statement() {
			return getRuleContext(Grant_statementContext.class,0);
		}
		public Create_schema_statementContext create_schema_statement() {
			return getRuleContext(Create_schema_statementContext.class,0);
		}
		public Create_trigger_statementContext create_trigger_statement() {
			return getRuleContext(Create_trigger_statementContext.class,0);
		}
		public Create_event_triggerContext create_event_trigger() {
			return getRuleContext(Create_event_triggerContext.class,0);
		}
		public Create_view_statementContext create_view_statement() {
			return getRuleContext(Create_view_statementContext.class,0);
		}
		public Schema_createContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_create; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchema_create(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchema_create(this);
		}
	}

	public final Schema_createContext schema_create() throws RecognitionException {
		Schema_createContext _localctx = new Schema_createContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_schema_create);
		try {
			setState(643);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(629); create_table_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(630); index_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(631); create_extension_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(632); create_trigger_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(633); create_function_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(634); create_sequence_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(635); create_schema_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(636); create_view_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(637); comment_on_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(638); revoke_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(639); set_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(640); grant_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(641); create_language_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(642); create_event_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_alterContext extends ParserRuleContext {
		public Alter_function_statementContext alter_function_statement() {
			return getRuleContext(Alter_function_statementContext.class,0);
		}
		public Alter_schema_statementContext alter_schema_statement() {
			return getRuleContext(Alter_schema_statementContext.class,0);
		}
		public Alter_table_statementContext alter_table_statement() {
			return getRuleContext(Alter_table_statementContext.class,0);
		}
		public Alter_sequence_statementContext alter_sequence_statement() {
			return getRuleContext(Alter_sequence_statementContext.class,0);
		}
		public Alter_language_statementContext alter_language_statement() {
			return getRuleContext(Alter_language_statementContext.class,0);
		}
		public Alter_view_statementContext alter_view_statement() {
			return getRuleContext(Alter_view_statementContext.class,0);
		}
		public Alter_default_privilegesContext alter_default_privileges() {
			return getRuleContext(Alter_default_privilegesContext.class,0);
		}
		public Schema_alterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_alter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchema_alter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchema_alter(this);
		}
	}

	public final Schema_alterContext schema_alter() throws RecognitionException {
		Schema_alterContext _localctx = new Schema_alterContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_schema_alter);
		try {
			setState(652);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(645); alter_function_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(646); alter_schema_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(647); alter_language_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(648); alter_table_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(649); alter_default_privileges();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(650); alter_sequence_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(651); alter_view_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_function_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext new_name;
		public IdentifierContext new_owner;
		public Schema_qualified_nameContext new_schema;
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public Function_actionContext function_action(int i) {
			return getRuleContext(Function_actionContext.class,i);
		}
		public List<Function_actionContext> function_action() {
			return getRuleContexts(Function_actionContext.class);
		}
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Function_parametersContext function_parameters() {
			return getRuleContext(Function_parametersContext.class,0);
		}
		public Alter_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_function_statement(this);
		}
	}

	public final Alter_function_statementContext alter_function_statement() throws RecognitionException {
		Alter_function_statementContext _localctx = new Alter_function_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alter_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(654); match(ALTER);
			setState(655); match(FUNCTION);
			setState(656); function_parameters();
			setState(674);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(658); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(657); function_action();
					}
					}
					setState(660); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 103)) & ~0x3f) == 0 && ((1L << (_la - 103)) & ((1L << (ROWS - 103)) | (1L << (RETURNS - 103)) | (1L << (STRICT - 103)) | (1L << (CALLED - 103)) | (1L << (COST - 103)))) != 0) || _la==EXTERNAL || ((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (RESET - 249)) | (1L << (SECURITY - 249)) | (1L << (SET - 249)) | (1L << (STABLE - 249)) | (1L << (VOLATILE - 249)))) != 0) );
				setState(663);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(662); match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				{
				setState(665); match(RENAME);
				setState(666); match(TO);
				setState(667); ((Alter_function_statementContext)_localctx).new_name = schema_qualified_name();
				}
				break;
			case 3:
				{
				setState(668); match(OWNER);
				setState(669); match(TO);
				setState(670); ((Alter_function_statementContext)_localctx).new_owner = identifier();
				}
				break;
			case 4:
				{
				setState(671); match(SET);
				setState(672); match(SCHEMA);
				setState(673); ((Alter_function_statementContext)_localctx).new_schema = schema_qualified_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Alter_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_schema_statement(this);
		}
	}

	public final Alter_schema_statementContext alter_schema_statement() throws RecognitionException {
		Alter_schema_statementContext _localctx = new Alter_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alter_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(676); match(ALTER);
			setState(677); match(SCHEMA);
			setState(678); ((Alter_schema_statementContext)_localctx).name = identifier();
			setState(679);
			_la = _input.LA(1);
			if ( !(_la==OWNER || _la==RENAME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(680); match(TO);
			setState(681); ((Alter_schema_statementContext)_localctx).new_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_language_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Alter_language_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_language_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_language_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_language_statement(this);
		}
	}

	public final Alter_language_statementContext alter_language_statement() throws RecognitionException {
		Alter_language_statementContext _localctx = new Alter_language_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alter_language_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(683); match(ALTER);
			setState(685);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(684); match(PROCEDURAL);
				}
			}

			setState(687); match(LANGUAGE);
			setState(688); ((Alter_language_statementContext)_localctx).name = identifier();
			setState(689);
			_la = _input.LA(1);
			if ( !(_la==OWNER || _la==RENAME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(690); match(TO);
			setState(691); ((Alter_language_statementContext)_localctx).new_name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name;
		public List<Schema_qualified_nameContext> name = new ArrayList<Schema_qualified_nameContext>();
		public Schema_qualified_nameContext column;
		public Schema_qualified_nameContext new_column;
		public Schema_qualified_nameContext new_name;
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Table_actionContext> table_action() {
			return getRuleContexts(Table_actionContext.class);
		}
		public Table_actionContext table_action(int i) {
			return getRuleContext(Table_actionContext.class,i);
		}
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Alter_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_table_statement(this);
		}
	}

	public final Alter_table_statementContext alter_table_statement() throws RecognitionException {
		Alter_table_statementContext _localctx = new Alter_table_statementContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_alter_table_statement);
		int _la;
		try {
			int _alt;
			setState(732);
			switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(693); match(ALTER);
				setState(694); match(TABLE);
				setState(696);
				switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
				case 1:
					{
					setState(695); match(ONLY);
					}
					break;
				}
				setState(699); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(698); ((Alter_table_statementContext)_localctx).schema_qualified_name = schema_qualified_name();
						((Alter_table_statementContext)_localctx).name.add(((Alter_table_statementContext)_localctx).schema_qualified_name);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(701); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,24,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(719);
				switch (_input.LA(1)) {
				case ADD:
				case ALTER:
				case NOT:
				case OF:
				case OWNER:
				case CLUSTER:
				case DISABLE:
				case DROP:
				case ENABLE:
				case INHERIT:
				case NO:
				case RESET:
				case SET:
				case VALIDATE:
					{
					setState(703); table_action();
					setState(708);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						{
						setState(704); match(COMMA);
						}
						setState(705); table_action();
						}
						}
						setState(710);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case RENAME:
					{
					setState(711); match(RENAME);
					setState(713);
					switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
					case 1:
						{
						setState(712); match(COLUMN);
						}
						break;
					}
					setState(715); ((Alter_table_statementContext)_localctx).column = schema_qualified_name();
					setState(716); match(TO);
					setState(717); ((Alter_table_statementContext)_localctx).new_column = schema_qualified_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(721); match(ALTER);
				setState(722); match(TABLE);
				setState(723); ((Alter_table_statementContext)_localctx).schema_qualified_name = schema_qualified_name();
				((Alter_table_statementContext)_localctx).name.add(((Alter_table_statementContext)_localctx).schema_qualified_name);
				setState(728);
				switch (_input.LA(1)) {
				case RENAME:
					{
					setState(724); match(RENAME);
					setState(725); match(TO);
					}
					break;
				case SET:
					{
					setState(726); match(SET);
					setState(727); match(SCHEMA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(730); ((Alter_table_statementContext)_localctx).new_name = schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_actionContext extends ParserRuleContext {
		public Schema_qualified_nameContext column;
		public Data_typeContext datatype;
		public IdentifierContext collation;
		public Value_expressionContext expression;
		public Token integer;
		public Table_attribute_optionContext table_attribute_option;
		public List<Table_attribute_optionContext> attribute_option = new ArrayList<Table_attribute_optionContext>();
		public Table_constraintContext tabl_constraint;
		public Table_constraint_using_indexContext tabl_constraint_using_index;
		public Schema_qualified_nameContext constraint_name;
		public Schema_qualified_nameContext trigger_name;
		public Schema_qualified_nameContext rewrite_rule_name;
		public Schema_qualified_nameContext index_name;
		public Schema_qualified_nameContext parent_table;
		public Schema_qualified_nameContext type_name;
		public Schema_qualified_nameContext new_owner;
		public Schema_qualified_nameContext new_tablespace;
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public With_storage_parameterContext with_storage_parameter(int i) {
			return getRuleContext(With_storage_parameterContext.class,i);
		}
		public List<Table_attribute_optionContext> table_attribute_option() {
			return getRuleContexts(Table_attribute_optionContext.class);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public List<Attribute_option_valueContext> attribute_option_value() {
			return getRuleContexts(Attribute_option_valueContext.class);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Table_column_definitionContext table_column_definition() {
			return getRuleContext(Table_column_definitionContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode EXTENDED() { return getToken(SQLParser.EXTENDED, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public Table_attribute_optionContext table_attribute_option(int i) {
			return getRuleContext(Table_attribute_optionContext.class,i);
		}
		public List<With_storage_parameterContext> with_storage_parameter() {
			return getRuleContexts(With_storage_parameterContext.class);
		}
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLParser.EXTERNAL, 0); }
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode COLLATE() { return getToken(SQLParser.COLLATE, 0); }
		public TerminalNode VALIDATE() { return getToken(SQLParser.VALIDATE, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode INHERIT() { return getToken(SQLParser.INHERIT, 0); }
		public TerminalNode CLUSTER() { return getToken(SQLParser.CLUSTER, 0); }
		public TerminalNode DISABLE() { return getToken(SQLParser.DISABLE, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode ENABLE() { return getToken(SQLParser.ENABLE, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode VALID() { return getToken(SQLParser.VALID, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NUMBER() { return getToken(SQLParser.NUMBER, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode PLAIN() { return getToken(SQLParser.PLAIN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Table_constraint_using_indexContext table_constraint_using_index() {
			return getRuleContext(Table_constraint_using_indexContext.class,0);
		}
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Attribute_option_valueContext attribute_option_value(int i) {
			return getRuleContext(Attribute_option_valueContext.class,i);
		}
		public TerminalNode MAIN() { return getToken(SQLParser.MAIN, 0); }
		public TerminalNode OIDS() { return getToken(SQLParser.OIDS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode REPLICA() { return getToken(SQLParser.REPLICA, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_action(this);
		}
	}

	public final Table_actionContext table_action() throws RecognitionException {
		Table_actionContext _localctx = new Table_actionContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_table_action);
		int _la;
		try {
			setState(896);
			switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(734); match(ADD);
				setState(736);
				switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					setState(735); match(COLUMN);
					}
					break;
				}
				setState(738); table_column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(739); match(DROP);
				setState(741);
				switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					setState(740); match(COLUMN);
					}
					break;
				}
				setState(745);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(743); match(IF);
					setState(744); match(EXISTS);
					}
				}

				setState(747); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(749);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(748);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(751); match(ALTER);
				setState(753);
				switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
				case 1:
					{
					setState(752); match(COLUMN);
					}
					break;
				}
				setState(755); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(758);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(756); match(SET);
					setState(757); match(DATA);
					}
				}

				setState(760); match(TYPE);
				setState(761); ((Table_actionContext)_localctx).datatype = data_type();
				setState(764);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(762); match(COLLATE);
					setState(763); ((Table_actionContext)_localctx).collation = identifier();
					}
				}

				setState(768);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(766); match(USING);
					setState(767); ((Table_actionContext)_localctx).expression = value_expression();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(770); match(ALTER);
				setState(772);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(771); match(COLUMN);
					}
					break;
				}
				setState(774); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(818);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(775); match(SET);
					setState(776); match(DEFAULT);
					setState(777); ((Table_actionContext)_localctx).expression = value_expression();
					}
					break;
				case 2:
					{
					setState(778); match(DROP);
					setState(779); match(DEFAULT);
					}
					break;
				case 3:
					{
					{
					setState(780);
					_la = _input.LA(1);
					if ( !(_la==DROP || _la==SET) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(781); match(NOT);
					setState(782); match(NULL);
					}
					}
					break;
				case 4:
					{
					setState(783); match(SET);
					setState(784); match(STATISTICS);
					setState(785); ((Table_actionContext)_localctx).integer = match(NUMBER);
					}
					break;
				case 5:
					{
					setState(786); match(SET);
					setState(787); match(LEFT_PAREN);
					setState(788); attribute_option_value();
					setState(793);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(789); match(COMMA);
						setState(790); attribute_option_value();
						}
						}
						setState(795);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(796); match(RIGHT_PAREN);
					}
					break;
				case 6:
					{
					setState(798); match(RESET);
					setState(799); match(LEFT_PAREN);
					setState(800); ((Table_actionContext)_localctx).table_attribute_option = table_attribute_option();
					((Table_actionContext)_localctx).attribute_option.add(((Table_actionContext)_localctx).table_attribute_option);
					setState(805);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(801); match(COMMA);
						setState(802); ((Table_actionContext)_localctx).table_attribute_option = table_attribute_option();
						((Table_actionContext)_localctx).attribute_option.add(((Table_actionContext)_localctx).table_attribute_option);
						}
						}
						setState(807);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(808); match(RIGHT_PAREN);
					}
					break;
				case 7:
					{
					setState(816);
					switch (_input.LA(1)) {
					case SET:
						{
						setState(810); match(SET);
						setState(811); match(STORAGE);
						setState(812); match(PLAIN);
						}
						break;
					case EXTERNAL:
						{
						setState(813); match(EXTERNAL);
						}
						break;
					case EXTENDED:
						{
						setState(814); match(EXTENDED);
						}
						break;
					case MAIN:
						{
						setState(815); match(MAIN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(820); match(ADD);
				setState(821); ((Table_actionContext)_localctx).tabl_constraint = table_constraint();
				setState(824);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(822); match(NOT);
					setState(823); match(VALID);
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(826); match(ADD);
				setState(827); ((Table_actionContext)_localctx).tabl_constraint_using_index = table_constraint_using_index();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(828); match(VALIDATE);
				setState(829); match(CONSTRAINT);
				setState(830); ((Table_actionContext)_localctx).constraint_name = schema_qualified_name();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(831); match(DROP);
				setState(832); match(CONSTRAINT);
				setState(835);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(833); match(IF);
					setState(834); match(EXISTS);
					}
				}

				setState(837); ((Table_actionContext)_localctx).constraint_name = schema_qualified_name();
				setState(838);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(840);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(841); match(TRIGGER);
				setState(845);
				switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
				case 1:
					{
					setState(842); ((Table_actionContext)_localctx).trigger_name = schema_qualified_name();
					}
					break;
				case 2:
					{
					setState(843); match(ALL);
					}
					break;
				case 3:
					{
					setState(844); match(USER);
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(847); match(ENABLE);
				setState(848);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(849); match(TRIGGER);
				setState(850); ((Table_actionContext)_localctx).trigger_name = schema_qualified_name();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(851);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(852); match(RULE);
				setState(853); ((Table_actionContext)_localctx).rewrite_rule_name = schema_qualified_name();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(854); match(ENABLE);
				setState(855);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(856); match(RULE);
				setState(857); ((Table_actionContext)_localctx).rewrite_rule_name = schema_qualified_name();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(858); match(CLUSTER);
				setState(859); match(ON);
				setState(860); ((Table_actionContext)_localctx).index_name = schema_qualified_name();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(861); match(SET);
				setState(862); match(WITHOUT);
				setState(863);
				_la = _input.LA(1);
				if ( !(_la==OIDS || _la==CLUSTER) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(864); match(SET);
				setState(865); match(WITH);
				setState(866); match(OIDS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(867); match(SET);
				setState(868); storage_parameter();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(869); match(RESET);
				setState(870); match(LEFT_PAREN);
				setState(871); with_storage_parameter();
				setState(876);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(872); match(COMMA);
					setState(873); with_storage_parameter();
					}
					}
					setState(878);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(879); match(RIGHT_PAREN);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(881); match(INHERIT);
				setState(882); ((Table_actionContext)_localctx).parent_table = schema_qualified_name();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(883); match(NO);
				setState(884); match(INHERIT);
				setState(885); ((Table_actionContext)_localctx).parent_table = schema_qualified_name();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(886); match(OF);
				setState(887); ((Table_actionContext)_localctx).type_name = schema_qualified_name();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(888); match(NOT);
				setState(889); match(OF);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(890); match(OWNER);
				setState(891); match(TO);
				setState(892); ((Table_actionContext)_localctx).new_owner = schema_qualified_name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(893); match(SET);
				setState(894); match(TABLESPACE);
				setState(895); ((Table_actionContext)_localctx).new_tablespace = schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_option_valueContext extends ParserRuleContext {
		public Table_attribute_optionContext attribute_option;
		public Signed_numerical_literalContext value;
		public Signed_numerical_literalContext signed_numerical_literal() {
			return getRuleContext(Signed_numerical_literalContext.class,0);
		}
		public Table_attribute_optionContext table_attribute_option() {
			return getRuleContext(Table_attribute_optionContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public Attribute_option_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_option_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAttribute_option_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAttribute_option_value(this);
		}
	}

	public final Attribute_option_valueContext attribute_option_value() throws RecognitionException {
		Attribute_option_valueContext _localctx = new Attribute_option_valueContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_attribute_option_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(898); ((Attribute_option_valueContext)_localctx).attribute_option = table_attribute_option();
			setState(899); match(EQUAL);
			setState(900); ((Attribute_option_valueContext)_localctx).value = signed_numerical_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraint_using_indexContext extends ParserRuleContext {
		public Schema_qualified_nameContext constraint_name;
		public Schema_qualified_nameContext index_name;
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode KEY() { return getToken(SQLParser.KEY, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode PRIMARY() { return getToken(SQLParser.PRIMARY, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public Table_constraint_using_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint_using_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_constraint_using_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_constraint_using_index(this);
		}
	}

	public final Table_constraint_using_indexContext table_constraint_using_index() throws RecognitionException {
		Table_constraint_using_indexContext _localctx = new Table_constraint_using_indexContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_table_constraint_using_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(904);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(902); match(CONSTRAINT);
				setState(903); ((Table_constraint_using_indexContext)_localctx).constraint_name = schema_qualified_name();
				}
			}

			setState(909);
			switch (_input.LA(1)) {
			case UNIQUE:
				{
				setState(906); match(UNIQUE);
				}
				break;
			case PRIMARY:
				{
				setState(907); match(PRIMARY);
				setState(908); match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(911); match(USING);
			setState(912); match(INDEX);
			setState(913); ((Table_constraint_using_indexContext)_localctx).index_name = schema_qualified_name();
			setState(918);
			_la = _input.LA(1);
			if (_la==DEFERRABLE || _la==NOT) {
				{
				setState(915);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(914); match(NOT);
					}
				}

				setState(917); match(DEFERRABLE);
				}
			}

			setState(922);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(920); match(INITIALLY);
				setState(921);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_attribute_optionContext extends ParserRuleContext {
		public TerminalNode N_DISTINCT_INHERITED() { return getToken(SQLParser.N_DISTINCT_INHERITED, 0); }
		public TerminalNode N_DISTINCT() { return getToken(SQLParser.N_DISTINCT, 0); }
		public Table_attribute_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_attribute_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_attribute_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_attribute_option(this);
		}
	}

	public final Table_attribute_optionContext table_attribute_option() throws RecognitionException {
		Table_attribute_optionContext _localctx = new Table_attribute_optionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_table_attribute_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(924);
			_la = _input.LA(1);
			if ( !(_la==N_DISTINCT || _la==N_DISTINCT_INHERITED) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_actionContext extends ParserRuleContext {
		public Token execution_cost;
		public Token result_rows;
		public IdentifierContext configuration_parameter;
		public IdentifierContext value;
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode INPUT() { return getToken(SQLParser.INPUT, 0); }
		public TerminalNode VOLATILE() { return getToken(SQLParser.VOLATILE, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode STABLE() { return getToken(SQLParser.STABLE, 0); }
		public TerminalNode STRICT() { return getToken(SQLParser.STRICT, 0); }
		public TerminalNode COST() { return getToken(SQLParser.COST, 0); }
		public TerminalNode CALLED() { return getToken(SQLParser.CALLED, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SQLParser.IMMUTABLE, 0); }
		public TerminalNode NUMBER() { return getToken(SQLParser.NUMBER, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode INVOKER() { return getToken(SQLParser.INVOKER, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode DEFINER() { return getToken(SQLParser.DEFINER, 0); }
		public TerminalNode NULL(int i) {
			return getToken(SQLParser.NULL, i);
		}
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLParser.EXTERNAL, 0); }
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode SECURITY() { return getToken(SQLParser.SECURITY, 0); }
		public TerminalNode RETURNS() { return getToken(SQLParser.RETURNS, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(SQLParser.NULL); }
		public Function_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_action(this);
		}
	}

	public final Function_actionContext function_action() throws RecognitionException {
		Function_actionContext _localctx = new Function_actionContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_function_action);
		int _la;
		try {
			setState(971);
			switch (_input.LA(1)) {
			case CALLED:
				enterOuterAlt(_localctx, 1);
				{
				setState(926); match(CALLED);
				setState(927); match(ON);
				setState(928); match(NULL);
				setState(929); match(INPUT);
				}
				break;
			case RETURNS:
				enterOuterAlt(_localctx, 2);
				{
				setState(930); match(RETURNS);
				setState(931); match(NULL);
				setState(932); match(ON);
				setState(933); match(NULL);
				setState(934); match(INPUT);
				}
				break;
			case STRICT:
				enterOuterAlt(_localctx, 3);
				{
				setState(935); match(STRICT);
				setState(936); match(IMMUTABLE);
				}
				break;
			case STABLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(937); match(STABLE);
				}
				break;
			case VOLATILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(938); match(VOLATILE);
				setState(940);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(939); match(EXTERNAL);
					}
				}

				setState(942); match(SECURITY);
				setState(943); match(INVOKER);
				}
				break;
			case EXTERNAL:
			case SECURITY:
				enterOuterAlt(_localctx, 6);
				{
				setState(945);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(944); match(EXTERNAL);
					}
				}

				setState(947); match(SECURITY);
				setState(948); match(DEFINER);
				}
				break;
			case COST:
				enterOuterAlt(_localctx, 7);
				{
				setState(949); match(COST);
				setState(950); ((Function_actionContext)_localctx).execution_cost = match(NUMBER);
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(951); match(ROWS);
				setState(952); ((Function_actionContext)_localctx).result_rows = match(NUMBER);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 9);
				{
				setState(953); match(SET);
				setState(954); ((Function_actionContext)_localctx).configuration_parameter = identifier();
				setState(964);
				switch (_input.LA(1)) {
				case DEFAULT:
				case TO:
				case EQUAL:
					{
					setState(960);
					switch (_input.LA(1)) {
					case TO:
						{
						setState(955); match(TO);
						setState(956); ((Function_actionContext)_localctx).value = identifier();
						}
						break;
					case EQUAL:
						{
						setState(957); match(EQUAL);
						setState(958); ((Function_actionContext)_localctx).value = identifier();
						}
						break;
					case DEFAULT:
						{
						setState(959); match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case FROM:
					{
					setState(962); match(FROM);
					setState(963); match(CURRENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 10);
				{
				setState(966); match(RESET);
				setState(969);
				switch (_input.LA(1)) {
				case REPLACE:
				case ADMIN:
				case ALWAYS:
				case ARRAY:
				case AVG:
				case BETWEEN:
				case BY:
				case CACHE:
				case CALLED:
				case CLASS:
				case CENTURY:
				case CHARACTER:
				case CHECK:
				case CLUSTER:
				case COLLECT:
				case COALESCE:
				case COLUMN:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case CONCURRENTLY:
				case CONFIGURATION:
				case COST:
				case COUNT:
				case CUBE:
				case CURRENT:
				case CYCLE:
				case DATA:
				case DAY:
				case DEC:
				case DECADE:
				case DEFINER:
				case DICTIONARY:
				case DISABLE:
				case DOW:
				case DOY:
				case DROP:
				case ENABLE:
				case EPOCH:
				case EVENT:
				case EVERY:
				case EXISTS:
				case EXTENDED:
				case EXTERNAL:
				case EXTRACT:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FUSION:
				case GROUPING:
				case HASH:
				case INHERIT:
				case INDEX:
				case INCREMENT:
				case INPUT:
				case INSERT:
				case INTERSECTION:
				case ISCACHABLE:
				case ISODOW:
				case ISOYEAR:
				case ISSTRICT:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LESS:
				case LIST:
				case LOCATION:
				case MAIN:
				case MATCH:
				case MAX:
				case MAXVALUE:
				case MICROSECONDS:
				case MILLENNIUM:
				case MILLISECONDS:
				case MIN:
				case MINVALUE:
				case MINUTE:
				case MONTH:
				case NATIONAL:
				case NO:
				case NONE:
				case NULLIF:
				case OBJECT:
				case ON:
				case ONLY:
				case OPTION:
				case OPTIONS:
				case OVER:
				case OVERWRITE:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PLAIN:
				case PRECISION:
				case PUBLIC:
				case PURGE:
				case QUARTER:
				case RANGE:
				case REGCONFIG:
				case REGEXP:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RLIKE:
				case ROLLUP:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SERVER:
				case SET:
				case SIMILAR:
				case SIMPLE:
				case STABLE:
				case START:
				case STATISTICS:
				case STDIN:
				case STORAGE:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUBPARTITION:
				case SUM:
				case TABLESPACE:
				case TEMPLATE:
				case THAN:
				case TIMEZONE:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TRIM:
				case TO:
				case TYPE:
				case TYPES:
				case UNKNOWN:
				case UNLOGGED:
				case USER:
				case VALID:
				case VALIDATE:
				case VALUES:
				case VAR_SAMP:
				case VAR_POP:
				case VARYING:
				case VERSION:
				case VOLATILE:
				case WEEK:
				case WINDOW:
				case WRAPPER:
				case YEAR:
				case ZONE:
				case BOOLEAN:
				case BOOL:
				case BIT:
				case VARBIT:
				case INT1:
				case INT2:
				case INT4:
				case INT8:
				case TINYINT:
				case SMALLINT:
				case INT:
				case INTEGER:
				case BIGINT:
				case FLOAT4:
				case FLOAT8:
				case REAL:
				case FLOAT:
				case DOUBLE:
				case NUMERIC:
				case DECIMAL:
				case CHAR:
				case VARCHAR:
				case NCHAR:
				case NVARCHAR:
				case DATE:
				case TIME:
				case TIMETZ:
				case TIMESTAMP:
				case TIMESTAMPTZ:
				case TEXT:
				case UUID:
				case VARBINARY:
				case BLOB:
				case BYTEA:
				case INET4:
				case INET:
				case INTERVAL:
				case VOID:
				case DOUBLE_QUOTE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(967); ((Function_actionContext)_localctx).configuration_parameter = identifier();
					}
					break;
				case ALL:
					{
					setState(968); match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_default_privilegesContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> target_role = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> schema_name = new ArrayList<IdentifierContext>();
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Abbreviated_grant_or_revokeContext abbreviated_grant_or_revoke() {
			return getRuleContext(Abbreviated_grant_or_revokeContext.class,0);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Alter_default_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_default_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_default_privileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_default_privileges(this);
		}
	}

	public final Alter_default_privilegesContext alter_default_privileges() throws RecognitionException {
		Alter_default_privilegesContext _localctx = new Alter_default_privilegesContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alter_default_privileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(973); match(ALTER);
			setState(974); match(DEFAULT);
			setState(975); match(PRIVILEGES);
			setState(986);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(976); match(FOR);
				setState(977);
				_la = _input.LA(1);
				if ( !(_la==ROLE || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(978); ((Alter_default_privilegesContext)_localctx).identifier = identifier();
				((Alter_default_privilegesContext)_localctx).target_role.add(((Alter_default_privilegesContext)_localctx).identifier);
				setState(983);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(979); match(COMMA);
					setState(980); ((Alter_default_privilegesContext)_localctx).identifier = identifier();
					((Alter_default_privilegesContext)_localctx).target_role.add(((Alter_default_privilegesContext)_localctx).identifier);
					}
					}
					setState(985);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(998);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(988); match(IN);
				setState(989); match(SCHEMA);
				setState(990); ((Alter_default_privilegesContext)_localctx).identifier = identifier();
				((Alter_default_privilegesContext)_localctx).schema_name.add(((Alter_default_privilegesContext)_localctx).identifier);
				setState(995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(991); match(COMMA);
					setState(992); ((Alter_default_privilegesContext)_localctx).identifier = identifier();
					((Alter_default_privilegesContext)_localctx).schema_name.add(((Alter_default_privilegesContext)_localctx).identifier);
					}
					}
					setState(997);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1000); abbreviated_grant_or_revoke();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Abbreviated_grant_or_revokeContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode SELECT(int i) {
			return getToken(SQLParser.SELECT, i);
		}
		public Grant_to_ruleContext grant_to_rule() {
			return getRuleContext(Grant_to_ruleContext.class,0);
		}
		public List<TerminalNode> INSERT() { return getTokens(SQLParser.INSERT); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public TerminalNode FUNCTIONS() { return getToken(SQLParser.FUNCTIONS, 0); }
		public List<TerminalNode> TRUNCATE() { return getTokens(SQLParser.TRUNCATE); }
		public TerminalNode USAGE(int i) {
			return getToken(SQLParser.USAGE, i);
		}
		public TerminalNode REVOKE() { return getToken(SQLParser.REVOKE, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode TRIGGER(int i) {
			return getToken(SQLParser.TRIGGER, i);
		}
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode TRUNCATE(int i) {
			return getToken(SQLParser.TRUNCATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public Revoke_from_cascade_restrictContext revoke_from_cascade_restrict() {
			return getRuleContext(Revoke_from_cascade_restrictContext.class,0);
		}
		public TerminalNode TYPES() { return getToken(SQLParser.TYPES, 0); }
		public List<TerminalNode> SELECT() { return getTokens(SQLParser.SELECT); }
		public List<TerminalNode> USAGE() { return getTokens(SQLParser.USAGE); }
		public TerminalNode INSERT(int i) {
			return getToken(SQLParser.INSERT, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> REFERENCES() { return getTokens(SQLParser.REFERENCES); }
		public List<TerminalNode> TRIGGER() { return getTokens(SQLParser.TRIGGER); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode REFERENCES(int i) {
			return getToken(SQLParser.REFERENCES, i);
		}
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public Abbreviated_grant_or_revokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviated_grant_or_revoke; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAbbreviated_grant_or_revoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAbbreviated_grant_or_revoke(this);
		}
	}

	public final Abbreviated_grant_or_revokeContext abbreviated_grant_or_revoke() throws RecognitionException {
		Abbreviated_grant_or_revokeContext _localctx = new Abbreviated_grant_or_revokeContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_abbreviated_grant_or_revoke);
		int _la;
		try {
			setState(1138);
			switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1002); match(GRANT);
				setState(1015);
				switch (_input.LA(1)) {
				case DELETE:
				case REFERENCES:
				case SELECT:
				case TRIGGER:
				case TRUNCATE:
				case UPDATE:
				case INSERT:
					{
					{
					setState(1003);
					_la = _input.LA(1);
					if ( !(_la==DELETE || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (TRIGGER - 104)) | (1L << (TRUNCATE - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1008);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1004); match(COMMA);
						setState(1005);
						_la = _input.LA(1);
						if ( !(_la==DELETE || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (TRIGGER - 104)) | (1L << (TRUNCATE - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1010);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case ALL:
					{
					setState(1011); match(ALL);
					setState(1013);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1012); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1017); match(ON);
				setState(1018); match(TABLES);
				setState(1019); grant_to_rule();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1020); match(GRANT);
				setState(1033);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
				case USAGE:
					{
					{
					setState(1021);
					_la = _input.LA(1);
					if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (SELECT - 114)) | (1L << (UPDATE - 114)) | (1L << (USAGE - 114)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1026);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1022); match(COMMA);
						setState(1023);
						_la = _input.LA(1);
						if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (SELECT - 114)) | (1L << (UPDATE - 114)) | (1L << (USAGE - 114)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1028);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case ALL:
					{
					setState(1029); match(ALL);
					setState(1031);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1030); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1035); match(ON);
				setState(1036); match(SEQUENCES);
				setState(1037); grant_to_rule();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1038); match(GRANT);
				setState(1044);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(1039); match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(1040); match(ALL);
					setState(1042);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1041); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1046); match(ON);
				setState(1047); match(FUNCTIONS);
				setState(1048); grant_to_rule();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1049); match(GRANT);
				setState(1055);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1050); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1051); match(ALL);
					setState(1053);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1052); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1057); match(ON);
				setState(1058); match(TYPES);
				setState(1059); grant_to_rule();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1060); match(REVOKE);
				setState(1064);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1061); match(GRANT);
					setState(1062); match(OPTION);
					setState(1063); match(FOR);
					}
				}

				setState(1078);
				switch (_input.LA(1)) {
				case DELETE:
				case REFERENCES:
				case SELECT:
				case TRIGGER:
				case TRUNCATE:
				case UPDATE:
				case INSERT:
					{
					{
					setState(1066);
					_la = _input.LA(1);
					if ( !(_la==DELETE || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (TRIGGER - 104)) | (1L << (TRUNCATE - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1071);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1067); match(COMMA);
						setState(1068);
						_la = _input.LA(1);
						if ( !(_la==DELETE || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (TRIGGER - 104)) | (1L << (TRUNCATE - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1073);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case ALL:
					{
					setState(1074); match(ALL);
					setState(1076);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1075); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1080); match(ON);
				setState(1081); match(TABLES);
				setState(1082); revoke_from_cascade_restrict();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1083); match(REVOKE);
				setState(1087);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1084); match(GRANT);
					setState(1085); match(OPTION);
					setState(1086); match(FOR);
					}
				}

				setState(1101);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
				case USAGE:
					{
					{
					setState(1089);
					_la = _input.LA(1);
					if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (SELECT - 114)) | (1L << (UPDATE - 114)) | (1L << (USAGE - 114)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1094);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1090); match(COMMA);
						setState(1091);
						_la = _input.LA(1);
						if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (SELECT - 114)) | (1L << (UPDATE - 114)) | (1L << (USAGE - 114)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1096);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case ALL:
					{
					setState(1097); match(ALL);
					setState(1099);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1098); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1103); match(ON);
				setState(1104); match(SEQUENCES);
				setState(1105); revoke_from_cascade_restrict();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1106); match(REVOKE);
				setState(1110);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1107); match(GRANT);
					setState(1108); match(OPTION);
					setState(1109); match(FOR);
					}
				}

				setState(1117);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(1112); match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(1113); match(ALL);
					setState(1115);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1114); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1119); match(ON);
				setState(1120); match(FUNCTIONS);
				setState(1121); revoke_from_cascade_restrict();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1122); match(REVOKE);
				setState(1126);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1123); match(GRANT);
					setState(1124); match(OPTION);
					setState(1125); match(FOR);
					}
				}

				setState(1133);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1128); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1129); match(ALL);
					setState(1131);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1130); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1135); match(ON);
				setState(1136); match(TYPES);
				setState(1137); revoke_from_cascade_restrict();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequence_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public IdentifierContext restart;
		public Schema_qualified_nameContext new_name;
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode RESTART(int i) {
			return getToken(SQLParser.RESTART, i);
		}
		public List<TerminalNode> WITH() { return getTokens(SQLParser.WITH); }
		public Sequence_bodyContext sequence_body(int i) {
			return getRuleContext(Sequence_bodyContext.class,i);
		}
		public TerminalNode WITH(int i) {
			return getToken(SQLParser.WITH, i);
		}
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public List<TerminalNode> RESTART() { return getTokens(SQLParser.RESTART); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public List<Sequence_bodyContext> sequence_body() {
			return getRuleContexts(Sequence_bodyContext.class);
		}
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Alter_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_sequence_statement(this);
		}
	}

	public final Alter_sequence_statementContext alter_sequence_statement() throws RecognitionException {
		Alter_sequence_statementContext _localctx = new Alter_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_alter_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1140); match(ALTER);
			setState(1141); match(SEQUENCE);
			setState(1144);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1142); match(IF);
				setState(1143); match(EXISTS);
				}
			}

			setState(1146); ((Alter_sequence_statementContext)_localctx).name = schema_qualified_name();
			setState(1167);
			switch (_input.LA(1)) {
			case OWNED:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case MAXVALUE:
			case MINVALUE:
			case NO:
			case RESTART:
			case START:
			case SEMI_COLON:
				{
				setState(1157);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==OWNED || _la==CACHE || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & ((1L << (CYCLE - 167)) | (1L << (INCREMENT - 167)) | (1L << (MAXVALUE - 167)) | (1L << (MINVALUE - 167)) | (1L << (NO - 167)))) != 0) || _la==RESTART || _la==START) {
					{
					setState(1155);
					switch (_input.LA(1)) {
					case OWNED:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case MAXVALUE:
					case MINVALUE:
					case NO:
					case START:
						{
						setState(1147); sequence_body();
						}
						break;
					case RESTART:
						{
						setState(1148); match(RESTART);
						setState(1153);
						switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
						case 1:
							{
							setState(1150);
							_la = _input.LA(1);
							if (_la==WITH) {
								{
								setState(1149); match(WITH);
								}
							}

							setState(1152); ((Alter_sequence_statementContext)_localctx).restart = identifier();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1159);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case OWNER:
			case RENAME:
			case SET:
				{
				setState(1164);
				switch (_input.LA(1)) {
				case OWNER:
				case RENAME:
					{
					setState(1160);
					_la = _input.LA(1);
					if ( !(_la==OWNER || _la==RENAME) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1161); match(TO);
					}
					break;
				case SET:
					{
					setState(1162); match(SET);
					setState(1163); match(SCHEMA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1166); ((Alter_sequence_statementContext)_localctx).new_name = schema_qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_view_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext column_name;
		public Value_expressionContext expression;
		public Schema_qualified_nameContext new_owner;
		public IdentifierContext view_option_name;
		public Value_expressionContext view_option_value;
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode ALTER(int i) {
			return getToken(SQLParser.ALTER, i);
		}
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<TerminalNode> ALTER() { return getTokens(SQLParser.ALTER); }
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Alter_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_view_statement(this);
		}
	}

	public final Alter_view_statementContext alter_view_statement() throws RecognitionException {
		Alter_view_statementContext _localctx = new Alter_view_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_alter_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1169); match(ALTER);
			setState(1170); match(VIEW);
			setState(1173);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1171); match(IF);
				setState(1172); match(EXISTS);
				}
			}

			setState(1175); ((Alter_view_statementContext)_localctx).name = schema_qualified_name();
			setState(1227);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1176); match(ALTER);
				setState(1178);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1177); match(COLUMN);
					}
					break;
				}
				setState(1180); ((Alter_view_statementContext)_localctx).column_name = schema_qualified_name();
				setState(1186);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(1181); match(SET);
					setState(1182); match(DEFAULT);
					setState(1183); ((Alter_view_statementContext)_localctx).expression = value_expression();
					}
					break;
				case DROP:
					{
					setState(1184); match(DROP);
					setState(1185); match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(1192);
				switch (_input.LA(1)) {
				case OWNER:
				case RENAME:
					{
					{
					setState(1188);
					_la = _input.LA(1);
					if ( !(_la==OWNER || _la==RENAME) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1189); match(TO);
					}
					}
					break;
				case SET:
					{
					setState(1190); match(SET);
					setState(1191); match(SCHEMA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1194); ((Alter_view_statementContext)_localctx).new_owner = schema_qualified_name();
				}
				break;
			case 3:
				{
				setState(1195); match(SET);
				setState(1196); match(LEFT_PAREN);
				setState(1197); ((Alter_view_statementContext)_localctx).view_option_name = identifier();
				setState(1200);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(1198); match(EQUAL);
					setState(1199); ((Alter_view_statementContext)_localctx).view_option_value = value_expression();
					}
				}

				setState(1210);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1202); match(COMMA);
					setState(1203); ((Alter_view_statementContext)_localctx).view_option_name = identifier();
					setState(1206);
					_la = _input.LA(1);
					if (_la==EQUAL) {
						{
						setState(1204); match(EQUAL);
						setState(1205); ((Alter_view_statementContext)_localctx).view_option_value = value_expression();
						}
					}

					}
					}
					setState(1212);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1213); match(RIGHT_PAREN);
				}
				break;
			case 4:
				{
				setState(1215); match(RESET);
				setState(1216); match(LEFT_PAREN);
				setState(1217); ((Alter_view_statementContext)_localctx).view_option_name = identifier();
				setState(1222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1218); match(COMMA);
					setState(1219); ((Alter_view_statementContext)_localctx).view_option_name = identifier();
					}
					}
					setState(1224);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1225); match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext table_name;
		public Schema_qualified_nameContext method;
		public Schema_qualified_nameContext tablespace_name;
		public Boolean_value_expressionContext predic;
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public Sort_specifier_parenContext sort_specifier_paren() {
			return getRuleContext(Sort_specifier_parenContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SQLParser.CONCURRENTLY, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public Param_clauseContext param_clause() {
			return getRuleContext(Param_clauseContext.class,0);
		}
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public Index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndex_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndex_statement(this);
		}
	}

	public final Index_statementContext index_statement() throws RecognitionException {
		Index_statementContext _localctx = new Index_statementContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_index_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1229); match(CREATE);
			setState(1231);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(1230); match(UNIQUE);
				}
			}

			setState(1233); match(INDEX);
			setState(1235);
			switch ( getInterpreter().adaptivePredict(_input,105,_ctx) ) {
			case 1:
				{
				setState(1234); match(CONCURRENTLY);
				}
				break;
			}
			setState(1238);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				{
				setState(1237); ((Index_statementContext)_localctx).name = schema_qualified_name();
				}
				break;
			}
			setState(1240); match(ON);
			setState(1241); ((Index_statementContext)_localctx).table_name = schema_qualified_name();
			setState(1244);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1242); match(USING);
				setState(1243); ((Index_statementContext)_localctx).method = schema_qualified_name();
				}
			}

			setState(1246); sort_specifier_paren();
			setState(1248);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1247); param_clause();
				}
			}

			setState(1252);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(1250); match(TABLESPACE);
				setState(1251); ((Index_statementContext)_localctx).tablespace_name = schema_qualified_name();
				}
			}

			setState(1256);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1254); match(WHERE);
				setState(1255); ((Index_statementContext)_localctx).predic = boolean_value_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext schema_name;
		public Unsigned_literalContext version;
		public Unsigned_literalContext old_version;
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public List<Unsigned_literalContext> unsigned_literal() {
			return getRuleContexts(Unsigned_literalContext.class);
		}
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public Unsigned_literalContext unsigned_literal(int i) {
			return getRuleContext(Unsigned_literalContext.class,i);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public Create_extension_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_extension_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_extension_statement(this);
		}
	}

	public final Create_extension_statementContext create_extension_statement() throws RecognitionException {
		Create_extension_statementContext _localctx = new Create_extension_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_create_extension_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1258); match(CREATE);
			setState(1259); match(EXTENSION);
			setState(1263);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1260); match(IF);
				setState(1261); match(NOT);
				setState(1262); match(EXISTS);
				}
			}

			setState(1265); ((Create_extension_statementContext)_localctx).name = identifier();
			setState(1267);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1266); match(WITH);
				}
			}

			setState(1271);
			_la = _input.LA(1);
			if (_la==SCHEMA) {
				{
				setState(1269); match(SCHEMA);
				setState(1270); ((Create_extension_statementContext)_localctx).schema_name = identifier();
				}
			}

			setState(1275);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(1273); match(VERSION);
				setState(1274); ((Create_extension_statementContext)_localctx).version = unsigned_literal();
				}
			}

			setState(1279);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1277); match(FROM);
				setState(1278); ((Create_extension_statementContext)_localctx).old_version = unsigned_literal();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_language_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Schema_qualified_nameContext call_handler;
		public Schema_qualified_nameContext inline_handler;
		public Schema_qualified_nameContext valfunction;
		public TerminalNode VALIDATOR() { return getToken(SQLParser.VALIDATOR, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode TRUSTED() { return getToken(SQLParser.TRUSTED, 0); }
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode INLINE() { return getToken(SQLParser.INLINE, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode HANDLER() { return getToken(SQLParser.HANDLER, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Create_language_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_language_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_language_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_language_statement(this);
		}
	}

	public final Create_language_statementContext create_language_statement() throws RecognitionException {
		Create_language_statementContext _localctx = new Create_language_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_create_language_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1281); match(CREATE);
			setState(1284);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(1282); match(OR);
				setState(1283); match(REPLACE);
				}
			}

			setState(1287);
			_la = _input.LA(1);
			if (_la==TRUSTED) {
				{
				setState(1286); match(TRUSTED);
				}
			}

			setState(1290);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(1289); match(PROCEDURAL);
				}
			}

			setState(1292); match(LANGUAGE);
			setState(1293); ((Create_language_statementContext)_localctx).name = identifier();
			setState(1304);
			_la = _input.LA(1);
			if (_la==HANDLER) {
				{
				setState(1294); match(HANDLER);
				setState(1295); ((Create_language_statementContext)_localctx).call_handler = schema_qualified_name();
				setState(1298);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(1296); match(INLINE);
					setState(1297); ((Create_language_statementContext)_localctx).inline_handler = schema_qualified_name();
					}
				}

				setState(1302);
				_la = _input.LA(1);
				if (_la==VALIDATOR) {
					{
					setState(1300); match(VALIDATOR);
					setState(1301); ((Create_language_statementContext)_localctx).valfunction = schema_qualified_name();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_triggerContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext event;
		public Schema_qualified_nameContext filter_variable;
		public Token Character_String_Literal;
		public List<Token> filter_value = new ArrayList<Token>();
		public Value_expressionContext funct_name;
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public List<TerminalNode> AND() { return getTokens(SQLParser.AND); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode AND(int i) {
			return getToken(SQLParser.AND, i);
		}
		public List<TerminalNode> Character_String_Literal() { return getTokens(SQLParser.Character_String_Literal); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public List<TerminalNode> IN() { return getTokens(SQLParser.IN); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode IN(int i) {
			return getToken(SQLParser.IN, i);
		}
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode Character_String_Literal(int i) {
			return getToken(SQLParser.Character_String_Literal, i);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public Create_event_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_event_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_event_trigger(this);
		}
	}

	public final Create_event_triggerContext create_event_trigger() throws RecognitionException {
		Create_event_triggerContext _localctx = new Create_event_triggerContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_create_event_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1306); match(CREATE);
			setState(1307); match(EVENT);
			setState(1308); match(TRIGGER);
			setState(1309); ((Create_event_triggerContext)_localctx).name = schema_qualified_name();
			setState(1310); match(ON);
			setState(1311); ((Create_event_triggerContext)_localctx).event = schema_qualified_name();
			setState(1332);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1312); match(WHEN);
				setState(1313); ((Create_event_triggerContext)_localctx).filter_variable = schema_qualified_name();
				setState(1328); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1314); match(IN);
					setState(1315); match(LEFT_PAREN);
					setState(1316); ((Create_event_triggerContext)_localctx).Character_String_Literal = match(Character_String_Literal);
					((Create_event_triggerContext)_localctx).filter_value.add(((Create_event_triggerContext)_localctx).Character_String_Literal);
					setState(1321);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1317); match(COMMA);
						setState(1318); ((Create_event_triggerContext)_localctx).Character_String_Literal = match(Character_String_Literal);
						((Create_event_triggerContext)_localctx).filter_value.add(((Create_event_triggerContext)_localctx).Character_String_Literal);
						}
						}
						setState(1323);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1324); match(RIGHT_PAREN);
					setState(1326);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(1325); match(AND);
						}
					}

					}
					}
					setState(1330); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==IN );
				}
			}

			setState(1334); match(EXECUTE);
			setState(1335); match(PROCEDURE);
			setState(1336); ((Create_event_triggerContext)_localctx).funct_name = value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public IdentifierContext config_param;
		public IdentifierContext timezone;
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode SESSION() { return getToken(SQLParser.SESSION, 0); }
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public List<Set_statement_valueContext> set_statement_value() {
			return getRuleContexts(Set_statement_valueContext.class);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Set_statement_valueContext set_statement_value(int i) {
			return getRuleContext(Set_statement_valueContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SQLParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode LOCAL(int i) {
			return getToken(SQLParser.LOCAL, i);
		}
		public List<TerminalNode> LOCAL() { return getTokens(SQLParser.LOCAL); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSet_statement(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_set_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1338); match(SET);
			setState(1340);
			_la = _input.LA(1);
			if (_la==LOCAL || _la==SESSION) {
				{
				setState(1339);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==SESSION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(1370);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				setState(1342); ((Set_statementContext)_localctx).config_param = identifier();
				setState(1343);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1344); set_statement_value();
				setState(1349);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1345); match(COMMA);
					setState(1346); set_statement_value();
					}
					}
					setState(1351);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(1352); match(TIME);
				setState(1353); match(ZONE);
				setState(1357);
				switch (_input.LA(1)) {
				case REPLACE:
				case ADMIN:
				case ALWAYS:
				case ARRAY:
				case AVG:
				case BETWEEN:
				case BY:
				case CACHE:
				case CALLED:
				case CLASS:
				case CENTURY:
				case CHARACTER:
				case CHECK:
				case CLUSTER:
				case COLLECT:
				case COALESCE:
				case COLUMN:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case CONCURRENTLY:
				case CONFIGURATION:
				case COST:
				case COUNT:
				case CUBE:
				case CURRENT:
				case CYCLE:
				case DATA:
				case DAY:
				case DEC:
				case DECADE:
				case DEFINER:
				case DICTIONARY:
				case DISABLE:
				case DOW:
				case DOY:
				case DROP:
				case ENABLE:
				case EPOCH:
				case EVENT:
				case EVERY:
				case EXISTS:
				case EXTENDED:
				case EXTERNAL:
				case EXTRACT:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FUSION:
				case GROUPING:
				case HASH:
				case INHERIT:
				case INDEX:
				case INCREMENT:
				case INPUT:
				case INSERT:
				case INTERSECTION:
				case ISCACHABLE:
				case ISODOW:
				case ISOYEAR:
				case ISSTRICT:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LESS:
				case LIST:
				case LOCATION:
				case MAIN:
				case MATCH:
				case MAX:
				case MAXVALUE:
				case MICROSECONDS:
				case MILLENNIUM:
				case MILLISECONDS:
				case MIN:
				case MINVALUE:
				case MINUTE:
				case MONTH:
				case NATIONAL:
				case NO:
				case NONE:
				case NULLIF:
				case OBJECT:
				case ON:
				case ONLY:
				case OPTION:
				case OPTIONS:
				case OVER:
				case OVERWRITE:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PLAIN:
				case PRECISION:
				case PUBLIC:
				case PURGE:
				case QUARTER:
				case RANGE:
				case REGCONFIG:
				case REGEXP:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RLIKE:
				case ROLLUP:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SERVER:
				case SET:
				case SIMILAR:
				case SIMPLE:
				case STABLE:
				case START:
				case STATISTICS:
				case STDIN:
				case STORAGE:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUBPARTITION:
				case SUM:
				case TABLESPACE:
				case TEMPLATE:
				case THAN:
				case TIMEZONE:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TRIM:
				case TO:
				case TYPE:
				case TYPES:
				case UNKNOWN:
				case UNLOGGED:
				case USER:
				case VALID:
				case VALIDATE:
				case VALUES:
				case VAR_SAMP:
				case VAR_POP:
				case VARYING:
				case VERSION:
				case VOLATILE:
				case WEEK:
				case WINDOW:
				case WRAPPER:
				case YEAR:
				case ZONE:
				case BOOLEAN:
				case BOOL:
				case BIT:
				case VARBIT:
				case INT1:
				case INT2:
				case INT4:
				case INT8:
				case TINYINT:
				case SMALLINT:
				case INT:
				case INTEGER:
				case BIGINT:
				case FLOAT4:
				case FLOAT8:
				case REAL:
				case FLOAT:
				case DOUBLE:
				case NUMERIC:
				case DECIMAL:
				case CHAR:
				case VARCHAR:
				case NCHAR:
				case NVARCHAR:
				case DATE:
				case TIME:
				case TIMETZ:
				case TIMESTAMP:
				case TIMESTAMPTZ:
				case TEXT:
				case UUID:
				case VARBINARY:
				case BLOB:
				case BYTEA:
				case INET4:
				case INET:
				case INTERVAL:
				case VOID:
				case DOUBLE_QUOTE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(1354); ((Set_statementContext)_localctx).timezone = identifier();
					}
					break;
				case LOCAL:
					{
					setState(1355); match(LOCAL);
					}
					break;
				case DEFAULT:
					{
					setState(1356); match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1359); match(COMMA);
					setState(1363);
					switch (_input.LA(1)) {
					case REPLACE:
					case ADMIN:
					case ALWAYS:
					case ARRAY:
					case AVG:
					case BETWEEN:
					case BY:
					case CACHE:
					case CALLED:
					case CLASS:
					case CENTURY:
					case CHARACTER:
					case CHECK:
					case CLUSTER:
					case COLLECT:
					case COALESCE:
					case COLUMN:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case CONCURRENTLY:
					case CONFIGURATION:
					case COST:
					case COUNT:
					case CUBE:
					case CURRENT:
					case CYCLE:
					case DATA:
					case DAY:
					case DEC:
					case DECADE:
					case DEFINER:
					case DICTIONARY:
					case DISABLE:
					case DOW:
					case DOY:
					case DROP:
					case ENABLE:
					case EPOCH:
					case EVENT:
					case EVERY:
					case EXISTS:
					case EXTENDED:
					case EXTERNAL:
					case EXTRACT:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FORMAT:
					case FUSION:
					case GROUPING:
					case HASH:
					case INHERIT:
					case INDEX:
					case INCREMENT:
					case INPUT:
					case INSERT:
					case INTERSECTION:
					case ISCACHABLE:
					case ISODOW:
					case ISOYEAR:
					case ISSTRICT:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LESS:
					case LIST:
					case LOCATION:
					case MAIN:
					case MATCH:
					case MAX:
					case MAXVALUE:
					case MICROSECONDS:
					case MILLENNIUM:
					case MILLISECONDS:
					case MIN:
					case MINVALUE:
					case MINUTE:
					case MONTH:
					case NATIONAL:
					case NO:
					case NONE:
					case NULLIF:
					case OBJECT:
					case ON:
					case ONLY:
					case OPTION:
					case OPTIONS:
					case OVER:
					case OVERWRITE:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PARTITIONS:
					case PLAIN:
					case PRECISION:
					case PUBLIC:
					case PURGE:
					case QUARTER:
					case RANGE:
					case REGCONFIG:
					case REGEXP:
					case RENAME:
					case REPLICA:
					case RESET:
					case RESTART:
					case RLIKE:
					case ROLLUP:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SERVER:
					case SET:
					case SIMILAR:
					case SIMPLE:
					case STABLE:
					case START:
					case STATISTICS:
					case STDIN:
					case STORAGE:
					case STDDEV_POP:
					case STDDEV_SAMP:
					case SUBPARTITION:
					case SUM:
					case TABLESPACE:
					case TEMPLATE:
					case THAN:
					case TIMEZONE:
					case TIMEZONE_HOUR:
					case TIMEZONE_MINUTE:
					case TRIM:
					case TO:
					case TYPE:
					case TYPES:
					case UNKNOWN:
					case UNLOGGED:
					case USER:
					case VALID:
					case VALIDATE:
					case VALUES:
					case VAR_SAMP:
					case VAR_POP:
					case VARYING:
					case VERSION:
					case VOLATILE:
					case WEEK:
					case WINDOW:
					case WRAPPER:
					case YEAR:
					case ZONE:
					case BOOLEAN:
					case BOOL:
					case BIT:
					case VARBIT:
					case INT1:
					case INT2:
					case INT4:
					case INT8:
					case TINYINT:
					case SMALLINT:
					case INT:
					case INTEGER:
					case BIGINT:
					case FLOAT4:
					case FLOAT8:
					case REAL:
					case FLOAT:
					case DOUBLE:
					case NUMERIC:
					case DECIMAL:
					case CHAR:
					case VARCHAR:
					case NCHAR:
					case NVARCHAR:
					case DATE:
					case TIME:
					case TIMETZ:
					case TIMESTAMP:
					case TIMESTAMPTZ:
					case TEXT:
					case UUID:
					case VARBINARY:
					case BLOB:
					case BYTEA:
					case INET4:
					case INET:
					case INTERVAL:
					case VOID:
					case DOUBLE_QUOTE:
					case Identifier:
					case QuotedIdentifier:
						{
						setState(1360); ((Set_statementContext)_localctx).timezone = identifier();
						}
						break;
					case LOCAL:
						{
						setState(1361); match(LOCAL);
						}
						break;
					case DEFAULT:
						{
						setState(1362); match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(1369);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statement_valueContext extends ParserRuleContext {
		public Value_expressionContext value;
		public TerminalNode QUOTE(int i) {
			return getToken(SQLParser.QUOTE, i);
		}
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public List<TerminalNode> QUOTE() { return getTokens(SQLParser.QUOTE); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Set_statement_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSet_statement_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSet_statement_value(this);
		}
	}

	public final Set_statement_valueContext set_statement_value() throws RecognitionException {
		Set_statement_valueContext _localctx = new Set_statement_valueContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_set_statement_value);
		try {
			setState(1378);
			switch (_input.LA(1)) {
			case ALL:
			case ANY:
			case CASE:
			case CAST:
			case FALSE:
			case NOT:
			case NULL:
			case REPLACE:
			case SELECT:
			case SOME:
			case TRUE:
			case ADMIN:
			case ALWAYS:
			case ARRAY:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVER:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STDIN:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case LEFT_PAREN:
			case PLUS:
			case MINUS:
			case DOUBLE_QUOTE:
			case NUMBER:
			case REAL_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case Character_String_Literal:
				enterOuterAlt(_localctx, 1);
				{
				setState(1372); ((Set_statement_valueContext)_localctx).value = value_expression();
				}
				break;
			case QUOTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1373); match(QUOTE);
				setState(1374); ((Set_statement_valueContext)_localctx).value = value_expression();
				setState(1375); match(QUOTE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1377); match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_trigger_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext identifier;
		public List<IdentifierContext> columnName = new ArrayList<IdentifierContext>();
		public Schema_qualified_nameContext tabl_name;
		public Schema_qualified_nameContext referenced_table_name;
		public Schema_qualified_nameContext func_name;
		public List<IdentifierContext> arguments = new ArrayList<IdentifierContext>();
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode BEFORE() { return getToken(SQLParser.BEFORE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode OF(int i) {
			return getToken(SQLParser.OF, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(SQLParser.INSERT); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public TerminalNode EACH() { return getToken(SQLParser.EACH, 0); }
		public List<TerminalNode> TRUNCATE() { return getTokens(SQLParser.TRUNCATE); }
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public TerminalNode INSTEAD() { return getToken(SQLParser.INSTEAD, 0); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode TRUNCATE(int i) {
			return getToken(SQLParser.TRUNCATE, i);
		}
		public List<TerminalNode> OF() { return getTokens(SQLParser.OF); }
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode OR(int i) {
			return getToken(SQLParser.OR, i);
		}
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public TerminalNode STATEMENT() { return getToken(SQLParser.STATEMENT, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public List<TerminalNode> OR() { return getTokens(SQLParser.OR); }
		public TerminalNode INSERT(int i) {
			return getToken(SQLParser.INSERT, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode AFTER() { return getToken(SQLParser.AFTER, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Create_trigger_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_trigger_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_trigger_statement(this);
		}
	}

	public final Create_trigger_statementContext create_trigger_statement() throws RecognitionException {
		Create_trigger_statementContext _localctx = new Create_trigger_statementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_create_trigger_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1380); match(CREATE);
			setState(1382);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1381); match(CONSTRAINT);
				}
			}

			setState(1384); match(TRIGGER);
			setState(1385); ((Create_trigger_statementContext)_localctx).name = identifier();
			setState(1390);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1386); match(BEFORE);
				}
				break;
			case INSTEAD:
				{
				{
				setState(1387); match(INSTEAD);
				setState(1388); match(OF);
				}
				}
				break;
			case AFTER:
				{
				setState(1389); match(AFTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1412); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1407);
				switch (_input.LA(1)) {
				case INSERT:
					{
					setState(1392); match(INSERT);
					}
					break;
				case DELETE:
					{
					setState(1393); match(DELETE);
					}
					break;
				case TRUNCATE:
					{
					setState(1394); match(TRUNCATE);
					}
					break;
				case UPDATE:
					{
					setState(1395); match(UPDATE);
					setState(1405);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(1396); match(OF);
						setState(1397); ((Create_trigger_statementContext)_localctx).identifier = identifier();
						((Create_trigger_statementContext)_localctx).columnName.add(((Create_trigger_statementContext)_localctx).identifier);
						setState(1402);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1398); match(COMMA);
							setState(1399); ((Create_trigger_statementContext)_localctx).identifier = identifier();
							((Create_trigger_statementContext)_localctx).columnName.add(((Create_trigger_statementContext)_localctx).identifier);
							}
							}
							setState(1404);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1410);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1409); match(OR);
					}
				}

				}
				}
				setState(1414); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DELETE || _la==TRUNCATE || _la==UPDATE || _la==INSERT );
			setState(1416); match(ON);
			setState(1417); ((Create_trigger_statementContext)_localctx).tabl_name = schema_qualified_name();
			setState(1420);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1418); match(FROM);
				setState(1419); ((Create_trigger_statementContext)_localctx).referenced_table_name = schema_qualified_name();
				}
			}

			setState(1431);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				setState(1422); match(NOT);
				setState(1423); match(DEFERRABLE);
				}
				break;
			case 2:
				{
				setState(1425);
				_la = _input.LA(1);
				if (_la==DEFERRABLE) {
					{
					setState(1424); match(DEFERRABLE);
					}
				}

				{
				setState(1427); match(INITIALLY);
				setState(1428); match(IMMEDIATE);
				}
				}
				break;
			case 3:
				{
				{
				setState(1429); match(INITIALLY);
				setState(1430); match(DEFERRED);
				}
				}
				break;
			}
			setState(1438);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1433); match(FOR);
				setState(1435);
				_la = _input.LA(1);
				if (_la==EACH) {
					{
					setState(1434); match(EACH);
					}
				}

				setState(1437);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==STATEMENT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(1442);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1440); match(WHEN);
				{
				setState(1441); boolean_value_expression();
				}
				}
			}

			setState(1444); match(EXECUTE);
			setState(1445); match(PROCEDURE);
			setState(1446); ((Create_trigger_statementContext)_localctx).func_name = schema_qualified_name();
			setState(1447); match(LEFT_PAREN);
			setState(1449);
			_la = _input.LA(1);
			if (((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0)) {
				{
				setState(1448); ((Create_trigger_statementContext)_localctx).identifier = identifier();
				((Create_trigger_statementContext)_localctx).arguments.add(((Create_trigger_statementContext)_localctx).identifier);
				}
			}

			setState(1455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1451); match(COMMA);
				setState(1452); ((Create_trigger_statementContext)_localctx).identifier = identifier();
				((Create_trigger_statementContext)_localctx).arguments.add(((Create_trigger_statementContext)_localctx).identifier);
				}
				}
				setState(1457);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1458); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext schema_qualified_name;
		public List<Schema_qualified_nameContext> table_name = new ArrayList<Schema_qualified_nameContext>();
		public IdentifierContext identifier;
		public List<IdentifierContext> schema_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> column = new ArrayList<IdentifierContext>();
		public List<Schema_qualified_nameContext> sequence_name = new ArrayList<Schema_qualified_nameContext>();
		public List<IdentifierContext> database_name = new ArrayList<IdentifierContext>();
		public List<Schema_qualified_nameContext> fdw_name = new ArrayList<Schema_qualified_nameContext>();
		public List<IdentifierContext> server_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> lang_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> loid = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> tablespace_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> role_name = new ArrayList<IdentifierContext>();
		public TerminalNode TABLE(int i) {
			return getToken(SQLParser.TABLE, i);
		}
		public TerminalNode SELECT(int i) {
			return getToken(SQLParser.SELECT, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(SQLParser.INSERT); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public List<TerminalNode> TRUNCATE() { return getTokens(SQLParser.TRUNCATE); }
		public TerminalNode REVOKE() { return getToken(SQLParser.REVOKE, 0); }
		public Functions_definition_schemaContext functions_definition_schema() {
			return getRuleContext(Functions_definition_schemaContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode TRUNCATE(int i) {
			return getToken(SQLParser.TRUNCATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public List<TerminalNode> TABLE() { return getTokens(SQLParser.TABLE); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public Revoke_from_cascade_restrictContext revoke_from_cascade_restrict() {
			return getRuleContext(Revoke_from_cascade_restrictContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public List<TerminalNode> USAGE() { return getTokens(SQLParser.USAGE); }
		public List<TerminalNode> REFERENCES() { return getTokens(SQLParser.REFERENCES); }
		public List<TerminalNode> TRIGGER() { return getTokens(SQLParser.TRIGGER); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public List<TerminalNode> CONNECT() { return getTokens(SQLParser.CONNECT); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode CONNECT(int i) {
			return getToken(SQLParser.CONNECT, i);
		}
		public TerminalNode ADMIN() { return getToken(SQLParser.ADMIN, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode USAGE(int i) {
			return getToken(SQLParser.USAGE, i);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode TRIGGER(int i) {
			return getToken(SQLParser.TRIGGER, i);
		}
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public List<TerminalNode> TEMP() { return getTokens(SQLParser.TEMP); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public List<TerminalNode> CREATE() { return getTokens(SQLParser.CREATE); }
		public TerminalNode CREATE(int i) {
			return getToken(SQLParser.CREATE, i);
		}
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public List<TerminalNode> TEMPORARY() { return getTokens(SQLParser.TEMPORARY); }
		public List<TerminalNode> SELECT() { return getTokens(SQLParser.SELECT); }
		public TerminalNode INSERT(int i) {
			return getToken(SQLParser.INSERT, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode TEMP(int i) {
			return getToken(SQLParser.TEMP, i);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TEMPORARY(int i) {
			return getToken(SQLParser.TEMPORARY, i);
		}
		public Function_definitionContext function_definition() {
			return getRuleContext(Function_definitionContext.class,0);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode REFERENCES(int i) {
			return getToken(SQLParser.REFERENCES, i);
		}
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public Revoke_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRevoke_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRevoke_statement(this);
		}
	}

	public final Revoke_statementContext revoke_statement() throws RecognitionException {
		Revoke_statementContext _localctx = new Revoke_statementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_revoke_statement);
		int _la;
		try {
			setState(1842);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1460); match(REVOKE);
				setState(1464);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1461); match(GRANT);
					setState(1462); match(OPTION);
					setState(1463); match(FOR);
					}
				}

				setState(1478);
				switch (_input.LA(1)) {
				case DELETE:
				case REFERENCES:
				case SELECT:
				case TRIGGER:
				case TRUNCATE:
				case UPDATE:
				case INSERT:
					{
					setState(1466);
					_la = _input.LA(1);
					if ( !(_la==DELETE || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (TRIGGER - 104)) | (1L << (TRUNCATE - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1471);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1467); match(COMMA);
						setState(1468);
						_la = _input.LA(1);
						if ( !(_la==DELETE || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (TRIGGER - 104)) | (1L << (TRUNCATE - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1473);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case ALL:
					{
					setState(1474); match(ALL);
					setState(1476);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1475); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1480); match(ON);
				setState(1498);
				switch (_input.LA(1)) {
				case REPLACE:
				case TABLE:
				case ADMIN:
				case ALWAYS:
				case ARRAY:
				case AVG:
				case BETWEEN:
				case BY:
				case CACHE:
				case CALLED:
				case CLASS:
				case CENTURY:
				case CHARACTER:
				case CHECK:
				case CLUSTER:
				case COLLECT:
				case COALESCE:
				case COLUMN:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case CONCURRENTLY:
				case CONFIGURATION:
				case COST:
				case COUNT:
				case CUBE:
				case CURRENT:
				case CYCLE:
				case DATA:
				case DAY:
				case DEC:
				case DECADE:
				case DEFINER:
				case DICTIONARY:
				case DISABLE:
				case DOW:
				case DOY:
				case DROP:
				case ENABLE:
				case EPOCH:
				case EVENT:
				case EVERY:
				case EXISTS:
				case EXTENDED:
				case EXTERNAL:
				case EXTRACT:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FUSION:
				case GROUPING:
				case HASH:
				case INHERIT:
				case INDEX:
				case INCREMENT:
				case INPUT:
				case INSERT:
				case INTERSECTION:
				case ISCACHABLE:
				case ISODOW:
				case ISOYEAR:
				case ISSTRICT:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LESS:
				case LIST:
				case LOCATION:
				case MAIN:
				case MATCH:
				case MAX:
				case MAXVALUE:
				case MICROSECONDS:
				case MILLENNIUM:
				case MILLISECONDS:
				case MIN:
				case MINVALUE:
				case MINUTE:
				case MONTH:
				case NATIONAL:
				case NO:
				case NONE:
				case NULLIF:
				case OBJECT:
				case ON:
				case ONLY:
				case OPTION:
				case OPTIONS:
				case OVER:
				case OVERWRITE:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PLAIN:
				case PRECISION:
				case PUBLIC:
				case PURGE:
				case QUARTER:
				case RANGE:
				case REGCONFIG:
				case REGEXP:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RLIKE:
				case ROLLUP:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SERVER:
				case SET:
				case SIMILAR:
				case SIMPLE:
				case STABLE:
				case START:
				case STATISTICS:
				case STDIN:
				case STORAGE:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUBPARTITION:
				case SUM:
				case TABLESPACE:
				case TEMPLATE:
				case THAN:
				case TIMEZONE:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TRIM:
				case TO:
				case TYPE:
				case TYPES:
				case UNKNOWN:
				case UNLOGGED:
				case USER:
				case VALID:
				case VALIDATE:
				case VALUES:
				case VAR_SAMP:
				case VAR_POP:
				case VARYING:
				case VERSION:
				case VOLATILE:
				case WEEK:
				case WINDOW:
				case WRAPPER:
				case YEAR:
				case ZONE:
				case BOOLEAN:
				case BOOL:
				case BIT:
				case VARBIT:
				case INT1:
				case INT2:
				case INT4:
				case INT8:
				case TINYINT:
				case SMALLINT:
				case INT:
				case INTEGER:
				case BIGINT:
				case FLOAT4:
				case FLOAT8:
				case REAL:
				case FLOAT:
				case DOUBLE:
				case NUMERIC:
				case DECIMAL:
				case CHAR:
				case VARCHAR:
				case NCHAR:
				case NVARCHAR:
				case DATE:
				case TIME:
				case TIMETZ:
				case TIMESTAMP:
				case TIMESTAMPTZ:
				case TEXT:
				case UUID:
				case VARBINARY:
				case BLOB:
				case BYTEA:
				case INET4:
				case INET:
				case INTERVAL:
				case VOID:
				case DOUBLE_QUOTE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(1485); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1482);
						_la = _input.LA(1);
						if (_la==TABLE) {
							{
							setState(1481); match(TABLE);
							}
						}

						setState(1484); ((Revoke_statementContext)_localctx).schema_qualified_name = schema_qualified_name();
						((Revoke_statementContext)_localctx).table_name.add(((Revoke_statementContext)_localctx).schema_qualified_name);
						}
						}
						setState(1487); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (TABLE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0) );
					}
					break;
				case ALL:
					{
					setState(1489); match(ALL);
					setState(1490); match(TABLES);
					setState(1491); match(IN);
					setState(1492); match(SCHEMA);
					setState(1494); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1493); ((Revoke_statementContext)_localctx).identifier = identifier();
						((Revoke_statementContext)_localctx).schema_name.add(((Revoke_statementContext)_localctx).identifier);
						}
						}
						setState(1496); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0) );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1500); revoke_from_cascade_restrict();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1502); match(REVOKE);
				setState(1506);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1503); match(GRANT);
					setState(1504); match(OPTION);
					setState(1505); match(FOR);
					}
				}

				setState(1539);
				switch (_input.LA(1)) {
				case REFERENCES:
				case SELECT:
				case UPDATE:
				case INSERT:
					{
					setState(1520); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1508);
						_la = _input.LA(1);
						if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1509); match(LEFT_PAREN);
						setState(1510); ((Revoke_statementContext)_localctx).identifier = identifier();
						((Revoke_statementContext)_localctx).column.add(((Revoke_statementContext)_localctx).identifier);
						setState(1515);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1511); match(COMMA);
							setState(1512); ((Revoke_statementContext)_localctx).identifier = identifier();
							((Revoke_statementContext)_localctx).column.add(((Revoke_statementContext)_localctx).identifier);
							}
							}
							setState(1517);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(1518); match(RIGHT_PAREN);
						}
						}
						setState(1522); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT );
					}
					break;
				case ALL:
					{
					setState(1524); match(ALL);
					setState(1526);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1525); match(PRIVILEGES);
						}
					}

					setState(1528); match(LEFT_PAREN);
					setState(1529); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).column.add(((Revoke_statementContext)_localctx).identifier);
					setState(1534);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1530); match(COMMA);
						setState(1531); ((Revoke_statementContext)_localctx).identifier = identifier();
						((Revoke_statementContext)_localctx).column.add(((Revoke_statementContext)_localctx).identifier);
						}
						}
						setState(1536);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1537); match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1541); match(ON);
				setState(1543);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1542); match(TABLE);
					}
				}

				setState(1545); ((Revoke_statementContext)_localctx).schema_qualified_name = schema_qualified_name();
				((Revoke_statementContext)_localctx).table_name.add(((Revoke_statementContext)_localctx).schema_qualified_name);
				setState(1550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1546); match(COMMA);
					setState(1547); ((Revoke_statementContext)_localctx).schema_qualified_name = schema_qualified_name();
					((Revoke_statementContext)_localctx).table_name.add(((Revoke_statementContext)_localctx).schema_qualified_name);
					}
					}
					setState(1552);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1553); revoke_from_cascade_restrict();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1555); match(REVOKE);
				setState(1559);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1556); match(GRANT);
					setState(1557); match(OPTION);
					setState(1558); match(FOR);
					}
				}

				setState(1570);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
				case USAGE:
					{
					setState(1562); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1561);
						_la = _input.LA(1);
						if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (SELECT - 114)) | (1L << (UPDATE - 114)) | (1L << (USAGE - 114)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1564); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (SELECT - 114)) | (1L << (UPDATE - 114)) | (1L << (USAGE - 114)))) != 0) );
					}
					break;
				case ALL:
					{
					setState(1566); match(ALL);
					setState(1568);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1567); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1572); match(ON);
				setState(1594);
				switch (_input.LA(1)) {
				case SEQUENCE:
					{
					setState(1573); match(SEQUENCE);
					setState(1574); ((Revoke_statementContext)_localctx).schema_qualified_name = schema_qualified_name();
					((Revoke_statementContext)_localctx).sequence_name.add(((Revoke_statementContext)_localctx).schema_qualified_name);
					setState(1579);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1575); match(COMMA);
						setState(1576); ((Revoke_statementContext)_localctx).schema_qualified_name = schema_qualified_name();
						((Revoke_statementContext)_localctx).sequence_name.add(((Revoke_statementContext)_localctx).schema_qualified_name);
						}
						}
						setState(1581);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case ALL:
					{
					setState(1582); match(ALL);
					setState(1583); match(SEQUENCES);
					setState(1584); match(IN);
					setState(1585); match(SCHEMA);
					setState(1586); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).schema_name.add(((Revoke_statementContext)_localctx).identifier);
					setState(1591);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1587); match(COMMA);
						setState(1588); ((Revoke_statementContext)_localctx).identifier = identifier();
						((Revoke_statementContext)_localctx).schema_name.add(((Revoke_statementContext)_localctx).identifier);
						}
						}
						setState(1593);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1596); revoke_from_cascade_restrict();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1598); match(REVOKE);
				setState(1602);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1599); match(GRANT);
					setState(1600); match(OPTION);
					setState(1601); match(FOR);
					}
				}

				setState(1613);
				switch (_input.LA(1)) {
				case CONNECT:
				case CREATE:
				case TEMP:
				case TEMPORARY:
					{
					setState(1605); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1604);
						_la = _input.LA(1);
						if ( !(_la==CONNECT || _la==CREATE || _la==TEMP || _la==TEMPORARY) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1607); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==CONNECT || _la==CREATE || _la==TEMP || _la==TEMPORARY );
					}
					break;
				case ALL:
					{
					setState(1609); match(ALL);
					setState(1611);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1610); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1615); match(ON);
				setState(1616); match(DATABASE);
				setState(1617); ((Revoke_statementContext)_localctx).identifier = identifier();
				((Revoke_statementContext)_localctx).database_name.add(((Revoke_statementContext)_localctx).identifier);
				setState(1622);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1618); match(COMMA);
					setState(1619); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).database_name.add(((Revoke_statementContext)_localctx).identifier);
					}
					}
					setState(1624);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1625); revoke_from_cascade_restrict();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1627); match(REVOKE);
				setState(1631);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1628); match(GRANT);
					setState(1629); match(OPTION);
					setState(1630); match(FOR);
					}
				}

				setState(1638);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1633); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1634); match(ALL);
					setState(1636);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1635); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1640); match(ON);
				setState(1641); match(FOREIGN);
				setState(1642); match(DATA);
				setState(1643); match(WRAPPER);
				setState(1644); ((Revoke_statementContext)_localctx).schema_qualified_name = schema_qualified_name();
				((Revoke_statementContext)_localctx).fdw_name.add(((Revoke_statementContext)_localctx).schema_qualified_name);
				setState(1649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1645); match(COMMA);
					setState(1646); ((Revoke_statementContext)_localctx).schema_qualified_name = schema_qualified_name();
					((Revoke_statementContext)_localctx).fdw_name.add(((Revoke_statementContext)_localctx).schema_qualified_name);
					}
					}
					setState(1651);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1652); revoke_from_cascade_restrict();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1654); match(REVOKE);
				setState(1658);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1655); match(GRANT);
					setState(1656); match(OPTION);
					setState(1657); match(FOR);
					}
				}

				setState(1665);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1660); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1661); match(ALL);
					setState(1663);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1662); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1667); match(ON);
				setState(1668); match(FOREIGN);
				setState(1669); match(SERVER);
				setState(1670); ((Revoke_statementContext)_localctx).identifier = identifier();
				((Revoke_statementContext)_localctx).server_name.add(((Revoke_statementContext)_localctx).identifier);
				setState(1675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1671); match(COMMA);
					setState(1672); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).server_name.add(((Revoke_statementContext)_localctx).identifier);
					}
					}
					setState(1677);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1678); revoke_from_cascade_restrict();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1680); match(REVOKE);
				setState(1684);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1681); match(GRANT);
					setState(1682); match(OPTION);
					setState(1683); match(FOR);
					}
				}

				setState(1691);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(1686); match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(1687); match(ALL);
					setState(1689);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1688); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1693); match(ON);
				setState(1696);
				switch (_input.LA(1)) {
				case FUNCTION:
					{
					setState(1694); function_definition();
					}
					break;
				case ALL:
					{
					setState(1695); functions_definition_schema();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1698); revoke_from_cascade_restrict();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1700); match(REVOKE);
				setState(1704);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1701); match(GRANT);
					setState(1702); match(OPTION);
					setState(1703); match(FOR);
					}
				}

				setState(1711);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1706); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1707); match(ALL);
					setState(1709);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1708); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1713); match(ON);
				setState(1714); match(LANGUAGE);
				setState(1715); ((Revoke_statementContext)_localctx).identifier = identifier();
				((Revoke_statementContext)_localctx).lang_name.add(((Revoke_statementContext)_localctx).identifier);
				setState(1720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1716); match(COMMA);
					setState(1717); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).lang_name.add(((Revoke_statementContext)_localctx).identifier);
					}
					}
					setState(1722);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1723); revoke_from_cascade_restrict();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1725); match(REVOKE);
				setState(1729);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1726); match(GRANT);
					setState(1727); match(OPTION);
					setState(1728); match(FOR);
					}
				}

				setState(1744);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
					{
					setState(1736); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(1736);
						switch (_input.LA(1)) {
						case SELECT:
							{
							setState(1731); match(SELECT);
							}
							break;
						case UPDATE:
							{
							setState(1732); match(UPDATE);
							setState(1734);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1733); match(COMMA);
								}
							}

							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(1738); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SELECT || _la==UPDATE );
					}
					break;
				case ALL:
					{
					setState(1740); match(ALL);
					setState(1742);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1741); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1746); match(ON);
				setState(1747); match(LARGE);
				setState(1748); match(OBJECT);
				setState(1749); ((Revoke_statementContext)_localctx).identifier = identifier();
				((Revoke_statementContext)_localctx).loid.add(((Revoke_statementContext)_localctx).identifier);
				setState(1754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1750); match(COMMA);
					setState(1751); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).loid.add(((Revoke_statementContext)_localctx).identifier);
					}
					}
					setState(1756);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1757); revoke_from_cascade_restrict();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1759); match(REVOKE);
				setState(1763);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1760); match(GRANT);
					setState(1761); match(OPTION);
					setState(1762); match(FOR);
					}
				}

				setState(1777);
				switch (_input.LA(1)) {
				case CREATE:
				case USAGE:
					{
					setState(1769); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1765);
						_la = _input.LA(1);
						if ( !(_la==CREATE || _la==USAGE) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1767);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1766); match(COMMA);
							}
						}

						}
						}
						setState(1771); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==CREATE || _la==USAGE );
					}
					break;
				case ALL:
					{
					setState(1773); match(ALL);
					setState(1775);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1774); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1779); match(ON);
				setState(1780); match(SCHEMA);
				setState(1781); ((Revoke_statementContext)_localctx).identifier = identifier();
				((Revoke_statementContext)_localctx).schema_name.add(((Revoke_statementContext)_localctx).identifier);
				setState(1786);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1782); match(COMMA);
					setState(1783); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).schema_name.add(((Revoke_statementContext)_localctx).identifier);
					}
					}
					setState(1788);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1789); revoke_from_cascade_restrict();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1791); match(REVOKE);
				setState(1795);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1792); match(GRANT);
					setState(1793); match(OPTION);
					setState(1794); match(FOR);
					}
				}

				setState(1802);
				switch (_input.LA(1)) {
				case CREATE:
					{
					setState(1797); match(CREATE);
					}
					break;
				case ALL:
					{
					setState(1798); match(ALL);
					setState(1800);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1799); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1804); match(ON);
				setState(1805); match(TABLESPACE);
				setState(1806); ((Revoke_statementContext)_localctx).identifier = identifier();
				((Revoke_statementContext)_localctx).tablespace_name.add(((Revoke_statementContext)_localctx).identifier);
				setState(1811);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1807); match(COMMA);
					setState(1808); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).tablespace_name.add(((Revoke_statementContext)_localctx).identifier);
					}
					}
					setState(1813);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1814); revoke_from_cascade_restrict();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1816); match(REVOKE);
				setState(1820);
				switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
				case 1:
					{
					setState(1817); match(ADMIN);
					setState(1818); match(OPTION);
					setState(1819); match(FOR);
					}
					break;
				}
				setState(1822); ((Revoke_statementContext)_localctx).identifier = identifier();
				((Revoke_statementContext)_localctx).role_name.add(((Revoke_statementContext)_localctx).identifier);
				setState(1827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1823); match(COMMA);
					setState(1824); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).role_name.add(((Revoke_statementContext)_localctx).identifier);
					}
					}
					setState(1829);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1830); match(FROM);
				setState(1831); ((Revoke_statementContext)_localctx).identifier = identifier();
				((Revoke_statementContext)_localctx).role_name.add(((Revoke_statementContext)_localctx).identifier);
				setState(1836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1832); match(COMMA);
					setState(1833); ((Revoke_statementContext)_localctx).identifier = identifier();
					((Revoke_statementContext)_localctx).role_name.add(((Revoke_statementContext)_localctx).identifier);
					}
					}
					setState(1838);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1840);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(1839);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_from_cascade_restrictContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> role_name = new ArrayList<IdentifierContext>();
		public List<TerminalNode> PUBLIC() { return getTokens(SQLParser.PUBLIC); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode GROUP(int i) {
			return getToken(SQLParser.GROUP, i);
		}
		public TerminalNode PUBLIC(int i) {
			return getToken(SQLParser.PUBLIC, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<TerminalNode> GROUP() { return getTokens(SQLParser.GROUP); }
		public Revoke_from_cascade_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_from_cascade_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRevoke_from_cascade_restrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRevoke_from_cascade_restrict(this);
		}
	}

	public final Revoke_from_cascade_restrictContext revoke_from_cascade_restrict() throws RecognitionException {
		Revoke_from_cascade_restrictContext _localctx = new Revoke_from_cascade_restrictContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_revoke_from_cascade_restrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1844); match(FROM);
			setState(1850);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				{
				setState(1846);
				_la = _input.LA(1);
				if (_la==GROUP) {
					{
					setState(1845); match(GROUP);
					}
				}

				setState(1848); ((Revoke_from_cascade_restrictContext)_localctx).identifier = identifier();
				((Revoke_from_cascade_restrictContext)_localctx).role_name.add(((Revoke_from_cascade_restrictContext)_localctx).identifier);
				}
				break;
			case 2:
				{
				setState(1849); match(PUBLIC);
				}
				break;
			}
			setState(1862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1852); match(COMMA);
				setState(1858);
				switch ( getInterpreter().adaptivePredict(_input,217,_ctx) ) {
				case 1:
					{
					setState(1854);
					_la = _input.LA(1);
					if (_la==GROUP) {
						{
						setState(1853); match(GROUP);
						}
					}

					setState(1856); ((Revoke_from_cascade_restrictContext)_localctx).identifier = identifier();
					((Revoke_from_cascade_restrictContext)_localctx).role_name.add(((Revoke_from_cascade_restrictContext)_localctx).identifier);
					}
					break;
				case 2:
					{
					setState(1857); match(PUBLIC);
					}
					break;
				}
				}
				}
				setState(1864);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1866);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1865);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext tabl_name;
		public IdentifierContext schem_name;
		public IdentifierContext identifier;
		public List<IdentifierContext> column = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> sequence_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> schema_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> database_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> fdw_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> server_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> lang_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> loid = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> tablespace_name = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> role_name = new ArrayList<IdentifierContext>();
		public TerminalNode TABLE(int i) {
			return getToken(SQLParser.TABLE, i);
		}
		public TerminalNode SELECT(int i) {
			return getToken(SQLParser.SELECT, i);
		}
		public Grant_to_ruleContext grant_to_rule() {
			return getRuleContext(Grant_to_ruleContext.class,0);
		}
		public List<TerminalNode> INSERT() { return getTokens(SQLParser.INSERT); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public List<TerminalNode> TRUNCATE() { return getTokens(SQLParser.TRUNCATE); }
		public Functions_definition_schemaContext functions_definition_schema() {
			return getRuleContext(Functions_definition_schemaContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public List<TerminalNode> GRANT() { return getTokens(SQLParser.GRANT); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode TRUNCATE(int i) {
			return getToken(SQLParser.TRUNCATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public List<TerminalNode> TABLE() { return getTokens(SQLParser.TABLE); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<TerminalNode> USAGE() { return getTokens(SQLParser.USAGE); }
		public List<TerminalNode> REFERENCES() { return getTokens(SQLParser.REFERENCES); }
		public List<TerminalNode> TRIGGER() { return getTokens(SQLParser.TRIGGER); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public List<TerminalNode> CONNECT() { return getTokens(SQLParser.CONNECT); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode CONNECT(int i) {
			return getToken(SQLParser.CONNECT, i);
		}
		public TerminalNode ADMIN() { return getToken(SQLParser.ADMIN, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public TerminalNode GRANT(int i) {
			return getToken(SQLParser.GRANT, i);
		}
		public TerminalNode USAGE(int i) {
			return getToken(SQLParser.USAGE, i);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode TRIGGER(int i) {
			return getToken(SQLParser.TRIGGER, i);
		}
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public List<TerminalNode> TEMP() { return getTokens(SQLParser.TEMP); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode SEQUENCE(int i) {
			return getToken(SQLParser.SEQUENCE, i);
		}
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public List<TerminalNode> CREATE() { return getTokens(SQLParser.CREATE); }
		public TerminalNode CREATE(int i) {
			return getToken(SQLParser.CREATE, i);
		}
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public List<TerminalNode> TEMPORARY() { return getTokens(SQLParser.TEMPORARY); }
		public List<TerminalNode> SELECT() { return getTokens(SQLParser.SELECT); }
		public TerminalNode INSERT(int i) {
			return getToken(SQLParser.INSERT, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> SEQUENCE() { return getTokens(SQLParser.SEQUENCE); }
		public TerminalNode TEMP(int i) {
			return getToken(SQLParser.TEMP, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TEMPORARY(int i) {
			return getToken(SQLParser.TEMPORARY, i);
		}
		public Function_definitionContext function_definition() {
			return getRuleContext(Function_definitionContext.class,0);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode REFERENCES(int i) {
			return getToken(SQLParser.REFERENCES, i);
		}
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public Grant_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrant_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrant_statement(this);
		}
	}

	public final Grant_statementContext grant_statement() throws RecognitionException {
		Grant_statementContext _localctx = new Grant_statementContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_grant_statement);
		int _la;
		try {
			int _alt;
			setState(2200);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1868); match(GRANT);
				setState(1881);
				switch (_input.LA(1)) {
				case DELETE:
				case REFERENCES:
				case SELECT:
				case TRIGGER:
				case TRUNCATE:
				case UPDATE:
				case INSERT:
					{
					setState(1869);
					_la = _input.LA(1);
					if ( !(_la==DELETE || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (TRIGGER - 104)) | (1L << (TRUNCATE - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1874);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1870); match(COMMA);
						setState(1871);
						_la = _input.LA(1);
						if ( !(_la==DELETE || ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (TRIGGER - 104)) | (1L << (TRUNCATE - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1876);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case ALL:
					{
					setState(1877); match(ALL);
					setState(1879);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1878); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1883); match(ON);
				setState(1907);
				switch (_input.LA(1)) {
				case REPLACE:
				case TABLE:
				case ADMIN:
				case ALWAYS:
				case ARRAY:
				case AVG:
				case BETWEEN:
				case BY:
				case CACHE:
				case CALLED:
				case CLASS:
				case CENTURY:
				case CHARACTER:
				case CHECK:
				case CLUSTER:
				case COLLECT:
				case COALESCE:
				case COLUMN:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case CONCURRENTLY:
				case CONFIGURATION:
				case COST:
				case COUNT:
				case CUBE:
				case CURRENT:
				case CYCLE:
				case DATA:
				case DAY:
				case DEC:
				case DECADE:
				case DEFINER:
				case DICTIONARY:
				case DISABLE:
				case DOW:
				case DOY:
				case DROP:
				case ENABLE:
				case EPOCH:
				case EVENT:
				case EVERY:
				case EXISTS:
				case EXTENDED:
				case EXTERNAL:
				case EXTRACT:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FUSION:
				case GROUPING:
				case HASH:
				case INHERIT:
				case INDEX:
				case INCREMENT:
				case INPUT:
				case INSERT:
				case INTERSECTION:
				case ISCACHABLE:
				case ISODOW:
				case ISOYEAR:
				case ISSTRICT:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LESS:
				case LIST:
				case LOCATION:
				case MAIN:
				case MATCH:
				case MAX:
				case MAXVALUE:
				case MICROSECONDS:
				case MILLENNIUM:
				case MILLISECONDS:
				case MIN:
				case MINVALUE:
				case MINUTE:
				case MONTH:
				case NATIONAL:
				case NO:
				case NONE:
				case NULLIF:
				case OBJECT:
				case ON:
				case ONLY:
				case OPTION:
				case OPTIONS:
				case OVER:
				case OVERWRITE:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PLAIN:
				case PRECISION:
				case PUBLIC:
				case PURGE:
				case QUARTER:
				case RANGE:
				case REGCONFIG:
				case REGEXP:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RLIKE:
				case ROLLUP:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SERVER:
				case SET:
				case SIMILAR:
				case SIMPLE:
				case STABLE:
				case START:
				case STATISTICS:
				case STDIN:
				case STORAGE:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUBPARTITION:
				case SUM:
				case TABLESPACE:
				case TEMPLATE:
				case THAN:
				case TIMEZONE:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TRIM:
				case TO:
				case TYPE:
				case TYPES:
				case UNKNOWN:
				case UNLOGGED:
				case USER:
				case VALID:
				case VALIDATE:
				case VALUES:
				case VAR_SAMP:
				case VAR_POP:
				case VARYING:
				case VERSION:
				case VOLATILE:
				case WEEK:
				case WINDOW:
				case WRAPPER:
				case YEAR:
				case ZONE:
				case BOOLEAN:
				case BOOL:
				case BIT:
				case VARBIT:
				case INT1:
				case INT2:
				case INT4:
				case INT8:
				case TINYINT:
				case SMALLINT:
				case INT:
				case INTEGER:
				case BIGINT:
				case FLOAT4:
				case FLOAT8:
				case REAL:
				case FLOAT:
				case DOUBLE:
				case NUMERIC:
				case DECIMAL:
				case CHAR:
				case VARCHAR:
				case NCHAR:
				case NVARCHAR:
				case DATE:
				case TIME:
				case TIMETZ:
				case TIMESTAMP:
				case TIMESTAMPTZ:
				case TEXT:
				case UUID:
				case VARBINARY:
				case BLOB:
				case BYTEA:
				case INET4:
				case INET:
				case INTERVAL:
				case VOID:
				case DOUBLE_QUOTE:
				case Identifier:
				case QuotedIdentifier:
					{
					{
					setState(1885);
					_la = _input.LA(1);
					if (_la==TABLE) {
						{
						setState(1884); match(TABLE);
						}
					}

					setState(1891); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1887); ((Grant_statementContext)_localctx).tabl_name = schema_qualified_name();
							setState(1889);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1888); match(COMMA);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1893); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					break;
				case ALL:
					{
					{
					setState(1895); match(ALL);
					setState(1896); match(TABLES);
					setState(1897); match(IN);
					setState(1898); match(SCHEMA);
					setState(1903); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1899); ((Grant_statementContext)_localctx).schem_name = identifier();
							setState(1901);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1900); match(COMMA);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1905); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,227,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1909); grant_to_rule();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1911); match(GRANT);
				setState(1937);
				switch (_input.LA(1)) {
				case REFERENCES:
				case SELECT:
				case UPDATE:
				case INSERT:
					{
					setState(1921); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1912);
						_la = _input.LA(1);
						if ( !(((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1913); ((Grant_statementContext)_localctx).identifier = identifier();
						((Grant_statementContext)_localctx).column.add(((Grant_statementContext)_localctx).identifier);
						setState(1918);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1914); match(COMMA);
							setState(1915); ((Grant_statementContext)_localctx).identifier = identifier();
							((Grant_statementContext)_localctx).column.add(((Grant_statementContext)_localctx).identifier);
							}
							}
							setState(1920);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						}
						setState(1923); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 104)) & ~0x3f) == 0 && ((1L << (_la - 104)) & ((1L << (REFERENCES - 104)) | (1L << (SELECT - 104)) | (1L << (UPDATE - 104)))) != 0) || _la==INSERT );
					}
					break;
				case ALL:
					{
					setState(1925); match(ALL);
					setState(1927);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1926); match(PRIVILEGES);
						}
					}

					setState(1929); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).column.add(((Grant_statementContext)_localctx).identifier);
					setState(1934);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1930); match(COMMA);
						setState(1931); ((Grant_statementContext)_localctx).identifier = identifier();
						((Grant_statementContext)_localctx).column.add(((Grant_statementContext)_localctx).identifier);
						}
						}
						setState(1936);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1939); match(ON);
				setState(1947); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1941);
						_la = _input.LA(1);
						if (_la==TABLE) {
							{
							setState(1940); match(TABLE);
							}
						}

						setState(1943); ((Grant_statementContext)_localctx).tabl_name = schema_qualified_name();
						setState(1945);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1944); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1949); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,236,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1951); grant_to_rule();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1953); match(GRANT);
				setState(1966);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
				case USAGE:
					{
					{
					setState(1954);
					_la = _input.LA(1);
					if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (SELECT - 114)) | (1L << (UPDATE - 114)) | (1L << (USAGE - 114)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(1959);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1955); match(COMMA);
						setState(1956);
						_la = _input.LA(1);
						if ( !(((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (SELECT - 114)) | (1L << (UPDATE - 114)) | (1L << (USAGE - 114)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1961);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				case ALL:
					{
					setState(1962); match(ALL);
					setState(1964);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1963); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1968); match(ON);
				setState(1994);
				switch (_input.LA(1)) {
				case SEQUENCE:
					{
					setState(1978); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1969); match(SEQUENCE);
						setState(1970); ((Grant_statementContext)_localctx).identifier = identifier();
						((Grant_statementContext)_localctx).sequence_name.add(((Grant_statementContext)_localctx).identifier);
						setState(1975);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(1971); match(COMMA);
							setState(1972); ((Grant_statementContext)_localctx).identifier = identifier();
							((Grant_statementContext)_localctx).sequence_name.add(((Grant_statementContext)_localctx).identifier);
							}
							}
							setState(1977);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						}
						setState(1980); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SEQUENCE );
					}
					break;
				case ALL:
					{
					setState(1982); match(ALL);
					setState(1983); match(SEQUENCES);
					setState(1984); match(IN);
					setState(1985); match(SCHEMA);
					setState(1986); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).schema_name.add(((Grant_statementContext)_localctx).identifier);
					setState(1991);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1987); match(COMMA);
						setState(1988); ((Grant_statementContext)_localctx).identifier = identifier();
						((Grant_statementContext)_localctx).schema_name.add(((Grant_statementContext)_localctx).identifier);
						}
						}
						setState(1993);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1996); grant_to_rule();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1998); match(GRANT);
				setState(2011);
				switch (_input.LA(1)) {
				case CONNECT:
				case CREATE:
				case TEMP:
				case TEMPORARY:
					{
					setState(1999);
					_la = _input.LA(1);
					if ( !(_la==CONNECT || _la==CREATE || _la==TEMP || _la==TEMPORARY) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2004);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2000); match(COMMA);
						setState(2001);
						_la = _input.LA(1);
						if ( !(_la==CONNECT || _la==CREATE || _la==TEMP || _la==TEMPORARY) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(2006);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case ALL:
					{
					setState(2007); match(ALL);
					setState(2009);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2008); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2013); match(ON);
				setState(2014); match(DATABASE);
				setState(2015); ((Grant_statementContext)_localctx).identifier = identifier();
				((Grant_statementContext)_localctx).database_name.add(((Grant_statementContext)_localctx).identifier);
				setState(2020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2016); match(COMMA);
					setState(2017); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).database_name.add(((Grant_statementContext)_localctx).identifier);
					}
					}
					setState(2022);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2023); grant_to_rule();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2025); match(GRANT);
				setState(2031);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(2026); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(2027); match(ALL);
					setState(2029);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2028); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2033); match(ON);
				setState(2034); match(FOREIGN);
				setState(2035); match(DATA);
				setState(2036); match(WRAPPER);
				setState(2037); ((Grant_statementContext)_localctx).identifier = identifier();
				((Grant_statementContext)_localctx).fdw_name.add(((Grant_statementContext)_localctx).identifier);
				setState(2042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2038); match(COMMA);
					setState(2039); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).fdw_name.add(((Grant_statementContext)_localctx).identifier);
					}
					}
					setState(2044);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2045); grant_to_rule();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2047); match(GRANT);
				setState(2053);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(2048); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(2049); match(ALL);
					setState(2051);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2050); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2055); match(ON);
				setState(2056); match(FOREIGN);
				setState(2057); match(SERVER);
				setState(2058); ((Grant_statementContext)_localctx).identifier = identifier();
				((Grant_statementContext)_localctx).server_name.add(((Grant_statementContext)_localctx).identifier);
				setState(2063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2059); match(COMMA);
					setState(2060); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).server_name.add(((Grant_statementContext)_localctx).identifier);
					}
					}
					setState(2065);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2066); grant_to_rule();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2068); match(GRANT);
				setState(2074);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(2069); match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(2070); match(ALL);
					setState(2072);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2071); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2076); match(ON);
				setState(2079);
				switch (_input.LA(1)) {
				case FUNCTION:
					{
					setState(2077); function_definition();
					}
					break;
				case ALL:
					{
					setState(2078); functions_definition_schema();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2081); grant_to_rule();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2083); match(GRANT);
				setState(2089);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(2084); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(2085); match(ALL);
					setState(2087);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2086); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2091); match(ON);
				setState(2092); match(LANGUAGE);
				setState(2093); ((Grant_statementContext)_localctx).identifier = identifier();
				((Grant_statementContext)_localctx).lang_name.add(((Grant_statementContext)_localctx).identifier);
				setState(2098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2094); match(COMMA);
					setState(2095); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).lang_name.add(((Grant_statementContext)_localctx).identifier);
					}
					}
					setState(2100);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2101); grant_to_rule();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2103); match(GRANT);
				setState(2116);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
					{
					setState(2108); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2104);
						_la = _input.LA(1);
						if ( !(_la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(2106);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2105); match(COMMA);
							}
						}

						}
						}
						setState(2110); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SELECT || _la==UPDATE );
					}
					break;
				case ALL:
					{
					setState(2112); match(ALL);
					setState(2114);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2113); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2118); match(ON);
				setState(2119); match(LARGE);
				setState(2120); match(OBJECT);
				setState(2121); ((Grant_statementContext)_localctx).identifier = identifier();
				((Grant_statementContext)_localctx).loid.add(((Grant_statementContext)_localctx).identifier);
				setState(2126);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2122); match(COMMA);
					setState(2123); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).loid.add(((Grant_statementContext)_localctx).identifier);
					}
					}
					setState(2128);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2129); grant_to_rule();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2131); match(GRANT);
				setState(2144);
				switch (_input.LA(1)) {
				case CREATE:
				case USAGE:
					{
					setState(2136); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2132);
						_la = _input.LA(1);
						if ( !(_la==CREATE || _la==USAGE) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(2134);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2133); match(COMMA);
							}
						}

						}
						}
						setState(2138); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==CREATE || _la==USAGE );
					}
					break;
				case ALL:
					{
					setState(2140); match(ALL);
					setState(2142);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2141); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2146); match(ON);
				setState(2147); match(SCHEMA);
				setState(2148); ((Grant_statementContext)_localctx).identifier = identifier();
				((Grant_statementContext)_localctx).schema_name.add(((Grant_statementContext)_localctx).identifier);
				setState(2153);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2149); match(COMMA);
					setState(2150); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).schema_name.add(((Grant_statementContext)_localctx).identifier);
					}
					}
					setState(2155);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2156); grant_to_rule();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2158); match(GRANT);
				setState(2164);
				switch (_input.LA(1)) {
				case CREATE:
					{
					setState(2159); match(CREATE);
					}
					break;
				case ALL:
					{
					setState(2160); match(ALL);
					setState(2162);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2161); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2166); match(ON);
				setState(2167); match(TABLESPACE);
				setState(2168); ((Grant_statementContext)_localctx).identifier = identifier();
				((Grant_statementContext)_localctx).tablespace_name.add(((Grant_statementContext)_localctx).identifier);
				setState(2173);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2169); match(COMMA);
					setState(2170); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).tablespace_name.add(((Grant_statementContext)_localctx).identifier);
					}
					}
					setState(2175);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2176); grant_to_rule();
				setState(2177); match(GRANT);
				setState(2178); ((Grant_statementContext)_localctx).identifier = identifier();
				((Grant_statementContext)_localctx).role_name.add(((Grant_statementContext)_localctx).identifier);
				setState(2183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2179); match(COMMA);
					setState(2180); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).role_name.add(((Grant_statementContext)_localctx).identifier);
					}
					}
					setState(2185);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2186); match(TO);
				setState(2187); ((Grant_statementContext)_localctx).identifier = identifier();
				((Grant_statementContext)_localctx).role_name.add(((Grant_statementContext)_localctx).identifier);
				setState(2192);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2188); match(COMMA);
					setState(2189); ((Grant_statementContext)_localctx).identifier = identifier();
					((Grant_statementContext)_localctx).role_name.add(((Grant_statementContext)_localctx).identifier);
					}
					}
					setState(2194);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2198);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2195); match(WITH);
					setState(2196); match(ADMIN);
					setState(2197); match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_to_ruleContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> role_name = new ArrayList<IdentifierContext>();
		public List<TerminalNode> PUBLIC() { return getTokens(SQLParser.PUBLIC); }
		public TerminalNode GROUP(int i) {
			return getToken(SQLParser.GROUP, i);
		}
		public TerminalNode PUBLIC(int i) {
			return getToken(SQLParser.PUBLIC, i);
		}
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> GROUP() { return getTokens(SQLParser.GROUP); }
		public Grant_to_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_to_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrant_to_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrant_to_rule(this);
		}
	}

	public final Grant_to_ruleContext grant_to_rule() throws RecognitionException {
		Grant_to_ruleContext _localctx = new Grant_to_ruleContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_grant_to_rule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2202); match(TO);
			setState(2208);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				setState(2204);
				_la = _input.LA(1);
				if (_la==GROUP) {
					{
					setState(2203); match(GROUP);
					}
				}

				{
				setState(2206); ((Grant_to_ruleContext)_localctx).identifier = identifier();
				((Grant_to_ruleContext)_localctx).role_name.add(((Grant_to_ruleContext)_localctx).identifier);
				}
				}
				break;
			case 2:
				{
				setState(2207); match(PUBLIC);
				}
				break;
			}
			setState(2220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2210); match(COMMA);
				setState(2216);
				switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
				case 1:
					{
					setState(2212);
					_la = _input.LA(1);
					if (_la==GROUP) {
						{
						setState(2211); match(GROUP);
						}
					}

					{
					setState(2214); ((Grant_to_ruleContext)_localctx).identifier = identifier();
					((Grant_to_ruleContext)_localctx).role_name.add(((Grant_to_ruleContext)_localctx).identifier);
					}
					}
					break;
				case 2:
					{
					setState(2215); match(PUBLIC);
					}
					break;
				}
				}
				}
				setState(2222);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2226);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2223); match(WITH);
				setState(2224); match(GRANT);
				setState(2225); match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext agg_name;
		public Data_typeContext data_type;
		public List<Data_typeContext> agg_type = new ArrayList<Data_typeContext>();
		public Data_typeContext source_type;
		public Data_typeContext target_type;
		public Schema_qualified_nameContext object_name;
		public Schema_qualified_nameContext table_name;
		public Schema_qualified_nameContext operator_name;
		public Data_typeContext left_type;
		public Data_typeContext right_type;
		public IdentifierContext index_method;
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode CONVERSION() { return getToken(SQLParser.CONVERSION, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode COLLATION() { return getToken(SQLParser.COLLATION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public TerminalNode COMMENT() { return getToken(SQLParser.COMMENT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Function_definitionContext function_definition() {
			return getRuleContext(Function_definitionContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public Comment_on_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterComment_on_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitComment_on_statement(this);
		}
	}

	public final Comment_on_statementContext comment_on_statement() throws RecognitionException {
		Comment_on_statementContext _localctx = new Comment_on_statementContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_comment_on_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2228); match(COMMENT);
			setState(2229); match(ON);
			setState(2291);
			switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
			case 1:
				{
				setState(2230); match(AGGREGATE);
				setState(2231); ((Comment_on_statementContext)_localctx).agg_name = schema_qualified_name();
				setState(2232); match(LEFT_PAREN);
				setState(2241);
				_la = _input.LA(1);
				if (((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (SETOF - 105)) | (1L << (TRIGGER - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (REGCLASS - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (BINARY - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0)) {
					{
					setState(2233); ((Comment_on_statementContext)_localctx).data_type = data_type();
					((Comment_on_statementContext)_localctx).agg_type.add(((Comment_on_statementContext)_localctx).data_type);
					setState(2238);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2234); match(COMMA);
						setState(2235); ((Comment_on_statementContext)_localctx).data_type = data_type();
						((Comment_on_statementContext)_localctx).agg_type.add(((Comment_on_statementContext)_localctx).data_type);
						}
						}
						setState(2240);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2243); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2245); match(CAST);
				setState(2246); match(LEFT_PAREN);
				setState(2247); ((Comment_on_statementContext)_localctx).source_type = data_type();
				setState(2248); match(AS);
				setState(2249); ((Comment_on_statementContext)_localctx).target_type = data_type();
				setState(2250); match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(2252);
				_la = _input.LA(1);
				if ( !(_la==CONSTRAINT || _la==RULE || _la==TRIGGER) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2253); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				setState(2254); match(ON);
				setState(2255); ((Comment_on_statementContext)_localctx).table_name = schema_qualified_name();
				}
				break;
			case 4:
				{
				setState(2257); function_definition();
				}
				break;
			case 5:
				{
				setState(2258); match(OPERATOR);
				setState(2259); ((Comment_on_statementContext)_localctx).operator_name = schema_qualified_name();
				setState(2260); match(LEFT_PAREN);
				setState(2261); ((Comment_on_statementContext)_localctx).left_type = data_type();
				setState(2262); match(COMMA);
				setState(2263); ((Comment_on_statementContext)_localctx).right_type = data_type();
				setState(2264); match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				setState(2266); match(OPERATOR);
				setState(2267);
				_la = _input.LA(1);
				if ( !(_la==CLASS || _la==FAMILY) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(2268); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				setState(2269); match(USING);
				setState(2270); ((Comment_on_statementContext)_localctx).index_method = identifier();
				}
				break;
			case 7:
				{
				setState(2288);
				switch (_input.LA(1)) {
				case TEXT:
					{
					setState(2272); match(TEXT);
					setState(2273); match(SEARCH);
					setState(2274);
					_la = _input.LA(1);
					if ( !(_la==CONFIGURATION || _la==DICTIONARY || _la==PARSER || _la==TEMPLATE) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				case PROCEDURAL:
				case LANGUAGE:
					{
					setState(2276);
					_la = _input.LA(1);
					if (_la==PROCEDURAL) {
						{
						setState(2275); match(PROCEDURAL);
						}
					}

					setState(2278); match(LANGUAGE);
					}
					break;
				case LARGE:
					{
					setState(2279); match(LARGE);
					setState(2280); match(OBJECT);
					}
					break;
				case FOREIGN:
					{
					setState(2281); match(FOREIGN);
					setState(2285);
					switch (_input.LA(1)) {
					case DATA:
						{
						setState(2282); match(DATA);
						setState(2283); match(WRAPPER);
						}
						break;
					case TABLE:
						{
						setState(2284); match(TABLE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case COLLATION:
				case CONVERSION:
				case DATABASE:
				case DOMAIN:
				case EXTENSION:
				case ROLE:
				case SCHEMA:
				case SEQUENCE:
				case TABLE:
				case VIEW:
				case COLUMN:
				case INDEX:
				case SERVER:
				case TABLESPACE:
				case TYPE:
					{
					setState(2287);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COLLATION) | (1L << CONVERSION) | (1L << DATABASE) | (1L << DOMAIN) | (1L << EXTENSION))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (ROLE - 101)) | (1L << (SCHEMA - 101)) | (1L << (SEQUENCE - 101)) | (1L << (TABLE - 101)) | (1L << (VIEW - 101)) | (1L << (COLUMN - 101)))) != 0) || _la==INDEX || _la==SERVER || _la==TABLESPACE || _la==TYPE) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2290); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			}
			setState(2293); match(IS);
			setState(2294); match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_statementContext extends ParserRuleContext {
		public Value_expressionContext rettype;
		public Data_typeContext rettype_data;
		public IdentifierContext lang_name;
		public Token execution_cost;
		public Token result_rows;
		public IdentifierContext configuration_parameter;
		public IdentifierContext value;
		public Function_attributeContext function_attribute;
		public List<Function_attributeContext> attribute = new ArrayList<Function_attributeContext>();
		public TerminalNode VOLATILE(int i) {
			return getToken(SQLParser.VOLATILE, i);
		}
		public TerminalNode TO(int i) {
			return getToken(SQLParser.TO, i);
		}
		public List<Function_bodyContext> function_body() {
			return getRuleContexts(Function_bodyContext.class);
		}
		public List<TerminalNode> Character_String_Literal() { return getTokens(SQLParser.Character_String_Literal); }
		public TerminalNode AS(int i) {
			return getToken(SQLParser.AS, i);
		}
		public TerminalNode SET(int i) {
			return getToken(SQLParser.SET, i);
		}
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> COST() { return getTokens(SQLParser.COST); }
		public TerminalNode STABLE(int i) {
			return getToken(SQLParser.STABLE, i);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public List<TerminalNode> TO() { return getTokens(SQLParser.TO); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public List<Function_column_name_typeContext> function_column_name_type() {
			return getRuleContexts(Function_column_name_typeContext.class);
		}
		public TerminalNode ROWS(int i) {
			return getToken(SQLParser.ROWS, i);
		}
		public List<TerminalNode> INVOKER() { return getTokens(SQLParser.INVOKER); }
		public List<TerminalNode> WINDOW() { return getTokens(SQLParser.WINDOW); }
		public TerminalNode CURRENT(int i) {
			return getToken(SQLParser.CURRENT, i);
		}
		public TerminalNode NULL(int i) {
			return getToken(SQLParser.NULL, i);
		}
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<TerminalNode> CURRENT() { return getTokens(SQLParser.CURRENT); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public Function_column_name_typeContext function_column_name_type(int i) {
			return getRuleContext(Function_column_name_typeContext.class,i);
		}
		public TerminalNode RETURNS(int i) {
			return getToken(SQLParser.RETURNS, i);
		}
		public List<TerminalNode> EXTERNAL() { return getTokens(SQLParser.EXTERNAL); }
		public TerminalNode INPUT(int i) {
			return getToken(SQLParser.INPUT, i);
		}
		public TerminalNode CALLED(int i) {
			return getToken(SQLParser.CALLED, i);
		}
		public TerminalNode INVOKER(int i) {
			return getToken(SQLParser.INVOKER, i);
		}
		public List<TerminalNode> NULL() { return getTokens(SQLParser.NULL); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(SQLParser.LANGUAGE, i);
		}
		public List<TerminalNode> SET() { return getTokens(SQLParser.SET); }
		public List<TerminalNode> AS() { return getTokens(SQLParser.AS); }
		public Function_attributeContext function_attribute(int i) {
			return getRuleContext(Function_attributeContext.class,i);
		}
		public List<TerminalNode> INPUT() { return getTokens(SQLParser.INPUT); }
		public TerminalNode IMMUTABLE(int i) {
			return getToken(SQLParser.IMMUTABLE, i);
		}
		public List<TerminalNode> VOLATILE() { return getTokens(SQLParser.VOLATILE); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode Character_String_Literal(int i) {
			return getToken(SQLParser.Character_String_Literal, i);
		}
		public TerminalNode COST(int i) {
			return getToken(SQLParser.COST, i);
		}
		public List<TerminalNode> STABLE() { return getTokens(SQLParser.STABLE); }
		public List<TerminalNode> STRICT() { return getTokens(SQLParser.STRICT); }
		public List<TerminalNode> CALLED() { return getTokens(SQLParser.CALLED); }
		public List<TerminalNode> NUMBER() { return getTokens(SQLParser.NUMBER); }
		public List<TerminalNode> LANGUAGE() { return getTokens(SQLParser.LANGUAGE); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> IMMUTABLE() { return getTokens(SQLParser.IMMUTABLE); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<TerminalNode> FROM() { return getTokens(SQLParser.FROM); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Function_parametersContext function_parameters() {
			return getRuleContext(Function_parametersContext.class,0);
		}
		public List<TerminalNode> DEFINER() { return getTokens(SQLParser.DEFINER); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode STRICT(int i) {
			return getToken(SQLParser.STRICT, i);
		}
		public TerminalNode SECURITY(int i) {
			return getToken(SQLParser.SECURITY, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode FROM(int i) {
			return getToken(SQLParser.FROM, i);
		}
		public List<Function_attributeContext> function_attribute() {
			return getRuleContexts(Function_attributeContext.class);
		}
		public List<TerminalNode> ROWS() { return getTokens(SQLParser.ROWS); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public List<TerminalNode> SECURITY() { return getTokens(SQLParser.SECURITY); }
		public TerminalNode NUMBER(int i) {
			return getToken(SQLParser.NUMBER, i);
		}
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public List<TerminalNode> RETURNS() { return getTokens(SQLParser.RETURNS); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode WINDOW(int i) {
			return getToken(SQLParser.WINDOW, i);
		}
		public TerminalNode EXTERNAL(int i) {
			return getToken(SQLParser.EXTERNAL, i);
		}
		public Function_bodyContext function_body(int i) {
			return getRuleContext(Function_bodyContext.class,i);
		}
		public TerminalNode DEFINER(int i) {
			return getToken(SQLParser.DEFINER, i);
		}
		public Create_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_function_statement(this);
		}
	}

	public final Create_function_statementContext create_function_statement() throws RecognitionException {
		Create_function_statementContext _localctx = new Create_function_statementContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_create_function_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2296); match(CREATE);
			setState(2299);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2297); match(OR);
				setState(2298); match(REPLACE);
				}
			}

			setState(2301); match(FUNCTION);
			setState(2302); function_parameters();
			setState(2321);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				{
				setState(2303); match(RETURNS);
				setState(2306);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(2304); ((Create_function_statementContext)_localctx).rettype = value_expression();
					}
					break;
				case 2:
					{
					setState(2305); ((Create_function_statementContext)_localctx).rettype_data = data_type();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2308); match(RETURNS);
				setState(2309); match(TABLE);
				setState(2310); match(LEFT_PAREN);
				setState(2311); function_column_name_type();
				setState(2316);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2312); match(COMMA);
					setState(2313); function_column_name_type();
					}
					}
					setState(2318);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2319); match(RIGHT_PAREN);
				}
				break;
			}
			setState(2372); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2372);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(2323); match(LANGUAGE);
					setState(2324); ((Create_function_statementContext)_localctx).lang_name = identifier();
					}
					break;
				case 2:
					{
					setState(2325);
					_la = _input.LA(1);
					if ( !(_la==IMMUTABLE || _la==STRICT || ((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (STABLE - 260)) | (1L << (VOLATILE - 260)) | (1L << (WINDOW - 260)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				case 3:
					{
					setState(2326); match(CALLED);
					setState(2327); match(ON);
					setState(2328); match(NULL);
					setState(2329); match(INPUT);
					}
					break;
				case 4:
					{
					setState(2330); match(RETURNS);
					setState(2331); match(NULL);
					setState(2332); match(ON);
					setState(2333); match(NULL);
					setState(2334); match(INPUT);
					}
					break;
				case 5:
					{
					setState(2336);
					_la = _input.LA(1);
					if (_la==EXTERNAL) {
						{
						setState(2335); match(EXTERNAL);
						}
					}

					setState(2338); match(SECURITY);
					setState(2339);
					_la = _input.LA(1);
					if ( !(_la==INVOKER || _la==DEFINER) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				case 6:
					{
					setState(2340); match(COST);
					setState(2341); ((Create_function_statementContext)_localctx).execution_cost = match(NUMBER);
					}
					break;
				case 7:
					{
					setState(2342); match(ROWS);
					setState(2343); ((Create_function_statementContext)_localctx).result_rows = match(NUMBER);
					}
					break;
				case 8:
					{
					setState(2344); match(SET);
					setState(2345); ((Create_function_statementContext)_localctx).configuration_parameter = identifier();
					setState(2352);
					switch (_input.LA(1)) {
					case TO:
						{
						setState(2346); match(TO);
						setState(2347); ((Create_function_statementContext)_localctx).value = identifier();
						}
						break;
					case EQUAL:
						{
						setState(2348); match(EQUAL);
						setState(2349); ((Create_function_statementContext)_localctx).value = identifier();
						}
						break;
					case FROM:
						{
						setState(2350); match(FROM);
						setState(2351); match(CURRENT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2358);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2354); match(COMMA);
						setState(2355); ((Create_function_statementContext)_localctx).value = identifier();
						}
						}
						setState(2360);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 9:
					{
					setState(2361); match(AS);
					setState(2362); function_body();
					}
					break;
				case 10:
					{
					setState(2363); match(AS);
					setState(2364); match(Character_String_Literal);
					setState(2369);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2365); match(COMMA);
						setState(2366); match(Character_String_Literal);
						}
						}
						setState(2371);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				}
				}
				setState(2374); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AS || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IMMUTABLE - 64)) | (1L << (ROWS - 64)) | (1L << (RETURNS - 64)) | (1L << (STRICT - 64)))) != 0) || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & ((1L << (CALLED - 149)) | (1L << (COST - 149)) | (1L << (EXTERNAL - 149)) | (1L << (LANGUAGE - 149)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (SECURITY - 255)) | (1L << (SET - 255)) | (1L << (STABLE - 255)) | (1L << (VOLATILE - 255)) | (1L << (WINDOW - 255)))) != 0) );
			setState(2388);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2376); match(WITH);
				setState(2377); match(LEFT_PAREN);
				setState(2378); ((Create_function_statementContext)_localctx).function_attribute = function_attribute();
				((Create_function_statementContext)_localctx).attribute.add(((Create_function_statementContext)_localctx).function_attribute);
				setState(2383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2379); match(COMMA);
					setState(2380); ((Create_function_statementContext)_localctx).function_attribute = function_attribute();
					((Create_function_statementContext)_localctx).attribute.add(((Create_function_statementContext)_localctx).function_attribute);
					}
					}
					setState(2385);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2386); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_column_name_typeContext extends ParserRuleContext {
		public IdentifierContext column_name;
		public Data_typeContext column_type;
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Function_column_name_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_column_name_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_column_name_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_column_name_type(this);
		}
	}

	public final Function_column_name_typeContext function_column_name_type() throws RecognitionException {
		Function_column_name_typeContext _localctx = new Function_column_name_typeContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_function_column_name_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2390); ((Function_column_name_typeContext)_localctx).column_name = identifier();
			setState(2391); ((Function_column_name_typeContext)_localctx).column_type = data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_parametersContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public List<Function_argumentsContext> function_arguments() {
			return getRuleContexts(Function_argumentsContext.class);
		}
		public Function_def_valueContext function_def_value(int i) {
			return getRuleContext(Function_def_valueContext.class,i);
		}
		public List<Function_def_valueContext> function_def_value() {
			return getRuleContexts(Function_def_valueContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Function_argumentsContext function_arguments(int i) {
			return getRuleContext(Function_argumentsContext.class,i);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Function_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_parameters(this);
		}
	}

	public final Function_parametersContext function_parameters() throws RecognitionException {
		Function_parametersContext _localctx = new Function_parametersContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_function_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2393); ((Function_parametersContext)_localctx).name = schema_qualified_name();
			setState(2394); match(LEFT_PAREN);
			setState(2409);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << ANY) | (1L << CASE) | (1L << CAST) | (1L << FALSE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (IN - 65)) | (1L << (INOUT - 65)) | (1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (OUT - 65)) | (1L << (REPLACE - 65)) | (1L << (SELECT - 65)) | (1L << (SETOF - 65)) | (1L << (SOME - 65)) | (1L << (TRIGGER - 65)) | (1L << (TRUE - 65)))) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (VARIADIC - 136)) | (1L << (ADMIN - 136)) | (1L << (ALWAYS - 136)) | (1L << (ARRAY - 136)) | (1L << (AVG - 136)) | (1L << (BETWEEN - 136)) | (1L << (BY - 136)) | (1L << (CACHE - 136)) | (1L << (CALLED - 136)) | (1L << (CLASS - 136)) | (1L << (CENTURY - 136)) | (1L << (CHARACTER - 136)) | (1L << (CHECK - 136)) | (1L << (CLUSTER - 136)) | (1L << (COLLECT - 136)) | (1L << (COALESCE - 136)) | (1L << (COLUMN - 136)) | (1L << (COMMENT - 136)) | (1L << (COMMENTS - 136)) | (1L << (COMMIT - 136)) | (1L << (CONCURRENTLY - 136)) | (1L << (CONFIGURATION - 136)) | (1L << (COST - 136)) | (1L << (COUNT - 136)) | (1L << (CUBE - 136)) | (1L << (CURRENT - 136)) | (1L << (CYCLE - 136)) | (1L << (DATA - 136)) | (1L << (DAY - 136)) | (1L << (DEC - 136)) | (1L << (DECADE - 136)) | (1L << (DEFINER - 136)) | (1L << (DICTIONARY - 136)) | (1L << (DISABLE - 136)) | (1L << (DOW - 136)) | (1L << (DOY - 136)) | (1L << (DROP - 136)) | (1L << (ENABLE - 136)) | (1L << (EPOCH - 136)) | (1L << (EVENT - 136)) | (1L << (EVERY - 136)) | (1L << (EXISTS - 136)) | (1L << (EXTENDED - 136)) | (1L << (EXTERNAL - 136)) | (1L << (EXTRACT - 136)) | (1L << (FAMILY - 136)) | (1L << (FILTER - 136)) | (1L << (FIRST - 136)) | (1L << (FORMAT - 136)) | (1L << (FUSION - 136)) | (1L << (GROUPING - 136)) | (1L << (HASH - 136)) | (1L << (INHERIT - 136)) | (1L << (INDEX - 136)) | (1L << (INCREMENT - 136)) | (1L << (INPUT - 136)) | (1L << (INSERT - 136)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (INTERSECTION - 200)) | (1L << (ISCACHABLE - 200)) | (1L << (ISODOW - 200)) | (1L << (ISOYEAR - 200)) | (1L << (ISSTRICT - 200)) | (1L << (LANGUAGE - 200)) | (1L << (LARGE - 200)) | (1L << (LAST - 200)) | (1L << (LESS - 200)) | (1L << (LIST - 200)) | (1L << (LOCATION - 200)) | (1L << (MAIN - 200)) | (1L << (MATCH - 200)) | (1L << (MAX - 200)) | (1L << (MAXVALUE - 200)) | (1L << (MICROSECONDS - 200)) | (1L << (MILLENNIUM - 200)) | (1L << (MILLISECONDS - 200)) | (1L << (MIN - 200)) | (1L << (MINVALUE - 200)) | (1L << (MINUTE - 200)) | (1L << (MONTH - 200)) | (1L << (NATIONAL - 200)) | (1L << (NO - 200)) | (1L << (NONE - 200)) | (1L << (NULLIF - 200)) | (1L << (OBJECT - 200)) | (1L << (ON - 200)) | (1L << (ONLY - 200)) | (1L << (OPTION - 200)) | (1L << (OPTIONS - 200)) | (1L << (OVER - 200)) | (1L << (OVERWRITE - 200)) | (1L << (PARSER - 200)) | (1L << (PARTIAL - 200)) | (1L << (PARTITION - 200)) | (1L << (PARTITIONS - 200)) | (1L << (PLAIN - 200)) | (1L << (PRECISION - 200)) | (1L << (PUBLIC - 200)) | (1L << (PURGE - 200)) | (1L << (QUARTER - 200)) | (1L << (RANGE - 200)) | (1L << (REGCONFIG - 200)) | (1L << (REGEXP - 200)) | (1L << (RENAME - 200)) | (1L << (REPLICA - 200)) | (1L << (RESET - 200)) | (1L << (RESTART - 200)) | (1L << (RLIKE - 200)) | (1L << (ROLLUP - 200)) | (1L << (SEARCH - 200)) | (1L << (SECOND - 200)) | (1L << (SECURITY - 200)) | (1L << (SERVER - 200)) | (1L << (SET - 200)) | (1L << (SIMILAR - 200)) | (1L << (SIMPLE - 200)) | (1L << (STABLE - 200)) | (1L << (START - 200)) | (1L << (STATISTICS - 200)) | (1L << (STDIN - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (STORAGE - 264)) | (1L << (STDDEV_POP - 264)) | (1L << (STDDEV_SAMP - 264)) | (1L << (SUBPARTITION - 264)) | (1L << (SUM - 264)) | (1L << (TABLESPACE - 264)) | (1L << (TEMPLATE - 264)) | (1L << (THAN - 264)) | (1L << (TIMEZONE - 264)) | (1L << (TIMEZONE_HOUR - 264)) | (1L << (TIMEZONE_MINUTE - 264)) | (1L << (TRIM - 264)) | (1L << (TO - 264)) | (1L << (TYPE - 264)) | (1L << (TYPES - 264)) | (1L << (UNKNOWN - 264)) | (1L << (UNLOGGED - 264)) | (1L << (USER - 264)) | (1L << (VALID - 264)) | (1L << (VALIDATE - 264)) | (1L << (VALUES - 264)) | (1L << (VAR_SAMP - 264)) | (1L << (VAR_POP - 264)) | (1L << (VARYING - 264)) | (1L << (VERSION - 264)) | (1L << (VOLATILE - 264)) | (1L << (WEEK - 264)) | (1L << (WINDOW - 264)) | (1L << (WRAPPER - 264)) | (1L << (YEAR - 264)) | (1L << (ZONE - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BOOL - 264)) | (1L << (BIT - 264)) | (1L << (VARBIT - 264)) | (1L << (INT1 - 264)) | (1L << (INT2 - 264)) | (1L << (INT4 - 264)) | (1L << (INT8 - 264)) | (1L << (TINYINT - 264)) | (1L << (SMALLINT - 264)) | (1L << (INT - 264)) | (1L << (INTEGER - 264)) | (1L << (BIGINT - 264)) | (1L << (FLOAT4 - 264)) | (1L << (FLOAT8 - 264)) | (1L << (REAL - 264)) | (1L << (REGCLASS - 264)) | (1L << (FLOAT - 264)) | (1L << (DOUBLE - 264)) | (1L << (NUMERIC - 264)) | (1L << (DECIMAL - 264)) | (1L << (CHAR - 264)) | (1L << (VARCHAR - 264)) | (1L << (NCHAR - 264)) | (1L << (NVARCHAR - 264)) | (1L << (DATE - 264)) | (1L << (TIME - 264)) | (1L << (TIMETZ - 264)) | (1L << (TIMESTAMP - 264)) | (1L << (TIMESTAMPTZ - 264)) | (1L << (TEXT - 264)) | (1L << (UUID - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (BINARY - 328)) | (1L << (VARBINARY - 328)) | (1L << (BLOB - 328)) | (1L << (BYTEA - 328)) | (1L << (INET4 - 328)) | (1L << (INET - 328)) | (1L << (INTERVAL - 328)) | (1L << (VOID - 328)) | (1L << (LEFT_PAREN - 328)) | (1L << (PLUS - 328)) | (1L << (MINUS - 328)) | (1L << (DOUBLE_QUOTE - 328)) | (1L << (NUMBER - 328)) | (1L << (REAL_NUMBER - 328)) | (1L << (Identifier - 328)) | (1L << (QuotedIdentifier - 328)) | (1L << (Character_String_Literal - 328)))) != 0)) {
				{
				setState(2395); function_arguments();
				setState(2397);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==EQUAL) {
					{
					setState(2396); function_def_value();
					}
				}

				setState(2406);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2399); match(COMMA);
					setState(2400); function_arguments();
					setState(2402);
					_la = _input.LA(1);
					if (_la==DEFAULT || _la==EQUAL) {
						{
						setState(2401); function_def_value();
						}
					}

					}
					}
					setState(2408);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2411); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_def_valueContext extends ParserRuleContext {
		public Value_expressionContext def_value;
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public Function_def_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_def_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_def_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_def_value(this);
		}
	}

	public final Function_def_valueContext function_def_value() throws RecognitionException {
		Function_def_valueContext _localctx = new Function_def_valueContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_function_def_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2413);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2414); ((Function_def_valueContext)_localctx).def_value = value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_bodyContext extends ParserRuleContext {
		public TerminalNode BeginDollarStringConstant() { return getToken(SQLParser.BeginDollarStringConstant, 0); }
		public TerminalNode EndDollarStringConstant() { return getToken(SQLParser.EndDollarStringConstant, 0); }
		public List<TerminalNode> Text_between_Dollar() { return getTokens(SQLParser.Text_between_Dollar); }
		public TerminalNode Text_between_Dollar(int i) {
			return getToken(SQLParser.Text_between_Dollar, i);
		}
		public Function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_body(this);
		}
	}

	public final Function_bodyContext function_body() throws RecognitionException {
		Function_bodyContext _localctx = new Function_bodyContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_function_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2416); match(BeginDollarStringConstant);
			setState(2418); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2417); match(Text_between_Dollar);
				}
				}
				setState(2420); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==Text_between_Dollar );
			setState(2422); match(EndDollarStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentsContext extends ParserRuleContext {
		public ArgmodeContext arg_mode;
		public IdentifierContext argname;
		public Data_typeContext argtype_data;
		public Value_expressionContext argtype_expres;
		public Schema_qualified_nameContext argtype_schema;
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public ArgmodeContext argmode() {
			return getRuleContext(ArgmodeContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Function_argumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_arguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_arguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_arguments(this);
		}
	}

	public final Function_argumentsContext function_arguments() throws RecognitionException {
		Function_argumentsContext _localctx = new Function_argumentsContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_function_arguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2425);
			_la = _input.LA(1);
			if (((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (IN - 65)) | (1L << (INOUT - 65)) | (1L << (OUT - 65)))) != 0) || _la==VARIADIC) {
				{
				setState(2424); ((Function_argumentsContext)_localctx).arg_mode = argmode();
				}
			}

			setState(2428);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(2427); ((Function_argumentsContext)_localctx).argname = identifier();
				}
				break;
			}
			setState(2433);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(2430); ((Function_argumentsContext)_localctx).argtype_data = data_type();
				}
				break;
			case 2:
				{
				setState(2431); ((Function_argumentsContext)_localctx).argtype_expres = value_expression();
				}
				break;
			case 3:
				{
				setState(2432); ((Function_argumentsContext)_localctx).argtype_schema = schema_qualified_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_attributeContext extends ParserRuleContext {
		public TerminalNode ISCACHABLE() { return getToken(SQLParser.ISCACHABLE, 0); }
		public TerminalNode ISSTRICT() { return getToken(SQLParser.ISSTRICT, 0); }
		public Function_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_attribute(this);
		}
	}

	public final Function_attributeContext function_attribute() throws RecognitionException {
		Function_attributeContext _localctx = new Function_attributeContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_function_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2435);
			_la = _input.LA(1);
			if ( !(_la==ISCACHABLE || _la==ISSTRICT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgmodeContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(SQLParser.OUT, 0); }
		public TerminalNode VARIADIC() { return getToken(SQLParser.VARIADIC, 0); }
		public TerminalNode INOUT() { return getToken(SQLParser.INOUT, 0); }
		public ArgmodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argmode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArgmode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArgmode(this);
		}
	}

	public final ArgmodeContext argmode() throws RecognitionException {
		ArgmodeContext _localctx = new ArgmodeContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_argmode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2437);
			_la = _input.LA(1);
			if ( !(((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (IN - 65)) | (1L << (INOUT - 65)) | (1L << (OUT - 65)))) != 0) || _la==VARIADIC) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_definitionContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public Function_definition_name_parenContext function_definition_name_paren() {
			return getRuleContext(Function_definition_name_parenContext.class,0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_definition(this);
		}
	}

	public final Function_definitionContext function_definition() throws RecognitionException {
		Function_definitionContext _localctx = new Function_definitionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_function_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2439); match(FUNCTION);
			setState(2440); function_definition_name_paren();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_definition_name_parenContext extends ParserRuleContext {
		public Schema_qualified_nameContext func_name;
		public List<Function_argumentsContext> function_arguments() {
			return getRuleContexts(Function_argumentsContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Function_argumentsContext function_arguments(int i) {
			return getRuleContext(Function_argumentsContext.class,i);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Function_definition_name_parenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_definition_name_paren; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_definition_name_paren(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_definition_name_paren(this);
		}
	}

	public final Function_definition_name_parenContext function_definition_name_paren() throws RecognitionException {
		Function_definition_name_parenContext _localctx = new Function_definition_name_parenContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_function_definition_name_paren);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2442); ((Function_definition_name_parenContext)_localctx).func_name = schema_qualified_name();
			setState(2443); match(LEFT_PAREN);
			setState(2452);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << ANY) | (1L << CASE) | (1L << CAST) | (1L << FALSE))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (IN - 65)) | (1L << (INOUT - 65)) | (1L << (NOT - 65)) | (1L << (NULL - 65)) | (1L << (OUT - 65)) | (1L << (REPLACE - 65)) | (1L << (SELECT - 65)) | (1L << (SETOF - 65)) | (1L << (SOME - 65)) | (1L << (TRIGGER - 65)) | (1L << (TRUE - 65)))) != 0) || ((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (VARIADIC - 136)) | (1L << (ADMIN - 136)) | (1L << (ALWAYS - 136)) | (1L << (ARRAY - 136)) | (1L << (AVG - 136)) | (1L << (BETWEEN - 136)) | (1L << (BY - 136)) | (1L << (CACHE - 136)) | (1L << (CALLED - 136)) | (1L << (CLASS - 136)) | (1L << (CENTURY - 136)) | (1L << (CHARACTER - 136)) | (1L << (CHECK - 136)) | (1L << (CLUSTER - 136)) | (1L << (COLLECT - 136)) | (1L << (COALESCE - 136)) | (1L << (COLUMN - 136)) | (1L << (COMMENT - 136)) | (1L << (COMMENTS - 136)) | (1L << (COMMIT - 136)) | (1L << (CONCURRENTLY - 136)) | (1L << (CONFIGURATION - 136)) | (1L << (COST - 136)) | (1L << (COUNT - 136)) | (1L << (CUBE - 136)) | (1L << (CURRENT - 136)) | (1L << (CYCLE - 136)) | (1L << (DATA - 136)) | (1L << (DAY - 136)) | (1L << (DEC - 136)) | (1L << (DECADE - 136)) | (1L << (DEFINER - 136)) | (1L << (DICTIONARY - 136)) | (1L << (DISABLE - 136)) | (1L << (DOW - 136)) | (1L << (DOY - 136)) | (1L << (DROP - 136)) | (1L << (ENABLE - 136)) | (1L << (EPOCH - 136)) | (1L << (EVENT - 136)) | (1L << (EVERY - 136)) | (1L << (EXISTS - 136)) | (1L << (EXTENDED - 136)) | (1L << (EXTERNAL - 136)) | (1L << (EXTRACT - 136)) | (1L << (FAMILY - 136)) | (1L << (FILTER - 136)) | (1L << (FIRST - 136)) | (1L << (FORMAT - 136)) | (1L << (FUSION - 136)) | (1L << (GROUPING - 136)) | (1L << (HASH - 136)) | (1L << (INHERIT - 136)) | (1L << (INDEX - 136)) | (1L << (INCREMENT - 136)) | (1L << (INPUT - 136)) | (1L << (INSERT - 136)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (INTERSECTION - 200)) | (1L << (ISCACHABLE - 200)) | (1L << (ISODOW - 200)) | (1L << (ISOYEAR - 200)) | (1L << (ISSTRICT - 200)) | (1L << (LANGUAGE - 200)) | (1L << (LARGE - 200)) | (1L << (LAST - 200)) | (1L << (LESS - 200)) | (1L << (LIST - 200)) | (1L << (LOCATION - 200)) | (1L << (MAIN - 200)) | (1L << (MATCH - 200)) | (1L << (MAX - 200)) | (1L << (MAXVALUE - 200)) | (1L << (MICROSECONDS - 200)) | (1L << (MILLENNIUM - 200)) | (1L << (MILLISECONDS - 200)) | (1L << (MIN - 200)) | (1L << (MINVALUE - 200)) | (1L << (MINUTE - 200)) | (1L << (MONTH - 200)) | (1L << (NATIONAL - 200)) | (1L << (NO - 200)) | (1L << (NONE - 200)) | (1L << (NULLIF - 200)) | (1L << (OBJECT - 200)) | (1L << (ON - 200)) | (1L << (ONLY - 200)) | (1L << (OPTION - 200)) | (1L << (OPTIONS - 200)) | (1L << (OVER - 200)) | (1L << (OVERWRITE - 200)) | (1L << (PARSER - 200)) | (1L << (PARTIAL - 200)) | (1L << (PARTITION - 200)) | (1L << (PARTITIONS - 200)) | (1L << (PLAIN - 200)) | (1L << (PRECISION - 200)) | (1L << (PUBLIC - 200)) | (1L << (PURGE - 200)) | (1L << (QUARTER - 200)) | (1L << (RANGE - 200)) | (1L << (REGCONFIG - 200)) | (1L << (REGEXP - 200)) | (1L << (RENAME - 200)) | (1L << (REPLICA - 200)) | (1L << (RESET - 200)) | (1L << (RESTART - 200)) | (1L << (RLIKE - 200)) | (1L << (ROLLUP - 200)) | (1L << (SEARCH - 200)) | (1L << (SECOND - 200)) | (1L << (SECURITY - 200)) | (1L << (SERVER - 200)) | (1L << (SET - 200)) | (1L << (SIMILAR - 200)) | (1L << (SIMPLE - 200)) | (1L << (STABLE - 200)) | (1L << (START - 200)) | (1L << (STATISTICS - 200)) | (1L << (STDIN - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (STORAGE - 264)) | (1L << (STDDEV_POP - 264)) | (1L << (STDDEV_SAMP - 264)) | (1L << (SUBPARTITION - 264)) | (1L << (SUM - 264)) | (1L << (TABLESPACE - 264)) | (1L << (TEMPLATE - 264)) | (1L << (THAN - 264)) | (1L << (TIMEZONE - 264)) | (1L << (TIMEZONE_HOUR - 264)) | (1L << (TIMEZONE_MINUTE - 264)) | (1L << (TRIM - 264)) | (1L << (TO - 264)) | (1L << (TYPE - 264)) | (1L << (TYPES - 264)) | (1L << (UNKNOWN - 264)) | (1L << (UNLOGGED - 264)) | (1L << (USER - 264)) | (1L << (VALID - 264)) | (1L << (VALIDATE - 264)) | (1L << (VALUES - 264)) | (1L << (VAR_SAMP - 264)) | (1L << (VAR_POP - 264)) | (1L << (VARYING - 264)) | (1L << (VERSION - 264)) | (1L << (VOLATILE - 264)) | (1L << (WEEK - 264)) | (1L << (WINDOW - 264)) | (1L << (WRAPPER - 264)) | (1L << (YEAR - 264)) | (1L << (ZONE - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BOOL - 264)) | (1L << (BIT - 264)) | (1L << (VARBIT - 264)) | (1L << (INT1 - 264)) | (1L << (INT2 - 264)) | (1L << (INT4 - 264)) | (1L << (INT8 - 264)) | (1L << (TINYINT - 264)) | (1L << (SMALLINT - 264)) | (1L << (INT - 264)) | (1L << (INTEGER - 264)) | (1L << (BIGINT - 264)) | (1L << (FLOAT4 - 264)) | (1L << (FLOAT8 - 264)) | (1L << (REAL - 264)) | (1L << (REGCLASS - 264)) | (1L << (FLOAT - 264)) | (1L << (DOUBLE - 264)) | (1L << (NUMERIC - 264)) | (1L << (DECIMAL - 264)) | (1L << (CHAR - 264)) | (1L << (VARCHAR - 264)) | (1L << (NCHAR - 264)) | (1L << (NVARCHAR - 264)) | (1L << (DATE - 264)) | (1L << (TIME - 264)) | (1L << (TIMETZ - 264)) | (1L << (TIMESTAMP - 264)) | (1L << (TIMESTAMPTZ - 264)) | (1L << (TEXT - 264)) | (1L << (UUID - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (BINARY - 328)) | (1L << (VARBINARY - 328)) | (1L << (BLOB - 328)) | (1L << (BYTEA - 328)) | (1L << (INET4 - 328)) | (1L << (INET - 328)) | (1L << (INTERVAL - 328)) | (1L << (VOID - 328)) | (1L << (LEFT_PAREN - 328)) | (1L << (PLUS - 328)) | (1L << (MINUS - 328)) | (1L << (DOUBLE_QUOTE - 328)) | (1L << (NUMBER - 328)) | (1L << (REAL_NUMBER - 328)) | (1L << (Identifier - 328)) | (1L << (QuotedIdentifier - 328)) | (1L << (Character_String_Literal - 328)))) != 0)) {
				{
				setState(2444); function_arguments();
				setState(2449);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2445); match(COMMA);
					setState(2446); function_arguments();
					}
					}
					setState(2451);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(2454); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Functions_definition_schemaContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> schema_name = new ArrayList<IdentifierContext>();
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FUNCTIONS() { return getToken(SQLParser.FUNCTIONS, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Functions_definition_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functions_definition_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctions_definition_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctions_definition_schema(this);
		}
	}

	public final Functions_definition_schemaContext functions_definition_schema() throws RecognitionException {
		Functions_definition_schemaContext _localctx = new Functions_definition_schemaContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_functions_definition_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2456); match(ALL);
			setState(2457); match(FUNCTIONS);
			setState(2458); match(IN);
			setState(2459); match(SCHEMA);
			setState(2460); ((Functions_definition_schemaContext)_localctx).identifier = identifier();
			((Functions_definition_schemaContext)_localctx).schema_name.add(((Functions_definition_schemaContext)_localctx).identifier);
			setState(2465);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2461); match(COMMA);
				setState(2462); ((Functions_definition_schemaContext)_localctx).identifier = identifier();
				((Functions_definition_schemaContext)_localctx).schema_name.add(((Functions_definition_schemaContext)_localctx).identifier);
				}
				}
				setState(2467);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequence_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public Sequence_bodyContext sequence_body(int i) {
			return getRuleContext(Sequence_bodyContext.class,i);
		}
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public List<Sequence_bodyContext> sequence_body() {
			return getRuleContexts(Sequence_bodyContext.class);
		}
		public Create_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_sequence_statement(this);
		}
	}

	public final Create_sequence_statementContext create_sequence_statement() throws RecognitionException {
		Create_sequence_statementContext _localctx = new Create_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_create_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2468); match(CREATE);
			setState(2470);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(2469);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2472); match(SEQUENCE);
			setState(2473); ((Create_sequence_statementContext)_localctx).name = schema_qualified_name();
			setState(2477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OWNED || _la==CACHE || ((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & ((1L << (CYCLE - 167)) | (1L << (INCREMENT - 167)) | (1L << (MAXVALUE - 167)) | (1L << (MINVALUE - 167)) | (1L << (NO - 167)))) != 0) || _la==START) {
				{
				{
				setState(2474); sequence_body();
				}
				}
				setState(2479);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_bodyContext extends ParserRuleContext {
		public Token incr;
		public Signed_numerical_literalContext minval;
		public Signed_numerical_literalContext maxval;
		public Signed_numerical_literalContext start_val;
		public Signed_numerical_literalContext cache_val;
		public Schema_qualified_nameContext col_name;
		public Signed_numerical_literalContext signed_numerical_literal() {
			return getRuleContext(Signed_numerical_literalContext.class,0);
		}
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode OWNED() { return getToken(SQLParser.OWNED, 0); }
		public TerminalNode MAXVALUE() { return getToken(SQLParser.MAXVALUE, 0); }
		public TerminalNode INCREMENT() { return getToken(SQLParser.INCREMENT, 0); }
		public TerminalNode NONE() { return getToken(SQLParser.NONE, 0); }
		public TerminalNode START() { return getToken(SQLParser.START, 0); }
		public TerminalNode MINVALUE() { return getToken(SQLParser.MINVALUE, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public TerminalNode CYCLE() { return getToken(SQLParser.CYCLE, 0); }
		public TerminalNode NUMBER() { return getToken(SQLParser.NUMBER, 0); }
		public TerminalNode CACHE() { return getToken(SQLParser.CACHE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Sequence_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSequence_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSequence_body(this);
		}
	}

	public final Sequence_bodyContext sequence_body() throws RecognitionException {
		Sequence_bodyContext _localctx = new Sequence_bodyContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_sequence_body);
		int _la;
		try {
			setState(2514);
			switch ( getInterpreter().adaptivePredict(_input,320,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2480); match(INCREMENT);
				setState(2482);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2481); match(BY);
					}
				}

				setState(2484); ((Sequence_bodyContext)_localctx).incr = match(NUMBER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2489);
				switch (_input.LA(1)) {
				case MINVALUE:
					{
					setState(2485); match(MINVALUE);
					setState(2486); ((Sequence_bodyContext)_localctx).minval = signed_numerical_literal();
					}
					break;
				case NO:
					{
					setState(2487); match(NO);
					setState(2488); match(MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2495);
				switch (_input.LA(1)) {
				case MAXVALUE:
					{
					setState(2491); match(MAXVALUE);
					setState(2492); ((Sequence_bodyContext)_localctx).maxval = signed_numerical_literal();
					}
					break;
				case NO:
					{
					setState(2493); match(NO);
					setState(2494); match(MAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2497); match(START);
				setState(2499);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2498); match(WITH);
					}
				}

				setState(2501); ((Sequence_bodyContext)_localctx).start_val = signed_numerical_literal();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2502); match(CACHE);
				setState(2503); ((Sequence_bodyContext)_localctx).cache_val = signed_numerical_literal();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2505);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2504); match(NO);
					}
				}

				setState(2507); match(CYCLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2508); match(OWNED);
				setState(2509); match(BY);
				setState(2512);
				switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
				case 1:
					{
					setState(2510); ((Sequence_bodyContext)_localctx).col_name = schema_qualified_name();
					}
					break;
				case 2:
					{
					setState(2511); match(NONE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_statementContext extends ParserRuleContext {
		public IdentifierContext schema_name;
		public IdentifierContext user_name;
		public SqlContext schema_element;
		public List<SqlContext> sql() {
			return getRuleContexts(SqlContext.class);
		}
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public SqlContext sql(int i) {
			return getRuleContext(SqlContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode AUTHORIZATION() { return getToken(SQLParser.AUTHORIZATION, 0); }
		public Create_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_schema_statement(this);
		}
	}

	public final Create_schema_statementContext create_schema_statement() throws RecognitionException {
		Create_schema_statementContext _localctx = new Create_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_create_schema_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2516); match(CREATE);
			setState(2517); match(SCHEMA);
			setState(2549);
			switch (_input.LA(1)) {
			case REPLACE:
			case ADMIN:
			case ALWAYS:
			case ARRAY:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVER:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STDIN:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case DOUBLE_QUOTE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(2518); ((Create_schema_statementContext)_localctx).schema_name = identifier();
				setState(2521);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(2519); match(AUTHORIZATION);
					setState(2520); ((Create_schema_statementContext)_localctx).user_name = identifier();
					}
				}

				setState(2526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - -1)) & ~0x3f) == 0 && ((1L << (_la - -1)) & ((1L << (EOF - -1)) | (1L << (ALTER - -1)) | (1L << (COPY - -1)) | (1L << (CREATE - -1)) | (1L << (GRANT - -1)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (REVOKE - 105)) | (1L << (SELECT - 105)) | (1L << (TABLE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)) | (1L << (LEFT_PAREN - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0)) {
					{
					{
					setState(2523); ((Create_schema_statementContext)_localctx).schema_element = sql();
					}
					}
					setState(2528);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case AUTHORIZATION:
				{
				setState(2529); match(AUTHORIZATION);
				setState(2530); ((Create_schema_statementContext)_localctx).user_name = identifier();
				setState(2534);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - -1)) & ~0x3f) == 0 && ((1L << (_la - -1)) & ((1L << (EOF - -1)) | (1L << (ALTER - -1)) | (1L << (COPY - -1)) | (1L << (CREATE - -1)) | (1L << (GRANT - -1)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (REVOKE - 105)) | (1L << (SELECT - 105)) | (1L << (TABLE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)) | (1L << (LEFT_PAREN - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0)) {
					{
					{
					setState(2531); ((Create_schema_statementContext)_localctx).schema_element = sql();
					}
					}
					setState(2536);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case IF:
				{
				setState(2537); match(IF);
				setState(2538); match(NOT);
				setState(2539); match(EXISTS);
				setState(2547);
				switch (_input.LA(1)) {
				case REPLACE:
				case ADMIN:
				case ALWAYS:
				case ARRAY:
				case AVG:
				case BETWEEN:
				case BY:
				case CACHE:
				case CALLED:
				case CLASS:
				case CENTURY:
				case CHARACTER:
				case CHECK:
				case CLUSTER:
				case COLLECT:
				case COALESCE:
				case COLUMN:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case CONCURRENTLY:
				case CONFIGURATION:
				case COST:
				case COUNT:
				case CUBE:
				case CURRENT:
				case CYCLE:
				case DATA:
				case DAY:
				case DEC:
				case DECADE:
				case DEFINER:
				case DICTIONARY:
				case DISABLE:
				case DOW:
				case DOY:
				case DROP:
				case ENABLE:
				case EPOCH:
				case EVENT:
				case EVERY:
				case EXISTS:
				case EXTENDED:
				case EXTERNAL:
				case EXTRACT:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FUSION:
				case GROUPING:
				case HASH:
				case INHERIT:
				case INDEX:
				case INCREMENT:
				case INPUT:
				case INSERT:
				case INTERSECTION:
				case ISCACHABLE:
				case ISODOW:
				case ISOYEAR:
				case ISSTRICT:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LESS:
				case LIST:
				case LOCATION:
				case MAIN:
				case MATCH:
				case MAX:
				case MAXVALUE:
				case MICROSECONDS:
				case MILLENNIUM:
				case MILLISECONDS:
				case MIN:
				case MINVALUE:
				case MINUTE:
				case MONTH:
				case NATIONAL:
				case NO:
				case NONE:
				case NULLIF:
				case OBJECT:
				case ON:
				case ONLY:
				case OPTION:
				case OPTIONS:
				case OVER:
				case OVERWRITE:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PLAIN:
				case PRECISION:
				case PUBLIC:
				case PURGE:
				case QUARTER:
				case RANGE:
				case REGCONFIG:
				case REGEXP:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RLIKE:
				case ROLLUP:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SERVER:
				case SET:
				case SIMILAR:
				case SIMPLE:
				case STABLE:
				case START:
				case STATISTICS:
				case STDIN:
				case STORAGE:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUBPARTITION:
				case SUM:
				case TABLESPACE:
				case TEMPLATE:
				case THAN:
				case TIMEZONE:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TRIM:
				case TO:
				case TYPE:
				case TYPES:
				case UNKNOWN:
				case UNLOGGED:
				case USER:
				case VALID:
				case VALIDATE:
				case VALUES:
				case VAR_SAMP:
				case VAR_POP:
				case VARYING:
				case VERSION:
				case VOLATILE:
				case WEEK:
				case WINDOW:
				case WRAPPER:
				case YEAR:
				case ZONE:
				case BOOLEAN:
				case BOOL:
				case BIT:
				case VARBIT:
				case INT1:
				case INT2:
				case INT4:
				case INT8:
				case TINYINT:
				case SMALLINT:
				case INT:
				case INTEGER:
				case BIGINT:
				case FLOAT4:
				case FLOAT8:
				case REAL:
				case FLOAT:
				case DOUBLE:
				case NUMERIC:
				case DECIMAL:
				case CHAR:
				case VARCHAR:
				case NCHAR:
				case NVARCHAR:
				case DATE:
				case TIME:
				case TIMETZ:
				case TIMESTAMP:
				case TIMESTAMPTZ:
				case TEXT:
				case UUID:
				case VARBINARY:
				case BLOB:
				case BYTEA:
				case INET4:
				case INET:
				case INTERVAL:
				case VOID:
				case DOUBLE_QUOTE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(2540); ((Create_schema_statementContext)_localctx).schema_name = identifier();
					setState(2543);
					_la = _input.LA(1);
					if (_la==AUTHORIZATION) {
						{
						setState(2541); match(AUTHORIZATION);
						setState(2542); ((Create_schema_statementContext)_localctx).user_name = identifier();
						}
					}

					}
					break;
				case AUTHORIZATION:
					{
					setState(2545); match(AUTHORIZATION);
					setState(2546); ((Create_schema_statementContext)_localctx).user_name = identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_view_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public IdentifierContext identifier;
		public List<IdentifierContext> column_name = new ArrayList<IdentifierContext>();
		public IdentifierContext view_option_name;
		public IdentifierContext view_option_value;
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode UNION(int i) {
			return getToken(SQLParser.UNION, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> UNION() { return getTokens(SQLParser.UNION); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Query_specificationContext query_specification(int i) {
			return getRuleContext(Query_specificationContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public List<Query_specificationContext> query_specification() {
			return getRuleContexts(Query_specificationContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Create_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_view_statement(this);
		}
	}

	public final Create_view_statementContext create_view_statement() throws RecognitionException {
		Create_view_statementContext _localctx = new Create_view_statementContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_create_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2551); match(CREATE);
			setState(2554);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2552); match(OR);
				setState(2553); match(REPLACE);
				}
			}

			setState(2557);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(2556);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2559); match(VIEW);
			setState(2560); ((Create_view_statementContext)_localctx).name = schema_qualified_name();
			setState(2567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0)) {
				{
				{
				setState(2561); ((Create_view_statementContext)_localctx).identifier = identifier();
				((Create_view_statementContext)_localctx).column_name.add(((Create_view_statementContext)_localctx).identifier);
				setState(2563);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2562); match(COMMA);
					}
				}

				}
				}
				setState(2569);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2583);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2570); match(WITH);
				setState(2571); match(LEFT_PAREN);
				setState(2577); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2572); ((Create_view_statementContext)_localctx).view_option_name = identifier();
					setState(2575);
					_la = _input.LA(1);
					if (_la==EQUAL) {
						{
						setState(2573); match(EQUAL);
						setState(2574); ((Create_view_statementContext)_localctx).view_option_value = identifier();
						}
					}

					}
					}
					setState(2579); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0) );
				setState(2581); match(RIGHT_PAREN);
				}
			}

			setState(2585); match(AS);
			setState(2586); query_specification();
			setState(2594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==UNION) {
				{
				{
				setState(2587); match(UNION);
				setState(2589);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2588); match(ALL);
					}
				}

				setState(2591); query_specification();
				}
				}
				setState(2596);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext n;
		public Schema_qualified_nameContext paret_table;
		public IdentifierContext type_name;
		public IdentifierContext column_name;
		public Column_constraintContext column_constraint;
		public List<Column_constraintContext> col_constraint = new ArrayList<Column_constraintContext>();
		public On_commitContext on_commit() {
			return getRuleContext(On_commitContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public Table_spaceContext table_space() {
			return getRuleContext(Table_spaceContext.class,0);
		}
		public TerminalNode WITH(int i) {
			return getToken(SQLParser.WITH, i);
		}
		public TerminalNode INHERITS() { return getToken(SQLParser.INHERITS, 0); }
		public Table_bodyContext table_body(int i) {
			return getRuleContext(Table_bodyContext.class,i);
		}
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> OPTIONS() { return getTokens(SQLParser.OPTIONS); }
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode GLOBAL() { return getToken(SQLParser.GLOBAL, 0); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public Table_constraintContext table_constraint(int i) {
			return getRuleContext(Table_constraintContext.class,i);
		}
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public Storage_parameter_oidContext storage_parameter_oid() {
			return getRuleContext(Storage_parameter_oidContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public List<TerminalNode> WITH() { return getTokens(SQLParser.WITH); }
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public List<Table_constraintContext> table_constraint() {
			return getRuleContexts(Table_constraintContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<Table_bodyContext> table_body() {
			return getRuleContexts(Table_bodyContext.class);
		}
		public TerminalNode UNLOGGED() { return getToken(SQLParser.UNLOGGED, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode LOCAL() { return getToken(SQLParser.LOCAL, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OPTIONS(int i) {
			return getToken(SQLParser.OPTIONS, i);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Create_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_table_statement(this);
		}
	}

	public final Create_table_statementContext create_table_statement() throws RecognitionException {
		Create_table_statementContext _localctx = new Create_table_statementContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_create_table_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2597); match(CREATE);
			setState(2603);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
			case TEMP:
			case TEMPORARY:
				{
				setState(2599);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(2598);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(2601);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case UNLOGGED:
				{
				setState(2602); match(UNLOGGED);
				}
				break;
			case TABLE:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2605); match(TABLE);
			setState(2609);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2606); match(IF);
				setState(2607); match(NOT);
				setState(2608); match(EXISTS);
				}
			}

			setState(2611); ((Create_table_statementContext)_localctx).n = schema_qualified_name();
			setState(2681);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(2612); match(LEFT_PAREN);
				setState(2621);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSTRAINT) | (1L << EXCLUDE) | (1L << FOREIGN))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (LIKE - 81)) | (1L << (PRIMARY - 81)) | (1L << (REPLACE - 81)) | (1L << (UNIQUE - 81)) | (1L << (ADMIN - 81)) | (1L << (ALWAYS - 81)) | (1L << (ARRAY - 81)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (AVG - 145)) | (1L << (BETWEEN - 145)) | (1L << (BY - 145)) | (1L << (CACHE - 145)) | (1L << (CALLED - 145)) | (1L << (CLASS - 145)) | (1L << (CENTURY - 145)) | (1L << (CHARACTER - 145)) | (1L << (CHECK - 145)) | (1L << (CLUSTER - 145)) | (1L << (COLLECT - 145)) | (1L << (COALESCE - 145)) | (1L << (COLUMN - 145)) | (1L << (COMMENT - 145)) | (1L << (COMMENTS - 145)) | (1L << (COMMIT - 145)) | (1L << (CONCURRENTLY - 145)) | (1L << (CONFIGURATION - 145)) | (1L << (COST - 145)) | (1L << (COUNT - 145)) | (1L << (CUBE - 145)) | (1L << (CURRENT - 145)) | (1L << (CYCLE - 145)) | (1L << (DATA - 145)) | (1L << (DAY - 145)) | (1L << (DEC - 145)) | (1L << (DECADE - 145)) | (1L << (DEFINER - 145)) | (1L << (DICTIONARY - 145)) | (1L << (DISABLE - 145)) | (1L << (DOW - 145)) | (1L << (DOY - 145)) | (1L << (DROP - 145)) | (1L << (ENABLE - 145)) | (1L << (EPOCH - 145)) | (1L << (EVENT - 145)) | (1L << (EVERY - 145)) | (1L << (EXISTS - 145)) | (1L << (EXTENDED - 145)) | (1L << (EXTERNAL - 145)) | (1L << (EXTRACT - 145)) | (1L << (FAMILY - 145)) | (1L << (FILTER - 145)) | (1L << (FIRST - 145)) | (1L << (FORMAT - 145)) | (1L << (FUSION - 145)) | (1L << (GROUPING - 145)) | (1L << (HASH - 145)) | (1L << (INHERIT - 145)) | (1L << (INDEX - 145)) | (1L << (INCREMENT - 145)) | (1L << (INPUT - 145)) | (1L << (INSERT - 145)) | (1L << (INTERSECTION - 145)) | (1L << (ISCACHABLE - 145)) | (1L << (ISODOW - 145)) | (1L << (ISOYEAR - 145)) | (1L << (ISSTRICT - 145)) | (1L << (LANGUAGE - 145)) | (1L << (LARGE - 145)) | (1L << (LAST - 145)) | (1L << (LESS - 145)))) != 0) || ((((_la - 209)) & ~0x3f) == 0 && ((1L << (_la - 209)) & ((1L << (LIST - 209)) | (1L << (LOCATION - 209)) | (1L << (MAIN - 209)) | (1L << (MATCH - 209)) | (1L << (MAX - 209)) | (1L << (MAXVALUE - 209)) | (1L << (MICROSECONDS - 209)) | (1L << (MILLENNIUM - 209)) | (1L << (MILLISECONDS - 209)) | (1L << (MIN - 209)) | (1L << (MINVALUE - 209)) | (1L << (MINUTE - 209)) | (1L << (MONTH - 209)) | (1L << (NATIONAL - 209)) | (1L << (NO - 209)) | (1L << (NONE - 209)) | (1L << (NULLIF - 209)) | (1L << (OBJECT - 209)) | (1L << (ON - 209)) | (1L << (ONLY - 209)) | (1L << (OPTION - 209)) | (1L << (OPTIONS - 209)) | (1L << (OVER - 209)) | (1L << (OVERWRITE - 209)) | (1L << (PARSER - 209)) | (1L << (PARTIAL - 209)) | (1L << (PARTITION - 209)) | (1L << (PARTITIONS - 209)) | (1L << (PLAIN - 209)) | (1L << (PRECISION - 209)) | (1L << (PUBLIC - 209)) | (1L << (PURGE - 209)) | (1L << (QUARTER - 209)) | (1L << (RANGE - 209)) | (1L << (REGCONFIG - 209)) | (1L << (REGEXP - 209)) | (1L << (RENAME - 209)) | (1L << (REPLICA - 209)) | (1L << (RESET - 209)) | (1L << (RESTART - 209)) | (1L << (RLIKE - 209)) | (1L << (ROLLUP - 209)) | (1L << (SEARCH - 209)) | (1L << (SECOND - 209)) | (1L << (SECURITY - 209)) | (1L << (SERVER - 209)) | (1L << (SET - 209)) | (1L << (SIMILAR - 209)) | (1L << (SIMPLE - 209)) | (1L << (STABLE - 209)) | (1L << (START - 209)) | (1L << (STATISTICS - 209)) | (1L << (STDIN - 209)) | (1L << (STORAGE - 209)) | (1L << (STDDEV_POP - 209)) | (1L << (STDDEV_SAMP - 209)) | (1L << (SUBPARTITION - 209)) | (1L << (SUM - 209)) | (1L << (TABLESPACE - 209)) | (1L << (TEMPLATE - 209)) | (1L << (THAN - 209)))) != 0) || ((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & ((1L << (TIMEZONE - 273)) | (1L << (TIMEZONE_HOUR - 273)) | (1L << (TIMEZONE_MINUTE - 273)) | (1L << (TRIM - 273)) | (1L << (TO - 273)) | (1L << (TYPE - 273)) | (1L << (TYPES - 273)) | (1L << (UNKNOWN - 273)) | (1L << (UNLOGGED - 273)) | (1L << (USER - 273)) | (1L << (VALID - 273)) | (1L << (VALIDATE - 273)) | (1L << (VALUES - 273)) | (1L << (VAR_SAMP - 273)) | (1L << (VAR_POP - 273)) | (1L << (VARYING - 273)) | (1L << (VERSION - 273)) | (1L << (VOLATILE - 273)) | (1L << (WEEK - 273)) | (1L << (WINDOW - 273)) | (1L << (WRAPPER - 273)) | (1L << (YEAR - 273)) | (1L << (ZONE - 273)) | (1L << (BOOLEAN - 273)) | (1L << (BOOL - 273)) | (1L << (BIT - 273)) | (1L << (VARBIT - 273)) | (1L << (INT1 - 273)) | (1L << (INT2 - 273)) | (1L << (INT4 - 273)) | (1L << (INT8 - 273)) | (1L << (TINYINT - 273)) | (1L << (SMALLINT - 273)) | (1L << (INT - 273)) | (1L << (INTEGER - 273)) | (1L << (BIGINT - 273)) | (1L << (FLOAT4 - 273)) | (1L << (FLOAT8 - 273)) | (1L << (REAL - 273)) | (1L << (FLOAT - 273)) | (1L << (DOUBLE - 273)) | (1L << (NUMERIC - 273)) | (1L << (DECIMAL - 273)) | (1L << (CHAR - 273)) | (1L << (VARCHAR - 273)) | (1L << (NCHAR - 273)) | (1L << (NVARCHAR - 273)) | (1L << (DATE - 273)) | (1L << (TIME - 273)) | (1L << (TIMETZ - 273)) | (1L << (TIMESTAMP - 273)) | (1L << (TIMESTAMPTZ - 273)) | (1L << (TEXT - 273)) | (1L << (UUID - 273)) | (1L << (VARBINARY - 273)) | (1L << (BLOB - 273)) | (1L << (BYTEA - 273)) | (1L << (INET4 - 273)) | (1L << (INET - 273)) | (1L << (INTERVAL - 273)) | (1L << (VOID - 273)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0)) {
					{
					setState(2613); table_body();
					setState(2618);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2614); match(COMMA);
						setState(2615); table_body();
						}
						}
						setState(2620);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2623); match(RIGHT_PAREN);
				setState(2636);
				_la = _input.LA(1);
				if (_la==INHERITS) {
					{
					setState(2624); match(INHERITS);
					setState(2625); match(LEFT_PAREN);
					setState(2630); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2626); ((Create_table_statementContext)_localctx).paret_table = schema_qualified_name();
						setState(2628);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2627); match(COMMA);
							}
						}

						}
						}
						setState(2632); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0) );
					setState(2634); match(RIGHT_PAREN);
					}
				}

				setState(2638); storage_parameter_oid();
				setState(2639); on_commit();
				setState(2640); table_space();
				}
				break;
			case OF:
				{
				setState(2642); match(OF);
				setState(2643); ((Create_table_statementContext)_localctx).type_name = identifier();
				setState(2675);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2644); match(LEFT_PAREN);
					setState(2655);
					switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
					case 1:
						{
						{
						setState(2645); ((Create_table_statementContext)_localctx).column_name = identifier();
						setState(2646); match(WITH);
						setState(2647); match(OPTIONS);
						setState(2651);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,344,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(2648); ((Create_table_statementContext)_localctx).column_constraint = column_constraint();
								((Create_table_statementContext)_localctx).col_constraint.add(((Create_table_statementContext)_localctx).column_constraint);
								}
								} 
							}
							setState(2653);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,344,_ctx);
						}
						}
						}
						break;
					case 2:
						{
						setState(2654); table_constraint();
						}
						break;
					}
					setState(2670);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSTRAINT) | (1L << EXCLUDE) | (1L << FOREIGN))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (PRIMARY - 97)) | (1L << (UNIQUE - 97)) | (1L << (CHECK - 97)))) != 0) || _la==COMMA) {
						{
						setState(2668);
						switch (_input.LA(1)) {
						case COMMA:
							{
							setState(2657); match(COMMA);
							{
							setState(2658); ((Create_table_statementContext)_localctx).column_name = identifier();
							setState(2659); match(WITH);
							setState(2660); match(OPTIONS);
							setState(2664);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
							while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
								if ( _alt==1 ) {
									{
									{
									setState(2661); ((Create_table_statementContext)_localctx).column_constraint = column_constraint();
									((Create_table_statementContext)_localctx).col_constraint.add(((Create_table_statementContext)_localctx).column_constraint);
									}
									} 
								}
								setState(2666);
								_errHandler.sync(this);
								_alt = getInterpreter().adaptivePredict(_input,346,_ctx);
							}
							}
							}
							break;
						case CONSTRAINT:
						case EXCLUDE:
						case FOREIGN:
						case PRIMARY:
						case UNIQUE:
						case CHECK:
							{
							setState(2667); table_constraint();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(2672);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2673); match(RIGHT_PAREN);
					}
				}

				setState(2677); storage_parameter_oid();
				setState(2678); on_commit();
				setState(2679); table_space();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_bodyContext extends ParserRuleContext {
		public Table_constraintContext tabl_constraint;
		public IdentifierContext parent_table;
		public Like_optionContext like_option;
		public List<Like_optionContext> like_opt = new ArrayList<Like_optionContext>();
		public List<Like_optionContext> like_option() {
			return getRuleContexts(Like_optionContext.class);
		}
		public Like_optionContext like_option(int i) {
			return getRuleContext(Like_optionContext.class,i);
		}
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SQLParser.LIKE, 0); }
		public Table_column_definitionContext table_column_definition() {
			return getRuleContext(Table_column_definitionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_body(this);
		}
	}

	public final Table_bodyContext table_body() throws RecognitionException {
		Table_bodyContext _localctx = new Table_bodyContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_table_body);
		int _la;
		try {
			setState(2693);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2683); table_column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2684); ((Table_bodyContext)_localctx).tabl_constraint = table_constraint();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2685); match(LIKE);
				setState(2686); ((Table_bodyContext)_localctx).parent_table = identifier();
				setState(2690);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCLUDING || _la==INCLUDING) {
					{
					{
					setState(2687); ((Table_bodyContext)_localctx).like_option = like_option();
					((Table_bodyContext)_localctx).like_opt.add(((Table_bodyContext)_localctx).like_option);
					}
					}
					setState(2692);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_column_definitionContext extends ParserRuleContext {
		public IdentifierContext column_name;
		public Data_typeContext datatype;
		public IdentifierContext collation;
		public Column_constraintContext column_constraint;
		public List<Column_constraintContext> colmn_constraint = new ArrayList<Column_constraintContext>();
		public TerminalNode COLLATE() { return getToken(SQLParser.COLLATE, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Table_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_column_definition(this);
		}
	}

	public final Table_column_definitionContext table_column_definition() throws RecognitionException {
		Table_column_definitionContext _localctx = new Table_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_table_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2695); ((Table_column_definitionContext)_localctx).column_name = identifier();
			{
			setState(2696); ((Table_column_definitionContext)_localctx).datatype = data_type();
			}
			setState(2699);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(2697); match(COLLATE);
				setState(2698); ((Table_column_definitionContext)_localctx).collation = identifier();
				}
			}

			setState(2704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CONSTRAINT || _la==DEFAULT || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (NOT - 85)) | (1L << (NULL - 85)) | (1L << (PRIMARY - 85)) | (1L << (REFERENCES - 85)) | (1L << (UNIQUE - 85)))) != 0) || _la==CHECK) {
				{
				{
				setState(2701); ((Table_column_definitionContext)_localctx).column_constraint = column_constraint();
				((Table_column_definitionContext)_localctx).colmn_constraint.add(((Table_column_definitionContext)_localctx).column_constraint);
				}
				}
				setState(2706);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_optionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode INDEXES() { return getToken(SQLParser.INDEXES, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(SQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(SQLParser.DEFAULTS, 0); }
		public TerminalNode COMMENTS() { return getToken(SQLParser.COMMENTS, 0); }
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public TerminalNode EXCLUDING() { return getToken(SQLParser.EXCLUDING, 0); }
		public TerminalNode INCLUDING() { return getToken(SQLParser.INCLUDING, 0); }
		public Like_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLike_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLike_option(this);
		}
	}

	public final Like_optionContext like_option() throws RecognitionException {
		Like_optionContext _localctx = new Like_optionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_like_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2707);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2708);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CONSTRAINTS) | (1L << DEFAULTS))) != 0) || _la==COMMENTS || _la==INDEXES || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public IdentifierContext constraint_name;
		public IdentifierContext identifier;
		public List<IdentifierContext> column_name_unique = new ArrayList<IdentifierContext>();
		public Index_parametersContext index_parameters_unique;
		public List<IdentifierContext> column_name_pr_key = new ArrayList<IdentifierContext>();
		public Index_parametersContext index_parameters_pr_key;
		public IdentifierContext index_method;
		public IdentifierContext exclude_element;
		public List<IdentifierContext> operator = new ArrayList<IdentifierContext>();
		public IdentifierContext predicat;
		public List<IdentifierContext> column_name_for_key = new ArrayList<IdentifierContext>();
		public Schema_qualified_nameContext reftable;
		public List<IdentifierContext> refcolumn = new ArrayList<IdentifierContext>();
		public ActionContext action_on_delete;
		public ActionContext action_on_update;
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public List<TerminalNode> FULL() { return getTokens(SQLParser.FULL); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public Check_boolean_expressionContext check_boolean_expression() {
			return getRuleContext(Check_boolean_expressionContext.class,0);
		}
		public Index_parametersContext index_parameters() {
			return getRuleContext(Index_parametersContext.class,0);
		}
		public TerminalNode KEY() { return getToken(SQLParser.KEY, 0); }
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public List<TerminalNode> PARTIAL() { return getTokens(SQLParser.PARTIAL); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode SIMPLE(int i) {
			return getToken(SQLParser.SIMPLE, i);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode PARTIAL(int i) {
			return getToken(SQLParser.PARTIAL, i);
		}
		public List<TerminalNode> SIMPLE() { return getTokens(SQLParser.SIMPLE); }
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode EXCLUDE() { return getToken(SQLParser.EXCLUDE, 0); }
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode FULL(int i) {
			return getToken(SQLParser.FULL, i);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public TerminalNode REFERENCES() { return getToken(SQLParser.REFERENCES, 0); }
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public List<TerminalNode> MATCH() { return getTokens(SQLParser.MATCH); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode PRIMARY() { return getToken(SQLParser.PRIMARY, 0); }
		public TerminalNode MATCH(int i) {
			return getToken(SQLParser.MATCH, i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_constraint(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2712);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2710); match(CONSTRAINT);
				setState(2711); ((Table_constraintContext)_localctx).constraint_name = identifier();
				}
			}

			setState(2813);
			switch (_input.LA(1)) {
			case CHECK:
				{
				setState(2714); check_boolean_expression();
				}
				break;
			case UNIQUE:
				{
				{
				setState(2715); match(UNIQUE);
				setState(2716); match(LEFT_PAREN);
				setState(2717); ((Table_constraintContext)_localctx).identifier = identifier();
				((Table_constraintContext)_localctx).column_name_unique.add(((Table_constraintContext)_localctx).identifier);
				setState(2722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2718); match(COMMA);
					setState(2719); ((Table_constraintContext)_localctx).identifier = identifier();
					((Table_constraintContext)_localctx).column_name_unique.add(((Table_constraintContext)_localctx).identifier);
					}
					}
					setState(2724);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2725); match(RIGHT_PAREN);
				setState(2726); ((Table_constraintContext)_localctx).index_parameters_unique = index_parameters();
				}
				}
				break;
			case PRIMARY:
				{
				{
				setState(2728); match(PRIMARY);
				setState(2729); match(KEY);
				setState(2730); match(LEFT_PAREN);
				setState(2731); ((Table_constraintContext)_localctx).identifier = identifier();
				((Table_constraintContext)_localctx).column_name_pr_key.add(((Table_constraintContext)_localctx).identifier);
				setState(2736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2732); match(COMMA);
					setState(2733); ((Table_constraintContext)_localctx).identifier = identifier();
					((Table_constraintContext)_localctx).column_name_pr_key.add(((Table_constraintContext)_localctx).identifier);
					}
					}
					setState(2738);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2739); match(RIGHT_PAREN);
				setState(2740); ((Table_constraintContext)_localctx).index_parameters_pr_key = index_parameters();
				}
				}
				break;
			case EXCLUDE:
				{
				{
				setState(2742); match(EXCLUDE);
				setState(2745);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2743); match(USING);
					setState(2744); ((Table_constraintContext)_localctx).index_method = identifier();
					}
				}

				setState(2747); match(LEFT_PAREN);
				setState(2748); ((Table_constraintContext)_localctx).exclude_element = identifier();
				setState(2749); match(WITH);
				setState(2750); ((Table_constraintContext)_localctx).identifier = identifier();
				((Table_constraintContext)_localctx).operator.add(((Table_constraintContext)_localctx).identifier);
				setState(2755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2751); match(COMMA);
					setState(2752); ((Table_constraintContext)_localctx).identifier = identifier();
					((Table_constraintContext)_localctx).operator.add(((Table_constraintContext)_localctx).identifier);
					}
					}
					setState(2757);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2758); match(RIGHT_PAREN);
				setState(2759); index_parameters();
				setState(2765);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2760); match(WHERE);
					setState(2761); match(LEFT_PAREN);
					setState(2762); ((Table_constraintContext)_localctx).predicat = identifier();
					setState(2763); match(RIGHT_PAREN);
					}
				}

				}
				}
				break;
			case FOREIGN:
				{
				{
				setState(2767); match(FOREIGN);
				setState(2768); match(KEY);
				setState(2769); match(LEFT_PAREN);
				setState(2770); ((Table_constraintContext)_localctx).identifier = identifier();
				((Table_constraintContext)_localctx).column_name_for_key.add(((Table_constraintContext)_localctx).identifier);
				setState(2775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2771); match(COMMA);
					setState(2772); ((Table_constraintContext)_localctx).identifier = identifier();
					((Table_constraintContext)_localctx).column_name_for_key.add(((Table_constraintContext)_localctx).identifier);
					}
					}
					setState(2777);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2778); match(RIGHT_PAREN);
				setState(2779); match(REFERENCES);
				setState(2780); ((Table_constraintContext)_localctx).reftable = schema_qualified_name();
				setState(2792);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2781); match(LEFT_PAREN);
					setState(2782); ((Table_constraintContext)_localctx).identifier = identifier();
					((Table_constraintContext)_localctx).refcolumn.add(((Table_constraintContext)_localctx).identifier);
					setState(2787);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2783); match(COMMA);
						setState(2784); ((Table_constraintContext)_localctx).identifier = identifier();
						((Table_constraintContext)_localctx).refcolumn.add(((Table_constraintContext)_localctx).identifier);
						}
						}
						setState(2789);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2790); match(RIGHT_PAREN);
					}
				}

				setState(2810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==MATCH || _la==ON) {
					{
					setState(2808);
					switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
					case 1:
						{
						setState(2800);
						switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
						case 1:
							{
							{
							setState(2794); match(MATCH);
							setState(2795); match(FULL);
							}
							}
							break;
						case 2:
							{
							{
							setState(2796); match(MATCH);
							setState(2797); match(PARTIAL);
							}
							}
							break;
						case 3:
							{
							{
							setState(2798); match(MATCH);
							setState(2799); match(SIMPLE);
							}
							}
							break;
						}
						}
						break;
					case 2:
						{
						{
						setState(2802); match(ON);
						setState(2803); match(DELETE);
						setState(2804); ((Table_constraintContext)_localctx).action_on_delete = action();
						}
						}
						break;
					case 3:
						{
						{
						setState(2805); match(ON);
						setState(2806); match(UPDATE);
						setState(2807); ((Table_constraintContext)_localctx).action_on_update = action();
						}
						}
						break;
					}
					}
					setState(2812);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2818);
			switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
			case 1:
				{
				setState(2815); match(DEFERRABLE);
				}
				break;
			case 2:
				{
				{
				setState(2816); match(NOT);
				setState(2817); match(DEFERRABLE);
				}
				}
				break;
			}
			setState(2824);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				{
				{
				setState(2820); match(INITIALLY);
				setState(2821); match(DEFERRED);
				}
				}
				break;
			case 2:
				{
				{
				setState(2822); match(INITIALLY);
				setState(2823); match(IMMEDIATE);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public IdentifierContext constraint_name;
		public Data_typeContext default_expr_data;
		public Value_expressionContext default_expr;
		public Index_parametersContext index_params_unique;
		public Index_parametersContext index_params_pr_key;
		public Schema_qualified_nameContext reftable;
		public IdentifierContext refcolumn;
		public ActionContext action_on_delete;
		public ActionContext action_on_update;
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public TerminalNode FULL() { return getToken(SQLParser.FULL, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public Check_boolean_expressionContext check_boolean_expression() {
			return getRuleContext(Check_boolean_expressionContext.class,0);
		}
		public Index_parametersContext index_parameters() {
			return getRuleContext(Index_parametersContext.class,0);
		}
		public TerminalNode KEY() { return getToken(SQLParser.KEY, 0); }
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public TerminalNode PARTIAL() { return getToken(SQLParser.PARTIAL, 0); }
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode NOT(int i) {
			return getToken(SQLParser.NOT, i);
		}
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode SIMPLE() { return getToken(SQLParser.SIMPLE, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public TerminalNode REFERENCES() { return getToken(SQLParser.REFERENCES, 0); }
		public TerminalNode MATCH() { return getToken(SQLParser.MATCH, 0); }
		public List<TerminalNode> NOT() { return getTokens(SQLParser.NOT); }
		public TerminalNode PRIMARY() { return getToken(SQLParser.PRIMARY, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_constraint(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2828);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2826); match(CONSTRAINT);
				setState(2827); ((Column_constraintContext)_localctx).constraint_name = identifier();
				}
			}

			setState(2865);
			switch (_input.LA(1)) {
			case NOT:
				{
				setState(2830); match(NOT);
				setState(2831); match(NULL);
				}
				break;
			case NULL:
				{
				setState(2832); match(NULL);
				}
				break;
			case CHECK:
				{
				setState(2833); check_boolean_expression();
				}
				break;
			case DEFAULT:
				{
				setState(2834); match(DEFAULT);
				setState(2837);
				switch ( getInterpreter().adaptivePredict(_input,371,_ctx) ) {
				case 1:
					{
					setState(2835); ((Column_constraintContext)_localctx).default_expr_data = data_type();
					}
					break;
				case 2:
					{
					setState(2836); ((Column_constraintContext)_localctx).default_expr = value_expression();
					}
					break;
				}
				}
				break;
			case UNIQUE:
				{
				{
				setState(2839); match(UNIQUE);
				setState(2840); ((Column_constraintContext)_localctx).index_params_unique = index_parameters();
				}
				}
				break;
			case PRIMARY:
				{
				{
				setState(2841); match(PRIMARY);
				setState(2842); match(KEY);
				setState(2843); ((Column_constraintContext)_localctx).index_params_pr_key = index_parameters();
				}
				}
				break;
			case REFERENCES:
				{
				{
				setState(2844); match(REFERENCES);
				setState(2845); ((Column_constraintContext)_localctx).reftable = schema_qualified_name();
				{
				{
				setState(2846); ((Column_constraintContext)_localctx).refcolumn = identifier();
				}
				}
				setState(2853);
				switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
				case 1:
					{
					setState(2847); match(MATCH);
					setState(2848); match(FULL);
					}
					break;
				case 2:
					{
					setState(2849); match(MATCH);
					setState(2850); match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(2851); match(MATCH);
					setState(2852); match(SIMPLE);
					}
					break;
				}
				setState(2858);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(2855); match(ON);
					setState(2856); match(DELETE);
					setState(2857); ((Column_constraintContext)_localctx).action_on_delete = action();
					}
					break;
				}
				setState(2863);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(2860); match(ON);
					setState(2861); match(UPDATE);
					setState(2862); ((Column_constraintContext)_localctx).action_on_update = action();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2870);
			switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
			case 1:
				{
				setState(2867); match(DEFERRABLE);
				}
				break;
			case 2:
				{
				{
				setState(2868); match(NOT);
				setState(2869); match(DEFERRABLE);
				}
				}
				break;
			}
			setState(2876);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				{
				setState(2872); match(INITIALLY);
				setState(2873); match(DEFERRED);
				}
				}
				break;
			case 2:
				{
				{
				setState(2874); match(INITIALLY);
				setState(2875); match(IMMEDIATE);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_boolean_expressionContext extends ParserRuleContext {
		public Value_expressionContext expression;
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public Check_boolean_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_boolean_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCheck_boolean_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCheck_boolean_expression(this);
		}
	}

	public final Check_boolean_expressionContext check_boolean_expression() throws RecognitionException {
		Check_boolean_expressionContext _localctx = new Check_boolean_expressionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_check_boolean_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2878); match(CHECK);
			setState(2880); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2879); match(LEFT_PAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2882); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,378,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2884); ((Check_boolean_expressionContext)_localctx).expression = value_expression();
			setState(2886); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2885); match(RIGHT_PAREN);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2888); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,379,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_parameterContext extends ParserRuleContext {
		public IdentifierContext storage_param;
		public Value_expressionContext value;
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Storage_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStorage_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStorage_parameter(this);
		}
	}

	public final Storage_parameterContext storage_parameter() throws RecognitionException {
		Storage_parameterContext _localctx = new Storage_parameterContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_storage_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2890); match(LEFT_PAREN);
			setState(2899); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2891); ((Storage_parameterContext)_localctx).storage_param = identifier();
				setState(2894);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(2892); match(EQUAL);
					setState(2893); ((Storage_parameterContext)_localctx).value = value_expression();
					}
				}

				setState(2897);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2896); match(COMMA);
					}
				}

				}
				}
				setState(2901); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0) );
			setState(2903); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_storage_parameterContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public With_storage_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_storage_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWith_storage_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWith_storage_parameter(this);
		}
	}

	public final With_storage_parameterContext with_storage_parameter() throws RecognitionException {
		With_storage_parameterContext _localctx = new With_storage_parameterContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_with_storage_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2905); match(WITH);
			setState(2906); storage_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_parameter_oidContext extends ParserRuleContext {
		public TerminalNode OIDS() { return getToken(SQLParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public Storage_parameter_oidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_parameter_oid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStorage_parameter_oid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStorage_parameter_oid(this);
		}
	}

	public final Storage_parameter_oidContext storage_parameter_oid() throws RecognitionException {
		Storage_parameter_oidContext _localctx = new Storage_parameter_oidContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_storage_parameter_oid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2913);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				{
				setState(2908); with_storage_parameter();
				}
				break;
			case 2:
				{
				{
				setState(2909); match(WITH);
				setState(2910); match(OIDS);
				}
				}
				break;
			case 3:
				{
				{
				setState(2911); match(WITHOUT);
				setState(2912); match(OIDS);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_commitContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(SQLParser.PRESERVE, 0); }
		public TerminalNode COMMIT() { return getToken(SQLParser.COMMIT, 0); }
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public On_commitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_commit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOn_commit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOn_commit(this);
		}
	}

	public final On_commitContext on_commit() throws RecognitionException {
		On_commitContext _localctx = new On_commitContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_on_commit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2924);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2915); match(ON);
				setState(2916); match(COMMIT);
				setState(2922);
				switch (_input.LA(1)) {
				case PRESERVE:
					{
					{
					setState(2917); match(PRESERVE);
					setState(2918); match(ROWS);
					}
					}
					break;
				case DELETE:
					{
					{
					setState(2919); match(DELETE);
					setState(2920); match(ROWS);
					}
					}
					break;
				case DROP:
					{
					setState(2921); match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_spaceContext extends ParserRuleContext {
		public IdentifierContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_spaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_space; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_space(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_space(this);
		}
	}

	public final Table_spaceContext table_space() throws RecognitionException {
		Table_spaceContext _localctx = new Table_spaceContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_table_space);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2928);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2926); match(TABLESPACE);
				setState(2927); ((Table_spaceContext)_localctx).tablespace = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAction(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_action);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2936);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				setState(2930); match(RESTRICT);
				}
				break;
			case 2:
				{
				setState(2931); match(CASCADE);
				}
				break;
			case 3:
				{
				setState(2932); match(SET);
				setState(2933); match(NULL);
				}
				break;
			case 4:
				{
				setState(2934); match(SET);
				setState(2935); match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_parametersContext extends ParserRuleContext {
		public IdentifierContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public Index_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndex_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndex_parameters(this);
		}
	}

	public final Index_parametersContext index_parameters() throws RecognitionException {
		Index_parametersContext _localctx = new Index_parametersContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_index_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2939);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2938); with_storage_parameter();
				}
			}

			setState(2945);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2941); match(USING);
				setState(2942); match(INDEX);
				setState(2943); match(TABLESPACE);
				setState(2944); ((Index_parametersContext)_localctx).tablespace = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementsContext extends ParserRuleContext {
		public Field_elementContext field_element(int i) {
			return getRuleContext(Field_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Field_elementContext> field_element() {
			return getRuleContexts(Field_elementContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Table_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_elements(this);
		}
	}

	public final Table_elementsContext table_elements() throws RecognitionException {
		Table_elementsContext _localctx = new Table_elementsContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_table_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2947); match(LEFT_PAREN);
			setState(2948); field_element();
			setState(2953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2949); match(COMMA);
				setState(2950); field_element();
				}
				}
				setState(2955);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2956); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_elementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Field_typeContext field_type() {
			return getRuleContext(Field_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Field_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterField_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitField_element(this);
		}
	}

	public final Field_elementContext field_element() throws RecognitionException {
		Field_elementContext _localctx = new Field_elementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_field_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2958); ((Field_elementContext)_localctx).name = identifier();
			setState(2959); field_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_typeContext extends ParserRuleContext {
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Field_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterField_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitField_type(this);
		}
	}

	public final Field_typeContext field_type() throws RecognitionException {
		Field_typeContext _localctx = new Field_typeContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_field_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2961); data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_clauseContext extends ParserRuleContext {
		public List<ParamContext> param() {
			return getRuleContexts(ParamContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public ParamContext param(int i) {
			return getRuleContext(ParamContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterParam_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitParam_clause(this);
		}
	}

	public final Param_clauseContext param_clause() throws RecognitionException {
		Param_clauseContext _localctx = new Param_clauseContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_param_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2963); match(WITH);
			setState(2964); match(LEFT_PAREN);
			setState(2965); param();
			setState(2970);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2966); match(COMMA);
				setState(2967); param();
				}
				}
				setState(2972);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2973); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamContext extends ParserRuleContext {
		public IdentifierContext key;
		public Numeric_value_expressionContext value;
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitParam(this);
		}
	}

	public final ParamContext param() throws RecognitionException {
		ParamContext _localctx = new ParamContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2975); ((ParamContext)_localctx).key = identifier();
			setState(2976); match(EQUAL);
			setState(2977); ((ParamContext)_localctx).value = numeric_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_specifierContext extends ParserRuleContext {
		public IdentifierContext m;
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Method_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterMethod_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitMethod_specifier(this);
		}
	}

	public final Method_specifierContext method_specifier() throws RecognitionException {
		Method_specifierContext _localctx = new Method_specifierContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_method_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2979); match(USING);
			setState(2980); ((Method_specifierContext)_localctx).m = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_space_specifierContext extends ParserRuleContext {
		public Table_space_nameContext table_space_name() {
			return getRuleContext(Table_space_nameContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public Table_space_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_space_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_space_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_space_specifier(this);
		}
	}

	public final Table_space_specifierContext table_space_specifier() throws RecognitionException {
		Table_space_specifierContext _localctx = new Table_space_specifierContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_table_space_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2982); match(TABLESPACE);
			setState(2983); table_space_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_space_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_space_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_space_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_space_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_space_name(this);
		}
	}

	public final Table_space_nameContext table_space_name() throws RecognitionException {
		Table_space_nameContext _localctx = new Table_space_nameContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_table_space_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2985); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_partitioning_clausesContext extends ParserRuleContext {
		public Column_partitionsContext column_partitions() {
			return getRuleContext(Column_partitionsContext.class,0);
		}
		public Hash_partitionsContext hash_partitions() {
			return getRuleContext(Hash_partitionsContext.class,0);
		}
		public List_partitionsContext list_partitions() {
			return getRuleContext(List_partitionsContext.class,0);
		}
		public Range_partitionsContext range_partitions() {
			return getRuleContext(Range_partitionsContext.class,0);
		}
		public Table_partitioning_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_partitioning_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_partitioning_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_partitioning_clauses(this);
		}
	}

	public final Table_partitioning_clausesContext table_partitioning_clauses() throws RecognitionException {
		Table_partitioning_clausesContext _localctx = new Table_partitioning_clausesContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_table_partitioning_clauses);
		try {
			setState(2991);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2987); range_partitions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2988); hash_partitions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2989); list_partitions();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2990); column_partitions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partitionsContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(SQLParser.RANGE, 0); }
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Range_value_clause_listContext range_value_clause_list() {
			return getRuleContext(Range_value_clause_listContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public Range_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRange_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRange_partitions(this);
		}
	}

	public final Range_partitionsContext range_partitions() throws RecognitionException {
		Range_partitionsContext _localctx = new Range_partitionsContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_range_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2993); match(PARTITION);
			setState(2994); match(BY);
			setState(2995); match(RANGE);
			setState(2996); match(LEFT_PAREN);
			setState(2997); column_reference_list();
			setState(2998); match(RIGHT_PAREN);
			setState(2999); match(LEFT_PAREN);
			setState(3000); range_value_clause_list();
			setState(3001); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_value_clause_listContext extends ParserRuleContext {
		public Range_value_clauseContext range_value_clause(int i) {
			return getRuleContext(Range_value_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Range_value_clauseContext> range_value_clause() {
			return getRuleContexts(Range_value_clauseContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Range_value_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_value_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRange_value_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRange_value_clause_list(this);
		}
	}

	public final Range_value_clause_listContext range_value_clause_list() throws RecognitionException {
		Range_value_clause_listContext _localctx = new Range_value_clause_listContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_range_value_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3003); range_value_clause();
			setState(3008);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3004); match(COMMA);
				setState(3005); range_value_clause();
				}
				}
				setState(3010);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_value_clauseContext extends ParserRuleContext {
		public TerminalNode THAN() { return getToken(SQLParser.THAN, 0); }
		public TerminalNode LESS() { return getToken(SQLParser.LESS, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(SQLParser.MAXVALUE, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public Range_value_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_value_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRange_value_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRange_value_clause(this);
		}
	}

	public final Range_value_clauseContext range_value_clause() throws RecognitionException {
		Range_value_clauseContext _localctx = new Range_value_clauseContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_range_value_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3011); match(PARTITION);
			setState(3012); partition_name();
			setState(3013); match(VALUES);
			setState(3014); match(LESS);
			setState(3015); match(THAN);
			setState(3027);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3016); match(LEFT_PAREN);
				setState(3017); value_expression();
				setState(3018); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3021);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3020); match(LEFT_PAREN);
					}
				}

				setState(3023); match(MAXVALUE);
				setState(3025);
				switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					setState(3024); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partitionsContext extends ParserRuleContext {
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode HASH() { return getToken(SQLParser.HASH, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public Hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterHash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitHash_partitions(this);
		}
	}

	public final Hash_partitionsContext hash_partitions() throws RecognitionException {
		Hash_partitionsContext _localctx = new Hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_hash_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3029); match(PARTITION);
			setState(3030); match(BY);
			setState(3031); match(HASH);
			setState(3032); match(LEFT_PAREN);
			setState(3033); column_reference_list();
			setState(3034); match(RIGHT_PAREN);
			setState(3040);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3035); match(LEFT_PAREN);
				setState(3036); individual_hash_partitions();
				setState(3037); match(RIGHT_PAREN);
				}
				break;
			case PARTITIONS:
				{
				setState(3039); hash_partitions_by_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Individual_hash_partitionsContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Individual_hash_partitionContext> individual_hash_partition() {
			return getRuleContexts(Individual_hash_partitionContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Individual_hash_partitionContext individual_hash_partition(int i) {
			return getRuleContext(Individual_hash_partitionContext.class,i);
		}
		public Individual_hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndividual_hash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndividual_hash_partitions(this);
		}
	}

	public final Individual_hash_partitionsContext individual_hash_partitions() throws RecognitionException {
		Individual_hash_partitionsContext _localctx = new Individual_hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_individual_hash_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3042); individual_hash_partition();
			setState(3047);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3043); match(COMMA);
				setState(3044); individual_hash_partition();
				}
				}
				setState(3049);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Individual_hash_partitionContext extends ParserRuleContext {
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public Individual_hash_partitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndividual_hash_partition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndividual_hash_partition(this);
		}
	}

	public final Individual_hash_partitionContext individual_hash_partition() throws RecognitionException {
		Individual_hash_partitionContext _localctx = new Individual_hash_partitionContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_individual_hash_partition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3050); match(PARTITION);
			setState(3051); partition_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partitions_by_quantityContext extends ParserRuleContext {
		public Numeric_value_expressionContext quantity;
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(SQLParser.PARTITIONS, 0); }
		public Hash_partitions_by_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions_by_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterHash_partitions_by_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitHash_partitions_by_quantity(this);
		}
	}

	public final Hash_partitions_by_quantityContext hash_partitions_by_quantity() throws RecognitionException {
		Hash_partitions_by_quantityContext _localctx = new Hash_partitions_by_quantityContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_hash_partitions_by_quantity);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3053); match(PARTITIONS);
			setState(3054); ((Hash_partitions_by_quantityContext)_localctx).quantity = numeric_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partitionsContext extends ParserRuleContext {
		public List_value_clause_listContext list_value_clause_list() {
			return getRuleContext(List_value_clause_listContext.class,0);
		}
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode LIST() { return getToken(SQLParser.LIST, 0); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterList_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitList_partitions(this);
		}
	}

	public final List_partitionsContext list_partitions() throws RecognitionException {
		List_partitionsContext _localctx = new List_partitionsContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_list_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3056); match(PARTITION);
			setState(3057); match(BY);
			setState(3058); match(LIST);
			setState(3059); match(LEFT_PAREN);
			setState(3060); column_reference_list();
			setState(3061); match(RIGHT_PAREN);
			setState(3062); match(LEFT_PAREN);
			setState(3063); list_value_clause_list();
			setState(3064); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_value_clause_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<List_value_partitionContext> list_value_partition() {
			return getRuleContexts(List_value_partitionContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List_value_partitionContext list_value_partition(int i) {
			return getRuleContext(List_value_partitionContext.class,i);
		}
		public List_value_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_value_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterList_value_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitList_value_clause_list(this);
		}
	}

	public final List_value_clause_listContext list_value_clause_list() throws RecognitionException {
		List_value_clause_listContext _localctx = new List_value_clause_listContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_list_value_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3066); list_value_partition();
			setState(3071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3067); match(COMMA);
				setState(3068); list_value_partition();
				}
				}
				setState(3073);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_value_partitionContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public In_value_listContext in_value_list() {
			return getRuleContext(In_value_listContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public List_value_partitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_value_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterList_value_partition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitList_value_partition(this);
		}
	}

	public final List_value_partitionContext list_value_partition() throws RecognitionException {
		List_value_partitionContext _localctx = new List_value_partitionContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_list_value_partition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3074); match(PARTITION);
			setState(3075); partition_name();
			setState(3076); match(VALUES);
			setState(3078);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3077); match(IN);
				}
			}

			setState(3080); match(LEFT_PAREN);
			setState(3081); in_value_list();
			setState(3082); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_partitionsContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public Table_elementsContext table_elements() {
			return getRuleContext(Table_elementsContext.class,0);
		}
		public Column_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_partitions(this);
		}
	}

	public final Column_partitionsContext column_partitions() throws RecognitionException {
		Column_partitionsContext _localctx = new Column_partitionsContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_column_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3084); match(PARTITION);
			setState(3085); match(BY);
			setState(3086); match(COLUMN);
			setState(3087); table_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_by_columnsContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Partition_by_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_by_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPartition_by_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPartition_by_columns(this);
		}
	}

	public final Partition_by_columnsContext partition_by_columns() throws RecognitionException {
		Partition_by_columnsContext _localctx = new Partition_by_columnsContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_partition_by_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3089); match(PARTITION);
			setState(3090); match(BY);
			setState(3091); schema_qualified_name();
			setState(3096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3092); match(COMMA);
				setState(3093); schema_qualified_name();
				}
				}
				setState(3098);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Partition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPartition_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPartition_name(this);
		}
	}

	public final Partition_nameContext partition_name() throws RecognitionException {
		Partition_nameContext _localctx = new Partition_nameContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_partition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3099); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_statementContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode PURGE() { return getToken(SQLParser.PURGE, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDrop_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDrop_table_statement(this);
		}
	}

	public final Drop_table_statementContext drop_table_statement() throws RecognitionException {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_drop_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3101); match(DROP);
			setState(3102); match(TABLE);
			setState(3103); schema_qualified_name();
			setState(3105);
			_la = _input.LA(1);
			if (_la==PURGE) {
				{
				setState(3104); match(PURGE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode QuotedIdentifier() { return getToken(SQLParser.QuotedIdentifier, 0); }
		public Nonreserved_keywordsContext nonreserved_keywords() {
			return getRuleContext(Nonreserved_keywordsContext.class,0);
		}
		public TerminalNode Identifier() { return getToken(SQLParser.Identifier, 0); }
		public TerminalNode DOUBLE_QUOTE(int i) {
			return getToken(SQLParser.DOUBLE_QUOTE, i);
		}
		public List<TerminalNode> DOUBLE_QUOTE() { return getTokens(SQLParser.DOUBLE_QUOTE); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_identifier);
		int _la;
		try {
			setState(3115);
			switch (_input.LA(1)) {
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(3107);
				_la = _input.LA(1);
				if ( !(_la==Identifier || _la==QuotedIdentifier) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case REPLACE:
			case ADMIN:
			case ALWAYS:
			case ARRAY:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVER:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STDIN:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case DOUBLE_QUOTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3109);
				_la = _input.LA(1);
				if (_la==DOUBLE_QUOTE) {
					{
					setState(3108); match(DOUBLE_QUOTE);
					}
				}

				setState(3111); nonreserved_keywords();
				setState(3113);
				switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					setState(3112); match(DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nonreserved_keywordsContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(SQLParser.TIMESTAMP, 0); }
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode BIT() { return getToken(SQLParser.BIT, 0); }
		public TerminalNode VAR_SAMP() { return getToken(SQLParser.VAR_SAMP, 0); }
		public TerminalNode STDDEV_POP() { return getToken(SQLParser.STDDEV_POP, 0); }
		public TerminalNode COALESCE() { return getToken(SQLParser.COALESCE, 0); }
		public TerminalNode SUM() { return getToken(SQLParser.SUM, 0); }
		public TerminalNode INT() { return getToken(SQLParser.INT, 0); }
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public TerminalNode QUARTER() { return getToken(SQLParser.QUARTER, 0); }
		public TerminalNode EVERY() { return getToken(SQLParser.EVERY, 0); }
		public TerminalNode NVARCHAR() { return getToken(SQLParser.NVARCHAR, 0); }
		public TerminalNode INT1() { return getToken(SQLParser.INT1, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode SECOND() { return getToken(SQLParser.SECOND, 0); }
		public TerminalNode ROLLUP() { return getToken(SQLParser.ROLLUP, 0); }
		public TerminalNode MAX() { return getToken(SQLParser.MAX, 0); }
		public TerminalNode OPTIONS() { return getToken(SQLParser.OPTIONS, 0); }
		public TerminalNode COUNT() { return getToken(SQLParser.COUNT, 0); }
		public TerminalNode YEAR() { return getToken(SQLParser.YEAR, 0); }
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TerminalNode SIMILAR() { return getToken(SQLParser.SIMILAR, 0); }
		public TerminalNode COST() { return getToken(SQLParser.COST, 0); }
		public TerminalNode RLIKE() { return getToken(SQLParser.RLIKE, 0); }
		public TerminalNode BYTEA() { return getToken(SQLParser.BYTEA, 0); }
		public TerminalNode PURGE() { return getToken(SQLParser.PURGE, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode INTERVAL() { return getToken(SQLParser.INTERVAL, 0); }
		public TerminalNode CHAR() { return getToken(SQLParser.CHAR, 0); }
		public TerminalNode VARBINARY() { return getToken(SQLParser.VARBINARY, 0); }
		public TerminalNode EXTENDED() { return getToken(SQLParser.EXTENDED, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode VARCHAR() { return getToken(SQLParser.VARCHAR, 0); }
		public TerminalNode AVG() { return getToken(SQLParser.AVG, 0); }
		public TerminalNode INET4() { return getToken(SQLParser.INET4, 0); }
		public TerminalNode FLOAT8() { return getToken(SQLParser.FLOAT8, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode VAR_POP() { return getToken(SQLParser.VAR_POP, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode ISOYEAR() { return getToken(SQLParser.ISOYEAR, 0); }
		public TerminalNode MINUTE() { return getToken(SQLParser.MINUTE, 0); }
		public TerminalNode LAST() { return getToken(SQLParser.LAST, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode PUBLIC() { return getToken(SQLParser.PUBLIC, 0); }
		public TerminalNode VALIDATE() { return getToken(SQLParser.VALIDATE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SQLParser.CONCURRENTLY, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode OVERWRITE() { return getToken(SQLParser.OVERWRITE, 0); }
		public TerminalNode INET() { return getToken(SQLParser.INET, 0); }
		public TerminalNode NCHAR() { return getToken(SQLParser.NCHAR, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(SQLParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMETZ() { return getToken(SQLParser.TIMETZ, 0); }
		public TerminalNode INHERIT() { return getToken(SQLParser.INHERIT, 0); }
		public TerminalNode CACHE() { return getToken(SQLParser.CACHE, 0); }
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode INPUT() { return getToken(SQLParser.INPUT, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode MONTH() { return getToken(SQLParser.MONTH, 0); }
		public TerminalNode BLOB() { return getToken(SQLParser.BLOB, 0); }
		public TerminalNode DEC() { return getToken(SQLParser.DEC, 0); }
		public TerminalNode RESTART() { return getToken(SQLParser.RESTART, 0); }
		public TerminalNode INTERSECTION() { return getToken(SQLParser.INTERSECTION, 0); }
		public TerminalNode VOLATILE() { return getToken(SQLParser.VOLATILE, 0); }
		public TerminalNode REGCONFIG() { return getToken(SQLParser.REGCONFIG, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public TerminalNode LESS() { return getToken(SQLParser.LESS, 0); }
		public TerminalNode MILLENNIUM() { return getToken(SQLParser.MILLENNIUM, 0); }
		public TerminalNode SIMPLE() { return getToken(SQLParser.SIMPLE, 0); }
		public TerminalNode CALLED() { return getToken(SQLParser.CALLED, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode ISSTRICT() { return getToken(SQLParser.ISSTRICT, 0); }
		public TerminalNode ARRAY() { return getToken(SQLParser.ARRAY, 0); }
		public TerminalNode TINYINT() { return getToken(SQLParser.TINYINT, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public TerminalNode STDIN() { return getToken(SQLParser.STDIN, 0); }
		public TerminalNode GROUPING() { return getToken(SQLParser.GROUPING, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public TerminalNode TIMESTAMPTZ() { return getToken(SQLParser.TIMESTAMPTZ, 0); }
		public TerminalNode NATIONAL() { return getToken(SQLParser.NATIONAL, 0); }
		public TerminalNode BETWEEN() { return getToken(SQLParser.BETWEEN, 0); }
		public TerminalNode DATE() { return getToken(SQLParser.DATE, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public TerminalNode UNLOGGED() { return getToken(SQLParser.UNLOGGED, 0); }
		public TerminalNode FUSION() { return getToken(SQLParser.FUSION, 0); }
		public TerminalNode INCREMENT() { return getToken(SQLParser.INCREMENT, 0); }
		public TerminalNode SECURITY() { return getToken(SQLParser.SECURITY, 0); }
		public TerminalNode COMMIT() { return getToken(SQLParser.COMMIT, 0); }
		public TerminalNode INT2() { return getToken(SQLParser.INT2, 0); }
		public TerminalNode VARBIT() { return getToken(SQLParser.VARBIT, 0); }
		public TerminalNode REPLICA() { return getToken(SQLParser.REPLICA, 0); }
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode WEEK() { return getToken(SQLParser.WEEK, 0); }
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public TerminalNode FIRST() { return getToken(SQLParser.FIRST, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode NULLIF() { return getToken(SQLParser.NULLIF, 0); }
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public TerminalNode TRIM() { return getToken(SQLParser.TRIM, 0); }
		public TerminalNode VOID() { return getToken(SQLParser.VOID, 0); }
		public TerminalNode DOUBLE() { return getToken(SQLParser.DOUBLE, 0); }
		public TerminalNode INSERT() { return getToken(SQLParser.INSERT, 0); }
		public TerminalNode LOCATION() { return getToken(SQLParser.LOCATION, 0); }
		public TerminalNode CENTURY() { return getToken(SQLParser.CENTURY, 0); }
		public TerminalNode LIST() { return getToken(SQLParser.LIST, 0); }
		public TerminalNode OVER() { return getToken(SQLParser.OVER, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public TerminalNode CYCLE() { return getToken(SQLParser.CYCLE, 0); }
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode ISCACHABLE() { return getToken(SQLParser.ISCACHABLE, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode SMALLINT() { return getToken(SQLParser.SMALLINT, 0); }
		public TerminalNode ISODOW() { return getToken(SQLParser.ISODOW, 0); }
		public TerminalNode UUID() { return getToken(SQLParser.UUID, 0); }
		public TerminalNode FORMAT() { return getToken(SQLParser.FORMAT, 0); }
		public TerminalNode WINDOW() { return getToken(SQLParser.WINDOW, 0); }
		public TerminalNode DOY() { return getToken(SQLParser.DOY, 0); }
		public TerminalNode COMMENTS() { return getToken(SQLParser.COMMENTS, 0); }
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode MIN() { return getToken(SQLParser.MIN, 0); }
		public TerminalNode FILTER() { return getToken(SQLParser.FILTER, 0); }
		public TerminalNode PRECISION() { return getToken(SQLParser.PRECISION, 0); }
		public TerminalNode SUBPARTITION() { return getToken(SQLParser.SUBPARTITION, 0); }
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public TerminalNode DOW() { return getToken(SQLParser.DOW, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLParser.EXTERNAL, 0); }
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode MINVALUE() { return getToken(SQLParser.MINVALUE, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SQLParser.MICROSECONDS, 0); }
		public TerminalNode DISABLE() { return getToken(SQLParser.DISABLE, 0); }
		public TerminalNode CLUSTER() { return getToken(SQLParser.CLUSTER, 0); }
		public TerminalNode HASH() { return getToken(SQLParser.HASH, 0); }
		public TerminalNode DECIMAL() { return getToken(SQLParser.DECIMAL, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode ENABLE() { return getToken(SQLParser.ENABLE, 0); }
		public TerminalNode THAN() { return getToken(SQLParser.THAN, 0); }
		public TerminalNode REGEXP() { return getToken(SQLParser.REGEXP, 0); }
		public TerminalNode EPOCH() { return getToken(SQLParser.EPOCH, 0); }
		public TerminalNode ADMIN() { return getToken(SQLParser.ADMIN, 0); }
		public TerminalNode TIMEZONE() { return getToken(SQLParser.TIMEZONE, 0); }
		public TerminalNode FLOAT4() { return getToken(SQLParser.FLOAT4, 0); }
		public TerminalNode CUBE() { return getToken(SQLParser.CUBE, 0); }
		public TerminalNode PARTIAL() { return getToken(SQLParser.PARTIAL, 0); }
		public TerminalNode UNKNOWN() { return getToken(SQLParser.UNKNOWN, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(SQLParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode BOOLEAN() { return getToken(SQLParser.BOOLEAN, 0); }
		public TerminalNode CHARACTER() { return getToken(SQLParser.CHARACTER, 0); }
		public TerminalNode VALID() { return getToken(SQLParser.VALID, 0); }
		public TerminalNode STABLE() { return getToken(SQLParser.STABLE, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public TerminalNode REAL() { return getToken(SQLParser.REAL, 0); }
		public TerminalNode DAY() { return getToken(SQLParser.DAY, 0); }
		public TerminalNode COMMENT() { return getToken(SQLParser.COMMENT, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode PLAIN() { return getToken(SQLParser.PLAIN, 0); }
		public TerminalNode COLLECT() { return getToken(SQLParser.COLLECT, 0); }
		public TerminalNode BIGINT() { return getToken(SQLParser.BIGINT, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(SQLParser.STDDEV_SAMP, 0); }
		public TerminalNode DEFINER() { return getToken(SQLParser.DEFINER, 0); }
		public TerminalNode RANGE() { return getToken(SQLParser.RANGE, 0); }
		public TerminalNode FLOAT() { return getToken(SQLParser.FLOAT, 0); }
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public TerminalNode EXTRACT() { return getToken(SQLParser.EXTRACT, 0); }
		public TerminalNode TYPES() { return getToken(SQLParser.TYPES, 0); }
		public TerminalNode INT4() { return getToken(SQLParser.INT4, 0); }
		public TerminalNode MAXVALUE() { return getToken(SQLParser.MAXVALUE, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SQLParser.MILLISECONDS, 0); }
		public TerminalNode MAIN() { return getToken(SQLParser.MAIN, 0); }
		public TerminalNode NUMERIC() { return getToken(SQLParser.NUMERIC, 0); }
		public TerminalNode BOOL() { return getToken(SQLParser.BOOL, 0); }
		public TerminalNode MATCH() { return getToken(SQLParser.MATCH, 0); }
		public TerminalNode START() { return getToken(SQLParser.START, 0); }
		public TerminalNode NONE() { return getToken(SQLParser.NONE, 0); }
		public TerminalNode INT8() { return getToken(SQLParser.INT8, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public TerminalNode DECADE() { return getToken(SQLParser.DECADE, 0); }
		public TerminalNode INTEGER() { return getToken(SQLParser.INTEGER, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TerminalNode PARTITIONS() { return getToken(SQLParser.PARTITIONS, 0); }
		public Nonreserved_keywordsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreserved_keywords; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNonreserved_keywords(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNonreserved_keywords(this);
		}
	}

	public final Nonreserved_keywordsContext nonreserved_keywords() throws RecognitionException {
		Nonreserved_keywordsContext _localctx = new Nonreserved_keywordsContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_nonreserved_keywords);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3117);
			_la = _input.LA(1);
			if ( !(((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_literalContext extends ParserRuleContext {
		public General_literalContext general_literal() {
			return getRuleContext(General_literalContext.class,0);
		}
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public Unsigned_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnsigned_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnsigned_literal(this);
		}
	}

	public final Unsigned_literalContext unsigned_literal() throws RecognitionException {
		Unsigned_literalContext _localctx = new Unsigned_literalContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_unsigned_literal);
		try {
			setState(3121);
			switch (_input.LA(1)) {
			case NUMBER:
			case REAL_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3119); unsigned_numeric_literal();
				}
				break;
			case FALSE:
			case TRUE:
			case UNKNOWN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case Character_String_Literal:
				enterOuterAlt(_localctx, 2);
				{
				setState(3120); general_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_literalContext extends ParserRuleContext {
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Datetime_literalContext datetime_literal() {
			return getRuleContext(Datetime_literalContext.class,0);
		}
		public General_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGeneral_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGeneral_literal(this);
		}
	}

	public final General_literalContext general_literal() throws RecognitionException {
		General_literalContext _localctx = new General_literalContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_general_literal);
		try {
			setState(3126);
			switch (_input.LA(1)) {
			case Character_String_Literal:
				enterOuterAlt(_localctx, 1);
				{
				setState(3123); match(Character_String_Literal);
				}
				break;
			case DATE:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3124); datetime_literal();
				}
				break;
			case FALSE:
			case TRUE:
			case UNKNOWN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3125); truth_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_literalContext extends ParserRuleContext {
		public Timestamp_literalContext timestamp_literal() {
			return getRuleContext(Timestamp_literalContext.class,0);
		}
		public Date_literalContext date_literal() {
			return getRuleContext(Date_literalContext.class,0);
		}
		public Time_literalContext time_literal() {
			return getRuleContext(Time_literalContext.class,0);
		}
		public Datetime_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDatetime_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDatetime_literal(this);
		}
	}

	public final Datetime_literalContext datetime_literal() throws RecognitionException {
		Datetime_literalContext _localctx = new Datetime_literalContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_datetime_literal);
		try {
			setState(3131);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3128); timestamp_literal();
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3129); time_literal();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3130); date_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_literalContext extends ParserRuleContext {
		public Token time_string;
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Time_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTime_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTime_literal(this);
		}
	}

	public final Time_literalContext time_literal() throws RecognitionException {
		Time_literalContext _localctx = new Time_literalContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_time_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3133); match(TIME);
			setState(3134); ((Time_literalContext)_localctx).time_string = match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_literalContext extends ParserRuleContext {
		public Token timestamp_string;
		public TerminalNode TIMESTAMP() { return getToken(SQLParser.TIMESTAMP, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTimestamp_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTimestamp_literal(this);
		}
	}

	public final Timestamp_literalContext timestamp_literal() throws RecognitionException {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_timestamp_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3136); match(TIMESTAMP);
			setState(3137); ((Timestamp_literalContext)_localctx).timestamp_string = match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_literalContext extends ParserRuleContext {
		public Token date_string;
		public TerminalNode DATE() { return getToken(SQLParser.DATE, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Date_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDate_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDate_literal(this);
		}
	}

	public final Date_literalContext date_literal() throws RecognitionException {
		Date_literalContext _localctx = new Date_literalContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_date_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3139); match(DATE);
			setState(3140); ((Date_literalContext)_localctx).date_string = match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public IdentifierContext value;
		public Predefined_typeContext predefined_type() {
			return getRuleContext(Predefined_typeContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(SQLParser.SETOF, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(SQLParser.LEFT_BRACKET, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(SQLParser.RIGHT_BRACKET, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitData_type(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_data_type);
		try {
			setState(3149);
			switch (_input.LA(1)) {
			case REPLACE:
			case TRIGGER:
			case ADMIN:
			case ALWAYS:
			case ARRAY:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVER:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STDIN:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case REGCLASS:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case BINARY:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case DOUBLE_QUOTE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(3142); predefined_type();
				setState(3145);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(3143); match(LEFT_BRACKET);
					setState(3144); match(RIGHT_BRACKET);
					}
					break;
				}
				}
				break;
			case SETOF:
				enterOuterAlt(_localctx, 2);
				{
				setState(3147); match(SETOF);
				setState(3148); ((Data_typeContext)_localctx).value = identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Predefined_typeContext extends ParserRuleContext {
		public TerminalNode UUID() { return getToken(SQLParser.UUID, 0); }
		public TerminalNode REGCLASS() { return getToken(SQLParser.REGCLASS, 0); }
		public Character_string_typeContext character_string_type() {
			return getRuleContext(Character_string_typeContext.class,0);
		}
		public Network_typeContext network_type() {
			return getRuleContext(Network_typeContext.class,0);
		}
		public Boolean_typeContext boolean_type() {
			return getRuleContext(Boolean_typeContext.class,0);
		}
		public TerminalNode VOID() { return getToken(SQLParser.VOID, 0); }
		public TerminalNode REGCONFIG() { return getToken(SQLParser.REGCONFIG, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public Bit_typeContext bit_type() {
			return getRuleContext(Bit_typeContext.class,0);
		}
		public Binary_large_object_string_typeContext binary_large_object_string_type() {
			return getRuleContext(Binary_large_object_string_typeContext.class,0);
		}
		public National_character_string_typeContext national_character_string_type() {
			return getRuleContext(National_character_string_typeContext.class,0);
		}
		public TerminalNode INET() { return getToken(SQLParser.INET, 0); }
		public Numeric_typeContext numeric_type() {
			return getRuleContext(Numeric_typeContext.class,0);
		}
		public Datetime_typeContext datetime_type() {
			return getRuleContext(Datetime_typeContext.class,0);
		}
		public Binary_typeContext binary_type() {
			return getRuleContext(Binary_typeContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Predefined_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefined_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPredefined_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPredefined_type(this);
		}
	}

	public final Predefined_typeContext predefined_type() throws RecognitionException {
		Predefined_typeContext _localctx = new Predefined_typeContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_predefined_type);
		int _la;
		try {
			setState(3162);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3151); character_string_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3152); national_character_string_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3153); binary_large_object_string_type();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3154); numeric_type();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3155); boolean_type();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3156); datetime_type();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3157); bit_type();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3158); binary_type();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3159); network_type();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3160);
				_la = _input.LA(1);
				if ( !(_la==TRIGGER || _la==REGCONFIG || ((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & ((1L << (REGCLASS - 312)) | (1L << (UUID - 312)) | (1L << (INET - 312)) | (1L << (VOID - 312)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3161); schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_typeContext extends ParserRuleContext {
		public TerminalNode INET4() { return getToken(SQLParser.INET4, 0); }
		public Network_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNetwork_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNetwork_type(this);
		}
	}

	public final Network_typeContext network_type() throws RecognitionException {
		Network_typeContext _localctx = new Network_typeContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_network_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3164); match(INET4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_string_typeContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TerminalNode CHARACTER() { return getToken(SQLParser.CHARACTER, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(SQLParser.VARCHAR, 0); }
		public TerminalNode INTERVAL() { return getToken(SQLParser.INTERVAL, 0); }
		public TerminalNode CHAR() { return getToken(SQLParser.CHAR, 0); }
		public Character_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCharacter_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCharacter_string_type(this);
		}
	}

	public final Character_string_typeContext character_string_type() throws RecognitionException {
		Character_string_typeContext _localctx = new Character_string_typeContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_character_string_type);
		int _la;
		try {
			setState(3189);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3166); match(CHARACTER);
				setState(3168);
				switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
				case 1:
					{
					setState(3167); type_length();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3170); match(CHAR);
				setState(3172);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(3171); type_length();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3174); match(CHARACTER);
				setState(3175); match(VARYING);
				setState(3177);
				switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
				case 1:
					{
					setState(3176); type_length();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3179); match(CHAR);
				setState(3180); match(VARYING);
				setState(3182);
				switch ( getInterpreter().adaptivePredict(_input,415,_ctx) ) {
				case 1:
					{
					setState(3181); type_length();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3184); match(VARCHAR);
				setState(3186);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(3185); type_length();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3188);
				_la = _input.LA(1);
				if ( !(_la==TEXT || _la==INTERVAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_lengthContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NUMBER() { return getToken(SQLParser.NUMBER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Type_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterType_length(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitType_length(this);
		}
	}

	public final Type_lengthContext type_length() throws RecognitionException {
		Type_lengthContext _localctx = new Type_lengthContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_type_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3191); match(LEFT_PAREN);
			setState(3192); match(NUMBER);
			setState(3193); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class National_character_string_typeContext extends ParserRuleContext {
		public TerminalNode NATIONAL() { return getToken(SQLParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TerminalNode CHARACTER() { return getToken(SQLParser.CHARACTER, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode NVARCHAR() { return getToken(SQLParser.NVARCHAR, 0); }
		public TerminalNode NCHAR() { return getToken(SQLParser.NCHAR, 0); }
		public TerminalNode CHAR() { return getToken(SQLParser.CHAR, 0); }
		public National_character_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_national_character_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNational_character_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNational_character_string_type(this);
		}
	}

	public final National_character_string_typeContext national_character_string_type() throws RecognitionException {
		National_character_string_typeContext _localctx = new National_character_string_typeContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_national_character_string_type);
		try {
			setState(3230);
			switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3195); match(NATIONAL);
				setState(3196); match(CHARACTER);
				setState(3198);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(3197); type_length();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3200); match(NATIONAL);
				setState(3201); match(CHAR);
				setState(3203);
				switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					setState(3202); type_length();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3205); match(NCHAR);
				setState(3207);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(3206); type_length();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3209); match(NATIONAL);
				setState(3210); match(CHARACTER);
				setState(3211); match(VARYING);
				setState(3213);
				switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
				case 1:
					{
					setState(3212); type_length();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3215); match(NATIONAL);
				setState(3216); match(CHAR);
				setState(3217); match(VARYING);
				setState(3219);
				switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
				case 1:
					{
					setState(3218); type_length();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3221); match(NCHAR);
				setState(3222); match(VARYING);
				setState(3224);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(3223); type_length();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3226); match(NVARCHAR);
				setState(3228);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(3227); type_length();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_large_object_string_typeContext extends ParserRuleContext {
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode BLOB() { return getToken(SQLParser.BLOB, 0); }
		public TerminalNode BYTEA() { return getToken(SQLParser.BYTEA, 0); }
		public Binary_large_object_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_large_object_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBinary_large_object_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBinary_large_object_string_type(this);
		}
	}

	public final Binary_large_object_string_typeContext binary_large_object_string_type() throws RecognitionException {
		Binary_large_object_string_typeContext _localctx = new Binary_large_object_string_typeContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_binary_large_object_string_type);
		try {
			setState(3240);
			switch (_input.LA(1)) {
			case BLOB:
				enterOuterAlt(_localctx, 1);
				{
				setState(3232); match(BLOB);
				setState(3234);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(3233); type_length();
					}
					break;
				}
				}
				break;
			case BYTEA:
				enterOuterAlt(_localctx, 2);
				{
				setState(3236); match(BYTEA);
				setState(3238);
				switch ( getInterpreter().adaptivePredict(_input,427,_ctx) ) {
				case 1:
					{
					setState(3237); type_length();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_typeContext extends ParserRuleContext {
		public Exact_numeric_typeContext exact_numeric_type() {
			return getRuleContext(Exact_numeric_typeContext.class,0);
		}
		public Approximate_numeric_typeContext approximate_numeric_type() {
			return getRuleContext(Approximate_numeric_typeContext.class,0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNumeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNumeric_type(this);
		}
	}

	public final Numeric_typeContext numeric_type() throws RecognitionException {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_numeric_type);
		try {
			setState(3244);
			switch (_input.LA(1)) {
			case DEC:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case NUMERIC:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3242); exact_numeric_type();
				}
				break;
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3243); approximate_numeric_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exact_numeric_typeContext extends ParserRuleContext {
		public TerminalNode TINYINT() { return getToken(SQLParser.TINYINT, 0); }
		public TerminalNode INT() { return getToken(SQLParser.INT, 0); }
		public TerminalNode DEC() { return getToken(SQLParser.DEC, 0); }
		public TerminalNode INT1() { return getToken(SQLParser.INT1, 0); }
		public TerminalNode INT4() { return getToken(SQLParser.INT4, 0); }
		public TerminalNode NUMERIC() { return getToken(SQLParser.NUMERIC, 0); }
		public Precision_paramContext precision_param() {
			return getRuleContext(Precision_paramContext.class,0);
		}
		public TerminalNode INT8() { return getToken(SQLParser.INT8, 0); }
		public TerminalNode INT2() { return getToken(SQLParser.INT2, 0); }
		public TerminalNode INTEGER() { return getToken(SQLParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(SQLParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(SQLParser.DECIMAL, 0); }
		public TerminalNode SMALLINT() { return getToken(SQLParser.SMALLINT, 0); }
		public Exact_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exact_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExact_numeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExact_numeric_type(this);
		}
	}

	public final Exact_numeric_typeContext exact_numeric_type() throws RecognitionException {
		Exact_numeric_typeContext _localctx = new Exact_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_exact_numeric_type);
		int _la;
		try {
			setState(3259);
			switch (_input.LA(1)) {
			case NUMERIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(3246); match(NUMERIC);
				setState(3248);
				switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
				case 1:
					{
					setState(3247); precision_param();
					}
					break;
				}
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3250); match(DECIMAL);
				setState(3252);
				switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
				case 1:
					{
					setState(3251); precision_param();
					}
					break;
				}
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 3);
				{
				setState(3254); match(DEC);
				setState(3256);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(3255); precision_param();
					}
					break;
				}
				}
				break;
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3258);
				_la = _input.LA(1);
				if ( !(((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (INT1 - 300)) | (1L << (INT2 - 300)) | (1L << (INT4 - 300)) | (1L << (INT8 - 300)) | (1L << (TINYINT - 300)) | (1L << (SMALLINT - 300)) | (1L << (INT - 300)) | (1L << (INTEGER - 300)) | (1L << (BIGINT - 300)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Approximate_numeric_typeContext extends ParserRuleContext {
		public TerminalNode FLOAT() { return getToken(SQLParser.FLOAT, 0); }
		public Precision_paramContext precision_param() {
			return getRuleContext(Precision_paramContext.class,0);
		}
		public TerminalNode FLOAT4() { return getToken(SQLParser.FLOAT4, 0); }
		public TerminalNode DOUBLE() { return getToken(SQLParser.DOUBLE, 0); }
		public TerminalNode REAL() { return getToken(SQLParser.REAL, 0); }
		public TerminalNode PRECISION() { return getToken(SQLParser.PRECISION, 0); }
		public TerminalNode FLOAT8() { return getToken(SQLParser.FLOAT8, 0); }
		public Approximate_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approximate_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterApproximate_numeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitApproximate_numeric_type(this);
		}
	}

	public final Approximate_numeric_typeContext approximate_numeric_type() throws RecognitionException {
		Approximate_numeric_typeContext _localctx = new Approximate_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_approximate_numeric_type);
		int _la;
		try {
			setState(3270);
			switch (_input.LA(1)) {
			case FLOAT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3261); match(FLOAT);
				setState(3263);
				switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
				case 1:
					{
					setState(3262); precision_param();
					}
					break;
				}
				}
				break;
			case FLOAT4:
			case FLOAT8:
			case REAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3265);
				_la = _input.LA(1);
				if ( !(((((_la - 309)) & ~0x3f) == 0 && ((1L << (_la - 309)) & ((1L << (FLOAT4 - 309)) | (1L << (FLOAT8 - 309)) | (1L << (REAL - 309)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3266); match(DOUBLE);
				setState(3268);
				switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
				case 1:
					{
					setState(3267); match(PRECISION);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_paramContext extends ParserRuleContext {
		public Token precision;
		public Token scale;
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public TerminalNode NUMBER(int i) {
			return getToken(SQLParser.NUMBER, i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(SQLParser.NUMBER); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Precision_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPrecision_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPrecision_param(this);
		}
	}

	public final Precision_paramContext precision_param() throws RecognitionException {
		Precision_paramContext _localctx = new Precision_paramContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_precision_param);
		try {
			setState(3280);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3272); match(LEFT_PAREN);
				setState(3273); ((Precision_paramContext)_localctx).precision = match(NUMBER);
				setState(3274); match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3275); match(LEFT_PAREN);
				setState(3276); ((Precision_paramContext)_localctx).precision = match(NUMBER);
				setState(3277); match(COMMA);
				setState(3278); ((Precision_paramContext)_localctx).scale = match(NUMBER);
				setState(3279); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_typeContext extends ParserRuleContext {
		public TerminalNode BOOL() { return getToken(SQLParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(SQLParser.BOOLEAN, 0); }
		public Boolean_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_type(this);
		}
	}

	public final Boolean_typeContext boolean_type() throws RecognitionException {
		Boolean_typeContext _localctx = new Boolean_typeContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_boolean_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3282);
			_la = _input.LA(1);
			if ( !(_la==BOOLEAN || _la==BOOL) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_typeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(SQLParser.TIMESTAMP, 0); }
		public TerminalNode DATE() { return getToken(SQLParser.DATE, 0); }
		public List<TerminalNode> TIME() { return getTokens(SQLParser.TIME); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode TIME(int i) {
			return getToken(SQLParser.TIME, i);
		}
		public TerminalNode TIMETZ() { return getToken(SQLParser.TIMETZ, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode TIMESTAMPTZ() { return getToken(SQLParser.TIMESTAMPTZ, 0); }
		public Datetime_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDatetime_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDatetime_type(this);
		}
	}

	public final Datetime_typeContext datetime_type() throws RecognitionException {
		Datetime_typeContext _localctx = new Datetime_typeContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_datetime_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3299);
			switch (_input.LA(1)) {
			case DATE:
				{
				setState(3284); match(DATE);
				}
				break;
			case TIME:
				{
				setState(3285); match(TIME);
				setState(3289);
				switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					setState(3286); match(WITH);
					setState(3287); match(TIME);
					setState(3288); match(ZONE);
					}
					break;
				}
				}
				break;
			case TIMETZ:
				{
				setState(3291); match(TIMETZ);
				}
				break;
			case TIMESTAMP:
				{
				setState(3292); match(TIMESTAMP);
				setState(3296);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(3293);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==WITHOUT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3294); match(TIME);
					setState(3295); match(ZONE);
					}
					break;
				}
				}
				break;
			case TIMESTAMPTZ:
				{
				setState(3298); match(TIMESTAMPTZ);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_typeContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TerminalNode BIT() { return getToken(SQLParser.BIT, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode VARBIT() { return getToken(SQLParser.VARBIT, 0); }
		public Bit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBit_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBit_type(this);
		}
	}

	public final Bit_typeContext bit_type() throws RecognitionException {
		Bit_typeContext _localctx = new Bit_typeContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_bit_type);
		try {
			setState(3314);
			switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3301); match(BIT);
				setState(3303);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(3302); type_length();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3305); match(VARBIT);
				setState(3307);
				switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					setState(3306); type_length();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3309); match(BIT);
				setState(3310); match(VARYING);
				setState(3312);
				switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					setState(3311); type_length();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_typeContext extends ParserRuleContext {
		public TerminalNode VARBINARY() { return getToken(SQLParser.VARBINARY, 0); }
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(SQLParser.BINARY, 0); }
		public Binary_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBinary_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBinary_type(this);
		}
	}

	public final Binary_typeContext binary_type() throws RecognitionException {
		Binary_typeContext _localctx = new Binary_typeContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_binary_type);
		try {
			setState(3329);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3316); match(BINARY);
				setState(3318);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(3317); type_length();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3320); match(BINARY);
				setState(3321); match(VARYING);
				setState(3323);
				switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					setState(3322); type_length();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3325); match(VARBINARY);
				setState(3327);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(3326); type_length();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expression_primaryContext extends ParserRuleContext {
		public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
			return getRuleContext(Nonparenthesized_value_expression_primaryContext.class,0);
		}
		public Parenthesized_value_expressionContext parenthesized_value_expression() {
			return getRuleContext(Parenthesized_value_expressionContext.class,0);
		}
		public Value_expression_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterValue_expression_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitValue_expression_primary(this);
		}
	}

	public final Value_expression_primaryContext value_expression_primary() throws RecognitionException {
		Value_expression_primaryContext _localctx = new Value_expression_primaryContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_value_expression_primary);
		try {
			setState(3333);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3331); parenthesized_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3332); nonparenthesized_value_expression_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parenthesized_value_expressionContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Parenthesized_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesized_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterParenthesized_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitParenthesized_value_expression(this);
		}
	}

	public final Parenthesized_value_expressionContext parenthesized_value_expression() throws RecognitionException {
		Parenthesized_value_expressionContext _localctx = new Parenthesized_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_parenthesized_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3335); match(LEFT_PAREN);
			setState(3336); value_expression();
			setState(3337); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nonparenthesized_value_expression_primaryContext extends ParserRuleContext {
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Unsigned_value_specificationContext unsigned_value_specification() {
			return getRuleContext(Unsigned_value_specificationContext.class,0);
		}
		public All_arrayContext all_array() {
			return getRuleContext(All_arrayContext.class,0);
		}
		public Scalar_subqueryContext scalar_subquery() {
			return getRuleContext(Scalar_subqueryContext.class,0);
		}
		public Cast_specificationContext cast_specification() {
			return getRuleContext(Cast_specificationContext.class,0);
		}
		public Function_definition_name_parenContext function_definition_name_paren() {
			return getRuleContext(Function_definition_name_parenContext.class,0);
		}
		public Case_abbreviationContext case_abbreviation() {
			return getRuleContext(Case_abbreviationContext.class,0);
		}
		public Set_function_specificationContext set_function_specification() {
			return getRuleContext(Set_function_specificationContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Nonparenthesized_value_expression_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonparenthesized_value_expression_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNonparenthesized_value_expression_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNonparenthesized_value_expression_primary(this);
		}
	}

	public final Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() throws RecognitionException {
		Nonparenthesized_value_expression_primaryContext _localctx = new Nonparenthesized_value_expression_primaryContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_nonparenthesized_value_expression_primary);
		try {
			setState(3350);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3339); unsigned_value_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3340); column_reference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3341); set_function_specification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3342); scalar_subquery();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3343); case_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3344); cast_specification();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3345); function_definition_name_paren();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3346); match(NULL);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3347); query_specification();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3348); all_array();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3349); case_abbreviation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_value_specificationContext extends ParserRuleContext {
		public Unsigned_literalContext unsigned_literal() {
			return getRuleContext(Unsigned_literalContext.class,0);
		}
		public Unsigned_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnsigned_value_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnsigned_value_specification(this);
		}
	}

	public final Unsigned_value_specificationContext unsigned_value_specification() throws RecognitionException {
		Unsigned_value_specificationContext _localctx = new Unsigned_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_unsigned_value_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3352); unsigned_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_numeric_literalContext extends ParserRuleContext {
		public TerminalNode REAL_NUMBER() { return getToken(SQLParser.REAL_NUMBER, 0); }
		public TerminalNode NUMBER() { return getToken(SQLParser.NUMBER, 0); }
		public Unsigned_numeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_numeric_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnsigned_numeric_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnsigned_numeric_literal(this);
		}
	}

	public final Unsigned_numeric_literalContext unsigned_numeric_literal() throws RecognitionException {
		Unsigned_numeric_literalContext _localctx = new Unsigned_numeric_literalContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_unsigned_numeric_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3354);
			_la = _input.LA(1);
			if ( !(_la==NUMBER || _la==REAL_NUMBER) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signed_numerical_literalContext extends ParserRuleContext {
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public Signed_numerical_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signed_numerical_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSigned_numerical_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSigned_numerical_literal(this);
		}
	}

	public final Signed_numerical_literalContext signed_numerical_literal() throws RecognitionException {
		Signed_numerical_literalContext _localctx = new Signed_numerical_literalContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_signed_numerical_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3357);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(3356); sign();
				}
			}

			setState(3359); unsigned_numeric_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_specificationContext extends ParserRuleContext {
		public Aggregate_functionContext aggregate_function() {
			return getRuleContext(Aggregate_functionContext.class,0);
		}
		public Set_function_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSet_function_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSet_function_specification(this);
		}
	}

	public final Set_function_specificationContext set_function_specification() throws RecognitionException {
		Set_function_specificationContext _localctx = new Set_function_specificationContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_set_function_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3361); aggregate_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_functionContext extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(SQLParser.COUNT, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public General_set_functionContext general_set_function() {
			return getRuleContext(General_set_functionContext.class,0);
		}
		public Filter_clauseContext filter_clause() {
			return getRuleContext(Filter_clauseContext.class,0);
		}
		public Aggregate_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAggregate_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAggregate_function(this);
		}
	}

	public final Aggregate_functionContext aggregate_function() throws RecognitionException {
		Aggregate_functionContext _localctx = new Aggregate_functionContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_aggregate_function);
		try {
			setState(3371);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3363); match(COUNT);
				setState(3364); match(LEFT_PAREN);
				setState(3365); match(MULTIPLY);
				setState(3366); match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3367); general_set_function();
				setState(3369);
				switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
				case 1:
					{
					setState(3368); filter_clause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_set_functionContext extends ParserRuleContext {
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Set_function_typeContext set_function_type() {
			return getRuleContext(Set_function_typeContext.class,0);
		}
		public General_set_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_set_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGeneral_set_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGeneral_set_function(this);
		}
	}

	public final General_set_functionContext general_set_function() throws RecognitionException {
		General_set_functionContext _localctx = new General_set_functionContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_general_set_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3373); set_function_type();
			setState(3374); match(LEFT_PAREN);
			setState(3376);
			switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				setState(3375); set_qualifier();
				}
				break;
			}
			setState(3378); value_expression();
			setState(3379); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_typeContext extends ParserRuleContext {
		public TerminalNode STDDEV_SAMP() { return getToken(SQLParser.STDDEV_SAMP, 0); }
		public TerminalNode STDDEV_POP() { return getToken(SQLParser.STDDEV_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(SQLParser.VAR_SAMP, 0); }
		public TerminalNode SUM() { return getToken(SQLParser.SUM, 0); }
		public TerminalNode EVERY() { return getToken(SQLParser.EVERY, 0); }
		public TerminalNode ANY() { return getToken(SQLParser.ANY, 0); }
		public TerminalNode AVG() { return getToken(SQLParser.AVG, 0); }
		public TerminalNode INTERSECTION() { return getToken(SQLParser.INTERSECTION, 0); }
		public TerminalNode MIN() { return getToken(SQLParser.MIN, 0); }
		public TerminalNode MAX() { return getToken(SQLParser.MAX, 0); }
		public TerminalNode VAR_POP() { return getToken(SQLParser.VAR_POP, 0); }
		public TerminalNode SOME() { return getToken(SQLParser.SOME, 0); }
		public TerminalNode COUNT() { return getToken(SQLParser.COUNT, 0); }
		public TerminalNode FUSION() { return getToken(SQLParser.FUSION, 0); }
		public TerminalNode COLLECT() { return getToken(SQLParser.COLLECT, 0); }
		public Set_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSet_function_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSet_function_type(this);
		}
	}

	public final Set_function_typeContext set_function_type() throws RecognitionException {
		Set_function_typeContext _localctx = new Set_function_typeContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_set_function_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3381);
			_la = _input.LA(1);
			if ( !(_la==ANY || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (SOME - 117)) | (1L << (AVG - 117)) | (1L << (COLLECT - 117)) | (1L << (COUNT - 117)))) != 0) || ((((_la - 181)) & ~0x3f) == 0 && ((1L << (_la - 181)) & ((1L << (EVERY - 181)) | (1L << (FUSION - 181)) | (1L << (INTERSECTION - 181)) | (1L << (MAX - 181)) | (1L << (MIN - 181)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (STDDEV_POP - 265)) | (1L << (STDDEV_SAMP - 265)) | (1L << (SUM - 265)) | (1L << (VAR_SAMP - 265)) | (1L << (VAR_POP - 265)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filter_clauseContext extends ParserRuleContext {
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode FILTER() { return getToken(SQLParser.FILTER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFilter_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFilter_clause(this);
		}
	}

	public final Filter_clauseContext filter_clause() throws RecognitionException {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_filter_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3383); match(FILTER);
			setState(3384); match(LEFT_PAREN);
			setState(3385); where_clause();
			setState(3386); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_operationContext extends ParserRuleContext {
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode GROUPING() { return getToken(SQLParser.GROUPING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Grouping_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrouping_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrouping_operation(this);
		}
	}

	public final Grouping_operationContext grouping_operation() throws RecognitionException {
		Grouping_operationContext _localctx = new Grouping_operationContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_grouping_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3388); match(GROUPING);
			setState(3389); match(LEFT_PAREN);
			setState(3390); column_reference_list();
			setState(3391); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public Case_specificationContext case_specification() {
			return getRuleContext(Case_specificationContext.class,0);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCase_expression(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_case_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3393); case_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_abbreviationContext extends ParserRuleContext {
		public TerminalNode COALESCE() { return getToken(SQLParser.COALESCE, 0); }
		public TerminalNode NULLIF() { return getToken(SQLParser.NULLIF, 0); }
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Case_abbreviationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_abbreviation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCase_abbreviation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCase_abbreviation(this);
		}
	}

	public final Case_abbreviationContext case_abbreviation() throws RecognitionException {
		Case_abbreviationContext _localctx = new Case_abbreviationContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_case_abbreviation);
		int _la;
		try {
			setState(3413);
			switch (_input.LA(1)) {
			case NULLIF:
				enterOuterAlt(_localctx, 1);
				{
				setState(3395); match(NULLIF);
				setState(3396); match(LEFT_PAREN);
				setState(3397); numeric_value_expression();
				setState(3398); match(COMMA);
				setState(3399); value_expression();
				setState(3400); match(RIGHT_PAREN);
				}
				break;
			case COALESCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3402); match(COALESCE);
				setState(3403); match(LEFT_PAREN);
				setState(3404); numeric_value_expression();
				setState(3407); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3405); match(COMMA);
					setState(3406); value_expression();
					}
					}
					setState(3409); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3411); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_specificationContext extends ParserRuleContext {
		public Searched_caseContext searched_case() {
			return getRuleContext(Searched_caseContext.class,0);
		}
		public Simple_caseContext simple_case() {
			return getRuleContext(Simple_caseContext.class,0);
		}
		public Case_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCase_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCase_specification(this);
		}
	}

	public final Case_specificationContext case_specification() throws RecognitionException {
		Case_specificationContext _localctx = new Case_specificationContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_case_specification);
		try {
			setState(3417);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3415); simple_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3416); searched_case();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_caseContext extends ParserRuleContext {
		public List<Simple_when_clauseContext> simple_when_clause() {
			return getRuleContexts(Simple_when_clauseContext.class);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode CASE() { return getToken(SQLParser.CASE, 0); }
		public Simple_when_clauseContext simple_when_clause(int i) {
			return getRuleContext(Simple_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public Simple_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSimple_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSimple_case(this);
		}
	}

	public final Simple_caseContext simple_case() throws RecognitionException {
		Simple_caseContext _localctx = new Simple_caseContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_simple_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3419); match(CASE);
			setState(3420); value_expression();
			setState(3422); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3421); simple_when_clause();
				}
				}
				setState(3424); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3427);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3426); else_clause();
				}
			}

			setState(3429); match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_caseContext extends ParserRuleContext {
		public List<Searched_when_clauseContext> searched_when_clause() {
			return getRuleContexts(Searched_when_clauseContext.class);
		}
		public TerminalNode CASE() { return getToken(SQLParser.CASE, 0); }
		public Searched_when_clauseContext searched_when_clause(int i) {
			return getRuleContext(Searched_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public Searched_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSearched_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSearched_case(this);
		}
	}

	public final Searched_caseContext searched_case() throws RecognitionException {
		Searched_caseContext _localctx = new Searched_caseContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_searched_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3431); match(CASE);
			setState(3433); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3432); searched_when_clause();
				}
				}
				setState(3435); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3438);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3437); else_clause();
				}
			}

			setState(3440); match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_when_clauseContext extends ParserRuleContext {
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public TerminalNode THEN() { return getToken(SQLParser.THEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public Simple_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSimple_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSimple_when_clause(this);
		}
	}

	public final Simple_when_clauseContext simple_when_clause() throws RecognitionException {
		Simple_when_clauseContext _localctx = new Simple_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_simple_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3442); match(WHEN);
			setState(3443); search_condition();
			setState(3444); match(THEN);
			setState(3445); result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_when_clauseContext extends ParserRuleContext {
		public Search_conditionContext c;
		public ResultContext r;
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public TerminalNode THEN() { return getToken(SQLParser.THEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public Searched_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSearched_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSearched_when_clause(this);
		}
	}

	public final Searched_when_clauseContext searched_when_clause() throws RecognitionException {
		Searched_when_clauseContext _localctx = new Searched_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_searched_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3447); match(WHEN);
			setState(3448); ((Searched_when_clauseContext)_localctx).c = search_condition();
			setState(3449); match(THEN);
			setState(3450); ((Searched_when_clauseContext)_localctx).r = result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_clauseContext extends ParserRuleContext {
		public ResultContext r;
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(SQLParser.ELSE, 0); }
		public Else_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterElse_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitElse_clause(this);
		}
	}

	public final Else_clauseContext else_clause() throws RecognitionException {
		Else_clauseContext _localctx = new Else_clauseContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_else_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3452); match(ELSE);
			setState(3453); ((Else_clauseContext)_localctx).r = result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResultContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterResult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitResult(this);
		}
	}

	public final ResultContext result() throws RecognitionException {
		ResultContext _localctx = new ResultContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_result);
		try {
			setState(3457);
			switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3455); value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3456); match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_specificationContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public Cast_targetContext cast_target() {
			return getRuleContext(Cast_targetContext.class,0);
		}
		public Cast_operandContext cast_operand() {
			return getRuleContext(Cast_operandContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public Cast_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCast_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCast_specification(this);
		}
	}

	public final Cast_specificationContext cast_specification() throws RecognitionException {
		Cast_specificationContext _localctx = new Cast_specificationContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_cast_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3459); match(CAST);
			setState(3460); match(LEFT_PAREN);
			setState(3461); cast_operand();
			setState(3462); match(AS);
			setState(3463); cast_target();
			setState(3464); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Cast_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_operand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCast_operand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCast_operand(this);
		}
	}

	public final Cast_operandContext cast_operand() throws RecognitionException {
		Cast_operandContext _localctx = new Cast_operandContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_cast_operand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3466); value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_targetContext extends ParserRuleContext {
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Cast_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCast_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCast_target(this);
		}
	}

	public final Cast_targetContext cast_target() throws RecognitionException {
		Cast_targetContext _localctx = new Cast_targetContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_cast_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3468); data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expressionContext extends ParserRuleContext {
		public Array_expressionContext array_expression() {
			return getRuleContext(Array_expressionContext.class,0);
		}
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public Common_value_expressionContext common_value_expression() {
			return getRuleContext(Common_value_expressionContext.class,0);
		}
		public Row_value_expressionContext row_value_expression() {
			return getRuleContext(Row_value_expressionContext.class,0);
		}
		public Value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterValue_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitValue_expression(this);
		}
	}

	public final Value_expressionContext value_expression() throws RecognitionException {
		Value_expressionContext _localctx = new Value_expressionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_value_expression);
		try {
			setState(3474);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3470); common_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3471); row_value_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3472); boolean_value_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3473); array_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_expressionContext extends ParserRuleContext {
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(SQLParser.LEFT_BRACKET, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(SQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode ARRAY() { return getToken(SQLParser.ARRAY, 0); }
		public Array_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArray_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArray_expression(this);
		}
	}

	public final Array_expressionContext array_expression() throws RecognitionException {
		Array_expressionContext _localctx = new Array_expressionContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_array_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3476); match(ARRAY);
			setState(3477); match(LEFT_BRACKET);
			setState(3478); value_expression();
			setState(3483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3479); match(COMMA);
				setState(3480); value_expression();
				}
				}
				setState(3485);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3486); match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_arrayContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public Array_expressionContext array_expression() {
			return getRuleContext(Array_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public All_arrayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_array; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAll_array(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAll_array(this);
		}
	}

	public final All_arrayContext all_array() throws RecognitionException {
		All_arrayContext _localctx = new All_arrayContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_all_array);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3488); match(ALL);
			setState(3489); match(LEFT_PAREN);
			setState(3490); array_expression();
			setState(3491); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_operationContext extends ParserRuleContext {
		public TerminalNode BIT_AND() { return getToken(SQLParser.BIT_AND, 0); }
		public Character_value_expressionContext character_value_expression(int i) {
			return getRuleContext(Character_value_expressionContext.class,i);
		}
		public List<Character_value_expressionContext> character_value_expression() {
			return getRuleContexts(Character_value_expressionContext.class);
		}
		public Bit_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBit_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBit_operation(this);
		}
	}

	public final Bit_operationContext bit_operation() throws RecognitionException {
		Bit_operationContext _localctx = new Bit_operationContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_bit_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3493); character_value_expression();
			setState(3494); match(BIT_AND);
			setState(3495); character_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_value_expressionContext extends ParserRuleContext {
		public Bit_operationContext bit_operation() {
			return getRuleContext(Bit_operationContext.class,0);
		}
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Common_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCommon_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCommon_value_expression(this);
		}
	}

	public final Common_value_expressionContext common_value_expression() throws RecognitionException {
		Common_value_expressionContext _localctx = new Common_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_common_value_expression);
		try {
			setState(3501);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3497); numeric_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3498); string_value_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3499); bit_operation();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3500); match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_expressionContext extends ParserRuleContext {
		public TermContext left;
		public TermContext right;
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TerminalNode MINUS(int i) {
			return getToken(SQLParser.MINUS, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(SQLParser.MINUS); }
		public List<TerminalNode> PLUS() { return getTokens(SQLParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(SQLParser.PLUS, i);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Numeric_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNumeric_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNumeric_value_expression(this);
		}
	}

	public final Numeric_value_expressionContext numeric_value_expression() throws RecognitionException {
		Numeric_value_expressionContext _localctx = new Numeric_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_numeric_value_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3503); ((Numeric_value_expressionContext)_localctx).left = term();
			setState(3508);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,466,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3504);
					_la = _input.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3505); ((Numeric_value_expressionContext)_localctx).right = term();
					}
					} 
				}
				setState(3510);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,466,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TermContext extends ParserRuleContext {
		public FactorContext left;
		public FactorContext right;
		public List<TerminalNode> MODULAR() { return getTokens(SQLParser.MODULAR); }
		public FactorContext factor(int i) {
			return getRuleContext(FactorContext.class,i);
		}
		public TerminalNode MULTIPLY(int i) {
			return getToken(SQLParser.MULTIPLY, i);
		}
		public TerminalNode DIVIDE(int i) {
			return getToken(SQLParser.DIVIDE, i);
		}
		public List<TerminalNode> MULTIPLY() { return getTokens(SQLParser.MULTIPLY); }
		public List<FactorContext> factor() {
			return getRuleContexts(FactorContext.class);
		}
		public List<TerminalNode> DIVIDE() { return getTokens(SQLParser.DIVIDE); }
		public TerminalNode MODULAR(int i) {
			return getToken(SQLParser.MODULAR, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTerm(this);
		}
	}

	public final TermContext term() throws RecognitionException {
		TermContext _localctx = new TermContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_term);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3511); ((TermContext)_localctx).left = factor();
			setState(3516);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,467,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3512);
					_la = _input.LA(1);
					if ( !(((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (MULTIPLY - 356)) | (1L << (DIVIDE - 356)) | (1L << (MODULAR - 356)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3513); ((TermContext)_localctx).right = factor();
					}
					} 
				}
				setState(3518);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,467,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public Numeric_primaryContext numeric_primary() {
			return getRuleContext(Numeric_primaryContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFactor(this);
		}
	}

	public final FactorContext factor() throws RecognitionException {
		FactorContext _localctx = new FactorContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3520);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(3519); sign();
				}
			}

			setState(3522); numeric_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Numeric_value_expressionContext> numeric_value_expression() {
			return getRuleContexts(Numeric_value_expressionContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression(int i) {
			return getRuleContext(Numeric_value_expressionContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArray(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArray(this);
		}
	}

	public final ArrayContext array() throws RecognitionException {
		ArrayContext _localctx = new ArrayContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_array);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3524); match(LEFT_PAREN);
			setState(3525); numeric_value_expression();
			setState(3530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3526); match(COMMA);
				setState(3527); numeric_value_expression();
				}
				}
				setState(3532);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3533); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_primaryContext extends ParserRuleContext {
		public Value_expression_primary_castContext value_expression_primary_cast() {
			return getRuleContext(Value_expression_primary_castContext.class,0);
		}
		public Numeric_value_functionContext numeric_value_function() {
			return getRuleContext(Numeric_value_functionContext.class,0);
		}
		public Numeric_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNumeric_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNumeric_primary(this);
		}
	}

	public final Numeric_primaryContext numeric_primary() throws RecognitionException {
		Numeric_primaryContext _localctx = new Numeric_primaryContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_numeric_primary);
		try {
			setState(3537);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3535); value_expression_primary_cast();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3536); numeric_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expression_primary_castContext extends ParserRuleContext {
		public Cast_targetContext cast_target(int i) {
			return getRuleContext(Cast_targetContext.class,i);
		}
		public List<Cast_targetContext> cast_target() {
			return getRuleContexts(Cast_targetContext.class);
		}
		public List<TerminalNode> CAST_EXPRESSION() { return getTokens(SQLParser.CAST_EXPRESSION); }
		public TerminalNode CAST_EXPRESSION(int i) {
			return getToken(SQLParser.CAST_EXPRESSION, i);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Value_expression_primary_castContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression_primary_cast; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterValue_expression_primary_cast(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitValue_expression_primary_cast(this);
		}
	}

	public final Value_expression_primary_castContext value_expression_primary_cast() throws RecognitionException {
		Value_expression_primary_castContext _localctx = new Value_expression_primary_castContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_value_expression_primary_cast);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3539); value_expression_primary();
			setState(3544);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3540); match(CAST_EXPRESSION);
					setState(3541); cast_target();
					}
					} 
				}
				setState(3546);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,471,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(SQLParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(SQLParser.PLUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSign(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3547);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_functionContext extends ParserRuleContext {
		public Extract_expressionContext extract_expression() {
			return getRuleContext(Extract_expressionContext.class,0);
		}
		public Numeric_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNumeric_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNumeric_value_function(this);
		}
	}

	public final Numeric_value_functionContext numeric_value_function() throws RecognitionException {
		Numeric_value_functionContext _localctx = new Numeric_value_functionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_numeric_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3549); extract_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_expressionContext extends ParserRuleContext {
		public Extract_fieldContext extract_field_string;
		public Extract_fieldContext extract_field() {
			return getRuleContext(Extract_fieldContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(SQLParser.EXTRACT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public Extract_sourceContext extract_source() {
			return getRuleContext(Extract_sourceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public Extract_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtract_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtract_expression(this);
		}
	}

	public final Extract_expressionContext extract_expression() throws RecognitionException {
		Extract_expressionContext _localctx = new Extract_expressionContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_extract_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551); match(EXTRACT);
			setState(3552); match(LEFT_PAREN);
			setState(3553); ((Extract_expressionContext)_localctx).extract_field_string = extract_field();
			setState(3554); match(FROM);
			setState(3555); extract_source();
			setState(3556); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_fieldContext extends ParserRuleContext {
		public Extended_datetime_fieldContext extended_datetime_field() {
			return getRuleContext(Extended_datetime_fieldContext.class,0);
		}
		public Primary_datetime_fieldContext primary_datetime_field() {
			return getRuleContext(Primary_datetime_fieldContext.class,0);
		}
		public Time_zone_fieldContext time_zone_field() {
			return getRuleContext(Time_zone_fieldContext.class,0);
		}
		public Extract_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtract_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtract_field(this);
		}
	}

	public final Extract_fieldContext extract_field() throws RecognitionException {
		Extract_fieldContext _localctx = new Extract_fieldContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_extract_field);
		try {
			setState(3561);
			switch (_input.LA(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case SECOND:
			case YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3558); primary_datetime_field();
				}
				break;
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3559); time_zone_field();
				}
				break;
			case CENTURY:
			case DECADE:
			case DOW:
			case DOY:
			case EPOCH:
			case ISODOW:
			case ISOYEAR:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case QUARTER:
			case WEEK:
				enterOuterAlt(_localctx, 3);
				{
				setState(3560); extended_datetime_field();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zone_fieldContext extends ParserRuleContext {
		public TerminalNode TIMEZONE_MINUTE() { return getToken(SQLParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE() { return getToken(SQLParser.TIMEZONE, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(SQLParser.TIMEZONE_HOUR, 0); }
		public Time_zone_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTime_zone_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTime_zone_field(this);
		}
	}

	public final Time_zone_fieldContext time_zone_field() throws RecognitionException {
		Time_zone_fieldContext _localctx = new Time_zone_fieldContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_time_zone_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3563);
			_la = _input.LA(1);
			if ( !(((((_la - 273)) & ~0x3f) == 0 && ((1L << (_la - 273)) & ((1L << (TIMEZONE - 273)) | (1L << (TIMEZONE_HOUR - 273)) | (1L << (TIMEZONE_MINUTE - 273)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_sourceContext extends ParserRuleContext {
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Datetime_literalContext datetime_literal() {
			return getRuleContext(Datetime_literalContext.class,0);
		}
		public Extract_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtract_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtract_source(this);
		}
	}

	public final Extract_sourceContext extract_source() throws RecognitionException {
		Extract_sourceContext _localctx = new Extract_sourceContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_extract_source);
		try {
			setState(3567);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3565); column_reference();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3566); datetime_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_expressionContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public String_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterString_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitString_value_expression(this);
		}
	}

	public final String_value_expressionContext string_value_expression() throws RecognitionException {
		String_value_expressionContext _localctx = new String_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_string_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3569); character_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_expressionContext extends ParserRuleContext {
		public List<TerminalNode> CONCATENATION_OPERATOR() { return getTokens(SQLParser.CONCATENATION_OPERATOR); }
		public List<Character_factorContext> character_factor() {
			return getRuleContexts(Character_factorContext.class);
		}
		public TerminalNode CONCATENATION_OPERATOR(int i) {
			return getToken(SQLParser.CONCATENATION_OPERATOR, i);
		}
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public Character_factorContext character_factor(int i) {
			return getRuleContext(Character_factorContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Character_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCharacter_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCharacter_value_expression(this);
		}
	}

	public final Character_value_expressionContext character_value_expression() throws RecognitionException {
		Character_value_expressionContext _localctx = new Character_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_character_value_expression);
		try {
			int _alt;
			setState(3583);
			switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3571); character_factor();
				setState(3576);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3572); match(CONCATENATION_OPERATOR);
						setState(3573); character_factor();
						}
						} 
					}
					setState(3578);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,474,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3579); match(LEFT_PAREN);
				setState(3580); character_value_expression();
				setState(3581); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_factorContext extends ParserRuleContext {
		public Character_primaryContext character_primary() {
			return getRuleContext(Character_primaryContext.class,0);
		}
		public Character_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCharacter_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCharacter_factor(this);
		}
	}

	public final Character_factorContext character_factor() throws RecognitionException {
		Character_factorContext _localctx = new Character_factorContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_character_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3585); character_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_primaryContext extends ParserRuleContext {
		public Value_expression_primary_castContext value_expression_primary_cast() {
			return getRuleContext(Value_expression_primary_castContext.class,0);
		}
		public String_value_functionContext string_value_function() {
			return getRuleContext(String_value_functionContext.class,0);
		}
		public Character_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCharacter_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCharacter_primary(this);
		}
	}

	public final Character_primaryContext character_primary() throws RecognitionException {
		Character_primaryContext _localctx = new Character_primaryContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_character_primary);
		try {
			setState(3589);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3587); value_expression_primary_cast();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3588); string_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_functionContext extends ParserRuleContext {
		public Trim_functionContext trim_function() {
			return getRuleContext(Trim_functionContext.class,0);
		}
		public String_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterString_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitString_value_function(this);
		}
	}

	public final String_value_functionContext string_value_function() throws RecognitionException {
		String_value_functionContext _localctx = new String_value_functionContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_string_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3591); trim_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_functionContext extends ParserRuleContext {
		public TerminalNode TRIM() { return getToken(SQLParser.TRIM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Trim_operandsContext trim_operands() {
			return getRuleContext(Trim_operandsContext.class,0);
		}
		public Trim_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTrim_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTrim_function(this);
		}
	}

	public final Trim_functionContext trim_function() throws RecognitionException {
		Trim_functionContext _localctx = new Trim_functionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_trim_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3593); match(TRIM);
			setState(3594); match(LEFT_PAREN);
			setState(3595); trim_operands();
			setState(3596); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_operandsContext extends ParserRuleContext {
		public Character_value_expressionContext trim_character;
		public Character_value_expressionContext trim_source;
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public Character_value_expressionContext character_value_expression(int i) {
			return getRuleContext(Character_value_expressionContext.class,i);
		}
		public Trim_specificationContext trim_specification() {
			return getRuleContext(Trim_specificationContext.class,0);
		}
		public List<Character_value_expressionContext> character_value_expression() {
			return getRuleContexts(Character_value_expressionContext.class);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public Trim_operandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_operands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTrim_operands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTrim_operands(this);
		}
	}

	public final Trim_operandsContext trim_operands() throws RecognitionException {
		Trim_operandsContext _localctx = new Trim_operandsContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_trim_operands);
		int _la;
		try {
			setState(3612);
			switch ( getInterpreter().adaptivePredict(_input,480,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3605);
				switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
				case 1:
					{
					setState(3599);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(3598); trim_specification();
						}
					}

					setState(3602);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << ANY) | (1L << CASE) | (1L << CAST) | (1L << FALSE))) != 0) || ((((_la - 86)) & ~0x3f) == 0 && ((1L << (_la - 86)) & ((1L << (NULL - 86)) | (1L << (REPLACE - 86)) | (1L << (SELECT - 86)) | (1L << (SOME - 86)) | (1L << (TRUE - 86)) | (1L << (ADMIN - 86)) | (1L << (ALWAYS - 86)) | (1L << (ARRAY - 86)) | (1L << (AVG - 86)) | (1L << (BETWEEN - 86)) | (1L << (BY - 86)) | (1L << (CACHE - 86)) | (1L << (CALLED - 86)))) != 0) || ((((_la - 150)) & ~0x3f) == 0 && ((1L << (_la - 150)) & ((1L << (CLASS - 150)) | (1L << (CENTURY - 150)) | (1L << (CHARACTER - 150)) | (1L << (CHECK - 150)) | (1L << (CLUSTER - 150)) | (1L << (COLLECT - 150)) | (1L << (COALESCE - 150)) | (1L << (COLUMN - 150)) | (1L << (COMMENT - 150)) | (1L << (COMMENTS - 150)) | (1L << (COMMIT - 150)) | (1L << (CONCURRENTLY - 150)) | (1L << (CONFIGURATION - 150)) | (1L << (COST - 150)) | (1L << (COUNT - 150)) | (1L << (CUBE - 150)) | (1L << (CURRENT - 150)) | (1L << (CYCLE - 150)) | (1L << (DATA - 150)) | (1L << (DAY - 150)) | (1L << (DEC - 150)) | (1L << (DECADE - 150)) | (1L << (DEFINER - 150)) | (1L << (DICTIONARY - 150)) | (1L << (DISABLE - 150)) | (1L << (DOW - 150)) | (1L << (DOY - 150)) | (1L << (DROP - 150)) | (1L << (ENABLE - 150)) | (1L << (EPOCH - 150)) | (1L << (EVENT - 150)) | (1L << (EVERY - 150)) | (1L << (EXISTS - 150)) | (1L << (EXTENDED - 150)) | (1L << (EXTERNAL - 150)) | (1L << (EXTRACT - 150)) | (1L << (FAMILY - 150)) | (1L << (FILTER - 150)) | (1L << (FIRST - 150)) | (1L << (FORMAT - 150)) | (1L << (FUSION - 150)) | (1L << (GROUPING - 150)) | (1L << (HASH - 150)) | (1L << (INHERIT - 150)) | (1L << (INDEX - 150)) | (1L << (INCREMENT - 150)) | (1L << (INPUT - 150)) | (1L << (INSERT - 150)) | (1L << (INTERSECTION - 150)) | (1L << (ISCACHABLE - 150)) | (1L << (ISODOW - 150)) | (1L << (ISOYEAR - 150)) | (1L << (ISSTRICT - 150)) | (1L << (LANGUAGE - 150)) | (1L << (LARGE - 150)) | (1L << (LAST - 150)) | (1L << (LESS - 150)) | (1L << (LIST - 150)) | (1L << (LOCATION - 150)) | (1L << (MAIN - 150)) | (1L << (MATCH - 150)) | (1L << (MAX - 150)))) != 0) || ((((_la - 214)) & ~0x3f) == 0 && ((1L << (_la - 214)) & ((1L << (MAXVALUE - 214)) | (1L << (MICROSECONDS - 214)) | (1L << (MILLENNIUM - 214)) | (1L << (MILLISECONDS - 214)) | (1L << (MIN - 214)) | (1L << (MINVALUE - 214)) | (1L << (MINUTE - 214)) | (1L << (MONTH - 214)) | (1L << (NATIONAL - 214)) | (1L << (NO - 214)) | (1L << (NONE - 214)) | (1L << (NULLIF - 214)) | (1L << (OBJECT - 214)) | (1L << (ON - 214)) | (1L << (ONLY - 214)) | (1L << (OPTION - 214)) | (1L << (OPTIONS - 214)) | (1L << (OVER - 214)) | (1L << (OVERWRITE - 214)) | (1L << (PARSER - 214)) | (1L << (PARTIAL - 214)) | (1L << (PARTITION - 214)) | (1L << (PARTITIONS - 214)) | (1L << (PLAIN - 214)) | (1L << (PRECISION - 214)) | (1L << (PUBLIC - 214)) | (1L << (PURGE - 214)) | (1L << (QUARTER - 214)) | (1L << (RANGE - 214)) | (1L << (REGCONFIG - 214)) | (1L << (REGEXP - 214)) | (1L << (RENAME - 214)) | (1L << (REPLICA - 214)) | (1L << (RESET - 214)) | (1L << (RESTART - 214)) | (1L << (RLIKE - 214)) | (1L << (ROLLUP - 214)) | (1L << (SEARCH - 214)) | (1L << (SECOND - 214)) | (1L << (SECURITY - 214)) | (1L << (SERVER - 214)) | (1L << (SET - 214)) | (1L << (SIMILAR - 214)) | (1L << (SIMPLE - 214)) | (1L << (STABLE - 214)) | (1L << (START - 214)) | (1L << (STATISTICS - 214)) | (1L << (STDIN - 214)) | (1L << (STORAGE - 214)) | (1L << (STDDEV_POP - 214)) | (1L << (STDDEV_SAMP - 214)) | (1L << (SUBPARTITION - 214)) | (1L << (SUM - 214)) | (1L << (TABLESPACE - 214)) | (1L << (TEMPLATE - 214)) | (1L << (THAN - 214)) | (1L << (TIMEZONE - 214)) | (1L << (TIMEZONE_HOUR - 214)) | (1L << (TIMEZONE_MINUTE - 214)) | (1L << (TRIM - 214)) | (1L << (TO - 214)))) != 0) || ((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (TYPE - 278)) | (1L << (TYPES - 278)) | (1L << (UNKNOWN - 278)) | (1L << (UNLOGGED - 278)) | (1L << (USER - 278)) | (1L << (VALID - 278)) | (1L << (VALIDATE - 278)) | (1L << (VALUES - 278)) | (1L << (VAR_SAMP - 278)) | (1L << (VAR_POP - 278)) | (1L << (VARYING - 278)) | (1L << (VERSION - 278)) | (1L << (VOLATILE - 278)) | (1L << (WEEK - 278)) | (1L << (WINDOW - 278)) | (1L << (WRAPPER - 278)) | (1L << (YEAR - 278)) | (1L << (ZONE - 278)) | (1L << (BOOLEAN - 278)) | (1L << (BOOL - 278)) | (1L << (BIT - 278)) | (1L << (VARBIT - 278)) | (1L << (INT1 - 278)) | (1L << (INT2 - 278)) | (1L << (INT4 - 278)) | (1L << (INT8 - 278)) | (1L << (TINYINT - 278)) | (1L << (SMALLINT - 278)) | (1L << (INT - 278)) | (1L << (INTEGER - 278)) | (1L << (BIGINT - 278)) | (1L << (FLOAT4 - 278)) | (1L << (FLOAT8 - 278)) | (1L << (REAL - 278)) | (1L << (FLOAT - 278)) | (1L << (DOUBLE - 278)) | (1L << (NUMERIC - 278)) | (1L << (DECIMAL - 278)) | (1L << (CHAR - 278)) | (1L << (VARCHAR - 278)) | (1L << (NCHAR - 278)) | (1L << (NVARCHAR - 278)) | (1L << (DATE - 278)) | (1L << (TIME - 278)) | (1L << (TIMETZ - 278)) | (1L << (TIMESTAMP - 278)) | (1L << (TIMESTAMPTZ - 278)) | (1L << (TEXT - 278)) | (1L << (UUID - 278)) | (1L << (VARBINARY - 278)) | (1L << (BLOB - 278)) | (1L << (BYTEA - 278)) | (1L << (INET4 - 278)) | (1L << (INET - 278)) | (1L << (INTERVAL - 278)) | (1L << (VOID - 278)))) != 0) || ((((_la - 352)) & ~0x3f) == 0 && ((1L << (_la - 352)) & ((1L << (LEFT_PAREN - 352)) | (1L << (DOUBLE_QUOTE - 352)) | (1L << (NUMBER - 352)) | (1L << (REAL_NUMBER - 352)) | (1L << (Identifier - 352)) | (1L << (QuotedIdentifier - 352)) | (1L << (Character_String_Literal - 352)))) != 0)) {
						{
						setState(3601); ((Trim_operandsContext)_localctx).trim_character = character_value_expression();
						}
					}

					setState(3604); match(FROM);
					}
					break;
				}
				setState(3607); ((Trim_operandsContext)_localctx).trim_source = character_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3608); ((Trim_operandsContext)_localctx).trim_source = character_value_expression();
				setState(3609); match(COMMA);
				setState(3610); ((Trim_operandsContext)_localctx).trim_character = character_value_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_specificationContext extends ParserRuleContext {
		public TerminalNode BOTH() { return getToken(SQLParser.BOTH, 0); }
		public TerminalNode TRAILING() { return getToken(SQLParser.TRAILING, 0); }
		public TerminalNode LEADING() { return getToken(SQLParser.LEADING, 0); }
		public Trim_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTrim_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTrim_specification(this);
		}
	}

	public final Trim_specificationContext trim_specification() throws RecognitionException {
		Trim_specificationContext _localctx = new Trim_specificationContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_trim_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3614);
			_la = _input.LA(1);
			if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_value_expressionContext extends ParserRuleContext {
		public Or_predicateContext or_predicate() {
			return getRuleContext(Or_predicateContext.class,0);
		}
		public Boolean_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_value_expression(this);
		}
	}

	public final Boolean_value_expressionContext boolean_value_expression() throws RecognitionException {
		Boolean_value_expressionContext _localctx = new Boolean_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_boolean_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3616); or_predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Or_predicateContext extends ParserRuleContext {
		public List<Or_predicateContext> or_predicate() {
			return getRuleContexts(Or_predicateContext.class);
		}
		public Or_predicateContext or_predicate(int i) {
			return getRuleContext(Or_predicateContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(SQLParser.OR); }
		public And_predicateContext and_predicate() {
			return getRuleContext(And_predicateContext.class,0);
		}
		public TerminalNode OR(int i) {
			return getToken(SQLParser.OR, i);
		}
		public Or_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_or_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOr_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOr_predicate(this);
		}
	}

	public final Or_predicateContext or_predicate() throws RecognitionException {
		Or_predicateContext _localctx = new Or_predicateContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_or_predicate);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3618); and_predicate();
			setState(3623);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,481,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3619); match(OR);
					setState(3620); or_predicate();
					}
					} 
				}
				setState(3625);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,481,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class And_predicateContext extends ParserRuleContext {
		public Boolean_factorContext boolean_factor() {
			return getRuleContext(Boolean_factorContext.class,0);
		}
		public List<TerminalNode> AND() { return getTokens(SQLParser.AND); }
		public List<And_predicateContext> and_predicate() {
			return getRuleContexts(And_predicateContext.class);
		}
		public TerminalNode AND(int i) {
			return getToken(SQLParser.AND, i);
		}
		public And_predicateContext and_predicate(int i) {
			return getRuleContext(And_predicateContext.class,i);
		}
		public And_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_and_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAnd_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAnd_predicate(this);
		}
	}

	public final And_predicateContext and_predicate() throws RecognitionException {
		And_predicateContext _localctx = new And_predicateContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_and_predicate);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3626); boolean_factor();
			setState(3631);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3627); match(AND);
					setState(3628); and_predicate();
					}
					} 
				}
				setState(3633);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,482,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_factorContext extends ParserRuleContext {
		public Boolean_testContext boolean_test() {
			return getRuleContext(Boolean_testContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Boolean_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_factor(this);
		}
	}

	public final Boolean_factorContext boolean_factor() throws RecognitionException {
		Boolean_factorContext _localctx = new Boolean_factorContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_boolean_factor);
		try {
			setState(3637);
			switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3634); boolean_test();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3635); match(NOT);
				setState(3636); boolean_test();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_testContext extends ParserRuleContext {
		public Is_clauseContext is_clause() {
			return getRuleContext(Is_clauseContext.class,0);
		}
		public Boolean_primaryContext boolean_primary() {
			return getRuleContext(Boolean_primaryContext.class,0);
		}
		public Boolean_testContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_test; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_test(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_test(this);
		}
	}

	public final Boolean_testContext boolean_test() throws RecognitionException {
		Boolean_testContext _localctx = new Boolean_testContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_boolean_test);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3639); boolean_primary();
			setState(3641);
			switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
			case 1:
				{
				setState(3640); is_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Is_clauseContext extends ParserRuleContext {
		public Truth_valueContext t;
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public Is_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIs_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIs_clause(this);
		}
	}

	public final Is_clauseContext is_clause() throws RecognitionException {
		Is_clauseContext _localctx = new Is_clauseContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_is_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3643); match(IS);
			setState(3645);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3644); match(NOT);
				}
			}

			setState(3647); ((Is_clauseContext)_localctx).t = truth_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truth_valueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SQLParser.TRUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SQLParser.UNKNOWN, 0); }
		public TerminalNode FALSE() { return getToken(SQLParser.FALSE, 0); }
		public Truth_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truth_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTruth_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTruth_value(this);
		}
	}

	public final Truth_valueContext truth_value() throws RecognitionException {
		Truth_valueContext _localctx = new Truth_valueContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_truth_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3649);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_primaryContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public Boolean_predicandContext boolean_predicand() {
			return getRuleContext(Boolean_predicandContext.class,0);
		}
		public Boolean_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_primary(this);
		}
	}

	public final Boolean_primaryContext boolean_primary() throws RecognitionException {
		Boolean_primaryContext _localctx = new Boolean_primaryContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_boolean_primary);
		try {
			setState(3653);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3651); predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3652); boolean_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_predicandContext extends ParserRuleContext {
		public Parenthesized_boolean_value_expressionContext parenthesized_boolean_value_expression() {
			return getRuleContext(Parenthesized_boolean_value_expressionContext.class,0);
		}
		public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
			return getRuleContext(Nonparenthesized_value_expression_primaryContext.class,0);
		}
		public Boolean_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_predicand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_predicand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_predicand(this);
		}
	}

	public final Boolean_predicandContext boolean_predicand() throws RecognitionException {
		Boolean_predicandContext _localctx = new Boolean_predicandContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_boolean_predicand);
		try {
			setState(3657);
			switch ( getInterpreter().adaptivePredict(_input,487,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3655); parenthesized_boolean_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3656); nonparenthesized_value_expression_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parenthesized_boolean_value_expressionContext extends ParserRuleContext {
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Parenthesized_boolean_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesized_boolean_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterParenthesized_boolean_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitParenthesized_boolean_value_expression(this);
		}
	}

	public final Parenthesized_boolean_value_expressionContext parenthesized_boolean_value_expression() throws RecognitionException {
		Parenthesized_boolean_value_expressionContext _localctx = new Parenthesized_boolean_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_parenthesized_boolean_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3659); match(LEFT_PAREN);
			setState(3660); boolean_value_expression();
			setState(3661); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_expressionContext extends ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return getRuleContext(Row_value_special_caseContext.class,0);
		}
		public Explicit_row_value_constructorContext explicit_row_value_constructor() {
			return getRuleContext(Explicit_row_value_constructorContext.class,0);
		}
		public Row_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_expression(this);
		}
	}

	public final Row_value_expressionContext row_value_expression() throws RecognitionException {
		Row_value_expressionContext _localctx = new Row_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_row_value_expression);
		try {
			setState(3665);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3663); row_value_special_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3664); explicit_row_value_constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_special_caseContext extends ParserRuleContext {
		public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
			return getRuleContext(Nonparenthesized_value_expression_primaryContext.class,0);
		}
		public Row_value_special_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_special_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_special_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_special_case(this);
		}
	}

	public final Row_value_special_caseContext row_value_special_case() throws RecognitionException {
		Row_value_special_caseContext _localctx = new Row_value_special_caseContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_row_value_special_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3667); nonparenthesized_value_expression_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_row_value_constructorContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Explicit_row_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_row_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExplicit_row_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExplicit_row_value_constructor(this);
		}
	}

	public final Explicit_row_value_constructorContext explicit_row_value_constructor() throws RecognitionException {
		Explicit_row_value_constructorContext _localctx = new Explicit_row_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_explicit_row_value_constructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3669); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_predicandContext extends ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return getRuleContext(Row_value_special_caseContext.class,0);
		}
		public Row_value_constructor_predicandContext row_value_constructor_predicand() {
			return getRuleContext(Row_value_constructor_predicandContext.class,0);
		}
		public Row_value_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_predicand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_predicand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_predicand(this);
		}
	}

	public final Row_value_predicandContext row_value_predicand() throws RecognitionException {
		Row_value_predicandContext _localctx = new Row_value_predicandContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_row_value_predicand);
		try {
			setState(3673);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3671); row_value_special_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3672); row_value_constructor_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructor_predicandContext extends ParserRuleContext {
		public Boolean_predicandContext boolean_predicand() {
			return getRuleContext(Boolean_predicandContext.class,0);
		}
		public Common_value_expressionContext common_value_expression() {
			return getRuleContext(Common_value_expressionContext.class,0);
		}
		public Row_value_constructor_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor_predicand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_constructor_predicand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_constructor_predicand(this);
		}
	}

	public final Row_value_constructor_predicandContext row_value_constructor_predicand() throws RecognitionException {
		Row_value_constructor_predicandContext _localctx = new Row_value_constructor_predicandContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_row_value_constructor_predicand);
		try {
			setState(3677);
			switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3675); common_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3676); boolean_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_expressionContext extends ParserRuleContext {
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Groupby_clauseContext groupby_clause() {
			return getRuleContext(Groupby_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_expression(this);
		}
	}

	public final Table_expressionContext table_expression() throws RecognitionException {
		Table_expressionContext _localctx = new Table_expressionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_table_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3679); from_clause();
			setState(3681);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				setState(3680); where_clause();
				}
				break;
			}
			setState(3684);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(3683); groupby_clause();
				}
				break;
			}
			setState(3687);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				{
				setState(3686); having_clause();
				}
				break;
			}
			setState(3690);
			switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				setState(3689); orderby_clause();
				}
				break;
			}
			setState(3693);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(3692); limit_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public Table_reference_listContext table_reference_list() {
			return getRuleContext(Table_reference_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public As_clauseContext as_clause() {
			return getRuleContext(As_clauseContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFrom_clause(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3695); match(FROM);
			setState(3697);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				{
				setState(3696); match(LEFT_PAREN);
				}
				break;
			}
			setState(3701);
			switch (_input.LA(1)) {
			case REPLACE:
			case ADMIN:
			case ALWAYS:
			case ARRAY:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVER:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STDIN:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case LEFT_PAREN:
			case DOUBLE_QUOTE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(3699); table_reference_list();
				}
				break;
			case SELECT:
				{
				setState(3700); query_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3704);
			switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
			case 1:
				{
				setState(3703); match(RIGHT_PAREN);
				}
				break;
			}
			setState(3707);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				{
				setState(3706); as_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_reference_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Table_referenceContext table_reference(int i) {
			return getRuleContext(Table_referenceContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<Table_referenceContext> table_reference() {
			return getRuleContexts(Table_referenceContext.class);
		}
		public Table_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_reference_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_reference_list(this);
		}
	}

	public final Table_reference_listContext table_reference_list() throws RecognitionException {
		Table_reference_listContext _localctx = new Table_reference_listContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_table_reference_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3709); table_reference();
			setState(3714);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3710); match(COMMA);
					setState(3711); table_reference();
					}
					} 
				}
				setState(3716);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_referenceContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Table_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_reference(this);
		}
	}

	public final Table_referenceContext table_reference() throws RecognitionException {
		Table_referenceContext _localctx = new Table_referenceContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_table_reference);
		try {
			setState(3719);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3717); joined_table();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3718); table_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_tableContext extends ParserRuleContext {
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public List<Joined_table_primaryContext> joined_table_primary() {
			return getRuleContexts(Joined_table_primaryContext.class);
		}
		public Joined_table_primaryContext joined_table_primary(int i) {
			return getRuleContext(Joined_table_primaryContext.class,i);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoined_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoined_table(this);
		}
	}

	public final Joined_tableContext joined_table() throws RecognitionException {
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_joined_table);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3721); table_primary();
			setState(3723); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3722); joined_table_primary();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3725); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_table_primaryContext extends ParserRuleContext {
		public Table_primaryContext right;
		public Join_typeContext t;
		public Join_specificationContext s;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public TerminalNode UNION() { return getToken(SQLParser.UNION, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(SQLParser.NATURAL, 0); }
		public TerminalNode CROSS() { return getToken(SQLParser.CROSS, 0); }
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Join_specificationContext join_specification() {
			return getRuleContext(Join_specificationContext.class,0);
		}
		public Joined_table_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoined_table_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoined_table_primary(this);
		}
	}

	public final Joined_table_primaryContext joined_table_primary() throws RecognitionException {
		Joined_table_primaryContext _localctx = new Joined_table_primaryContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_joined_table_primary);
		int _la;
		try {
			setState(3746);
			switch (_input.LA(1)) {
			case CROSS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3727); match(CROSS);
				setState(3728); match(JOIN);
				setState(3729); ((Joined_table_primaryContext)_localctx).right = table_primary();
				}
				break;
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3731);
				_la = _input.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (FULL - 51)) | (1L << (INNER - 51)) | (1L << (LEFT - 51)) | (1L << (RIGHT - 51)))) != 0)) {
					{
					setState(3730); ((Joined_table_primaryContext)_localctx).t = join_type();
					}
				}

				setState(3733); match(JOIN);
				setState(3734); ((Joined_table_primaryContext)_localctx).right = table_primary();
				setState(3735); ((Joined_table_primaryContext)_localctx).s = join_specification();
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3737); match(NATURAL);
				setState(3739);
				_la = _input.LA(1);
				if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (FULL - 51)) | (1L << (INNER - 51)) | (1L << (LEFT - 51)) | (1L << (RIGHT - 51)))) != 0)) {
					{
					setState(3738); ((Joined_table_primaryContext)_localctx).t = join_type();
					}
				}

				setState(3741); match(JOIN);
				setState(3742); ((Joined_table_primaryContext)_localctx).right = table_primary();
				}
				break;
			case UNION:
				enterOuterAlt(_localctx, 4);
				{
				setState(3743); match(UNION);
				setState(3744); match(JOIN);
				setState(3745); ((Joined_table_primaryContext)_localctx).right = table_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cross_joinContext extends ParserRuleContext {
		public Table_primaryContext r;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public TerminalNode CROSS() { return getToken(SQLParser.CROSS, 0); }
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cross_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCross_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCross_join(this);
		}
	}

	public final Cross_joinContext cross_join() throws RecognitionException {
		Cross_joinContext _localctx = new Cross_joinContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_cross_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3748); match(CROSS);
			setState(3749); match(JOIN);
			setState(3750); ((Cross_joinContext)_localctx).r = table_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_joinContext extends ParserRuleContext {
		public Join_typeContext t;
		public Table_primaryContext r;
		public Join_specificationContext s;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Join_specificationContext join_specification() {
			return getRuleContext(Join_specificationContext.class,0);
		}
		public Qualified_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQualified_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQualified_join(this);
		}
	}

	public final Qualified_joinContext qualified_join() throws RecognitionException {
		Qualified_joinContext _localctx = new Qualified_joinContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_qualified_join);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3753);
			_la = _input.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (FULL - 51)) | (1L << (INNER - 51)) | (1L << (LEFT - 51)) | (1L << (RIGHT - 51)))) != 0)) {
				{
				setState(3752); ((Qualified_joinContext)_localctx).t = join_type();
				}
			}

			setState(3755); match(JOIN);
			setState(3756); ((Qualified_joinContext)_localctx).r = table_primary();
			setState(3757); ((Qualified_joinContext)_localctx).s = join_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Natural_joinContext extends ParserRuleContext {
		public Join_typeContext t;
		public Table_primaryContext r;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(SQLParser.NATURAL, 0); }
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Natural_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_natural_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNatural_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNatural_join(this);
		}
	}

	public final Natural_joinContext natural_join() throws RecognitionException {
		Natural_joinContext _localctx = new Natural_joinContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_natural_join);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3759); match(NATURAL);
			setState(3761);
			_la = _input.LA(1);
			if (((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (FULL - 51)) | (1L << (INNER - 51)) | (1L << (LEFT - 51)) | (1L << (RIGHT - 51)))) != 0)) {
				{
				setState(3760); ((Natural_joinContext)_localctx).t = join_type();
				}
			}

			setState(3763); match(JOIN);
			setState(3764); ((Natural_joinContext)_localctx).r = table_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Union_joinContext extends ParserRuleContext {
		public Table_primaryContext r;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public TerminalNode UNION() { return getToken(SQLParser.UNION, 0); }
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Union_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_union_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnion_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnion_join(this);
		}
	}

	public final Union_joinContext union_join() throws RecognitionException {
		Union_joinContext _localctx = new Union_joinContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_union_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3766); match(UNION);
			setState(3767); match(JOIN);
			setState(3768); ((Union_joinContext)_localctx).r = table_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public Outer_join_typeContext t;
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public TerminalNode INNER() { return getToken(SQLParser.INNER, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoin_type(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_join_type);
		try {
			setState(3772);
			switch (_input.LA(1)) {
			case INNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3770); match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3771); ((Join_typeContext)_localctx).t = outer_join_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(SQLParser.OUTER, 0); }
		public Outer_join_type_part2Context outer_join_type_part2() {
			return getRuleContext(Outer_join_type_part2Context.class,0);
		}
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3774); outer_join_type_part2();
			setState(3776);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(3775); match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_type_part2Context extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(SQLParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(SQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SQLParser.RIGHT, 0); }
		public Outer_join_type_part2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type_part2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOuter_join_type_part2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOuter_join_type_part2(this);
		}
	}

	public final Outer_join_type_part2Context outer_join_type_part2() throws RecognitionException {
		Outer_join_type_part2Context _localctx = new Outer_join_type_part2Context(_ctx, getState());
		enterRule(_localctx, 368, RULE_outer_join_type_part2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3778);
			_la = _input.LA(1);
			if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & ((1L << (FULL - 51)) | (1L << (LEFT - 51)) | (1L << (RIGHT - 51)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_specificationContext extends ParserRuleContext {
		public Named_columns_joinContext named_columns_join() {
			return getRuleContext(Named_columns_joinContext.class,0);
		}
		public Join_conditionContext join_condition() {
			return getRuleContext(Join_conditionContext.class,0);
		}
		public Join_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoin_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoin_specification(this);
		}
	}

	public final Join_specificationContext join_specification() throws RecognitionException {
		Join_specificationContext _localctx = new Join_specificationContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_join_specification);
		try {
			setState(3782);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3780); join_condition();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3781); named_columns_join();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_conditionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoin_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoin_condition(this);
		}
	}

	public final Join_conditionContext join_condition() throws RecognitionException {
		Join_conditionContext _localctx = new Join_conditionContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_join_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3784); match(ON);
			setState(3785); search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_columns_joinContext extends ParserRuleContext {
		public Column_reference_listContext f;
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Named_columns_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_columns_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNamed_columns_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNamed_columns_join(this);
		}
	}

	public final Named_columns_joinContext named_columns_join() throws RecognitionException {
		Named_columns_joinContext _localctx = new Named_columns_joinContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_named_columns_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3787); match(USING);
			setState(3788); match(LEFT_PAREN);
			setState(3789); ((Named_columns_joinContext)_localctx).f = column_reference_list();
			setState(3790); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_primaryContext extends ParserRuleContext {
		public Alias_defContext alias;
		public IdentifierContext name;
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public Alias_tableContext alias_table() {
			return getRuleContext(Alias_tableContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Table_or_query_nameContext table_or_query_name() {
			return getRuleContext(Table_or_query_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Alias_defContext alias_def() {
			return getRuleContext(Alias_defContext.class,0);
		}
		public Table_referenceContext table_reference() {
			return getRuleContext(Table_referenceContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_primary(this);
		}
	}

	public final Table_primaryContext table_primary() throws RecognitionException {
		Table_primaryContext _localctx = new Table_primaryContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_table_primary);
		int _la;
		try {
			setState(3823);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3794);
				switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
				case 1:
					{
					setState(3792); alias_table();
					}
					break;
				case 2:
					{
					setState(3793); table_or_query_name();
					}
					break;
				}
				setState(3800);
				switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
				case 1:
					{
					setState(3797);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3796); match(AS);
						}
					}

					setState(3799); ((Table_primaryContext)_localctx).alias = alias_def();
					}
					break;
				}
				setState(3806);
				switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
				case 1:
					{
					setState(3802); match(LEFT_PAREN);
					setState(3803); column_name_list();
					setState(3804); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3808); derived_table();
				setState(3810);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3809); match(AS);
					}
				}

				setState(3812); ((Table_primaryContext)_localctx).name = identifier();
				setState(3817);
				switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
				case 1:
					{
					setState(3813); match(LEFT_PAREN);
					setState(3814); column_name_list();
					setState(3815); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3819); match(LEFT_PAREN);
				setState(3820); table_reference();
				setState(3821); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_name_list(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3825); identifier();
			setState(3830);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3826); match(COMMA);
				setState(3827); identifier();
				}
				}
				setState(3832);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_defContext extends ParserRuleContext {
		public Alias_tableContext alias_table() {
			return getRuleContext(Alias_tableContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Alias_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlias_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlias_def(this);
		}
	}

	public final Alias_defContext alias_def() throws RecognitionException {
		Alias_defContext _localctx = new Alias_defContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alias_def);
		try {
			setState(3835);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3833); schema_qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3834); alias_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_tableContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Alias_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlias_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlias_table(this);
		}
	}

	public final Alias_tableContext alias_table() throws RecognitionException {
		Alias_tableContext _localctx = new Alias_tableContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_alias_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3837); schema_qualified_name();
			setState(3838); match(LEFT_PAREN);
			setState(3847);
			_la = _input.LA(1);
			if (((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (REPLACE - 105)) | (1L << (ADMIN - 105)) | (1L << (ALWAYS - 105)) | (1L << (ARRAY - 105)) | (1L << (AVG - 105)) | (1L << (BETWEEN - 105)) | (1L << (BY - 105)) | (1L << (CACHE - 105)) | (1L << (CALLED - 105)) | (1L << (CLASS - 105)) | (1L << (CENTURY - 105)) | (1L << (CHARACTER - 105)) | (1L << (CHECK - 105)) | (1L << (CLUSTER - 105)) | (1L << (COLLECT - 105)) | (1L << (COALESCE - 105)) | (1L << (COLUMN - 105)) | (1L << (COMMENT - 105)) | (1L << (COMMENTS - 105)) | (1L << (COMMIT - 105)) | (1L << (CONCURRENTLY - 105)) | (1L << (CONFIGURATION - 105)) | (1L << (COST - 105)) | (1L << (COUNT - 105)) | (1L << (CUBE - 105)) | (1L << (CURRENT - 105)) | (1L << (CYCLE - 105)) | (1L << (DATA - 105)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (DEC - 169)) | (1L << (DECADE - 169)) | (1L << (DEFINER - 169)) | (1L << (DICTIONARY - 169)) | (1L << (DISABLE - 169)) | (1L << (DOW - 169)) | (1L << (DOY - 169)) | (1L << (DROP - 169)) | (1L << (ENABLE - 169)) | (1L << (EPOCH - 169)) | (1L << (EVENT - 169)) | (1L << (EVERY - 169)) | (1L << (EXISTS - 169)) | (1L << (EXTENDED - 169)) | (1L << (EXTERNAL - 169)) | (1L << (EXTRACT - 169)) | (1L << (FAMILY - 169)) | (1L << (FILTER - 169)) | (1L << (FIRST - 169)) | (1L << (FORMAT - 169)) | (1L << (FUSION - 169)) | (1L << (GROUPING - 169)) | (1L << (HASH - 169)) | (1L << (INHERIT - 169)) | (1L << (INDEX - 169)) | (1L << (INCREMENT - 169)) | (1L << (INPUT - 169)) | (1L << (INSERT - 169)) | (1L << (INTERSECTION - 169)) | (1L << (ISCACHABLE - 169)) | (1L << (ISODOW - 169)) | (1L << (ISOYEAR - 169)) | (1L << (ISSTRICT - 169)) | (1L << (LANGUAGE - 169)) | (1L << (LARGE - 169)) | (1L << (LAST - 169)) | (1L << (LESS - 169)) | (1L << (LIST - 169)) | (1L << (LOCATION - 169)) | (1L << (MAIN - 169)) | (1L << (MATCH - 169)) | (1L << (MAX - 169)) | (1L << (MAXVALUE - 169)) | (1L << (MICROSECONDS - 169)) | (1L << (MILLENNIUM - 169)) | (1L << (MILLISECONDS - 169)) | (1L << (MIN - 169)) | (1L << (MINVALUE - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)) | (1L << (NATIONAL - 169)) | (1L << (NO - 169)) | (1L << (NONE - 169)) | (1L << (NULLIF - 169)) | (1L << (OBJECT - 169)) | (1L << (ON - 169)) | (1L << (ONLY - 169)) | (1L << (OPTION - 169)) | (1L << (OPTIONS - 169)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (OVER - 233)) | (1L << (OVERWRITE - 233)) | (1L << (PARSER - 233)) | (1L << (PARTIAL - 233)) | (1L << (PARTITION - 233)) | (1L << (PARTITIONS - 233)) | (1L << (PLAIN - 233)) | (1L << (PRECISION - 233)) | (1L << (PUBLIC - 233)) | (1L << (PURGE - 233)) | (1L << (QUARTER - 233)) | (1L << (RANGE - 233)) | (1L << (REGCONFIG - 233)) | (1L << (REGEXP - 233)) | (1L << (RENAME - 233)) | (1L << (REPLICA - 233)) | (1L << (RESET - 233)) | (1L << (RESTART - 233)) | (1L << (RLIKE - 233)) | (1L << (ROLLUP - 233)) | (1L << (SEARCH - 233)) | (1L << (SECOND - 233)) | (1L << (SECURITY - 233)) | (1L << (SERVER - 233)) | (1L << (SET - 233)) | (1L << (SIMILAR - 233)) | (1L << (SIMPLE - 233)) | (1L << (STABLE - 233)) | (1L << (START - 233)) | (1L << (STATISTICS - 233)) | (1L << (STDIN - 233)) | (1L << (STORAGE - 233)) | (1L << (STDDEV_POP - 233)) | (1L << (STDDEV_SAMP - 233)) | (1L << (SUBPARTITION - 233)) | (1L << (SUM - 233)) | (1L << (TABLESPACE - 233)) | (1L << (TEMPLATE - 233)) | (1L << (THAN - 233)) | (1L << (TIMEZONE - 233)) | (1L << (TIMEZONE_HOUR - 233)) | (1L << (TIMEZONE_MINUTE - 233)) | (1L << (TRIM - 233)) | (1L << (TO - 233)) | (1L << (TYPE - 233)) | (1L << (TYPES - 233)) | (1L << (UNKNOWN - 233)) | (1L << (UNLOGGED - 233)) | (1L << (USER - 233)) | (1L << (VALID - 233)) | (1L << (VALIDATE - 233)) | (1L << (VALUES - 233)) | (1L << (VAR_SAMP - 233)) | (1L << (VAR_POP - 233)) | (1L << (VARYING - 233)) | (1L << (VERSION - 233)) | (1L << (VOLATILE - 233)) | (1L << (WEEK - 233)) | (1L << (WINDOW - 233)) | (1L << (WRAPPER - 233)) | (1L << (YEAR - 233)) | (1L << (ZONE - 233)) | (1L << (BOOLEAN - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (BOOL - 297)) | (1L << (BIT - 297)) | (1L << (VARBIT - 297)) | (1L << (INT1 - 297)) | (1L << (INT2 - 297)) | (1L << (INT4 - 297)) | (1L << (INT8 - 297)) | (1L << (TINYINT - 297)) | (1L << (SMALLINT - 297)) | (1L << (INT - 297)) | (1L << (INTEGER - 297)) | (1L << (BIGINT - 297)) | (1L << (FLOAT4 - 297)) | (1L << (FLOAT8 - 297)) | (1L << (REAL - 297)) | (1L << (FLOAT - 297)) | (1L << (DOUBLE - 297)) | (1L << (NUMERIC - 297)) | (1L << (DECIMAL - 297)) | (1L << (CHAR - 297)) | (1L << (VARCHAR - 297)) | (1L << (NCHAR - 297)) | (1L << (NVARCHAR - 297)) | (1L << (DATE - 297)) | (1L << (TIME - 297)) | (1L << (TIMETZ - 297)) | (1L << (TIMESTAMP - 297)) | (1L << (TIMESTAMPTZ - 297)) | (1L << (TEXT - 297)) | (1L << (UUID - 297)) | (1L << (VARBINARY - 297)) | (1L << (BLOB - 297)) | (1L << (BYTEA - 297)) | (1L << (INET4 - 297)) | (1L << (INET - 297)) | (1L << (INTERVAL - 297)) | (1L << (VOID - 297)))) != 0) || ((((_la - 363)) & ~0x3f) == 0 && ((1L << (_la - 363)) & ((1L << (DOUBLE_QUOTE - 363)) | (1L << (Identifier - 363)) | (1L << (QuotedIdentifier - 363)))) != 0)) {
				{
				setState(3839); identifier();
				setState(3844);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3840); match(COMMA);
					setState(3841); identifier();
					}
					}
					setState(3846);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3849); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDerived_table(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_derived_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3851); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3853); match(WHERE);
			setState(3854); search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSearch_condition(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_search_condition);
		try {
			setState(3861);
			switch ( getInterpreter().adaptivePredict(_input,522,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3856); match(LEFT_PAREN);
				setState(3857); search_condition();
				setState(3858); match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3860); value_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Groupby_clauseContext extends ParserRuleContext {
		public Grouping_element_listContext g;
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Grouping_element_listContext grouping_element_list() {
			return getRuleContext(Grouping_element_listContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public Groupby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupby_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGroupby_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGroupby_clause(this);
		}
	}

	public final Groupby_clauseContext groupby_clause() throws RecognitionException {
		Groupby_clauseContext _localctx = new Groupby_clauseContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_groupby_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3863); match(GROUP);
			setState(3864); match(BY);
			setState(3865); ((Groupby_clauseContext)_localctx).g = grouping_element_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_element_listContext extends ParserRuleContext {
		public Grouping_elementContext grouping_element(int i) {
			return getRuleContext(Grouping_elementContext.class,i);
		}
		public List<Grouping_elementContext> grouping_element() {
			return getRuleContexts(Grouping_elementContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Grouping_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_element_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrouping_element_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrouping_element_list(this);
		}
	}

	public final Grouping_element_listContext grouping_element_list() throws RecognitionException {
		Grouping_element_listContext _localctx = new Grouping_element_listContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_grouping_element_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3867); grouping_element();
			setState(3872);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,523,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3868); match(COMMA);
					setState(3869); grouping_element();
					}
					} 
				}
				setState(3874);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,523,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_elementContext extends ParserRuleContext {
		public Cube_listContext cube_list() {
			return getRuleContext(Cube_listContext.class,0);
		}
		public Empty_grouping_setContext empty_grouping_set() {
			return getRuleContext(Empty_grouping_setContext.class,0);
		}
		public Ordinary_grouping_setContext ordinary_grouping_set() {
			return getRuleContext(Ordinary_grouping_setContext.class,0);
		}
		public Rollup_listContext rollup_list() {
			return getRuleContext(Rollup_listContext.class,0);
		}
		public Grouping_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrouping_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrouping_element(this);
		}
	}

	public final Grouping_elementContext grouping_element() throws RecognitionException {
		Grouping_elementContext _localctx = new Grouping_elementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_grouping_element);
		try {
			setState(3879);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3875); rollup_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3876); cube_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3877); empty_grouping_set();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3878); ordinary_grouping_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordinary_grouping_setContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Row_value_predicand_listContext row_value_predicand_list() {
			return getRuleContext(Row_value_predicand_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Ordinary_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinary_grouping_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrdinary_grouping_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrdinary_grouping_set(this);
		}
	}

	public final Ordinary_grouping_setContext ordinary_grouping_set() throws RecognitionException {
		Ordinary_grouping_setContext _localctx = new Ordinary_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_ordinary_grouping_set);
		try {
			setState(3886);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3881); row_value_predicand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3882); match(LEFT_PAREN);
				setState(3883); row_value_predicand_list();
				setState(3884); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordinary_grouping_set_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Ordinary_grouping_setContext> ordinary_grouping_set() {
			return getRuleContexts(Ordinary_grouping_setContext.class);
		}
		public Ordinary_grouping_setContext ordinary_grouping_set(int i) {
			return getRuleContext(Ordinary_grouping_setContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Ordinary_grouping_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinary_grouping_set_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrdinary_grouping_set_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrdinary_grouping_set_list(this);
		}
	}

	public final Ordinary_grouping_set_listContext ordinary_grouping_set_list() throws RecognitionException {
		Ordinary_grouping_set_listContext _localctx = new Ordinary_grouping_set_listContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_ordinary_grouping_set_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3888); ordinary_grouping_set();
			setState(3893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3889); match(COMMA);
				setState(3890); ordinary_grouping_set();
				}
				}
				setState(3895);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_listContext extends ParserRuleContext {
		public Ordinary_grouping_set_listContext c;
		public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return getRuleContext(Ordinary_grouping_set_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(SQLParser.ROLLUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Rollup_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRollup_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRollup_list(this);
		}
	}

	public final Rollup_listContext rollup_list() throws RecognitionException {
		Rollup_listContext _localctx = new Rollup_listContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_rollup_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3896); match(ROLLUP);
			setState(3897); match(LEFT_PAREN);
			setState(3898); ((Rollup_listContext)_localctx).c = ordinary_grouping_set_list();
			setState(3899); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cube_listContext extends ParserRuleContext {
		public Ordinary_grouping_set_listContext c;
		public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return getRuleContext(Ordinary_grouping_set_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode CUBE() { return getToken(SQLParser.CUBE, 0); }
		public Cube_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cube_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCube_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCube_list(this);
		}
	}

	public final Cube_listContext cube_list() throws RecognitionException {
		Cube_listContext _localctx = new Cube_listContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_cube_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3901); match(CUBE);
			setState(3902); match(LEFT_PAREN);
			setState(3903); ((Cube_listContext)_localctx).c = ordinary_grouping_set_list();
			setState(3904); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_grouping_setContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_grouping_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterEmpty_grouping_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitEmpty_grouping_set(this);
		}
	}

	public final Empty_grouping_setContext empty_grouping_set() throws RecognitionException {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_empty_grouping_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3906); match(LEFT_PAREN);
			setState(3907); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SQLParser.HAVING, 0); }
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitHaving_clause(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3909); match(HAVING);
			setState(3910); boolean_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_predicand_listContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand(int i) {
			return getRuleContext(Row_value_predicandContext.class,i);
		}
		public List<Row_value_predicandContext> row_value_predicand() {
			return getRuleContexts(Row_value_predicandContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Row_value_predicand_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_predicand_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_predicand_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_predicand_list(this);
		}
	}

	public final Row_value_predicand_listContext row_value_predicand_list() throws RecognitionException {
		Row_value_predicand_listContext _localctx = new Row_value_predicand_listContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_row_value_predicand_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3912); row_value_predicand();
			setState(3917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3913); match(COMMA);
				setState(3914); row_value_predicand();
				}
				}
				setState(3919);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Query_expression_bodyContext query_expression_body() {
			return getRuleContext(Query_expression_bodyContext.class,0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_expression(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_query_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3920); query_expression_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expression_bodyContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public Query_expression_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_expression_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_expression_body(this);
		}
	}

	public final Query_expression_bodyContext query_expression_body() throws RecognitionException {
		Query_expression_bodyContext _localctx = new Query_expression_bodyContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_query_expression_body);
		try {
			setState(3924);
			switch ( getInterpreter().adaptivePredict(_input,528,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3922); non_join_query_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3923); joined_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_join_query_expressionContext extends ParserRuleContext {
		public List<TerminalNode> EXCEPT() { return getTokens(SQLParser.EXCEPT); }
		public List<TerminalNode> UNION() { return getTokens(SQLParser.UNION); }
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public TerminalNode EXCEPT(int i) {
			return getToken(SQLParser.EXCEPT, i);
		}
		public Query_termContext query_term(int i) {
			return getRuleContext(Query_termContext.class,i);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_termContext non_join_query_term() {
			return getRuleContext(Non_join_query_termContext.class,0);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(SQLParser.DISTINCT); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public TerminalNode DISTINCT(int i) {
			return getToken(SQLParser.DISTINCT, i);
		}
		public List<Query_termContext> query_term() {
			return getRuleContexts(Query_termContext.class);
		}
		public TerminalNode UNION(int i) {
			return getToken(SQLParser.UNION, i);
		}
		public Non_join_query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_join_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNon_join_query_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNon_join_query_expression(this);
		}
	}

	public final Non_join_query_expressionContext non_join_query_expression() throws RecognitionException {
		Non_join_query_expressionContext _localctx = new Non_join_query_expressionContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_non_join_query_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3934);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(3926); non_join_query_term();
				}
				break;
			case 2:
				{
				setState(3927); joined_table();
				setState(3928);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3930);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(3929);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(3932); query_term();
				}
				break;
			}
			setState(3943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCEPT || _la==UNION) {
				{
				{
				setState(3936);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3938);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(3937);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(3940); query_term();
				}
				}
				setState(3945);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_termContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_termContext non_join_query_term() {
			return getRuleContext(Non_join_query_termContext.class,0);
		}
		public Query_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_term(this);
		}
	}

	public final Query_termContext query_term() throws RecognitionException {
		Query_termContext _localctx = new Query_termContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_query_term);
		try {
			setState(3948);
			switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3946); non_join_query_term();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3947); joined_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_join_query_termContext extends ParserRuleContext {
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(SQLParser.DISTINCT); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public List<Query_primaryContext> query_primary() {
			return getRuleContexts(Query_primaryContext.class);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(SQLParser.INTERSECT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(SQLParser.DISTINCT, i);
		}
		public Query_primaryContext query_primary(int i) {
			return getRuleContext(Query_primaryContext.class,i);
		}
		public Non_join_query_primaryContext non_join_query_primary() {
			return getRuleContext(Non_join_query_primaryContext.class,0);
		}
		public TerminalNode INTERSECT(int i) {
			return getToken(SQLParser.INTERSECT, i);
		}
		public Non_join_query_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_join_query_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNon_join_query_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNon_join_query_term(this);
		}
	}

	public final Non_join_query_termContext non_join_query_term() throws RecognitionException {
		Non_join_query_termContext _localctx = new Non_join_query_termContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_non_join_query_term);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3958);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				setState(3950); non_join_query_primary();
				}
				break;
			case 2:
				{
				setState(3951); joined_table();
				setState(3952); match(INTERSECT);
				setState(3954);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(3953);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(3956); query_primary();
				}
				break;
			}
			setState(3967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT) {
				{
				{
				setState(3960); match(INTERSECT);
				setState(3962);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(3961);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(3964); query_primary();
				}
				}
				setState(3969);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_primaryContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_primaryContext non_join_query_primary() {
			return getRuleContext(Non_join_query_primaryContext.class,0);
		}
		public Query_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_primary(this);
		}
	}

	public final Query_primaryContext query_primary() throws RecognitionException {
		Query_primaryContext _localctx = new Query_primaryContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_query_primary);
		try {
			setState(3972);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3970); non_join_query_primary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3971); joined_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_join_query_primaryContext extends ParserRuleContext {
		public Simple_tableContext simple_table() {
			return getRuleContext(Simple_tableContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Non_join_query_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_join_query_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNon_join_query_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNon_join_query_primary(this);
		}
	}

	public final Non_join_query_primaryContext non_join_query_primary() throws RecognitionException {
		Non_join_query_primaryContext _localctx = new Non_join_query_primaryContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_non_join_query_primary);
		try {
			setState(3979);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3974); simple_table();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3975); match(LEFT_PAREN);
				setState(3976); non_join_query_expression();
				setState(3977); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_tableContext extends ParserRuleContext {
		public Explicit_tableContext explicit_table() {
			return getRuleContext(Explicit_tableContext.class,0);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Simple_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSimple_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSimple_table(this);
		}
	}

	public final Simple_tableContext simple_table() throws RecognitionException {
		Simple_tableContext _localctx = new Simple_tableContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_simple_table);
		try {
			setState(3983);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3981); query_specification();
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3982); explicit_table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_tableContext extends ParserRuleContext {
		public Table_or_query_nameContext table_or_query_name() {
			return getRuleContext(Table_or_query_nameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public Explicit_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExplicit_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExplicit_table(this);
		}
	}

	public final Explicit_tableContext explicit_table() throws RecognitionException {
		Explicit_tableContext _localctx = new Explicit_tableContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_explicit_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3985); match(TABLE);
			setState(3986); table_or_query_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_or_query_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Table_or_query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_or_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_or_query_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_or_query_name(this);
		}
	}

	public final Table_or_query_nameContext table_or_query_name() throws RecognitionException {
		Table_or_query_nameContext _localctx = new Table_or_query_nameContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_table_or_query_name);
		try {
			setState(3990);
			switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3988); schema_qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3989); identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_qualified_nameContext extends ParserRuleContext {
		public List<TerminalNode> DOT() { return getTokens(SQLParser.DOT); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT(int i) {
			return getToken(SQLParser.DOT, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Schema_qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchema_qualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchema_qualified_name(this);
		}
	}

	public final Schema_qualified_nameContext schema_qualified_name() throws RecognitionException {
		Schema_qualified_nameContext _localctx = new Schema_qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_schema_qualified_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3992); identifier();
			setState(3999);
			switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
			case 1:
				{
				setState(3993); match(DOT);
				setState(3994); identifier();
				setState(3997);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(3995); match(DOT);
					setState(3996); identifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Table_expressionContext table_expression() {
			return getRuleContext(Table_expressionContext.class,0);
		}
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(SQLParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_specification(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_query_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4001); match(SELECT);
			setState(4003);
			switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
			case 1:
				{
				setState(4002); set_qualifier();
				}
				break;
			}
			setState(4005); select_list();
			setState(4007);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				{
				setState(4006); table_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public Select_sublistContext select_sublist(int i) {
			return getRuleContext(Select_sublistContext.class,i);
		}
		public List<Select_sublistContext> select_sublist() {
			return getRuleContexts(Select_sublistContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelect_list(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4009); select_sublist();
			setState(4014);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,546,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4010); match(COMMA);
					setState(4011); select_sublist();
					}
					} 
				}
				setState(4016);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,546,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_sublistContext extends ParserRuleContext {
		public Derived_columnContext derived_column() {
			return getRuleContext(Derived_columnContext.class,0);
		}
		public Qualified_asteriskContext qualified_asterisk() {
			return getRuleContext(Qualified_asteriskContext.class,0);
		}
		public Select_sublistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_sublist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelect_sublist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelect_sublist(this);
		}
	}

	public final Select_sublistContext select_sublist() throws RecognitionException {
		Select_sublistContext _localctx = new Select_sublistContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_select_sublist);
		try {
			setState(4019);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4017); derived_column();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4018); qualified_asterisk();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_columnContext extends ParserRuleContext {
		public Over_clauseContext over_clause(int i) {
			return getRuleContext(Over_clauseContext.class,i);
		}
		public As_clauseContext as_clause(int i) {
			return getRuleContext(As_clauseContext.class,i);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public List<As_clauseContext> as_clause() {
			return getRuleContexts(As_clauseContext.class);
		}
		public List<Over_clauseContext> over_clause() {
			return getRuleContexts(Over_clauseContext.class);
		}
		public Derived_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDerived_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDerived_column(this);
		}
	}

	public final Derived_columnContext derived_column() throws RecognitionException {
		Derived_columnContext _localctx = new Derived_columnContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_derived_column);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4021); value_expression();
			setState(4026);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(4024);
					switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
					case 1:
						{
						setState(4022); as_clause();
						}
						break;
					case 2:
						{
						setState(4023); over_clause();
						}
						break;
					}
					} 
				}
				setState(4028);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,549,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_asteriskContext extends ParserRuleContext {
		public Token tb_name;
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public TerminalNode Identifier() { return getToken(SQLParser.Identifier, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public Qualified_asteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_asterisk; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQualified_asterisk(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQualified_asterisk(this);
		}
	}

	public final Qualified_asteriskContext qualified_asterisk() throws RecognitionException {
		Qualified_asteriskContext _localctx = new Qualified_asteriskContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_qualified_asterisk);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4031);
			_la = _input.LA(1);
			if (_la==Identifier) {
				{
				setState(4029); ((Qualified_asteriskContext)_localctx).tb_name = match(Identifier);
				setState(4030); match(DOT);
				}
			}

			setState(4033); match(MULTIPLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_qualifierContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SQLParser.DISTINCT, 0); }
		public Set_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_qualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSet_qualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSet_qualifier(this);
		}
	}

	public final Set_qualifierContext set_qualifier() throws RecognitionException {
		Set_qualifierContext _localctx = new Set_qualifierContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_set_qualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4035);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_referenceContext extends ParserRuleContext {
		public IdentifierContext tb_name;
		public IdentifierContext name;
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_reference(this);
		}
	}

	public final Column_referenceContext column_reference() throws RecognitionException {
		Column_referenceContext _localctx = new Column_referenceContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_column_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4040);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(4037); ((Column_referenceContext)_localctx).tb_name = identifier();
				setState(4038); match(DOT);
				}
				break;
			}
			setState(4042); ((Column_referenceContext)_localctx).name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_clauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public As_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAs_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAs_clause(this);
		}
	}

	public final As_clauseContext as_clause() throws RecognitionException {
		As_clauseContext _localctx = new As_clauseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_as_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4045);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4044); match(AS);
				}
			}

			setState(4047); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(SQLParser.OVER, 0); }
		public Order_specificationContext order_specification(int i) {
			return getRuleContext(Order_specificationContext.class,i);
		}
		public List<Order_specificationContext> order_specification() {
			return getRuleContexts(Order_specificationContext.class);
		}
		public Orderby_clauseContext orderby_clause(int i) {
			return getRuleContext(Orderby_clauseContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<Partition_by_columnsContext> partition_by_columns() {
			return getRuleContexts(Partition_by_columnsContext.class);
		}
		public List<Orderby_clauseContext> orderby_clause() {
			return getRuleContexts(Orderby_clauseContext.class);
		}
		public Partition_by_columnsContext partition_by_columns(int i) {
			return getRuleContext(Partition_by_columnsContext.class,i);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOver_clause(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4049); match(OVER);
			setState(4050); match(LEFT_PAREN);
			setState(4056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ASC || _la==DESC || _la==ORDER || _la==PARTITION) {
				{
				setState(4054);
				switch (_input.LA(1)) {
				case PARTITION:
					{
					setState(4051); partition_by_columns();
					}
					break;
				case ORDER:
					{
					setState(4052); orderby_clause();
					}
					break;
				case ASC:
				case DESC:
					{
					setState(4053); order_specification();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(4058);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4059); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_reference_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Column_referenceContext column_reference(int i) {
			return getRuleContext(Column_referenceContext.class,i);
		}
		public List<Column_referenceContext> column_reference() {
			return getRuleContexts(Column_referenceContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Column_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_reference_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_reference_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_reference_list(this);
		}
	}

	public final Column_reference_listContext column_reference_list() throws RecognitionException {
		Column_reference_listContext _localctx = new Column_reference_listContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_column_reference_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4061); column_reference();
			setState(4066);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4062); match(COMMA);
				setState(4063); column_reference();
				}
				}
				setState(4068);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Scalar_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterScalar_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitScalar_subquery(this);
		}
	}

	public final Scalar_subqueryContext scalar_subquery() throws RecognitionException {
		Scalar_subqueryContext _localctx = new Scalar_subqueryContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_scalar_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4069); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Row_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_subquery(this);
		}
	}

	public final Row_subqueryContext row_subquery() throws RecognitionException {
		Row_subqueryContext _localctx = new Row_subqueryContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_row_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4071); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_subquery(this);
		}
	}

	public final Table_subqueryContext table_subquery() throws RecognitionException {
		Table_subqueryContext _localctx = new Table_subqueryContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_table_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4073); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4075); match(LEFT_PAREN);
			setState(4076); query_expression();
			setState(4077); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public Pattern_matching_predicateContext pattern_matching_predicate() {
			return getRuleContext(Pattern_matching_predicateContext.class,0);
		}
		public Exists_predicateContext exists_predicate() {
			return getRuleContext(Exists_predicateContext.class,0);
		}
		public In_predicateContext in_predicate() {
			return getRuleContext(In_predicateContext.class,0);
		}
		public Null_predicateContext null_predicate() {
			return getRuleContext(Null_predicateContext.class,0);
		}
		public Between_predicateContext between_predicate() {
			return getRuleContext(Between_predicateContext.class,0);
		}
		public Comparison_predicateContext comparison_predicate() {
			return getRuleContext(Comparison_predicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPredicate(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_predicate);
		try {
			setState(4085);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4079); comparison_predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4080); between_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4081); in_predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4082); pattern_matching_predicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4083); null_predicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4084); exists_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext left;
		public Comp_opContext c;
		public Row_value_predicandContext right;
		public Row_value_predicandContext row_value_predicand(int i) {
			return getRuleContext(Row_value_predicandContext.class,i);
		}
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public List<Row_value_predicandContext> row_value_predicand() {
			return getRuleContexts(Row_value_predicandContext.class);
		}
		public Comparison_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterComparison_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitComparison_predicate(this);
		}
	}

	public final Comparison_predicateContext comparison_predicate() throws RecognitionException {
		Comparison_predicateContext _localctx = new Comparison_predicateContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_comparison_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4087); ((Comparison_predicateContext)_localctx).left = row_value_predicand();
			setState(4088); ((Comparison_predicateContext)_localctx).c = comp_op();
			setState(4089); ((Comparison_predicateContext)_localctx).right = row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_opContext extends ParserRuleContext {
		public TerminalNode GEQ() { return getToken(SQLParser.GEQ, 0); }
		public TerminalNode GTH() { return getToken(SQLParser.GTH, 0); }
		public TerminalNode LEQ() { return getToken(SQLParser.LEQ, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(SQLParser.NOT_EQUAL, 0); }
		public TerminalNode LTH() { return getToken(SQLParser.LTH, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterComp_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitComp_op(this);
		}
	}

	public final Comp_opContext comp_op() throws RecognitionException {
		Comp_opContext _localctx = new Comp_opContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_comp_op);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4091);
			_la = _input.LA(1);
			if ( !(((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (EQUAL - 342)) | (1L << (NOT_EQUAL - 342)) | (1L << (LTH - 342)) | (1L << (LEQ - 342)) | (1L << (GTH - 342)) | (1L << (GEQ - 342)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext predicand;
		public Between_predicate_part_2Context between_predicate_part_2() {
			return getRuleContext(Between_predicate_part_2Context.class,0);
		}
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Between_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBetween_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBetween_predicate(this);
		}
	}

	public final Between_predicateContext between_predicate() throws RecognitionException {
		Between_predicateContext _localctx = new Between_predicateContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_between_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4093); ((Between_predicateContext)_localctx).predicand = row_value_predicand();
			setState(4094); between_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_predicate_part_2Context extends ParserRuleContext {
		public Row_value_predicandContext begin;
		public Row_value_predicandContext end;
		public TerminalNode ASYMMETRIC() { return getToken(SQLParser.ASYMMETRIC, 0); }
		public TerminalNode BETWEEN() { return getToken(SQLParser.BETWEEN, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SQLParser.SYMMETRIC, 0); }
		public Row_value_predicandContext row_value_predicand(int i) {
			return getRuleContext(Row_value_predicandContext.class,i);
		}
		public List<Row_value_predicandContext> row_value_predicand() {
			return getRuleContexts(Row_value_predicandContext.class);
		}
		public TerminalNode AND() { return getToken(SQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Between_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_predicate_part_2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBetween_predicate_part_2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBetween_predicate_part_2(this);
		}
	}

	public final Between_predicate_part_2Context between_predicate_part_2() throws RecognitionException {
		Between_predicate_part_2Context _localctx = new Between_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 468, RULE_between_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4097);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4096); match(NOT);
				}
			}

			setState(4099); match(BETWEEN);
			setState(4101);
			_la = _input.LA(1);
			if (_la==ASYMMETRIC || _la==SYMMETRIC) {
				{
				setState(4100);
				_la = _input.LA(1);
				if ( !(_la==ASYMMETRIC || _la==SYMMETRIC) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(4103); ((Between_predicate_part_2Context)_localctx).begin = row_value_predicand();
			setState(4104); match(AND);
			setState(4105); ((Between_predicate_part_2Context)_localctx).end = row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicateContext extends ParserRuleContext {
		public Numeric_value_expressionContext predicand;
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public In_predicate_valueContext in_predicate_value() {
			return getRuleContext(In_predicate_valueContext.class,0);
		}
		public In_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIn_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIn_predicate(this);
		}
	}

	public final In_predicateContext in_predicate() throws RecognitionException {
		In_predicateContext _localctx = new In_predicateContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_in_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4107); ((In_predicateContext)_localctx).predicand = numeric_value_expression();
			setState(4109);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4108); match(NOT);
				}
			}

			setState(4111); match(IN);
			setState(4112); in_predicate_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicate_valueContext extends ParserRuleContext {
		public In_value_listContext in_value_list() {
			return getRuleContext(In_value_listContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public In_predicate_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIn_predicate_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIn_predicate_value(this);
		}
	}

	public final In_predicate_valueContext in_predicate_value() throws RecognitionException {
		In_predicate_valueContext _localctx = new In_predicate_valueContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_in_predicate_value);
		try {
			setState(4119);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4114); table_subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4115); match(LEFT_PAREN);
				setState(4116); in_value_list();
				setState(4117); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_value_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Row_value_expressionContext row_value_expression(int i) {
			return getRuleContext(Row_value_expressionContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<Row_value_expressionContext> row_value_expression() {
			return getRuleContexts(Row_value_expressionContext.class);
		}
		public In_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_value_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIn_value_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIn_value_list(this);
		}
	}

	public final In_value_listContext in_value_list() throws RecognitionException {
		In_value_listContext _localctx = new In_value_listContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_in_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4121); row_value_expression();
			setState(4126);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4122); match(COMMA);
				setState(4123); row_value_expression();
				}
				}
				setState(4128);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pattern_matching_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext f;
		public Token s;
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Pattern_matcherContext pattern_matcher() {
			return getRuleContext(Pattern_matcherContext.class,0);
		}
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Pattern_matching_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern_matching_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPattern_matching_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPattern_matching_predicate(this);
		}
	}

	public final Pattern_matching_predicateContext pattern_matching_predicate() throws RecognitionException {
		Pattern_matching_predicateContext _localctx = new Pattern_matching_predicateContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_pattern_matching_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4129); ((Pattern_matching_predicateContext)_localctx).f = row_value_predicand();
			setState(4130); pattern_matcher();
			setState(4131); ((Pattern_matching_predicateContext)_localctx).s = match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pattern_matcherContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Negativable_matcherContext negativable_matcher() {
			return getRuleContext(Negativable_matcherContext.class,0);
		}
		public Regex_matcherContext regex_matcher() {
			return getRuleContext(Regex_matcherContext.class,0);
		}
		public Pattern_matcherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern_matcher; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPattern_matcher(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPattern_matcher(this);
		}
	}

	public final Pattern_matcherContext pattern_matcher() throws RecognitionException {
		Pattern_matcherContext _localctx = new Pattern_matcherContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_pattern_matcher);
		int _la;
		try {
			setState(4138);
			switch (_input.LA(1)) {
			case ILIKE:
			case LIKE:
			case NOT:
			case REGEXP:
			case RLIKE:
			case SIMILAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4134);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4133); match(NOT);
					}
				}

				setState(4136); negativable_matcher();
				}
				break;
			case Similar_To:
			case Not_Similar_To:
			case Similar_To_Case_Insensitive:
			case Not_Similar_To_Case_Insensitive:
				enterOuterAlt(_localctx, 2);
				{
				setState(4137); regex_matcher();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Negativable_matcherContext extends ParserRuleContext {
		public TerminalNode SIMILAR() { return getToken(SQLParser.SIMILAR, 0); }
		public TerminalNode REGEXP() { return getToken(SQLParser.REGEXP, 0); }
		public TerminalNode ILIKE() { return getToken(SQLParser.ILIKE, 0); }
		public TerminalNode RLIKE() { return getToken(SQLParser.RLIKE, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode LIKE() { return getToken(SQLParser.LIKE, 0); }
		public Negativable_matcherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negativable_matcher; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNegativable_matcher(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNegativable_matcher(this);
		}
	}

	public final Negativable_matcherContext negativable_matcher() throws RecognitionException {
		Negativable_matcherContext _localctx = new Negativable_matcherContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_negativable_matcher);
		int _la;
		try {
			setState(4143);
			switch (_input.LA(1)) {
			case ILIKE:
			case LIKE:
			case REGEXP:
			case RLIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4140);
				_la = _input.LA(1);
				if ( !(_la==ILIKE || _la==LIKE || _la==REGEXP || _la==RLIKE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case SIMILAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4141); match(SIMILAR);
				setState(4142); match(TO);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_matcherContext extends ParserRuleContext {
		public TerminalNode Not_Similar_To() { return getToken(SQLParser.Not_Similar_To, 0); }
		public TerminalNode Similar_To() { return getToken(SQLParser.Similar_To, 0); }
		public TerminalNode Not_Similar_To_Case_Insensitive() { return getToken(SQLParser.Not_Similar_To_Case_Insensitive, 0); }
		public TerminalNode Similar_To_Case_Insensitive() { return getToken(SQLParser.Similar_To_Case_Insensitive, 0); }
		public Regex_matcherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_matcher; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRegex_matcher(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRegex_matcher(this);
		}
	}

	public final Regex_matcherContext regex_matcher() throws RecognitionException {
		Regex_matcherContext _localctx = new Regex_matcherContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_regex_matcher);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4145);
			_la = _input.LA(1);
			if ( !(((((_la - 336)) & ~0x3f) == 0 && ((1L << (_la - 336)) & ((1L << (Similar_To - 336)) | (1L << (Not_Similar_To - 336)) | (1L << (Similar_To_Case_Insensitive - 336)) | (1L << (Not_Similar_To_Case_Insensitive - 336)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext predicand;
		public Token n;
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Null_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNull_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNull_predicate(this);
		}
	}

	public final Null_predicateContext null_predicate() throws RecognitionException {
		Null_predicateContext _localctx = new Null_predicateContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_null_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4147); ((Null_predicateContext)_localctx).predicand = row_value_predicand();
			setState(4148); match(IS);
			setState(4150);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4149); ((Null_predicateContext)_localctx).n = match(NOT);
				}
			}

			setState(4152); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_comparison_predicateContext extends ParserRuleContext {
		public Numeric_value_expressionContext l;
		public Comp_opContext c;
		public QuantifierContext q;
		public Table_subqueryContext s;
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public QuantifierContext quantifier() {
			return getRuleContext(QuantifierContext.class,0);
		}
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Quantified_comparison_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_comparison_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuantified_comparison_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuantified_comparison_predicate(this);
		}
	}

	public final Quantified_comparison_predicateContext quantified_comparison_predicate() throws RecognitionException {
		Quantified_comparison_predicateContext _localctx = new Quantified_comparison_predicateContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_quantified_comparison_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4154); ((Quantified_comparison_predicateContext)_localctx).l = numeric_value_expression();
			setState(4155); ((Quantified_comparison_predicateContext)_localctx).c = comp_op();
			setState(4156); ((Quantified_comparison_predicateContext)_localctx).q = quantifier();
			setState(4157); ((Quantified_comparison_predicateContext)_localctx).s = table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuantifierContext extends ParserRuleContext {
		public AllContext all() {
			return getRuleContext(AllContext.class,0);
		}
		public SomeContext some() {
			return getRuleContext(SomeContext.class,0);
		}
		public QuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuantifier(this);
		}
	}

	public final QuantifierContext quantifier() throws RecognitionException {
		QuantifierContext _localctx = new QuantifierContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_quantifier);
		try {
			setState(4161);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4159); all();
				}
				break;
			case ANY:
			case SOME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4160); some();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public AllContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAll(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAll(this);
		}
	}

	public final AllContext all() throws RecognitionException {
		AllContext _localctx = new AllContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_all);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4163); match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SomeContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(SQLParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(SQLParser.ANY, 0); }
		public SomeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_some; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSome(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSome(this);
		}
	}

	public final SomeContext some() throws RecognitionException {
		SomeContext _localctx = new SomeContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_some);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4165);
			_la = _input.LA(1);
			if ( !(_la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exists_predicateContext extends ParserRuleContext {
		public Table_subqueryContext s;
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Exists_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exists_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExists_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExists_predicate(this);
		}
	}

	public final Exists_predicateContext exists_predicate() throws RecognitionException {
		Exists_predicateContext _localctx = new Exists_predicateContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_exists_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4168);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4167); match(NOT);
				}
			}

			setState(4170); match(EXISTS);
			setState(4171); ((Exists_predicateContext)_localctx).s = table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_predicateContext extends ParserRuleContext {
		public Table_subqueryContext s;
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public Unique_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnique_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnique_predicate(this);
		}
	}

	public final Unique_predicateContext unique_predicate() throws RecognitionException {
		Unique_predicateContext _localctx = new Unique_predicateContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_unique_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4173); match(UNIQUE);
			setState(4174); ((Unique_predicateContext)_localctx).s = table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_datetime_fieldContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(SQLParser.SECOND, 0); }
		public Non_second_primary_datetime_fieldContext non_second_primary_datetime_field() {
			return getRuleContext(Non_second_primary_datetime_fieldContext.class,0);
		}
		public Primary_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPrimary_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPrimary_datetime_field(this);
		}
	}

	public final Primary_datetime_fieldContext primary_datetime_field() throws RecognitionException {
		Primary_datetime_fieldContext _localctx = new Primary_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_primary_datetime_field);
		try {
			setState(4178);
			switch (_input.LA(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4176); non_second_primary_datetime_field();
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 2);
				{
				setState(4177); match(SECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_second_primary_datetime_fieldContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(SQLParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(SQLParser.MONTH, 0); }
		public TerminalNode HOUR() { return getToken(SQLParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(SQLParser.DAY, 0); }
		public TerminalNode MINUTE() { return getToken(SQLParser.MINUTE, 0); }
		public Non_second_primary_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_second_primary_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNon_second_primary_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNon_second_primary_datetime_field(this);
		}
	}

	public final Non_second_primary_datetime_fieldContext non_second_primary_datetime_field() throws RecognitionException {
		Non_second_primary_datetime_fieldContext _localctx = new Non_second_primary_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_non_second_primary_datetime_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4180);
			_la = _input.LA(1);
			if ( !(((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (DAY - 169)) | (1L << (HOUR - 169)) | (1L << (MINUTE - 169)) | (1L << (MONTH - 169)))) != 0) || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_datetime_fieldContext extends ParserRuleContext {
		public TerminalNode ISODOW() { return getToken(SQLParser.ISODOW, 0); }
		public TerminalNode EPOCH() { return getToken(SQLParser.EPOCH, 0); }
		public TerminalNode QUARTER() { return getToken(SQLParser.QUARTER, 0); }
		public TerminalNode DOY() { return getToken(SQLParser.DOY, 0); }
		public TerminalNode MILLENNIUM() { return getToken(SQLParser.MILLENNIUM, 0); }
		public TerminalNode DECADE() { return getToken(SQLParser.DECADE, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SQLParser.MICROSECONDS, 0); }
		public TerminalNode WEEK() { return getToken(SQLParser.WEEK, 0); }
		public TerminalNode CENTURY() { return getToken(SQLParser.CENTURY, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SQLParser.MILLISECONDS, 0); }
		public TerminalNode ISOYEAR() { return getToken(SQLParser.ISOYEAR, 0); }
		public TerminalNode DOW() { return getToken(SQLParser.DOW, 0); }
		public Extended_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtended_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtended_datetime_field(this);
		}
	}

	public final Extended_datetime_fieldContext extended_datetime_field() throws RecognitionException {
		Extended_datetime_fieldContext _localctx = new Extended_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_extended_datetime_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4182);
			_la = _input.LA(1);
			if ( !(((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (CENTURY - 151)) | (1L << (DECADE - 151)) | (1L << (DOW - 151)) | (1L << (DOY - 151)) | (1L << (EPOCH - 151)) | (1L << (ISODOW - 151)) | (1L << (ISOYEAR - 151)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (MICROSECONDS - 215)) | (1L << (MILLENNIUM - 215)) | (1L << (MILLISECONDS - 215)) | (1L << (QUARTER - 215)))) != 0) || _la==WEEK) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Orderby_clauseContext extends ParserRuleContext {
		public Sort_specifier_listContext sort_specifier_list() {
			return getRuleContext(Sort_specifier_listContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(SQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderby_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrderby_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrderby_clause(this);
		}
	}

	public final Orderby_clauseContext orderby_clause() throws RecognitionException {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_orderby_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4184); match(ORDER);
			setState(4185); match(BY);
			setState(4186); sort_specifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specifier_parenContext extends ParserRuleContext {
		public Sort_specifier_parenContext sort_specifier_paren(int i) {
			return getRuleContext(Sort_specifier_parenContext.class,i);
		}
		public List<Sort_specifier_parenContext> sort_specifier_paren() {
			return getRuleContexts(Sort_specifier_parenContext.class);
		}
		public Sort_specifier_listContext sort_specifier_list() {
			return getRuleContext(Sort_specifier_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public Sort_specifier_parenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specifier_paren; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSort_specifier_paren(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSort_specifier_paren(this);
		}
	}

	public final Sort_specifier_parenContext sort_specifier_paren() throws RecognitionException {
		Sort_specifier_parenContext _localctx = new Sort_specifier_parenContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_sort_specifier_paren);
		int _la;
		try {
			setState(4197);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4188); sort_specifier_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4189); match(LEFT_PAREN);
				setState(4192); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(4192);
					switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
					case 1:
						{
						setState(4190);
						_la = _input.LA(1);
						if ( _la <= 0 || (_la==LEFT_PAREN || _la==RIGHT_PAREN) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						break;
					case 2:
						{
						setState(4191); sort_specifier_paren();
						}
						break;
					}
					}
					setState(4194); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AGGREGATE) | (1L << AFTER) | (1L << AS) | (1L << ALL) | (1L << ALTER) | (1L << AND) | (1L << ANY) | (1L << ASYMMETRIC) | (1L << ASC) | (1L << AUTHORIZATION) | (1L << BEFORE) | (1L << BOTH) | (1L << CASE) | (1L << CASCADE) | (1L << CAST) | (1L << COLLATE) | (1L << COLLATION) | (1L << CONNECT) | (1L << CONSTRAINT) | (1L << CONSTRAINTS) | (1L << CONVERSION) | (1L << COPY) | (1L << CREATE) | (1L << CROSS) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DEFAULTS) | (1L << DEFERRABLE) | (1L << DEFERRED) | (1L << DELETE) | (1L << DELIMITER) | (1L << DESC) | (1L << DISTINCT) | (1L << DOMAIN) | (1L << EACH) | (1L << ELSE) | (1L << END) | (1L << ENCODING) | (1L << ESCAPE) | (1L << EXCEPT) | (1L << EXCLUDE) | (1L << EXCLUDING) | (1L << EXECUTE) | (1L << EXTENSION) | (1L << FALSE) | (1L << FOR) | (1L << FOREIGN) | (1L << FORCE_QUOTE) | (1L << FORCE_NOT_NULL) | (1L << FULL) | (1L << FUNCTION) | (1L << FUNCTIONS) | (1L << FROM) | (1L << GLOBAL) | (1L << GRANT) | (1L << GROUP) | (1L << HAVING) | (1L << HANDLER) | (1L << HEADER) | (1L << IF) | (1L << ILIKE) | (1L << IMMEDIATE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (IMMUTABLE - 64)) | (1L << (IN - 64)) | (1L << (INCLUDING - 64)) | (1L << (INHERITS - 64)) | (1L << (INITIALLY - 64)) | (1L << (INLINE - 64)) | (1L << (INNER - 64)) | (1L << (INTERSECT - 64)) | (1L << (INTO - 64)) | (1L << (INOUT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (IS - 64)) | (1L << (JOIN - 64)) | (1L << (KEY - 64)) | (1L << (LEADING - 64)) | (1L << (LEFT - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCAL - 64)) | (1L << (NATURAL - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (OF - 64)) | (1L << (OIDS - 64)) | (1L << (OUTER - 64)) | (1L << (OUT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (OWNED - 64)) | (1L << (OWNER - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRIMARY - 64)) | (1L << (PRIVILEGES - 64)) | (1L << (PROCEDURE - 64)) | (1L << (PROCEDURAL - 64)) | (1L << (ROLE - 64)) | (1L << (ROW - 64)) | (1L << (ROWS - 64)) | (1L << (REFERENCES - 64)) | (1L << (REPLACE - 64)) | (1L << (RESTRICT - 64)) | (1L << (RETURNS - 64)) | (1L << (REVOKE - 64)) | (1L << (RIGHT - 64)) | (1L << (RULE - 64)) | (1L << (SCHEMA - 64)) | (1L << (SEQUENCE - 64)) | (1L << (SEQUENCES - 64)) | (1L << (SELECT - 64)) | (1L << (SESSION - 64)) | (1L << (SETOF - 64)) | (1L << (SOME - 64)) | (1L << (STATEMENT - 64)) | (1L << (STRICT - 64)) | (1L << (SYMMETRIC - 64)) | (1L << (TABLE - 64)) | (1L << (TEMP - 64)) | (1L << (TEMPORARY - 64)) | (1L << (THEN - 64)) | (1L << (TRAILING - 64)) | (1L << (TRUSTED - 64)) | (1L << (TRIGGER - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (TRUE - 128)) | (1L << (TRUNCATE - 128)) | (1L << (UNION - 128)) | (1L << (UNIQUE - 128)) | (1L << (UPDATE - 128)) | (1L << (USAGE - 128)) | (1L << (USING - 128)) | (1L << (VALIDATOR - 128)) | (1L << (VARIADIC - 128)) | (1L << (VIEW - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WITH - 128)) | (1L << (WITHOUT - 128)) | (1L << (ADMIN - 128)) | (1L << (ALWAYS - 128)) | (1L << (ARRAY - 128)) | (1L << (AVG - 128)) | (1L << (BETWEEN - 128)) | (1L << (BY - 128)) | (1L << (CACHE - 128)) | (1L << (CALLED - 128)) | (1L << (CLASS - 128)) | (1L << (CENTURY - 128)) | (1L << (CHARACTER - 128)) | (1L << (CHECK - 128)) | (1L << (CLUSTER - 128)) | (1L << (COLLECT - 128)) | (1L << (COALESCE - 128)) | (1L << (COLUMN - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMENTS - 128)) | (1L << (COMMIT - 128)) | (1L << (CONCURRENTLY - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (COST - 128)) | (1L << (COUNT - 128)) | (1L << (CUBE - 128)) | (1L << (CURRENT - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DAY - 128)) | (1L << (DEC - 128)) | (1L << (DECADE - 128)) | (1L << (DEFINER - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISABLE - 128)) | (1L << (DOW - 128)) | (1L << (DOY - 128)) | (1L << (DROP - 128)) | (1L << (ENABLE - 128)) | (1L << (EPOCH - 128)) | (1L << (EVENT - 128)) | (1L << (EVERY - 128)) | (1L << (EXISTS - 128)) | (1L << (EXTENDED - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAMILY - 128)) | (1L << (FILTER - 128)) | (1L << (FIRST - 128)) | (1L << (FORMAT - 128)) | (1L << (FUSION - 128)) | (1L << (GROUPING - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (HASH - 192)) | (1L << (HOUR - 192)) | (1L << (INHERIT - 192)) | (1L << (INDEX - 192)) | (1L << (INDEXES - 192)) | (1L << (INCREMENT - 192)) | (1L << (INPUT - 192)) | (1L << (INSERT - 192)) | (1L << (INTERSECTION - 192)) | (1L << (ISCACHABLE - 192)) | (1L << (ISODOW - 192)) | (1L << (ISOYEAR - 192)) | (1L << (ISSTRICT - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LARGE - 192)) | (1L << (LAST - 192)) | (1L << (LESS - 192)) | (1L << (LIST - 192)) | (1L << (LOCATION - 192)) | (1L << (MAIN - 192)) | (1L << (MATCH - 192)) | (1L << (MAX - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MICROSECONDS - 192)) | (1L << (MILLENNIUM - 192)) | (1L << (MILLISECONDS - 192)) | (1L << (MIN - 192)) | (1L << (MINVALUE - 192)) | (1L << (MINUTE - 192)) | (1L << (MONTH - 192)) | (1L << (NATIONAL - 192)) | (1L << (NO - 192)) | (1L << (NONE - 192)) | (1L << (NULLIF - 192)) | (1L << (N_DISTINCT - 192)) | (1L << (N_DISTINCT_INHERITED - 192)) | (1L << (OBJECT - 192)) | (1L << (ON - 192)) | (1L << (ONLY - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIONS - 192)) | (1L << (OVER - 192)) | (1L << (OVERWRITE - 192)) | (1L << (PARSER - 192)) | (1L << (PARTIAL - 192)) | (1L << (PARTITION - 192)) | (1L << (PARTITIONS - 192)) | (1L << (PLAIN - 192)) | (1L << (PRECISION - 192)) | (1L << (PUBLIC - 192)) | (1L << (PURGE - 192)) | (1L << (QUARTER - 192)) | (1L << (RANGE - 192)) | (1L << (REGCONFIG - 192)) | (1L << (REGEXP - 192)) | (1L << (RENAME - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RLIKE - 192)) | (1L << (ROLLUP - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (SERVER - 256)) | (1L << (SET - 256)) | (1L << (SIMILAR - 256)) | (1L << (SIMPLE - 256)) | (1L << (STABLE - 256)) | (1L << (START - 256)) | (1L << (STATISTICS - 256)) | (1L << (STDIN - 256)) | (1L << (STORAGE - 256)) | (1L << (STDDEV_POP - 256)) | (1L << (STDDEV_SAMP - 256)) | (1L << (SUBPARTITION - 256)) | (1L << (SUM - 256)) | (1L << (TABLESPACE - 256)) | (1L << (TABLES - 256)) | (1L << (TEMPLATE - 256)) | (1L << (THAN - 256)) | (1L << (TIMEZONE - 256)) | (1L << (TIMEZONE_HOUR - 256)) | (1L << (TIMEZONE_MINUTE - 256)) | (1L << (TRIM - 256)) | (1L << (TO - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (USER - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUES - 256)) | (1L << (VAR_SAMP - 256)) | (1L << (VAR_POP - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VOLATILE - 256)) | (1L << (WEEK - 256)) | (1L << (WINDOW - 256)) | (1L << (WRAPPER - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (BOOLEAN - 256)) | (1L << (BOOL - 256)) | (1L << (BIT - 256)) | (1L << (VARBIT - 256)) | (1L << (INT1 - 256)) | (1L << (INT2 - 256)) | (1L << (INT4 - 256)) | (1L << (INT8 - 256)) | (1L << (TINYINT - 256)) | (1L << (SMALLINT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (BIGINT - 256)) | (1L << (FLOAT4 - 256)) | (1L << (FLOAT8 - 256)) | (1L << (REAL - 256)) | (1L << (REGCLASS - 256)) | (1L << (FLOAT - 256)) | (1L << (DOUBLE - 256)) | (1L << (NUMERIC - 256)) | (1L << (DECIMAL - 256)) | (1L << (CHAR - 256)) | (1L << (VARCHAR - 256)) | (1L << (NCHAR - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (NVARCHAR - 320)) | (1L << (DATE - 320)) | (1L << (TIME - 320)) | (1L << (TIMETZ - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TIMESTAMPTZ - 320)) | (1L << (TEXT - 320)) | (1L << (UUID - 320)) | (1L << (BINARY - 320)) | (1L << (VARBINARY - 320)) | (1L << (BLOB - 320)) | (1L << (BYTEA - 320)) | (1L << (INET4 - 320)) | (1L << (INET - 320)) | (1L << (INTERVAL - 320)) | (1L << (VOID - 320)) | (1L << (Similar_To - 320)) | (1L << (Not_Similar_To - 320)) | (1L << (Similar_To_Case_Insensitive - 320)) | (1L << (Not_Similar_To_Case_Insensitive - 320)) | (1L << (CAST_EXPRESSION - 320)) | (1L << (ASSIGN - 320)) | (1L << (EQUAL - 320)) | (1L << (COLON - 320)) | (1L << (SEMI_COLON - 320)) | (1L << (COMMA - 320)) | (1L << (CONCATENATION_OPERATOR - 320)) | (1L << (NOT_EQUAL - 320)) | (1L << (LTH - 320)) | (1L << (LEQ - 320)) | (1L << (GTH - 320)) | (1L << (GEQ - 320)) | (1L << (LEFT_PAREN - 320)) | (1L << (PLUS - 320)) | (1L << (MINUS - 320)) | (1L << (MULTIPLY - 320)) | (1L << (DIVIDE - 320)) | (1L << (MODULAR - 320)) | (1L << (DOT - 320)) | (1L << (UNDERLINE - 320)) | (1L << (VERTICAL_BAR - 320)) | (1L << (QUOTE - 320)) | (1L << (DOUBLE_QUOTE - 320)) | (1L << (DOLLAR - 320)) | (1L << (LEFT_BRACKET - 320)) | (1L << (RIGHT_BRACKET - 320)) | (1L << (BIT_AND - 320)) | (1L << (NUMBER - 320)) | (1L << (REAL_NUMBER - 320)) | (1L << (BlockComment - 320)) | (1L << (LineComment - 320)) | (1L << (Identifier - 320)) | (1L << (QuotedIdentifier - 320)) | (1L << (UnterminatedQuotedIdentifier - 320)) | (1L << (Character_String_Literal - 320)) | (1L << (ESC_SEQUENCES - 320)) | (1L << (BeginDollarStringConstant - 320)) | (1L << (Space - 320)) | (1L << (White_Space - 320)) | (1L << (BAD - 320)) | (1L << (Text_between_Dollar - 320)) | (1L << (EndDollarStringConstant - 320)))) != 0) );
				setState(4196); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specifier_listContext extends ParserRuleContext {
		public List<Sort_specifierContext> sort_specifier() {
			return getRuleContexts(Sort_specifierContext.class);
		}
		public Sort_specifierContext sort_specifier(int i) {
			return getRuleContext(Sort_specifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Sort_specifier_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specifier_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSort_specifier_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSort_specifier_list(this);
		}
	}

	public final Sort_specifier_listContext sort_specifier_list() throws RecognitionException {
		Sort_specifier_listContext _localctx = new Sort_specifier_listContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_sort_specifier_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4199); sort_specifier();
			setState(4204);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,572,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4200); match(COMMA);
					setState(4201); sort_specifier();
					}
					} 
				}
				setState(4206);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,572,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specifierContext extends ParserRuleContext {
		public Row_value_predicandContext key;
		public Order_specificationContext order;
		public Null_orderingContext null_order;
		public Order_specificationContext order_specification() {
			return getRuleContext(Order_specificationContext.class,0);
		}
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Null_orderingContext null_ordering() {
			return getRuleContext(Null_orderingContext.class,0);
		}
		public Sort_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSort_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSort_specifier(this);
		}
	}

	public final Sort_specifierContext sort_specifier() throws RecognitionException {
		Sort_specifierContext _localctx = new Sort_specifierContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_sort_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4207); ((Sort_specifierContext)_localctx).key = row_value_predicand();
			setState(4209);
			switch ( getInterpreter().adaptivePredict(_input,573,_ctx) ) {
			case 1:
				{
				setState(4208); ((Sort_specifierContext)_localctx).order = order_specification();
				}
				break;
			}
			setState(4212);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				{
				setState(4211); ((Sort_specifierContext)_localctx).null_order = null_ordering();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_specificationContext extends ParserRuleContext {
		public TerminalNode DESC() { return getToken(SQLParser.DESC, 0); }
		public TerminalNode ASC() { return getToken(SQLParser.ASC, 0); }
		public Order_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrder_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrder_specification(this);
		}
	}

	public final Order_specificationContext order_specification() throws RecognitionException {
		Order_specificationContext _localctx = new Order_specificationContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_order_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4214);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public Numeric_value_expressionContext e;
		public TerminalNode LIMIT() { return getToken(SQLParser.LIMIT, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLimit_clause(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4216); match(LIMIT);
			setState(4217); ((Limit_clauseContext)_localctx).e = numeric_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_orderingContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(SQLParser.FIRST, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode LAST() { return getToken(SQLParser.LAST, 0); }
		public Null_orderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_ordering; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNull_ordering(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNull_ordering(this);
		}
	}

	public final Null_orderingContext null_ordering() throws RecognitionException {
		Null_orderingContext _localctx = new Null_orderingContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_null_ordering);
		try {
			setState(4223);
			switch ( getInterpreter().adaptivePredict(_input,575,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4219); match(NULL);
				setState(4220); match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4221); match(NULL);
				setState(4222); match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0180\u1084\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\3\2\3\2\3\2\7\2\u020c\n\2\f\2\16\2\u020f\13\2"+
		"\3\2\3\2\3\3\3\3\5\3\u0215\n\3\3\4\3\4\5\4\u0219\n\4\3\5\3\5\3\5\3\5\3"+
		"\5\3\5\7\5\u0221\n\5\f\5\16\5\u0224\13\5\3\5\3\5\5\5\u0228\n\5\3\5\5\5"+
		"\u022b\n\5\3\5\3\5\3\5\5\5\u0230\n\5\3\5\5\5\u0233\n\5\3\5\3\5\3\5\3\5"+
		"\7\5\u0239\n\5\f\5\16\5\u023c\13\5\3\5\3\5\5\5\u0240\n\5\3\6\3\6\3\6\3"+
		"\6\5\6\u0246\n\6\3\6\3\6\3\6\3\6\3\6\3\6\5\6\u024e\n\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\7\6\u0259\n\6\f\6\16\6\u025c\13\6\3\6\3\6\3\6\5\6"+
		"\u0261\n\6\3\6\3\6\3\6\3\6\3\6\7\6\u0268\n\6\f\6\16\6\u026b\13\6\3\6\3"+
		"\6\3\6\3\6\5\6\u0271\n\6\3\7\3\7\3\7\5\7\u0276\n\7\3\b\3\b\3\b\3\b\3\b"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0286\n\b\3\t\3\t\3\t\3\t\3\t"+
		"\3\t\3\t\5\t\u028f\n\t\3\n\3\n\3\n\3\n\6\n\u0295\n\n\r\n\16\n\u0296\3"+
		"\n\5\n\u029a\n\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u02a5\n\n\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\5\f\u02b0\n\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\r\3\r\3\r\5\r\u02bb\n\r\3\r\6\r\u02be\n\r\r\r\16\r\u02bf\3\r"+
		"\3\r\3\r\7\r\u02c5\n\r\f\r\16\r\u02c8\13\r\3\r\3\r\5\r\u02cc\n\r\3\r\3"+
		"\r\3\r\3\r\5\r\u02d2\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u02db\n\r\3\r"+
		"\3\r\5\r\u02df\n\r\3\16\3\16\5\16\u02e3\n\16\3\16\3\16\3\16\5\16\u02e8"+
		"\n\16\3\16\3\16\5\16\u02ec\n\16\3\16\3\16\5\16\u02f0\n\16\3\16\3\16\5"+
		"\16\u02f4\n\16\3\16\3\16\3\16\5\16\u02f9\n\16\3\16\3\16\3\16\3\16\5\16"+
		"\u02ff\n\16\3\16\3\16\5\16\u0303\n\16\3\16\3\16\5\16\u0307\n\16\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\7\16\u031a\n\16\f\16\16\16\u031d\13\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\7\16\u0326\n\16\f\16\16\16\u0329\13\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\5\16\u0333\n\16\5\16\u0335\n\16\3\16\3\16\3\16"+
		"\3\16\5\16\u033b\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16"+
		"\u0346\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0350\n\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\7\16\u036d"+
		"\n\16\f\16\16\16\u0370\13\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0383\n\16\3\17\3\17"+
		"\3\17\3\17\3\20\3\20\5\20\u038b\n\20\3\20\3\20\3\20\5\20\u0390\n\20\3"+
		"\20\3\20\3\20\3\20\5\20\u0396\n\20\3\20\5\20\u0399\n\20\3\20\3\20\5\20"+
		"\u039d\n\20\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\3\22\5\22\u03af\n\22\3\22\3\22\3\22\5\22\u03b4\n\22\3"+
		"\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u03c3"+
		"\n\22\3\22\3\22\5\22\u03c7\n\22\3\22\3\22\3\22\5\22\u03cc\n\22\5\22\u03ce"+
		"\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u03d8\n\23\f\23\16"+
		"\23\u03db\13\23\5\23\u03dd\n\23\3\23\3\23\3\23\3\23\3\23\7\23\u03e4\n"+
		"\23\f\23\16\23\u03e7\13\23\5\23\u03e9\n\23\3\23\3\23\3\24\3\24\3\24\3"+
		"\24\7\24\u03f1\n\24\f\24\16\24\u03f4\13\24\3\24\3\24\5\24\u03f8\n\24\5"+
		"\24\u03fa\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\7\24\u0403\n\24\f\24"+
		"\16\24\u0406\13\24\3\24\3\24\5\24\u040a\n\24\5\24\u040c\n\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\5\24\u0415\n\24\5\24\u0417\n\24\3\24\3\24\3"+
		"\24\3\24\3\24\3\24\3\24\5\24\u0420\n\24\5\24\u0422\n\24\3\24\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\5\24\u042b\n\24\3\24\3\24\3\24\7\24\u0430\n\24\f"+
		"\24\16\24\u0433\13\24\3\24\3\24\5\24\u0437\n\24\5\24\u0439\n\24\3\24\3"+
		"\24\3\24\3\24\3\24\3\24\3\24\5\24\u0442\n\24\3\24\3\24\3\24\7\24\u0447"+
		"\n\24\f\24\16\24\u044a\13\24\3\24\3\24\5\24\u044e\n\24\5\24\u0450\n\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0459\n\24\3\24\3\24\3\24\5\24"+
		"\u045e\n\24\5\24\u0460\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0469"+
		"\n\24\3\24\3\24\3\24\5\24\u046e\n\24\5\24\u0470\n\24\3\24\3\24\3\24\5"+
		"\24\u0475\n\24\3\25\3\25\3\25\3\25\5\25\u047b\n\25\3\25\3\25\3\25\3\25"+
		"\5\25\u0481\n\25\3\25\5\25\u0484\n\25\7\25\u0486\n\25\f\25\16\25\u0489"+
		"\13\25\3\25\3\25\3\25\3\25\5\25\u048f\n\25\3\25\5\25\u0492\n\25\3\26\3"+
		"\26\3\26\3\26\5\26\u0498\n\26\3\26\3\26\3\26\5\26\u049d\n\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\26\5\26\u04a5\n\26\3\26\3\26\3\26\3\26\5\26\u04ab\n"+
		"\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u04b3\n\26\3\26\3\26\3\26\3\26"+
		"\5\26\u04b9\n\26\7\26\u04bb\n\26\f\26\16\26\u04be\13\26\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\26\7\26\u04c7\n\26\f\26\16\26\u04ca\13\26\3\26\3\26"+
		"\5\26\u04ce\n\26\3\27\3\27\5\27\u04d2\n\27\3\27\3\27\5\27\u04d6\n\27\3"+
		"\27\5\27\u04d9\n\27\3\27\3\27\3\27\3\27\5\27\u04df\n\27\3\27\3\27\5\27"+
		"\u04e3\n\27\3\27\3\27\5\27\u04e7\n\27\3\27\3\27\5\27\u04eb\n\27\3\30\3"+
		"\30\3\30\3\30\3\30\5\30\u04f2\n\30\3\30\3\30\5\30\u04f6\n\30\3\30\3\30"+
		"\5\30\u04fa\n\30\3\30\3\30\5\30\u04fe\n\30\3\30\3\30\5\30\u0502\n\30\3"+
		"\31\3\31\3\31\5\31\u0507\n\31\3\31\5\31\u050a\n\31\3\31\5\31\u050d\n\31"+
		"\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0515\n\31\3\31\3\31\5\31\u0519\n"+
		"\31\5\31\u051b\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\7\32\u052a\n\32\f\32\16\32\u052d\13\32\3\32\3\32\5\32"+
		"\u0531\n\32\6\32\u0533\n\32\r\32\16\32\u0534\5\32\u0537\n\32\3\32\3\32"+
		"\3\32\3\32\3\33\3\33\5\33\u053f\n\33\3\33\3\33\3\33\3\33\3\33\7\33\u0546"+
		"\n\33\f\33\16\33\u0549\13\33\3\33\3\33\3\33\3\33\3\33\5\33\u0550\n\33"+
		"\3\33\3\33\3\33\3\33\5\33\u0556\n\33\7\33\u0558\n\33\f\33\16\33\u055b"+
		"\13\33\5\33\u055d\n\33\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0565\n\34\3"+
		"\35\3\35\5\35\u0569\n\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0571\n\35"+
		"\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\7\35\u057b\n\35\f\35\16\35\u057e"+
		"\13\35\5\35\u0580\n\35\5\35\u0582\n\35\3\35\5\35\u0585\n\35\6\35\u0587"+
		"\n\35\r\35\16\35\u0588\3\35\3\35\3\35\3\35\5\35\u058f\n\35\3\35\3\35\3"+
		"\35\5\35\u0594\n\35\3\35\3\35\3\35\3\35\5\35\u059a\n\35\3\35\3\35\5\35"+
		"\u059e\n\35\3\35\5\35\u05a1\n\35\3\35\3\35\5\35\u05a5\n\35\3\35\3\35\3"+
		"\35\3\35\3\35\5\35\u05ac\n\35\3\35\3\35\7\35\u05b0\n\35\f\35\16\35\u05b3"+
		"\13\35\3\35\3\35\3\36\3\36\3\36\3\36\5\36\u05bb\n\36\3\36\3\36\3\36\7"+
		"\36\u05c0\n\36\f\36\16\36\u05c3\13\36\3\36\3\36\5\36\u05c7\n\36\5\36\u05c9"+
		"\n\36\3\36\3\36\5\36\u05cd\n\36\3\36\6\36\u05d0\n\36\r\36\16\36\u05d1"+
		"\3\36\3\36\3\36\3\36\3\36\6\36\u05d9\n\36\r\36\16\36\u05da\5\36\u05dd"+
		"\n\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u05e5\n\36\3\36\3\36\3\36\3\36"+
		"\3\36\7\36\u05ec\n\36\f\36\16\36\u05ef\13\36\3\36\3\36\6\36\u05f3\n\36"+
		"\r\36\16\36\u05f4\3\36\3\36\5\36\u05f9\n\36\3\36\3\36\3\36\3\36\7\36\u05ff"+
		"\n\36\f\36\16\36\u0602\13\36\3\36\3\36\5\36\u0606\n\36\3\36\3\36\5\36"+
		"\u060a\n\36\3\36\3\36\3\36\7\36\u060f\n\36\f\36\16\36\u0612\13\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\5\36\u061a\n\36\3\36\6\36\u061d\n\36\r\36\16"+
		"\36\u061e\3\36\3\36\5\36\u0623\n\36\5\36\u0625\n\36\3\36\3\36\3\36\3\36"+
		"\3\36\7\36\u062c\n\36\f\36\16\36\u062f\13\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\7\36\u0638\n\36\f\36\16\36\u063b\13\36\5\36\u063d\n\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\5\36\u0645\n\36\3\36\6\36\u0648\n\36\r\36\16"+
		"\36\u0649\3\36\3\36\5\36\u064e\n\36\5\36\u0650\n\36\3\36\3\36\3\36\3\36"+
		"\3\36\7\36\u0657\n\36\f\36\16\36\u065a\13\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\5\36\u0662\n\36\3\36\3\36\3\36\5\36\u0667\n\36\5\36\u0669\n\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\7\36\u0672\n\36\f\36\16\36\u0675\13"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u067d\n\36\3\36\3\36\3\36\5\36"+
		"\u0682\n\36\5\36\u0684\n\36\3\36\3\36\3\36\3\36\3\36\3\36\7\36\u068c\n"+
		"\36\f\36\16\36\u068f\13\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0697\n"+
		"\36\3\36\3\36\3\36\5\36\u069c\n\36\5\36\u069e\n\36\3\36\3\36\3\36\5\36"+
		"\u06a3\n\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u06ab\n\36\3\36\3\36\3"+
		"\36\5\36\u06b0\n\36\5\36\u06b2\n\36\3\36\3\36\3\36\3\36\3\36\7\36\u06b9"+
		"\n\36\f\36\16\36\u06bc\13\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u06c4"+
		"\n\36\3\36\3\36\3\36\5\36\u06c9\n\36\6\36\u06cb\n\36\r\36\16\36\u06cc"+
		"\3\36\3\36\5\36\u06d1\n\36\5\36\u06d3\n\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\7\36\u06db\n\36\f\36\16\36\u06de\13\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\5\36\u06e6\n\36\3\36\3\36\5\36\u06ea\n\36\6\36\u06ec\n\36\r\36\16"+
		"\36\u06ed\3\36\3\36\5\36\u06f2\n\36\5\36\u06f4\n\36\3\36\3\36\3\36\3\36"+
		"\3\36\7\36\u06fb\n\36\f\36\16\36\u06fe\13\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\5\36\u0706\n\36\3\36\3\36\3\36\5\36\u070b\n\36\5\36\u070d\n\36\3"+
		"\36\3\36\3\36\3\36\3\36\7\36\u0714\n\36\f\36\16\36\u0717\13\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\5\36\u071f\n\36\3\36\3\36\3\36\7\36\u0724\n\36"+
		"\f\36\16\36\u0727\13\36\3\36\3\36\3\36\3\36\7\36\u072d\n\36\f\36\16\36"+
		"\u0730\13\36\3\36\5\36\u0733\n\36\5\36\u0735\n\36\3\37\3\37\5\37\u0739"+
		"\n\37\3\37\3\37\5\37\u073d\n\37\3\37\3\37\5\37\u0741\n\37\3\37\3\37\5"+
		"\37\u0745\n\37\7\37\u0747\n\37\f\37\16\37\u074a\13\37\3\37\5\37\u074d"+
		"\n\37\3 \3 \3 \3 \7 \u0753\n \f \16 \u0756\13 \3 \3 \5 \u075a\n \5 \u075c"+
		"\n \3 \3 \5 \u0760\n \3 \3 \5 \u0764\n \6 \u0766\n \r \16 \u0767\3 \3"+
		" \3 \3 \3 \3 \5 \u0770\n \6 \u0772\n \r \16 \u0773\5 \u0776\n \3 \3 \3"+
		" \3 \3 \3 \3 \7 \u077f\n \f \16 \u0782\13 \6 \u0784\n \r \16 \u0785\3"+
		" \3 \5 \u078a\n \3 \3 \3 \7 \u078f\n \f \16 \u0792\13 \5 \u0794\n \3 "+
		"\3 \5 \u0798\n \3 \3 \5 \u079c\n \6 \u079e\n \r \16 \u079f\3 \3 \3 \3"+
		" \3 \3 \7 \u07a8\n \f \16 \u07ab\13 \3 \3 \5 \u07af\n \5 \u07b1\n \3 "+
		"\3 \3 \3 \3 \7 \u07b8\n \f \16 \u07bb\13 \6 \u07bd\n \r \16 \u07be\3 "+
		"\3 \3 \3 \3 \3 \3 \7 \u07c8\n \f \16 \u07cb\13 \5 \u07cd\n \3 \3 \3 \3"+
		" \3 \3 \7 \u07d5\n \f \16 \u07d8\13 \3 \3 \5 \u07dc\n \5 \u07de\n \3 "+
		"\3 \3 \3 \3 \7 \u07e5\n \f \16 \u07e8\13 \3 \3 \3 \3 \3 \3 \5 \u07f0\n"+
		" \5 \u07f2\n \3 \3 \3 \3 \3 \3 \3 \7 \u07fb\n \f \16 \u07fe\13 \3 \3 "+
		"\3 \3 \3 \3 \5 \u0806\n \5 \u0808\n \3 \3 \3 \3 \3 \3 \7 \u0810\n \f "+
		"\16 \u0813\13 \3 \3 \3 \3 \3 \3 \5 \u081b\n \5 \u081d\n \3 \3 \3 \5 \u0822"+
		"\n \3 \3 \3 \3 \3 \3 \5 \u082a\n \5 \u082c\n \3 \3 \3 \3 \3 \7 \u0833"+
		"\n \f \16 \u0836\13 \3 \3 \3 \3 \3 \5 \u083d\n \6 \u083f\n \r \16 \u0840"+
		"\3 \3 \5 \u0845\n \5 \u0847\n \3 \3 \3 \3 \3 \3 \7 \u084f\n \f \16 \u0852"+
		"\13 \3 \3 \3 \3 \3 \5 \u0859\n \6 \u085b\n \r \16 \u085c\3 \3 \5 \u0861"+
		"\n \5 \u0863\n \3 \3 \3 \3 \3 \7 \u086a\n \f \16 \u086d\13 \3 \3 \3 \3"+
		" \3 \3 \5 \u0875\n \5 \u0877\n \3 \3 \3 \3 \3 \7 \u087e\n \f \16 \u0881"+
		"\13 \3 \3 \3 \3 \3 \7 \u0888\n \f \16 \u088b\13 \3 \3 \3 \3 \7 \u0891"+
		"\n \f \16 \u0894\13 \3 \3 \3 \5 \u0899\n \5 \u089b\n \3!\3!\5!\u089f\n"+
		"!\3!\3!\5!\u08a3\n!\3!\3!\5!\u08a7\n!\3!\3!\5!\u08ab\n!\7!\u08ad\n!\f"+
		"!\16!\u08b0\13!\3!\3!\3!\5!\u08b5\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\7"+
		"\"\u08bf\n\"\f\"\16\"\u08c2\13\"\5\"\u08c4\n\"\3\"\3\"\3\"\3\"\3\"\3\""+
		"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3"+
		"\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u08e7\n\"\3\"\3\"\3\"\3\"\3"+
		"\"\3\"\3\"\5\"\u08f0\n\"\3\"\5\"\u08f3\n\"\3\"\5\"\u08f6\n\"\3\"\3\"\3"+
		"\"\3#\3#\3#\5#\u08fe\n#\3#\3#\3#\3#\3#\5#\u0905\n#\3#\3#\3#\3#\3#\3#\7"+
		"#\u090d\n#\f#\16#\u0910\13#\3#\3#\5#\u0914\n#\3#\3#\3#\3#\3#\3#\3#\3#"+
		"\3#\3#\3#\3#\3#\5#\u0923\n#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#"+
		"\5#\u0933\n#\3#\3#\7#\u0937\n#\f#\16#\u093a\13#\3#\3#\3#\3#\3#\3#\7#\u0942"+
		"\n#\f#\16#\u0945\13#\6#\u0947\n#\r#\16#\u0948\3#\3#\3#\3#\3#\7#\u0950"+
		"\n#\f#\16#\u0953\13#\3#\3#\5#\u0957\n#\3$\3$\3$\3%\3%\3%\3%\5%\u0960\n"+
		"%\3%\3%\3%\5%\u0965\n%\7%\u0967\n%\f%\16%\u096a\13%\5%\u096c\n%\3%\3%"+
		"\3&\3&\3&\3\'\3\'\6\'\u0975\n\'\r\'\16\'\u0976\3\'\3\'\3(\5(\u097c\n("+
		"\3(\5(\u097f\n(\3(\3(\3(\5(\u0984\n(\3)\3)\3*\3*\3+\3+\3+\3,\3,\3,\3,"+
		"\3,\7,\u0992\n,\f,\16,\u0995\13,\5,\u0997\n,\3,\3,\3-\3-\3-\3-\3-\3-\3"+
		"-\7-\u09a2\n-\f-\16-\u09a5\13-\3.\3.\5.\u09a9\n.\3.\3.\3.\7.\u09ae\n."+
		"\f.\16.\u09b1\13.\3/\3/\5/\u09b5\n/\3/\3/\3/\3/\3/\5/\u09bc\n/\3/\3/\3"+
		"/\3/\5/\u09c2\n/\3/\3/\5/\u09c6\n/\3/\3/\3/\3/\5/\u09cc\n/\3/\3/\3/\3"+
		"/\3/\5/\u09d3\n/\5/\u09d5\n/\3\60\3\60\3\60\3\60\3\60\5\60\u09dc\n\60"+
		"\3\60\7\60\u09df\n\60\f\60\16\60\u09e2\13\60\3\60\3\60\3\60\7\60\u09e7"+
		"\n\60\f\60\16\60\u09ea\13\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u09f2"+
		"\n\60\3\60\3\60\5\60\u09f6\n\60\5\60\u09f8\n\60\3\61\3\61\3\61\5\61\u09fd"+
		"\n\61\3\61\5\61\u0a00\n\61\3\61\3\61\3\61\3\61\5\61\u0a06\n\61\7\61\u0a08"+
		"\n\61\f\61\16\61\u0a0b\13\61\3\61\3\61\3\61\3\61\3\61\5\61\u0a12\n\61"+
		"\6\61\u0a14\n\61\r\61\16\61\u0a15\3\61\3\61\5\61\u0a1a\n\61\3\61\3\61"+
		"\3\61\3\61\5\61\u0a20\n\61\3\61\7\61\u0a23\n\61\f\61\16\61\u0a26\13\61"+
		"\3\62\3\62\5\62\u0a2a\n\62\3\62\3\62\5\62\u0a2e\n\62\3\62\3\62\3\62\3"+
		"\62\5\62\u0a34\n\62\3\62\3\62\3\62\3\62\3\62\7\62\u0a3b\n\62\f\62\16\62"+
		"\u0a3e\13\62\5\62\u0a40\n\62\3\62\3\62\3\62\3\62\3\62\5\62\u0a47\n\62"+
		"\6\62\u0a49\n\62\r\62\16\62\u0a4a\3\62\3\62\5\62\u0a4f\n\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\7\62\u0a5c\n\62\f\62\16"+
		"\62\u0a5f\13\62\3\62\5\62\u0a62\n\62\3\62\3\62\3\62\3\62\3\62\7\62\u0a69"+
		"\n\62\f\62\16\62\u0a6c\13\62\3\62\7\62\u0a6f\n\62\f\62\16\62\u0a72\13"+
		"\62\3\62\3\62\5\62\u0a76\n\62\3\62\3\62\3\62\3\62\5\62\u0a7c\n\62\3\63"+
		"\3\63\3\63\3\63\3\63\7\63\u0a83\n\63\f\63\16\63\u0a86\13\63\5\63\u0a88"+
		"\n\63\3\64\3\64\3\64\3\64\5\64\u0a8e\n\64\3\64\7\64\u0a91\n\64\f\64\16"+
		"\64\u0a94\13\64\3\65\3\65\3\65\3\66\3\66\5\66\u0a9b\n\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\7\66\u0aa3\n\66\f\66\16\66\u0aa6\13\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0ab1\n\66\f\66\16\66\u0ab4\13\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0abc\n\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\7\66\u0ac4\n\66\f\66\16\66\u0ac7\13\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\5\66\u0ad0\n\66\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0ad8\n"+
		"\66\f\66\16\66\u0adb\13\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0ae4"+
		"\n\66\f\66\16\66\u0ae7\13\66\3\66\3\66\5\66\u0aeb\n\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\5\66\u0af3\n\66\3\66\3\66\3\66\3\66\3\66\3\66\7\66\u0afb"+
		"\n\66\f\66\16\66\u0afe\13\66\5\66\u0b00\n\66\3\66\3\66\3\66\5\66\u0b05"+
		"\n\66\3\66\3\66\3\66\3\66\5\66\u0b0b\n\66\3\67\3\67\5\67\u0b0f\n\67\3"+
		"\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u0b18\n\67\3\67\3\67\3\67\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u0b28\n\67\3\67"+
		"\3\67\3\67\5\67\u0b2d\n\67\3\67\3\67\3\67\5\67\u0b32\n\67\5\67\u0b34\n"+
		"\67\3\67\3\67\3\67\5\67\u0b39\n\67\3\67\3\67\3\67\3\67\5\67\u0b3f\n\67"+
		"\38\38\68\u0b43\n8\r8\168\u0b44\38\38\68\u0b49\n8\r8\168\u0b4a\39\39\3"+
		"9\39\59\u0b51\n9\39\59\u0b54\n9\69\u0b56\n9\r9\169\u0b57\39\39\3:\3:\3"+
		":\3;\3;\3;\3;\3;\5;\u0b64\n;\3<\3<\3<\3<\3<\3<\3<\5<\u0b6d\n<\5<\u0b6f"+
		"\n<\3=\3=\5=\u0b73\n=\3>\3>\3>\3>\3>\3>\5>\u0b7b\n>\3?\5?\u0b7e\n?\3?"+
		"\3?\3?\3?\5?\u0b84\n?\3@\3@\3@\3@\7@\u0b8a\n@\f@\16@\u0b8d\13@\3@\3@\3"+
		"A\3A\3A\3B\3B\3C\3C\3C\3C\3C\7C\u0b9b\nC\fC\16C\u0b9e\13C\3C\3C\3D\3D"+
		"\3D\3D\3E\3E\3E\3F\3F\3F\3G\3G\3H\3H\3H\3H\5H\u0bb2\nH\3I\3I\3I\3I\3I"+
		"\3I\3I\3I\3I\3I\3J\3J\3J\7J\u0bc1\nJ\fJ\16J\u0bc4\13J\3K\3K\3K\3K\3K\3"+
		"K\3K\3K\3K\3K\5K\u0bd0\nK\3K\3K\5K\u0bd4\nK\5K\u0bd6\nK\3L\3L\3L\3L\3"+
		"L\3L\3L\3L\3L\3L\3L\5L\u0be3\nL\3M\3M\3M\7M\u0be8\nM\fM\16M\u0beb\13M"+
		"\3N\3N\3N\3O\3O\3O\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3Q\3Q\3Q\7Q\u0c00\nQ"+
		"\fQ\16Q\u0c03\13Q\3R\3R\3R\3R\5R\u0c09\nR\3R\3R\3R\3R\3S\3S\3S\3S\3S\3"+
		"T\3T\3T\3T\3T\7T\u0c19\nT\fT\16T\u0c1c\13T\3U\3U\3V\3V\3V\3V\5V\u0c24"+
		"\nV\3W\3W\5W\u0c28\nW\3W\3W\5W\u0c2c\nW\5W\u0c2e\nW\3X\3X\3Y\3Y\5Y\u0c34"+
		"\nY\3Z\3Z\3Z\5Z\u0c39\nZ\3[\3[\3[\5[\u0c3e\n[\3\\\3\\\3\\\3]\3]\3]\3^"+
		"\3^\3^\3_\3_\3_\5_\u0c4c\n_\3_\3_\5_\u0c50\n_\3`\3`\3`\3`\3`\3`\3`\3`"+
		"\3`\3`\3`\5`\u0c5d\n`\3a\3a\3b\3b\5b\u0c63\nb\3b\3b\5b\u0c67\nb\3b\3b"+
		"\3b\5b\u0c6c\nb\3b\3b\3b\5b\u0c71\nb\3b\3b\5b\u0c75\nb\3b\5b\u0c78\nb"+
		"\3c\3c\3c\3c\3d\3d\3d\5d\u0c81\nd\3d\3d\3d\5d\u0c86\nd\3d\3d\5d\u0c8a"+
		"\nd\3d\3d\3d\3d\5d\u0c90\nd\3d\3d\3d\3d\5d\u0c96\nd\3d\3d\3d\5d\u0c9b"+
		"\nd\3d\3d\5d\u0c9f\nd\5d\u0ca1\nd\3e\3e\5e\u0ca5\ne\3e\3e\5e\u0ca9\ne"+
		"\5e\u0cab\ne\3f\3f\5f\u0caf\nf\3g\3g\5g\u0cb3\ng\3g\3g\5g\u0cb7\ng\3g"+
		"\3g\5g\u0cbb\ng\3g\5g\u0cbe\ng\3h\3h\5h\u0cc2\nh\3h\3h\3h\5h\u0cc7\nh"+
		"\5h\u0cc9\nh\3i\3i\3i\3i\3i\3i\3i\3i\5i\u0cd3\ni\3j\3j\3k\3k\3k\3k\3k"+
		"\5k\u0cdc\nk\3k\3k\3k\3k\3k\5k\u0ce3\nk\3k\5k\u0ce6\nk\3l\3l\5l\u0cea"+
		"\nl\3l\3l\5l\u0cee\nl\3l\3l\3l\5l\u0cf3\nl\5l\u0cf5\nl\3m\3m\5m\u0cf9"+
		"\nm\3m\3m\3m\5m\u0cfe\nm\3m\3m\5m\u0d02\nm\5m\u0d04\nm\3n\3n\5n\u0d08"+
		"\nn\3o\3o\3o\3o\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0d19\np\3q\3q\3r"+
		"\3r\3s\5s\u0d20\ns\3s\3s\3t\3t\3u\3u\3u\3u\3u\3u\5u\u0d2c\nu\5u\u0d2e"+
		"\nu\3v\3v\3v\5v\u0d33\nv\3v\3v\3v\3w\3w\3x\3x\3x\3x\3x\3y\3y\3y\3y\3y"+
		"\3z\3z\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\6{\u0d52\n{\r{\16{\u0d53\3"+
		"{\3{\5{\u0d58\n{\3|\3|\5|\u0d5c\n|\3}\3}\3}\6}\u0d61\n}\r}\16}\u0d62\3"+
		"}\5}\u0d66\n}\3}\3}\3~\3~\6~\u0d6c\n~\r~\16~\u0d6d\3~\5~\u0d71\n~\3~\3"+
		"~\3\177\3\177\3\177\3\177\3\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\5\u0082\u0d84\n\u0082\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0085"+
		"\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0d95\n\u0086\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\7\u0087\u0d9c\n\u0087\f\u0087\16\u0087"+
		"\u0d9f\13\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0089\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a"+
		"\u0db0\n\u008a\3\u008b\3\u008b\3\u008b\7\u008b\u0db5\n\u008b\f\u008b\16"+
		"\u008b\u0db8\13\u008b\3\u008c\3\u008c\3\u008c\7\u008c\u0dbd\n\u008c\f"+
		"\u008c\16\u008c\u0dc0\13\u008c\3\u008d\5\u008d\u0dc3\n\u008d\3\u008d\3"+
		"\u008d\3\u008e\3\u008e\3\u008e\3\u008e\7\u008e\u0dcb\n\u008e\f\u008e\16"+
		"\u008e\u0dce\13\u008e\3\u008e\3\u008e\3\u008f\3\u008f\5\u008f\u0dd4\n"+
		"\u008f\3\u0090\3\u0090\3\u0090\7\u0090\u0dd9\n\u0090\f\u0090\16\u0090"+
		"\u0ddc\13\u0090\3\u0091\3\u0091\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\5\u0094\u0dec"+
		"\n\u0094\3\u0095\3\u0095\3\u0096\3\u0096\5\u0096\u0df2\n\u0096\3\u0097"+
		"\3\u0097\3\u0098\3\u0098\3\u0098\7\u0098\u0df9\n\u0098\f\u0098\16\u0098"+
		"\u0dfc\13\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0e02\n\u0098"+
		"\3\u0099\3\u0099\3\u009a\3\u009a\5\u009a\u0e08\n\u009a\3\u009b\3\u009b"+
		"\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009d\5\u009d\u0e12\n\u009d"+
		"\3\u009d\5\u009d\u0e15\n\u009d\3\u009d\5\u009d\u0e18\n\u009d\3\u009d\3"+
		"\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0e1f\n\u009d\3\u009e\3\u009e\3"+
		"\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u0e28\n\u00a0\f\u00a0\16"+
		"\u00a0\u0e2b\13\u00a0\3\u00a1\3\u00a1\3\u00a1\7\u00a1\u0e30\n\u00a1\f"+
		"\u00a1\16\u00a1\u0e33\13\u00a1\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0e38\n"+
		"\u00a2\3\u00a3\3\u00a3\5\u00a3\u0e3c\n\u00a3\3\u00a4\3\u00a4\5\u00a4\u0e40"+
		"\n\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a6\3\u00a6\5\u00a6\u0e48"+
		"\n\u00a6\3\u00a7\3\u00a7\5\u00a7\u0e4c\n\u00a7\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a9\3\u00a9\5\u00a9\u0e54\n\u00a9\3\u00aa\3\u00aa\3\u00ab"+
		"\3\u00ab\3\u00ac\3\u00ac\5\u00ac\u0e5c\n\u00ac\3\u00ad\3\u00ad\5\u00ad"+
		"\u0e60\n\u00ad\3\u00ae\3\u00ae\5\u00ae\u0e64\n\u00ae\3\u00ae\5\u00ae\u0e67"+
		"\n\u00ae\3\u00ae\5\u00ae\u0e6a\n\u00ae\3\u00ae\5\u00ae\u0e6d\n\u00ae\3"+
		"\u00ae\5\u00ae\u0e70\n\u00ae\3\u00af\3\u00af\5\u00af\u0e74\n\u00af\3\u00af"+
		"\3\u00af\5\u00af\u0e78\n\u00af\3\u00af\5\u00af\u0e7b\n\u00af\3\u00af\5"+
		"\u00af\u0e7e\n\u00af\3\u00b0\3\u00b0\3\u00b0\7\u00b0\u0e83\n\u00b0\f\u00b0"+
		"\16\u00b0\u0e86\13\u00b0\3\u00b1\3\u00b1\5\u00b1\u0e8a\n\u00b1\3\u00b2"+
		"\3\u00b2\6\u00b2\u0e8e\n\u00b2\r\u00b2\16\u00b2\u0e8f\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\5\u00b3\u0e96\n\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\5\u00b3\u0e9e\n\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\5\u00b3\u0ea5\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b5"+
		"\5\u00b5\u0eac\n\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6"+
		"\5\u00b6\u0eb4\n\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b8\3\u00b8\5\u00b8\u0ebf\n\u00b8\3\u00b9\3\u00b9\5\u00b9"+
		"\u0ec3\n\u00b9\3\u00ba\3\u00ba\3\u00bb\3\u00bb\5\u00bb\u0ec9\n\u00bb\3"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00be"+
		"\3\u00be\5\u00be\u0ed5\n\u00be\3\u00be\5\u00be\u0ed8\n\u00be\3\u00be\5"+
		"\u00be\u0edb\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be\u0ee1\n\u00be"+
		"\3\u00be\3\u00be\5\u00be\u0ee5\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u0eec\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be"+
		"\u0ef2\n\u00be\3\u00bf\3\u00bf\3\u00bf\7\u00bf\u0ef7\n\u00bf\f\u00bf\16"+
		"\u00bf\u0efa\13\u00bf\3\u00c0\3\u00c0\5\u00c0\u0efe\n\u00c0\3\u00c1\3"+
		"\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0f05\n\u00c1\f\u00c1\16\u00c1"+
		"\u0f08\13\u00c1\5\u00c1\u0f0a\n\u00c1\3\u00c1\3\u00c1\3\u00c2\3\u00c2"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4"+
		"\u0f18\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c6\3\u00c6\3\u00c6"+
		"\7\u00c6\u0f21\n\u00c6\f\u00c6\16\u00c6\u0f24\13\u00c6\3\u00c7\3\u00c7"+
		"\3\u00c7\3\u00c7\5\u00c7\u0f2a\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u0f31\n\u00c8\3\u00c9\3\u00c9\3\u00c9\7\u00c9\u0f36\n"+
		"\u00c9\f\u00c9\16\u00c9\u0f39\13\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca"+
		"\3\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cc\3\u00cc\3\u00cc"+
		"\3\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u0f4e\n\u00ce"+
		"\f\u00ce\16\u00ce\u0f51\13\u00ce\3\u00cf\3\u00cf\3\u00d0\3\u00d0\5\u00d0"+
		"\u0f57\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0f5d\n\u00d1\3"+
		"\u00d1\3\u00d1\5\u00d1\u0f61\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u0f65\n\u00d1"+
		"\3\u00d1\7\u00d1\u0f68\n\u00d1\f\u00d1\16\u00d1\u0f6b\13\u00d1\3\u00d2"+
		"\3\u00d2\5\u00d2\u0f6f\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d3\5\u00d3"+
		"\u0f75\n\u00d3\3\u00d3\3\u00d3\5\u00d3\u0f79\n\u00d3\3\u00d3\3\u00d3\5"+
		"\u00d3\u0f7d\n\u00d3\3\u00d3\7\u00d3\u0f80\n\u00d3\f\u00d3\16\u00d3\u0f83"+
		"\13\u00d3\3\u00d4\3\u00d4\5\u00d4\u0f87\n\u00d4\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\5\u00d5\u0f8e\n\u00d5\3\u00d6\3\u00d6\5\u00d6\u0f92\n"+
		"\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d8\3\u00d8\5\u00d8\u0f99\n\u00d8\3"+
		"\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u0fa0\n\u00d9\5\u00d9\u0fa2"+
		"\n\u00d9\3\u00da\3\u00da\5\u00da\u0fa6\n\u00da\3\u00da\3\u00da\5\u00da"+
		"\u0faa\n\u00da\3\u00db\3\u00db\3\u00db\7\u00db\u0faf\n\u00db\f\u00db\16"+
		"\u00db\u0fb2\13\u00db\3\u00dc\3\u00dc\5\u00dc\u0fb6\n\u00dc\3\u00dd\3"+
		"\u00dd\3\u00dd\7\u00dd\u0fbb\n\u00dd\f\u00dd\16\u00dd\u0fbe\13\u00dd\3"+
		"\u00de\3\u00de\5\u00de\u0fc2\n\u00de\3\u00de\3\u00de\3\u00df\3\u00df\3"+
		"\u00e0\3\u00e0\3\u00e0\5\u00e0\u0fcb\n\u00e0\3\u00e0\3\u00e0\3\u00e1\5"+
		"\u00e1\u0fd0\n\u00e1\3\u00e1\3\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3"+
		"\u00e2\7\u00e2\u0fd9\n\u00e2\f\u00e2\16\u00e2\u0fdc\13\u00e2\3\u00e2\3"+
		"\u00e2\3\u00e3\3\u00e3\3\u00e3\7\u00e3\u0fe3\n\u00e3\f\u00e3\16\u00e3"+
		"\u0fe6\13\u00e3\3\u00e4\3\u00e4\3\u00e5\3\u00e5\3\u00e6\3\u00e6\3\u00e7"+
		"\3\u00e7\3\u00e7\3\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\5\u00e8\u0ff8\n\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea"+
		"\3\u00eb\3\u00eb\3\u00eb\3\u00ec\5\u00ec\u1004\n\u00ec\3\u00ec\3\u00ec"+
		"\5\u00ec\u1008\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed"+
		"\5\u00ed\u1010\n\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee\3\u00ee\3\u00ee"+
		"\3\u00ee\3\u00ee\5\u00ee\u101a\n\u00ee\3\u00ef\3\u00ef\3\u00ef\7\u00ef"+
		"\u101f\n\u00ef\f\u00ef\16\u00ef\u1022\13\u00ef\3\u00f0\3\u00f0\3\u00f0"+
		"\3\u00f0\3\u00f1\5\u00f1\u1029\n\u00f1\3\u00f1\3\u00f1\5\u00f1\u102d\n"+
		"\u00f1\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u1032\n\u00f2\3\u00f3\3\u00f3\3"+
		"\u00f4\3\u00f4\3\u00f4\5\u00f4\u1039\n\u00f4\3\u00f4\3\u00f4\3\u00f5\3"+
		"\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6\5\u00f6\u1044\n\u00f6\3"+
		"\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f9\5\u00f9\u104b\n\u00f9\3\u00f9\3"+
		"\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fb\3\u00fb\5\u00fb\u1055\n"+
		"\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd\3\u00fe\3\u00fe\3\u00fe\3\u00fe"+
		"\3\u00ff\3\u00ff\3\u00ff\3\u00ff\6\u00ff\u1063\n\u00ff\r\u00ff\16\u00ff"+
		"\u1064\3\u00ff\5\u00ff\u1068\n\u00ff\3\u0100\3\u0100\3\u0100\7\u0100\u106d"+
		"\n\u0100\f\u0100\16\u0100\u1070\13\u0100\3\u0101\3\u0101\5\u0101\u1074"+
		"\n\u0101\3\u0101\5\u0101\u1077\n\u0101\3\u0102\3\u0102\3\u0103\3\u0103"+
		"\3\u0103\3\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1082\n\u0104\3\u0104"+
		"\2\2\u0105\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\66"+
		"8:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a"+
		"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2"+
		"\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba"+
		"\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2"+
		"\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea"+
		"\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102"+
		"\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a"+
		"\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132"+
		"\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a"+
		"\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162"+
		"\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a"+
		"\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192"+
		"\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa"+
		"\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2"+
		"\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da"+
		"\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2"+
		"\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\2=\4\288"+
		"\u0117\u0117\4\2aa\u00f9\u00f9\4\2\21\21ll\4\2\u00b3\u00b3\u0103\u0103"+
		"\4\2\u00b0\u00b0\u00b4\u00b4\4\2\u0091\u0091\u00fa\u00fa\4\2ZZ\u009c\u009c"+
		"\4\2  AA\3\2\u00e4\u00e5\4\2gg\u011c\u011c\t\2!!jjtt\u0081\u0081\u0083"+
		"\u0083\u0086\u0086\u00c9\u00c9\4\2tt\u0086\u0087\4\2UUuu\4\2\u0117\u0117"+
		"\u0158\u0158\4\2hhxx\6\2jjtt\u0086\u0086\u00c9\u00c9\5\2\25\25\32\32|"+
		"}\4\2\32\32\u0087\u0087\4\2tt\u0086\u0086\5\2\26\26pp\u0081\u0081\4\2"+
		"\u0098\u0098\u00bc\u00bc\6\2\u00a4\u00a4\u00af\u00af\u00ed\u00ed\u0111"+
		"\u0111\20\2\24\24\30\30\34\34%%//ggqr{{\u008b\u008b\u009f\u009f\u00c5"+
		"\u00c5\u0102\u0102\u010f\u010f\u0118\u0118\7\2BByy\u0106\u0106\u0124\u0124"+
		"\u0126\u0126\4\2MM\u00ae\u00ae\4\2\35\35\u0158\u0158\4\2\u00cb\u00cb\u00ce"+
		"\u00ce\6\2CCKK\\\\\u008a\u008a\3\2|}\4\299UU\4\2--DD\b\2\7\7\27\27\36"+
		"\36\u00a1\u00a1\u00c6\u00c6\u010a\u010a\3\2\u0176\u0177\n\2kk\u0090\u00c2"+
		"\u00c4\u00c5\u00c7\u00e3\u00e6\u010f\u0111\u0139\u013b\u0149\u014b\u0151"+
		"\b\2\u0081\u0081\u00f7\u00f7\u013a\u013a\u0149\u0149\u014f\u014f\u0151"+
		"\u0151\4\2\u0148\u0148\u0150\u0150\3\2\u012e\u0136\3\2\u0137\u0139\3\2"+
		"\u012a\u012b\3\2\u008e\u008f\3\2\u0172\u0173\17\2\n\nww\u0093\u0093\u009d"+
		"\u009d\u00a6\u00a6\u00b7\u00b7\u00c0\u00c0\u00ca\u00ca\u00d7\u00d7\u00dc"+
		"\u00dc\u010b\u010c\u010e\u010e\u0120\u0121\3\2\u0164\u0165\3\2\u0166\u0168"+
		"\3\2\u0113\u0115\5\2\17\17QQ\177\177\5\2\60\60\u0082\u0082\u011a\u011a"+
		"\5\2\65\65RRoo\4\2++\u0084\u0084\4\2\7\7$$\4\2\u0158\u0158\u015d\u0161"+
		"\4\2\13\13zz\6\2@@SS\u00f8\u00f8\u00fd\u00fd\3\2\u0152\u0155\4\2\n\nw"+
		"w\6\2\u00ab\u00ab\u00c3\u00c3\u00de\u00df\u0128\u0128\n\2\u0099\u0099"+
		"\u00ad\u00ad\u00b1\u00b2\u00b5\u00b5\u00cc\u00cd\u00d9\u00db\u00f5\u00f5"+
		"\u0125\u0125\3\2\u0162\u0163\4\2\f\f##\u128c\2\u020d\3\2\2\2\4\u0214\3"+
		"\2\2\2\6\u0218\3\2\2\2\b\u021a\3\2\2\2\n\u0270\3\2\2\2\f\u0275\3\2\2\2"+
		"\16\u0285\3\2\2\2\20\u028e\3\2\2\2\22\u0290\3\2\2\2\24\u02a6\3\2\2\2\26"+
		"\u02ad\3\2\2\2\30\u02de\3\2\2\2\32\u0382\3\2\2\2\34\u0384\3\2\2\2\36\u038a"+
		"\3\2\2\2 \u039e\3\2\2\2\"\u03cd\3\2\2\2$\u03cf\3\2\2\2&\u0474\3\2\2\2"+
		"(\u0476\3\2\2\2*\u0493\3\2\2\2,\u04cf\3\2\2\2.\u04ec\3\2\2\2\60\u0503"+
		"\3\2\2\2\62\u051c\3\2\2\2\64\u053c\3\2\2\2\66\u0564\3\2\2\28\u0566\3\2"+
		"\2\2:\u0734\3\2\2\2<\u0736\3\2\2\2>\u089a\3\2\2\2@\u089c\3\2\2\2B\u08b6"+
		"\3\2\2\2D\u08fa\3\2\2\2F\u0958\3\2\2\2H\u095b\3\2\2\2J\u096f\3\2\2\2L"+
		"\u0972\3\2\2\2N\u097b\3\2\2\2P\u0985\3\2\2\2R\u0987\3\2\2\2T\u0989\3\2"+
		"\2\2V\u098c\3\2\2\2X\u099a\3\2\2\2Z\u09a6\3\2\2\2\\\u09d4\3\2\2\2^\u09d6"+
		"\3\2\2\2`\u09f9\3\2\2\2b\u0a27\3\2\2\2d\u0a87\3\2\2\2f\u0a89\3\2\2\2h"+
		"\u0a95\3\2\2\2j\u0a9a\3\2\2\2l\u0b0e\3\2\2\2n\u0b40\3\2\2\2p\u0b4c\3\2"+
		"\2\2r\u0b5b\3\2\2\2t\u0b63\3\2\2\2v\u0b6e\3\2\2\2x\u0b72\3\2\2\2z\u0b7a"+
		"\3\2\2\2|\u0b7d\3\2\2\2~\u0b85\3\2\2\2\u0080\u0b90\3\2\2\2\u0082\u0b93"+
		"\3\2\2\2\u0084\u0b95\3\2\2\2\u0086\u0ba1\3\2\2\2\u0088\u0ba5\3\2\2\2\u008a"+
		"\u0ba8\3\2\2\2\u008c\u0bab\3\2\2\2\u008e\u0bb1\3\2\2\2\u0090\u0bb3\3\2"+
		"\2\2\u0092\u0bbd\3\2\2\2\u0094\u0bc5\3\2\2\2\u0096\u0bd7\3\2\2\2\u0098"+
		"\u0be4\3\2\2\2\u009a\u0bec\3\2\2\2\u009c\u0bef\3\2\2\2\u009e\u0bf2\3\2"+
		"\2\2\u00a0\u0bfc\3\2\2\2\u00a2\u0c04\3\2\2\2\u00a4\u0c0e\3\2\2\2\u00a6"+
		"\u0c13\3\2\2\2\u00a8\u0c1d\3\2\2\2\u00aa\u0c1f\3\2\2\2\u00ac\u0c2d\3\2"+
		"\2\2\u00ae\u0c2f\3\2\2\2\u00b0\u0c33\3\2\2\2\u00b2\u0c38\3\2\2\2\u00b4"+
		"\u0c3d\3\2\2\2\u00b6\u0c3f\3\2\2\2\u00b8\u0c42\3\2\2\2\u00ba\u0c45\3\2"+
		"\2\2\u00bc\u0c4f\3\2\2\2\u00be\u0c5c\3\2\2\2\u00c0\u0c5e\3\2\2\2\u00c2"+
		"\u0c77\3\2\2\2\u00c4\u0c79\3\2\2\2\u00c6\u0ca0\3\2\2\2\u00c8\u0caa\3\2"+
		"\2\2\u00ca\u0cae\3\2\2\2\u00cc\u0cbd\3\2\2\2\u00ce\u0cc8\3\2\2\2\u00d0"+
		"\u0cd2\3\2\2\2\u00d2\u0cd4\3\2\2\2\u00d4\u0ce5\3\2\2\2\u00d6\u0cf4\3\2"+
		"\2\2\u00d8\u0d03\3\2\2\2\u00da\u0d07\3\2\2\2\u00dc\u0d09\3\2\2\2\u00de"+
		"\u0d18\3\2\2\2\u00e0\u0d1a\3\2\2\2\u00e2\u0d1c\3\2\2\2\u00e4\u0d1f\3\2"+
		"\2\2\u00e6\u0d23\3\2\2\2\u00e8\u0d2d\3\2\2\2\u00ea\u0d2f\3\2\2\2\u00ec"+
		"\u0d37\3\2\2\2\u00ee\u0d39\3\2\2\2\u00f0\u0d3e\3\2\2\2\u00f2\u0d43\3\2"+
		"\2\2\u00f4\u0d57\3\2\2\2\u00f6\u0d5b\3\2\2\2\u00f8\u0d5d\3\2\2\2\u00fa"+
		"\u0d69\3\2\2\2\u00fc\u0d74\3\2\2\2\u00fe\u0d79\3\2\2\2\u0100\u0d7e\3\2"+
		"\2\2\u0102\u0d83\3\2\2\2\u0104\u0d85\3\2\2\2\u0106\u0d8c\3\2\2\2\u0108"+
		"\u0d8e\3\2\2\2\u010a\u0d94\3\2\2\2\u010c\u0d96\3\2\2\2\u010e\u0da2\3\2"+
		"\2\2\u0110\u0da7\3\2\2\2\u0112\u0daf\3\2\2\2\u0114\u0db1\3\2\2\2\u0116"+
		"\u0db9\3\2\2\2\u0118\u0dc2\3\2\2\2\u011a\u0dc6\3\2\2\2\u011c\u0dd3\3\2"+
		"\2\2\u011e\u0dd5\3\2\2\2\u0120\u0ddd\3\2\2\2\u0122\u0ddf\3\2\2\2\u0124"+
		"\u0de1\3\2\2\2\u0126\u0deb\3\2\2\2\u0128\u0ded\3\2\2\2\u012a\u0df1\3\2"+
		"\2\2\u012c\u0df3\3\2\2\2\u012e\u0e01\3\2\2\2\u0130\u0e03\3\2\2\2\u0132"+
		"\u0e07\3\2\2\2\u0134\u0e09\3\2\2\2\u0136\u0e0b\3\2\2\2\u0138\u0e1e\3\2"+
		"\2\2\u013a\u0e20\3\2\2\2\u013c\u0e22\3\2\2\2\u013e\u0e24\3\2\2\2\u0140"+
		"\u0e2c\3\2\2\2\u0142\u0e37\3\2\2\2\u0144\u0e39\3\2\2\2\u0146\u0e3d\3\2"+
		"\2\2\u0148\u0e43\3\2\2\2\u014a\u0e47\3\2\2\2\u014c\u0e4b\3\2\2\2\u014e"+
		"\u0e4d\3\2\2\2\u0150\u0e53\3\2\2\2\u0152\u0e55\3\2\2\2\u0154\u0e57\3\2"+
		"\2\2\u0156\u0e5b\3\2\2\2\u0158\u0e5f\3\2\2\2\u015a\u0e61\3\2\2\2\u015c"+
		"\u0e71\3\2\2\2\u015e\u0e7f\3\2\2\2\u0160\u0e89\3\2\2\2\u0162\u0e8b\3\2"+
		"\2\2\u0164\u0ea4\3\2\2\2\u0166\u0ea6\3\2\2\2\u0168\u0eab\3\2\2\2\u016a"+
		"\u0eb1\3\2\2\2\u016c\u0eb8\3\2\2\2\u016e\u0ebe\3\2\2\2\u0170\u0ec0\3\2"+
		"\2\2\u0172\u0ec4\3\2\2\2\u0174\u0ec8\3\2\2\2\u0176\u0eca\3\2\2\2\u0178"+
		"\u0ecd\3\2\2\2\u017a\u0ef1\3\2\2\2\u017c\u0ef3\3\2\2\2\u017e\u0efd\3\2"+
		"\2\2\u0180\u0eff\3\2\2\2\u0182\u0f0d\3\2\2\2\u0184\u0f0f\3\2\2\2\u0186"+
		"\u0f17\3\2\2\2\u0188\u0f19\3\2\2\2\u018a\u0f1d\3\2\2\2\u018c\u0f29\3\2"+
		"\2\2\u018e\u0f30\3\2\2\2\u0190\u0f32\3\2\2\2\u0192\u0f3a\3\2\2\2\u0194"+
		"\u0f3f\3\2\2\2\u0196\u0f44\3\2\2\2\u0198\u0f47\3\2\2\2\u019a\u0f4a\3\2"+
		"\2\2\u019c\u0f52\3\2\2\2\u019e\u0f56\3\2\2\2\u01a0\u0f60\3\2\2\2\u01a2"+
		"\u0f6e\3\2\2\2\u01a4\u0f78\3\2\2\2\u01a6\u0f86\3\2\2\2\u01a8\u0f8d\3\2"+
		"\2\2\u01aa\u0f91\3\2\2\2\u01ac\u0f93\3\2\2\2\u01ae\u0f98\3\2\2\2\u01b0"+
		"\u0f9a\3\2\2\2\u01b2\u0fa3\3\2\2\2\u01b4\u0fab\3\2\2\2\u01b6\u0fb5\3\2"+
		"\2\2\u01b8\u0fb7\3\2\2\2\u01ba\u0fc1\3\2\2\2\u01bc\u0fc5\3\2\2\2\u01be"+
		"\u0fca\3\2\2\2\u01c0\u0fcf\3\2\2\2\u01c2\u0fd3\3\2\2\2\u01c4\u0fdf\3\2"+
		"\2\2\u01c6\u0fe7\3\2\2\2\u01c8\u0fe9\3\2\2\2\u01ca\u0feb\3\2\2\2\u01cc"+
		"\u0fed\3\2\2\2\u01ce\u0ff7\3\2\2\2\u01d0\u0ff9\3\2\2\2\u01d2\u0ffd\3\2"+
		"\2\2\u01d4\u0fff\3\2\2\2\u01d6\u1003\3\2\2\2\u01d8\u100d\3\2\2\2\u01da"+
		"\u1019\3\2\2\2\u01dc\u101b\3\2\2\2\u01de\u1023\3\2\2\2\u01e0\u102c\3\2"+
		"\2\2\u01e2\u1031\3\2\2\2\u01e4\u1033\3\2\2\2\u01e6\u1035\3\2\2\2\u01e8"+
		"\u103c\3\2\2\2\u01ea\u1043\3\2\2\2\u01ec\u1045\3\2\2\2\u01ee\u1047\3\2"+
		"\2\2\u01f0\u104a\3\2\2\2\u01f2\u104f\3\2\2\2\u01f4\u1054\3\2\2\2\u01f6"+
		"\u1056\3\2\2\2\u01f8\u1058\3\2\2\2\u01fa\u105a\3\2\2\2\u01fc\u1067\3\2"+
		"\2\2\u01fe\u1069\3\2\2\2\u0200\u1071\3\2\2\2\u0202\u1078\3\2\2\2\u0204"+
		"\u107a\3\2\2\2\u0206\u1081\3\2\2\2\u0208\u0209\5\4\3\2\u0209\u020a\7\u015a"+
		"\2\2\u020a\u020c\3\2\2\2\u020b\u0208\3\2\2\2\u020c\u020f\3\2\2\2\u020d"+
		"\u020b\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u0210\3\2\2\2\u020f\u020d\3\2"+
		"\2\2\u0210\u0211\7\2\2\3\u0211\3\3\2\2\2\u0212\u0215\5\6\4\2\u0213\u0215"+
		"\5\f\7\2\u0214\u0212\3\2\2\2\u0214\u0213\3\2\2\2\u0215\5\3\2\2\2\u0216"+
		"\u0219\5\u019c\u00cf\2\u0217\u0219\5\b\5\2\u0218\u0216\3\2\2\2\u0218\u0217"+
		"\3\2\2\2\u0219\7\3\2\2\2\u021a\u022a\7\31\2\2\u021b\u0227\5\u01b0\u00d9"+
		"\2\u021c\u021d\7\u0162\2\2\u021d\u0222\5\u01b0\u00d9\2\u021e\u021f\7\u015b"+
		"\2\2\u021f\u0221\5\u01b0\u00d9\2\u0220\u021e\3\2\2\2\u0221\u0224\3\2\2"+
		"\2\u0222\u0220\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0225\3\2\2\2\u0224\u0222"+
		"\3\2\2\2\u0225\u0226\7\u0163\2\2\u0226\u0228\3\2\2\2\u0227\u021c\3\2\2"+
		"\2\u0227\u0228\3\2\2\2\u0228\u022b\3\2\2\2\u0229\u022b\5\u01b2\u00da\2"+
		"\u022a\u021b\3\2\2\2\u022a\u0229\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022f"+
		"\t\2\2\2\u022d\u0230\5\u00acW\2\u022e\u0230\7\u0109\2\2\u022f\u022d\3"+
		"\2\2\2\u022f\u022e\3\2\2\2\u0230\u023f\3\2\2\2\u0231\u0233\7\u008e\2\2"+
		"\u0232\u0231\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0235"+
		"\7\u0162\2\2\u0235\u023a\5\n\6\2\u0236\u0237\7\u015b\2\2\u0237\u0239\5"+
		"\n\6\2\u0238\u0236\3\2\2\2\u0239\u023c\3\2\2\2\u023a\u0238\3\2\2\2\u023a"+
		"\u023b\3\2\2\2\u023b\u023d\3\2\2\2\u023c\u023a\3\2\2\2\u023d\u023e\7\u0163"+
		"\2\2\u023e\u0240\3\2\2\2\u023f\u0232\3\2\2\2\u023f\u0240\3\2\2\2\u0240"+
		"\t\3\2\2\2\u0241\u0242\7\u00bf\2\2\u0242\u0271\5\u00acW\2\u0243\u0245"+
		"\7Z\2\2\u0244\u0246\5\u0148\u00a5\2\u0245\u0244\3\2\2\2\u0245\u0246\3"+
		"\2\2\2\u0246\u0271\3\2\2\2\u0247\u0248\7\"\2\2\u0248\u0271\5\u00acW\2"+
		"\u0249\u024a\7X\2\2\u024a\u0271\5\u00acW\2\u024b\u024d\7>\2\2\u024c\u024e"+
		"\5\u0148\u00a5\2\u024d\u024c\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u0271\3"+
		"\2\2\2\u024f\u0250\7\u016c\2\2\u0250\u0271\5\u00acW\2\u0251\u0252\7*\2"+
		"\2\u0252\u0271\5\u00acW\2\u0253\u0260\7\63\2\2\u0254\u0255\7\u0162\2\2"+
		"\u0255\u025a\5\u01b0\u00d9\2\u0256\u0257\7\u015b\2\2\u0257\u0259\5\u01b0"+
		"\u00d9\2\u0258\u0256\3\2\2\2\u0259\u025c\3\2\2\2\u025a\u0258\3\2\2\2\u025a"+
		"\u025b\3\2\2\2\u025b\u025d\3\2\2\2\u025c\u025a\3\2\2\2\u025d\u025e\7\u0163"+
		"\2\2\u025e\u0261\3\2\2\2\u025f\u0261\7\u0166\2\2\u0260\u0254\3\2\2\2\u0260"+
		"\u025f\3\2\2\2\u0261\u0271\3\2\2\2\u0262\u0263\7\64\2\2\u0263\u0264\7"+
		"\u0162\2\2\u0264\u0269\5\u01b0\u00d9\2\u0265\u0266\7\u015b\2\2\u0266\u0268"+
		"\5\u01b0\u00d9\2\u0267\u0265\3\2\2\2\u0268\u026b\3\2\2\2\u0269\u0267\3"+
		"\2\2\2\u0269\u026a\3\2\2\2\u026a\u026c\3\2\2\2\u026b\u0269\3\2\2\2\u026c"+
		"\u026d\7\u0163\2\2\u026d\u0271\3\2\2\2\u026e\u026f\7)\2\2\u026f\u0271"+
		"\5\u00acW\2\u0270\u0241\3\2\2\2\u0270\u0243\3\2\2\2\u0270\u0247\3\2\2"+
		"\2\u0270\u0249\3\2\2\2\u0270\u024b\3\2\2\2\u0270\u024f\3\2\2\2\u0270\u0251"+
		"\3\2\2\2\u0270\u0253\3\2\2\2\u0270\u0262\3\2\2\2\u0270\u026e\3\2\2\2\u0271"+
		"\13\3\2\2\2\u0272\u0276\5\16\b\2\u0273\u0276\5\20\t\2\u0274\u0276\5\u00aa"+
		"V\2\u0275\u0272\3\2\2\2\u0275\u0273\3\2\2\2\u0275\u0274\3\2\2\2\u0276"+
		"\r\3\2\2\2\u0277\u0286\5b\62\2\u0278\u0286\5,\27\2\u0279\u0286\5.\30\2"+
		"\u027a\u0286\58\35\2\u027b\u0286\5D#\2\u027c\u0286\5Z.\2\u027d\u0286\5"+
		"^\60\2\u027e\u0286\5`\61\2\u027f\u0286\5B\"\2\u0280\u0286\5:\36\2\u0281"+
		"\u0286\5\64\33\2\u0282\u0286\5> \2\u0283\u0286\5\60\31\2\u0284\u0286\5"+
		"\62\32\2\u0285\u0277\3\2\2\2\u0285\u0278\3\2\2\2\u0285\u0279\3\2\2\2\u0285"+
		"\u027a\3\2\2\2\u0285\u027b\3\2\2\2\u0285\u027c\3\2\2\2\u0285\u027d\3\2"+
		"\2\2\u0285\u027e\3\2\2\2\u0285\u027f\3\2\2\2\u0285\u0280\3\2\2\2\u0285"+
		"\u0281\3\2\2\2\u0285\u0282\3\2\2\2\u0285\u0283\3\2\2\2\u0285\u0284\3\2"+
		"\2\2\u0286\17\3\2\2\2\u0287\u028f\5\22\n\2\u0288\u028f\5\24\13\2\u0289"+
		"\u028f\5\26\f\2\u028a\u028f\5\30\r\2\u028b\u028f\5$\23\2\u028c\u028f\5"+
		"(\25\2\u028d\u028f\5*\26\2\u028e\u0287\3\2\2\2\u028e\u0288\3\2\2\2\u028e"+
		"\u0289\3\2\2\2\u028e\u028a\3\2\2\2\u028e\u028b\3\2\2\2\u028e\u028c\3\2"+
		"\2\2\u028e\u028d\3\2\2\2\u028f\21\3\2\2\2\u0290\u0291\7\b\2\2\u0291\u0292"+
		"\7\66\2\2\u0292\u02a4\5H%\2\u0293\u0295\5\"\22\2\u0294\u0293\3\2\2\2\u0295"+
		"\u0296\3\2\2\2\u0296\u0294\3\2\2\2\u0296\u0297\3\2\2\2\u0297\u0299\3\2"+
		"\2\2\u0298\u029a\7l\2\2\u0299\u0298\3\2\2\2\u0299\u029a\3\2\2\2\u029a"+
		"\u02a5\3\2\2\2\u029b\u029c\7\u00f9\2\2\u029c\u029d\7\u0117\2\2\u029d\u02a5"+
		"\5\u01b0\u00d9\2\u029e\u029f\7a\2\2\u029f\u02a0\7\u0117\2\2\u02a0\u02a5"+
		"\5\u00acW\2\u02a1\u02a2\7\u0103\2\2\u02a2\u02a3\7q\2\2\u02a3\u02a5\5\u01b0"+
		"\u00d9\2\u02a4\u0294\3\2\2\2\u02a4\u029b\3\2\2\2\u02a4\u029e\3\2\2\2\u02a4"+
		"\u02a1\3\2\2\2\u02a5\23\3\2\2\2\u02a6\u02a7\7\b\2\2\u02a7\u02a8\7q\2\2"+
		"\u02a8\u02a9\5\u00acW\2\u02a9\u02aa\t\3\2\2\u02aa\u02ab\7\u0117\2\2\u02ab"+
		"\u02ac\5\u00acW\2\u02ac\25\3\2\2\2\u02ad\u02af\7\b\2\2\u02ae\u02b0\7f"+
		"\2\2\u02af\u02ae\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1"+
		"\u02b2\7\u00cf\2\2\u02b2\u02b3\5\u00acW\2\u02b3\u02b4\t\3\2\2\u02b4\u02b5"+
		"\7\u0117\2\2\u02b5\u02b6\5\u00acW\2\u02b6\27\3\2\2\2\u02b7\u02b8\7\b\2"+
		"\2\u02b8\u02ba\7{\2\2\u02b9\u02bb\7\u00e8\2\2\u02ba\u02b9\3\2\2\2\u02ba"+
		"\u02bb\3\2\2\2\u02bb\u02bd\3\2\2\2\u02bc\u02be\5\u01b0\u00d9\2\u02bd\u02bc"+
		"\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02bd\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0"+
		"\u02d1\3\2\2\2\u02c1\u02c6\5\32\16\2\u02c2\u02c3\7\u015b\2\2\u02c3\u02c5"+
		"\5\32\16\2\u02c4\u02c2\3\2\2\2\u02c5\u02c8\3\2\2\2\u02c6\u02c4\3\2\2\2"+
		"\u02c6\u02c7\3\2\2\2\u02c7\u02d2\3\2\2\2\u02c8\u02c6\3\2\2\2\u02c9\u02cb"+
		"\7\u00f9\2\2\u02ca\u02cc\7\u009f\2\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3"+
		"\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02ce\5\u01b0\u00d9\2\u02ce\u02cf\7\u0117"+
		"\2\2\u02cf\u02d0\5\u01b0\u00d9\2\u02d0\u02d2\3\2\2\2\u02d1\u02c1\3\2\2"+
		"\2\u02d1\u02c9\3\2\2\2\u02d2\u02df\3\2\2\2\u02d3\u02d4\7\b\2\2\u02d4\u02d5"+
		"\7{\2\2\u02d5\u02da\5\u01b0\u00d9\2\u02d6\u02d7\7\u00f9\2\2\u02d7\u02db"+
		"\7\u0117\2\2\u02d8\u02d9\7\u0103\2\2\u02d9\u02db\7q\2\2\u02da\u02d6\3"+
		"\2\2\2\u02da\u02d8\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\5\u01b0\u00d9"+
		"\2\u02dd\u02df\3\2\2\2\u02de\u02b7\3\2\2\2\u02de\u02d3\3\2\2\2\u02df\31"+
		"\3\2\2\2\u02e0\u02e2\7\3\2\2\u02e1\u02e3\7\u009f\2\2\u02e2\u02e1\3\2\2"+
		"\2\u02e2\u02e3\3\2\2\2\u02e3\u02e4\3\2\2\2\u02e4\u0383\5f\64\2\u02e5\u02e7"+
		"\7\u00b3\2\2\u02e6\u02e8\7\u009f\2\2\u02e7\u02e6\3\2\2\2\u02e7\u02e8\3"+
		"\2\2\2\u02e8\u02eb\3\2\2\2\u02e9\u02ea\7?\2\2\u02ea\u02ec\7\u00b8\2\2"+
		"\u02eb\u02e9\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ef"+
		"\5\u01b0\u00d9\2\u02ee\u02f0\t\4\2\2\u02ef\u02ee\3\2\2\2\u02ef\u02f0\3"+
		"\2\2\2\u02f0\u0383\3\2\2\2\u02f1\u02f3\7\b\2\2\u02f2\u02f4\7\u009f\2\2"+
		"\u02f3\u02f2\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f8"+
		"\5\u01b0\u00d9\2\u02f6\u02f7\7\u0103\2\2\u02f7\u02f9\7\u00aa\2\2\u02f8"+
		"\u02f6\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fa\3\2\2\2\u02fa\u02fb\7\u0118"+
		"\2\2\u02fb\u02fe\5\u00bc_\2\u02fc\u02fd\7\23\2\2\u02fd\u02ff\5\u00acW"+
		"\2\u02fe\u02fc\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0302\3\2\2\2\u0300\u0301"+
		"\7\u0088\2\2\u0301\u0303\5\u010a\u0086\2\u0302\u0300\3\2\2\2\u0302\u0303"+
		"\3\2\2\2\u0303\u0383\3\2\2\2\u0304\u0306\7\b\2\2\u0305\u0307\7\u009f\2"+
		"\2\u0306\u0305\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0334"+
		"\5\u01b0\u00d9\2\u0309\u030a\7\u0103\2\2\u030a\u030b\7\35\2\2\u030b\u0335"+
		"\5\u010a\u0086\2\u030c\u030d\7\u00b3\2\2\u030d\u0335\7\35\2\2\u030e\u030f"+
		"\t\5\2\2\u030f\u0310\7W\2\2\u0310\u0335\7X\2\2\u0311\u0312\7\u0103\2\2"+
		"\u0312\u0313\7\u0108\2\2\u0313\u0335\7\u0172\2\2\u0314\u0315\7\u0103\2"+
		"\2\u0315\u0316\7\u0162\2\2\u0316\u031b\5\34\17\2\u0317\u0318\7\u015b\2"+
		"\2\u0318\u031a\5\34\17\2\u0319\u0317\3\2\2\2\u031a\u031d\3\2\2\2\u031b"+
		"\u0319\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031e\3\2\2\2\u031d\u031b\3\2"+
		"\2\2\u031e\u031f\7\u0163\2\2\u031f\u0335\3\2\2\2\u0320\u0321\7\u00fb\2"+
		"\2\u0321\u0322\7\u0162\2\2\u0322\u0327\5 \21\2\u0323\u0324\7\u015b\2\2"+
		"\u0324\u0326\5 \21\2\u0325\u0323\3\2\2\2\u0326\u0329\3\2\2\2\u0327\u0325"+
		"\3\2\2\2\u0327\u0328\3\2\2\2\u0328\u032a\3\2\2\2\u0329\u0327\3\2\2\2\u032a"+
		"\u032b\7\u0163\2\2\u032b\u0335\3\2\2\2\u032c\u032d\7\u0103\2\2\u032d\u032e"+
		"\7\u010a\2\2\u032e\u0333\7\u00f1\2\2\u032f\u0333\7\u00ba\2\2\u0330\u0333"+
		"\7\u00b9\2\2\u0331\u0333\7\u00d5\2\2\u0332\u032c\3\2\2\2\u0332\u032f\3"+
		"\2\2\2\u0332\u0330\3\2\2\2\u0332\u0331\3\2\2\2\u0333\u0335\3\2\2\2\u0334"+
		"\u0309\3\2\2\2\u0334\u030c\3\2\2\2\u0334\u030e\3\2\2\2\u0334\u0311\3\2"+
		"\2\2\u0334\u0314\3\2\2\2\u0334\u0320\3\2\2\2\u0334\u0332\3\2\2\2\u0335"+
		"\u0383\3\2\2\2\u0336\u0337\7\3\2\2\u0337\u033a\5j\66\2\u0338\u0339\7W"+
		"\2\2\u0339\u033b\7\u011d\2\2\u033a\u0338\3\2\2\2\u033a\u033b\3\2\2\2\u033b"+
		"\u0383\3\2\2\2\u033c\u033d\7\3\2\2\u033d\u0383\5\36\20\2\u033e\u033f\7"+
		"\u011e\2\2\u033f\u0340\7\26\2\2\u0340\u0383\5\u01b0\u00d9\2\u0341\u0342"+
		"\7\u00b3\2\2\u0342\u0345\7\26\2\2\u0343\u0344\7?\2\2\u0344\u0346\7\u00b8"+
		"\2\2\u0345\u0343\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0347\3\2\2\2\u0347"+
		"\u0348\5\u01b0\u00d9\2\u0348\u0349\t\4\2\2\u0349\u0383\3\2\2\2\u034a\u034b"+
		"\t\6\2\2\u034b\u034f\7\u0081\2\2\u034c\u0350\5\u01b0\u00d9\2\u034d\u0350"+
		"\7\7\2\2\u034e\u0350\7\u011c\2\2\u034f\u034c\3\2\2\2\u034f\u034d\3\2\2"+
		"\2\u034f\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350\u0383\3\2\2\2\u0351\u0352"+
		"\7\u00b4\2\2\u0352\u0353\t\7\2\2\u0353\u0354\7\u0081\2\2\u0354\u0383\5"+
		"\u01b0\u00d9\2\u0355\u0356\t\6\2\2\u0356\u0357\7p\2\2\u0357\u0383\5\u01b0"+
		"\u00d9\2\u0358\u0359\7\u00b4\2\2\u0359\u035a\t\7\2\2\u035a\u035b\7p\2"+
		"\2\u035b\u0383\5\u01b0\u00d9\2\u035c\u035d\7\u009c\2\2\u035d\u035e\7\u00e7"+
		"\2\2\u035e\u0383\5\u01b0\u00d9\2\u035f\u0360\7\u0103\2\2\u0360\u0361\7"+
		"\u008f\2\2\u0361\u0383\t\b\2\2\u0362\u0363\7\u0103\2\2\u0363\u0364\7\u008e"+
		"\2\2\u0364\u0383\7Z\2\2\u0365\u0366\7\u0103\2\2\u0366\u0383\5p9\2\u0367"+
		"\u0368\7\u00fb\2\2\u0368\u0369\7\u0162\2\2\u0369\u036e\5r:\2\u036a\u036b"+
		"\7\u015b\2\2\u036b\u036d\5r:\2\u036c\u036a\3\2\2\2\u036d\u0370\3\2\2\2"+
		"\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0371\3\2\2\2\u0370\u036e"+
		"\3\2\2\2\u0371\u0372\7\u0163\2\2\u0372\u0383\3\2\2\2\u0373\u0374\7\u00c4"+
		"\2\2\u0374\u0383\5\u01b0\u00d9\2\u0375\u0376\7\u00e1\2\2\u0376\u0377\7"+
		"\u00c4\2\2\u0377\u0383\5\u01b0\u00d9\2\u0378\u0379\7Y\2\2\u0379\u0383"+
		"\5\u01b0\u00d9\2\u037a\u037b\7W\2\2\u037b\u0383\7Y\2\2\u037c\u037d\7a"+
		"\2\2\u037d\u037e\7\u0117\2\2\u037e\u0383\5\u01b0\u00d9\2\u037f\u0380\7"+
		"\u0103\2\2\u0380\u0381\7\u010f\2\2\u0381\u0383\5\u01b0\u00d9\2\u0382\u02e0"+
		"\3\2\2\2\u0382\u02e5\3\2\2\2\u0382\u02f1\3\2\2\2\u0382\u0304\3\2\2\2\u0382"+
		"\u0336\3\2\2\2\u0382\u033c\3\2\2\2\u0382\u033e\3\2\2\2\u0382\u0341\3\2"+
		"\2\2\u0382\u034a\3\2\2\2\u0382\u0351\3\2\2\2\u0382\u0355\3\2\2\2\u0382"+
		"\u0358\3\2\2\2\u0382\u035c\3\2\2\2\u0382\u035f\3\2\2\2\u0382\u0362\3\2"+
		"\2\2\u0382\u0365\3\2\2\2\u0382\u0367\3\2\2\2\u0382\u0373\3\2\2\2\u0382"+
		"\u0375\3\2\2\2\u0382\u0378\3\2\2\2\u0382\u037a\3\2\2\2\u0382\u037c\3\2"+
		"\2\2\u0382\u037f\3\2\2\2\u0383\33\3\2\2\2\u0384\u0385\5 \21\2\u0385\u0386"+
		"\7\u0158\2\2\u0386\u0387\5\u00e4s\2\u0387\35\3\2\2\2\u0388\u0389\7\26"+
		"\2\2\u0389\u038b\5\u01b0\u00d9\2\u038a\u0388\3\2\2\2\u038a\u038b\3\2\2"+
		"\2\u038b\u038f\3\2\2\2\u038c\u0390\7\u0085\2\2\u038d\u038e\7c\2\2\u038e"+
		"\u0390\7P\2\2\u038f\u038c\3\2\2\2\u038f\u038d\3\2\2\2\u0390\u0391\3\2"+
		"\2\2\u0391\u0392\7\u0088\2\2\u0392\u0393\7\u00c5\2\2\u0393\u0398\5\u01b0"+
		"\u00d9\2\u0394\u0396\7W\2\2\u0395\u0394\3\2\2\2\u0395\u0396\3\2\2\2\u0396"+
		"\u0397\3\2\2\2\u0397\u0399\7\37\2\2\u0398\u0395\3\2\2\2\u0398\u0399\3"+
		"\2\2\2\u0399\u039c\3\2\2\2\u039a\u039b\7F\2\2\u039b\u039d\t\t\2\2\u039c"+
		"\u039a\3\2\2\2\u039c\u039d\3\2\2\2\u039d\37\3\2\2\2\u039e\u039f\t\n\2"+
		"\2\u039f!\3\2\2\2\u03a0\u03a1\7\u0097\2\2\u03a1\u03a2\7\u00e7\2\2\u03a2"+
		"\u03a3\7X\2\2\u03a3\u03ce\7\u00c8\2\2\u03a4\u03a5\7m\2\2\u03a5\u03a6\7"+
		"X\2\2\u03a6\u03a7\7\u00e7\2\2\u03a7\u03a8\7X\2\2\u03a8\u03ce\7\u00c8\2"+
		"\2\u03a9\u03aa\7y\2\2\u03aa\u03ce\7B\2\2\u03ab\u03ce\7\u0106\2\2\u03ac"+
		"\u03ae\7\u0124\2\2\u03ad\u03af\7\u00ba\2\2\u03ae\u03ad\3\2\2\2\u03ae\u03af"+
		"\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\7\u0101\2\2\u03b1\u03ce\7M\2"+
		"\2\u03b2\u03b4\7\u00ba\2\2\u03b3\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4"+
		"\u03b5\3\2\2\2\u03b5\u03b6\7\u0101\2\2\u03b6\u03ce\7\u00ae\2\2\u03b7\u03b8"+
		"\7\u00a5\2\2\u03b8\u03ce\7\u0172\2\2\u03b9\u03ba\7i\2\2\u03ba\u03ce\7"+
		"\u0172\2\2\u03bb\u03bc\7\u0103\2\2\u03bc\u03c6\5\u00acW\2\u03bd\u03be"+
		"\7\u0117\2\2\u03be\u03c3\5\u00acW\2\u03bf\u03c0\7\u0158\2\2\u03c0\u03c3"+
		"\5\u00acW\2\u03c1\u03c3\7\35\2\2\u03c2\u03bd\3\2\2\2\u03c2\u03bf\3\2\2"+
		"\2\u03c2\u03c1\3\2\2\2\u03c3\u03c7\3\2\2\2\u03c4\u03c5\78\2\2\u03c5\u03c7"+
		"\7\u00a8\2\2\u03c6\u03c2\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c7\u03ce\3\2\2"+
		"\2\u03c8\u03cb\7\u00fb\2\2\u03c9\u03cc\5\u00acW\2\u03ca\u03cc\7\7\2\2"+
		"\u03cb\u03c9\3\2\2\2\u03cb\u03ca\3\2\2\2\u03cc\u03ce\3\2\2\2\u03cd\u03a0"+
		"\3\2\2\2\u03cd\u03a4\3\2\2\2\u03cd\u03a9\3\2\2\2\u03cd\u03ab\3\2\2\2\u03cd"+
		"\u03ac\3\2\2\2\u03cd\u03b3\3\2\2\2\u03cd\u03b7\3\2\2\2\u03cd\u03b9\3\2"+
		"\2\2\u03cd\u03bb\3\2\2\2\u03cd\u03c8\3\2\2\2\u03ce#\3\2\2\2\u03cf\u03d0"+
		"\7\b\2\2\u03d0\u03d1\7\35\2\2\u03d1\u03dc\7d\2\2\u03d2\u03d3\7\61\2\2"+
		"\u03d3\u03d4\t\13\2\2\u03d4\u03d9\5\u00acW\2\u03d5\u03d6\7\u015b\2\2\u03d6"+
		"\u03d8\5\u00acW\2\u03d7\u03d5\3\2\2\2\u03d8\u03db\3\2\2\2\u03d9\u03d7"+
		"\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03dd\3\2\2\2\u03db\u03d9\3\2\2\2\u03dc"+
		"\u03d2\3\2\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03e8\3\2\2\2\u03de\u03df\7C"+
		"\2\2\u03df\u03e0\7q\2\2\u03e0\u03e5\5\u00acW\2\u03e1\u03e2\7\u015b\2\2"+
		"\u03e2\u03e4\5\u00acW\2\u03e3\u03e1\3\2\2\2\u03e4\u03e7\3\2\2\2\u03e5"+
		"\u03e3\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e5\3\2"+
		"\2\2\u03e8\u03de\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea"+
		"\u03eb\5&\24\2\u03eb%\3\2\2\2\u03ec\u03f9\7:\2\2\u03ed\u03f2\t\f\2\2\u03ee"+
		"\u03ef\7\u015b\2\2\u03ef\u03f1\t\f\2\2\u03f0\u03ee\3\2\2\2\u03f1\u03f4"+
		"\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3\u03fa\3\2\2\2\u03f4"+
		"\u03f2\3\2\2\2\u03f5\u03f7\7\7\2\2\u03f6\u03f8\7d\2\2\u03f7\u03f6\3\2"+
		"\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa\3\2\2\2\u03f9\u03ed\3\2\2\2\u03f9"+
		"\u03f5\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fc\7\u00e7\2\2\u03fc\u03fd"+
		"\7\u0110\2\2\u03fd\u0475\5@!\2\u03fe\u040b\7:\2\2\u03ff\u0404\t\r\2\2"+
		"\u0400\u0401\7\u015b\2\2\u0401\u0403\t\r\2\2\u0402\u0400\3\2\2\2\u0403"+
		"\u0406\3\2\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u040c\3\2"+
		"\2\2\u0406\u0404\3\2\2\2\u0407\u0409\7\7\2\2\u0408\u040a\7d\2\2\u0409"+
		"\u0408\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040c\3\2\2\2\u040b\u03ff\3\2"+
		"\2\2\u040b\u0407\3\2\2\2\u040c\u040d\3\2\2\2\u040d\u040e\7\u00e7\2\2\u040e"+
		"\u040f\7s\2\2\u040f\u0475\5@!\2\u0410\u0416\7:\2\2\u0411\u0417\7.\2\2"+
		"\u0412\u0414\7\7\2\2\u0413\u0415\7d\2\2\u0414\u0413\3\2\2\2\u0414\u0415"+
		"\3\2\2\2\u0415\u0417\3\2\2\2\u0416\u0411\3\2\2\2\u0416\u0412\3\2\2\2\u0417"+
		"\u0418\3\2\2\2\u0418\u0419\7\u00e7\2\2\u0419\u041a\7\67\2\2\u041a\u0475"+
		"\5@!\2\u041b\u0421\7:\2\2\u041c\u0422\7\u0087\2\2\u041d\u041f\7\7\2\2"+
		"\u041e\u0420\7d\2\2\u041f\u041e\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0422"+
		"\3\2\2\2\u0421\u041c\3\2\2\2\u0421\u041d\3\2\2\2\u0422\u0423\3\2\2\2\u0423"+
		"\u0424\7\u00e7\2\2\u0424\u0425\7\u0119\2\2\u0425\u0475\5@!\2\u0426\u042a"+
		"\7n\2\2\u0427\u0428\7:\2\2\u0428\u0429\7\u00e9\2\2\u0429\u042b\7\61\2"+
		"\2\u042a\u0427\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u0438\3\2\2\2\u042c\u0431"+
		"\t\f\2\2\u042d\u042e\7\u015b\2\2\u042e\u0430\t\f\2\2\u042f\u042d\3\2\2"+
		"\2\u0430\u0433\3\2\2\2\u0431\u042f\3\2\2\2\u0431\u0432\3\2\2\2\u0432\u0439"+
		"\3\2\2\2\u0433\u0431\3\2\2\2\u0434\u0436\7\7\2\2\u0435\u0437\7d\2\2\u0436"+
		"\u0435\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439\3\2\2\2\u0438\u042c\3\2"+
		"\2\2\u0438\u0434\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\7\u00e7\2\2\u043b"+
		"\u043c\7\u0110\2\2\u043c\u0475\5<\37\2\u043d\u0441\7n\2\2\u043e\u043f"+
		"\7:\2\2\u043f\u0440\7\u00e9\2\2\u0440\u0442\7\61\2\2\u0441\u043e\3\2\2"+
		"\2\u0441\u0442\3\2\2\2\u0442\u044f\3\2\2\2\u0443\u0448\t\r\2\2\u0444\u0445"+
		"\7\u015b\2\2\u0445\u0447\t\r\2\2\u0446\u0444\3\2\2\2\u0447\u044a\3\2\2"+
		"\2\u0448\u0446\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u0450\3\2\2\2\u044a\u0448"+
		"\3\2\2\2\u044b\u044d\7\7\2\2\u044c\u044e\7d\2\2\u044d\u044c\3\2\2\2\u044d"+
		"\u044e\3\2\2\2\u044e\u0450\3\2\2\2\u044f\u0443\3\2\2\2\u044f\u044b\3\2"+
		"\2\2\u0450\u0451\3\2\2\2\u0451\u0452\7\u00e7\2\2\u0452\u0453\7s\2\2\u0453"+
		"\u0475\5<\37\2\u0454\u0458\7n\2\2\u0455\u0456\7:\2\2\u0456\u0457\7\u00e9"+
		"\2\2\u0457\u0459\7\61\2\2\u0458\u0455\3\2\2\2\u0458\u0459\3\2\2\2\u0459"+
		"\u045f\3\2\2\2\u045a\u0460\7.\2\2\u045b\u045d\7\7\2\2\u045c\u045e\7d\2"+
		"\2\u045d\u045c\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u0460\3\2\2\2\u045f\u045a"+
		"\3\2\2\2\u045f\u045b\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462\7\u00e7\2"+
		"\2\u0462\u0463\7\67\2\2\u0463\u0475\5<\37\2\u0464\u0468\7n\2\2\u0465\u0466"+
		"\7:\2\2\u0466\u0467\7\u00e9\2\2\u0467\u0469\7\61\2\2\u0468\u0465\3\2\2"+
		"\2\u0468\u0469\3\2\2\2\u0469\u046f\3\2\2\2\u046a\u0470\7\u0087\2\2\u046b"+
		"\u046d\7\7\2\2\u046c\u046e\7d\2\2\u046d\u046c\3\2\2\2\u046d\u046e\3\2"+
		"\2\2\u046e\u0470\3\2\2\2\u046f\u046a\3\2\2\2\u046f\u046b\3\2\2\2\u0470"+
		"\u0471\3\2\2\2\u0471\u0472\7\u00e7\2\2\u0472\u0473\7\u0119\2\2\u0473\u0475"+
		"\5<\37\2\u0474\u03ec\3\2\2\2\u0474\u03fe\3\2\2\2\u0474\u0410\3\2\2\2\u0474"+
		"\u041b\3\2\2\2\u0474\u0426\3\2\2\2\u0474\u043d\3\2\2\2\u0474\u0454\3\2"+
		"\2\2\u0474\u0464\3\2\2\2\u0475\'\3\2\2\2\u0476\u0477\7\b\2\2\u0477\u047a"+
		"\7r\2\2\u0478\u0479\7?\2\2\u0479\u047b\7\u00b8\2\2\u047a\u0478\3\2\2\2"+
		"\u047a\u047b\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u0491\5\u01b0\u00d9\2\u047d"+
		"\u0486\5\\/\2\u047e\u0483\7\u00fc\2\2\u047f\u0481\7\u008e\2\2\u0480\u047f"+
		"\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482\3\2\2\2\u0482\u0484\5\u00acW"+
		"\2\u0483\u0480\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0486\3\2\2\2\u0485\u047d"+
		"\3\2\2\2\u0485\u047e\3\2\2\2\u0486\u0489\3\2\2\2\u0487\u0485\3\2\2\2\u0487"+
		"\u0488\3\2\2\2\u0488\u0492\3\2\2\2\u0489\u0487\3\2\2\2\u048a\u048b\t\3"+
		"\2\2\u048b\u048f\7\u0117\2\2\u048c\u048d\7\u0103\2\2\u048d\u048f\7q\2"+
		"\2\u048e\u048a\3\2\2\2\u048e\u048c\3\2\2\2\u048f\u0490\3\2\2\2\u0490\u0492"+
		"\5\u01b0\u00d9\2\u0491\u0487\3\2\2\2\u0491\u048e\3\2\2\2\u0492)\3\2\2"+
		"\2\u0493\u0494\7\b\2\2\u0494\u0497\7\u008b\2\2\u0495\u0496\7?\2\2\u0496"+
		"\u0498\7\u00b8\2\2\u0497\u0495\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u0499"+
		"\3\2\2\2\u0499\u04cd\5\u01b0\u00d9\2\u049a\u049c\7\b\2\2\u049b\u049d\7"+
		"\u009f\2\2\u049c\u049b\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049e\3\2\2\2"+
		"\u049e\u04a4\5\u01b0\u00d9\2\u049f\u04a0\7\u0103\2\2\u04a0\u04a1\7\35"+
		"\2\2\u04a1\u04a5\5\u010a\u0086\2\u04a2\u04a3\7\u00b3\2\2\u04a3\u04a5\7"+
		"\35\2\2\u04a4\u049f\3\2\2\2\u04a4\u04a2\3\2\2\2\u04a5\u04ce\3\2\2\2\u04a6"+
		"\u04a7\t\3\2\2\u04a7\u04ab\7\u0117\2\2\u04a8\u04a9\7\u0103\2\2\u04a9\u04ab"+
		"\7q\2\2\u04aa\u04a6\3\2\2\2\u04aa\u04a8\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac"+
		"\u04ce\5\u01b0\u00d9\2\u04ad\u04ae\7\u0103\2\2\u04ae\u04af\7\u0162\2\2"+
		"\u04af\u04b2\5\u00acW\2\u04b0\u04b1\7\u0158\2\2\u04b1\u04b3\5\u010a\u0086"+
		"\2\u04b2\u04b0\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04bc\3\2\2\2\u04b4\u04b5"+
		"\7\u015b\2\2\u04b5\u04b8\5\u00acW\2\u04b6\u04b7\7\u0158\2\2\u04b7\u04b9"+
		"\5\u010a\u0086\2\u04b8\u04b6\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04bb\3"+
		"\2\2\2\u04ba\u04b4\3\2\2\2\u04bb\u04be\3\2\2\2\u04bc\u04ba\3\2\2\2\u04bc"+
		"\u04bd\3\2\2\2\u04bd\u04bf\3\2\2\2\u04be\u04bc\3\2\2\2\u04bf\u04c0\7\u0163"+
		"\2\2\u04c0\u04ce\3\2\2\2\u04c1\u04c2\7\u00fb\2\2\u04c2\u04c3\7\u0162\2"+
		"\2\u04c3\u04c8\5\u00acW\2\u04c4\u04c5\7\u015b\2\2\u04c5\u04c7\5\u00ac"+
		"W\2\u04c6\u04c4\3\2\2\2\u04c7\u04ca\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c8"+
		"\u04c9\3\2\2\2\u04c9\u04cb\3\2\2\2\u04ca\u04c8\3\2\2\2\u04cb\u04cc\7\u0163"+
		"\2\2\u04cc\u04ce\3\2\2\2\u04cd\u049a\3\2\2\2\u04cd\u04aa\3\2\2\2\u04cd"+
		"\u04ad\3\2\2\2\u04cd\u04c1\3\2\2\2\u04ce+\3\2\2\2\u04cf\u04d1\7\32\2\2"+
		"\u04d0\u04d2\7\u0085\2\2\u04d1\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2"+
		"\u04d3\3\2\2\2\u04d3\u04d5\7\u00c5\2\2\u04d4\u04d6\7\u00a3\2\2\u04d5\u04d4"+
		"\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d8\3\2\2\2\u04d7\u04d9\5\u01b0\u00d9"+
		"\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db"+
		"\7\u00e7\2\2\u04db\u04de\5\u01b0\u00d9\2\u04dc\u04dd\7\u0088\2\2\u04dd"+
		"\u04df\5\u01b0\u00d9\2\u04de\u04dc\3\2\2\2\u04de\u04df\3\2\2\2\u04df\u04e0"+
		"\3\2\2\2\u04e0\u04e2\5\u01fc\u00ff\2\u04e1\u04e3\5\u0084C\2\u04e2\u04e1"+
		"\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e6\3\2\2\2\u04e4\u04e5\7\u010f\2"+
		"\2\u04e5\u04e7\5\u01b0\u00d9\2\u04e6\u04e4\3\2\2\2\u04e6\u04e7\3\2\2\2"+
		"\u04e7\u04ea\3\2\2\2\u04e8\u04e9\7\u008d\2\2\u04e9\u04eb\5\u013c\u009f"+
		"\2\u04ea\u04e8\3\2\2\2\u04ea\u04eb\3\2\2\2\u04eb-\3\2\2\2\u04ec\u04ed"+
		"\7\32\2\2\u04ed\u04f1\7/\2\2\u04ee\u04ef\7?\2\2\u04ef\u04f0\7W\2\2\u04f0"+
		"\u04f2\7\u00b8\2\2\u04f1\u04ee\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f3"+
		"\3\2\2\2\u04f3\u04f5\5\u00acW\2\u04f4\u04f6\7\u008e\2\2\u04f5\u04f4\3"+
		"\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f9\3\2\2\2\u04f7\u04f8\7q\2\2\u04f8"+
		"\u04fa\5\u00acW\2\u04f9\u04f7\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fd"+
		"\3\2\2\2\u04fb\u04fc\7\u0123\2\2\u04fc\u04fe\5\u00b0Y\2\u04fd\u04fb\3"+
		"\2\2\2\u04fd\u04fe\3\2\2\2\u04fe\u0501\3\2\2\2\u04ff\u0500\78\2\2\u0500"+
		"\u0502\5\u00b0Y\2\u0501\u04ff\3\2\2\2\u0501\u0502\3\2\2\2\u0502/\3\2\2"+
		"\2\u0503\u0506\7\32\2\2\u0504\u0505\7^\2\2\u0505\u0507\7k\2\2\u0506\u0504"+
		"\3\2\2\2\u0506\u0507\3\2\2\2\u0507\u0509\3\2\2\2\u0508\u050a\7\u0080\2"+
		"\2\u0509\u0508\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050c\3\2\2\2\u050b\u050d"+
		"\7f\2\2\u050c\u050b\3\2\2\2\u050c\u050d\3\2\2\2\u050d\u050e\3\2\2\2\u050e"+
		"\u050f\7\u00cf\2\2\u050f\u051a\5\u00acW\2\u0510\u0511\7=\2\2\u0511\u0514"+
		"\5\u01b0\u00d9\2\u0512\u0513\7G\2\2\u0513\u0515\5\u01b0\u00d9\2\u0514"+
		"\u0512\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u0518\3\2\2\2\u0516\u0517\7\u0089"+
		"\2\2\u0517\u0519\5\u01b0\u00d9\2\u0518\u0516\3\2\2\2\u0518\u0519\3\2\2"+
		"\2\u0519\u051b\3\2\2\2\u051a\u0510\3\2\2\2\u051a\u051b\3\2\2\2\u051b\61"+
		"\3\2\2\2\u051c\u051d\7\32\2\2\u051d\u051e\7\u00b6\2\2\u051e\u051f\7\u0081"+
		"\2\2\u051f\u0520\5\u01b0\u00d9\2\u0520\u0521\7\u00e7\2\2\u0521\u0536\5"+
		"\u01b0\u00d9\2\u0522\u0523\7\u008c\2\2\u0523\u0532\5\u01b0\u00d9\2\u0524"+
		"\u0525\7C\2\2\u0525\u0526\7\u0162\2\2\u0526\u052b\7\u0179\2\2\u0527\u0528"+
		"\7\u015b\2\2\u0528\u052a\7\u0179\2\2\u0529\u0527\3\2\2\2\u052a\u052d\3"+
		"\2\2\2\u052b\u0529\3\2\2\2\u052b\u052c\3\2\2\2\u052c\u052e\3\2\2\2\u052d"+
		"\u052b\3\2\2\2\u052e\u0530\7\u0163\2\2\u052f\u0531\7\t\2\2\u0530\u052f"+
		"\3\2\2\2\u0530\u0531\3\2\2\2\u0531\u0533\3\2\2\2\u0532\u0524\3\2\2\2\u0533"+
		"\u0534\3\2\2\2\u0534\u0532\3\2\2\2\u0534\u0535\3\2\2\2\u0535\u0537\3\2"+
		"\2\2\u0536\u0522\3\2\2\2\u0536\u0537\3\2\2\2\u0537\u0538\3\2\2\2\u0538"+
		"\u0539\7.\2\2\u0539\u053a\7e\2\2\u053a\u053b\5\u010a\u0086\2\u053b\63"+
		"\3\2\2\2\u053c\u053e\7\u0103\2\2\u053d\u053f\t\16\2\2\u053e\u053d\3\2"+
		"\2\2\u053e\u053f\3\2\2\2\u053f\u055c\3\2\2\2\u0540\u0541\5\u00acW\2\u0541"+
		"\u0542\t\17\2\2\u0542\u0547\5\66\34\2\u0543\u0544\7\u015b\2\2\u0544\u0546"+
		"\5\66\34\2\u0545\u0543\3\2\2\2\u0546\u0549\3\2\2\2\u0547\u0545\3\2\2\2"+
		"\u0547\u0548\3\2\2\2\u0548\u055d\3\2\2\2\u0549\u0547\3\2\2\2\u054a\u054b"+
		"\7\u0144\2\2\u054b\u054f\7\u0129\2\2\u054c\u0550\5\u00acW\2\u054d\u0550"+
		"\7U\2\2\u054e\u0550\7\35\2\2\u054f\u054c\3\2\2\2\u054f\u054d\3\2\2\2\u054f"+
		"\u054e\3\2\2\2\u0550\u0559\3\2\2\2\u0551\u0555\7\u015b\2\2\u0552\u0556"+
		"\5\u00acW\2\u0553\u0556\7U\2\2\u0554\u0556\7\35\2\2\u0555\u0552\3\2\2"+
		"\2\u0555\u0553\3\2\2\2\u0555\u0554\3\2\2\2\u0556\u0558\3\2\2\2\u0557\u0551"+
		"\3\2\2\2\u0558\u055b\3\2\2\2\u0559\u0557\3\2\2\2\u0559\u055a\3\2\2\2\u055a"+
		"\u055d\3\2\2\2\u055b\u0559\3\2\2\2\u055c\u0540\3\2\2\2\u055c\u054a\3\2"+
		"\2\2\u055d\65\3\2\2\2\u055e\u0565\5\u010a\u0086\2\u055f\u0560\7\u016c"+
		"\2\2\u0560\u0561\5\u010a\u0086\2\u0561\u0562\7\u016c\2\2\u0562\u0565\3"+
		"\2\2\2\u0563\u0565\7\35\2\2\u0564\u055e\3\2\2\2\u0564\u055f\3\2\2\2\u0564"+
		"\u0563\3\2\2\2\u0565\67\3\2\2\2\u0566\u0568\7\32\2\2\u0567\u0569\7\26"+
		"\2\2\u0568\u0567\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056a\3\2\2\2\u056a"+
		"\u056b\7\u0081\2\2\u056b\u0570\5\u00acW\2\u056c\u0571\7\16\2\2\u056d\u056e"+
		"\7L\2\2\u056e\u0571\7Y\2\2\u056f\u0571\7\5\2\2\u0570\u056c\3\2\2\2\u0570"+
		"\u056d\3\2\2\2\u0570\u056f\3\2\2\2\u0571\u0586\3\2\2\2\u0572\u0582\7\u00c9"+
		"\2\2\u0573\u0582\7!\2\2\u0574\u0582\7\u0083\2\2\u0575\u057f\7\u0086\2"+
		"\2\u0576\u0577\7Y\2\2\u0577\u057c\5\u00acW\2\u0578\u0579\7\u015b\2\2\u0579"+
		"\u057b\5\u00acW\2\u057a\u0578\3\2\2\2\u057b\u057e\3\2\2\2\u057c\u057a"+
		"\3\2\2\2\u057c\u057d\3\2\2\2\u057d\u0580\3\2\2\2\u057e\u057c\3\2\2\2\u057f"+
		"\u0576\3\2\2\2\u057f\u0580\3\2\2\2\u0580\u0582\3\2\2\2\u0581\u0572\3\2"+
		"\2\2\u0581\u0573\3\2\2\2\u0581\u0574\3\2\2\2\u0581\u0575\3\2\2\2\u0582"+
		"\u0584\3\2\2\2\u0583\u0585\7^\2\2\u0584\u0583\3\2\2\2\u0584\u0585\3\2"+
		"\2\2\u0585\u0587\3\2\2\2\u0586\u0581\3\2\2\2\u0587\u0588\3\2\2\2\u0588"+
		"\u0586\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b\7\u00e7"+
		"\2\2\u058b\u058e\5\u01b0\u00d9\2\u058c\u058d\78\2\2\u058d\u058f\5\u01b0"+
		"\u00d9\2\u058e\u058c\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0599\3\2\2\2\u0590"+
		"\u0591\7W\2\2\u0591\u059a\7\37\2\2\u0592\u0594\7\37\2\2\u0593\u0592\3"+
		"\2\2\2\u0593\u0594\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0596\7F\2\2\u0596"+
		"\u059a\7A\2\2\u0597\u0598\7F\2\2\u0598\u059a\7 \2\2\u0599\u0590\3\2\2"+
		"\2\u0599\u0593\3\2\2\2\u0599\u0597\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u05a0"+
		"\3\2\2\2\u059b\u059d\7\61\2\2\u059c\u059e\7&\2\2\u059d\u059c\3\2\2\2\u059d"+
		"\u059e\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u05a1\t\20\2\2\u05a0\u059b\3"+
		"\2\2\2\u05a0\u05a1\3\2\2\2\u05a1\u05a4\3\2\2\2\u05a2\u05a3\7\u008c\2\2"+
		"\u05a3\u05a5\5\u013c\u009f\2\u05a4\u05a2\3\2\2\2\u05a4\u05a5\3\2\2\2\u05a5"+
		"\u05a6\3\2\2\2\u05a6\u05a7\7.\2\2\u05a7\u05a8\7e\2\2\u05a8\u05a9\5\u01b0"+
		"\u00d9\2\u05a9\u05ab\7\u0162\2\2\u05aa\u05ac\5\u00acW\2\u05ab\u05aa\3"+
		"\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05b1\3\2\2\2\u05ad\u05ae\7\u015b\2\2"+
		"\u05ae\u05b0\5\u00acW\2\u05af\u05ad\3\2\2\2\u05b0\u05b3\3\2\2\2\u05b1"+
		"\u05af\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b4\3\2\2\2\u05b3\u05b1\3\2"+
		"\2\2\u05b4\u05b5\7\u0163\2\2\u05b59\3\2\2\2\u05b6\u05ba\7n\2\2\u05b7\u05b8"+
		"\7:\2\2\u05b8\u05b9\7\u00e9\2\2\u05b9\u05bb\7\61\2\2\u05ba\u05b7\3\2\2"+
		"\2\u05ba\u05bb\3\2\2\2\u05bb\u05c8\3\2\2\2\u05bc\u05c1\t\f\2\2\u05bd\u05be"+
		"\7\u015b\2\2\u05be\u05c0\t\f\2\2\u05bf\u05bd\3\2\2\2\u05c0\u05c3\3\2\2"+
		"\2\u05c1\u05bf\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c9\3\2\2\2\u05c3\u05c1"+
		"\3\2\2\2\u05c4\u05c6\7\7\2\2\u05c5\u05c7\7d\2\2\u05c6\u05c5\3\2\2\2\u05c6"+
		"\u05c7\3\2\2\2\u05c7\u05c9\3\2\2\2\u05c8\u05bc\3\2\2\2\u05c8\u05c4\3\2"+
		"\2\2\u05c9\u05ca\3\2\2\2\u05ca\u05dc\7\u00e7\2\2\u05cb\u05cd\7{\2\2\u05cc"+
		"\u05cb\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05ce\3\2\2\2\u05ce\u05d0\5\u01b0"+
		"\u00d9\2\u05cf\u05cc\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1\u05cf\3\2\2\2\u05d1"+
		"\u05d2\3\2\2\2\u05d2\u05dd\3\2\2\2\u05d3\u05d4\7\7\2\2\u05d4\u05d5\7\u0110"+
		"\2\2\u05d5\u05d6\7C\2\2\u05d6\u05d8\7q\2\2\u05d7\u05d9\5\u00acW\2\u05d8"+
		"\u05d7\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05d8\3\2\2\2\u05da\u05db\3\2"+
		"\2\2\u05db\u05dd\3\2\2\2\u05dc\u05cf\3\2\2\2\u05dc\u05d3\3\2\2\2\u05dd"+
		"\u05de\3\2\2\2\u05de\u05df\5<\37\2\u05df\u0735\3\2\2\2\u05e0\u05e4\7n"+
		"\2\2\u05e1\u05e2\7:\2\2\u05e2\u05e3\7\u00e9\2\2\u05e3\u05e5\7\61\2\2\u05e4"+
		"\u05e1\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u0605\3\2\2\2\u05e6\u05e7\t\21"+
		"\2\2\u05e7\u05e8\7\u0162\2\2\u05e8\u05ed\5\u00acW\2\u05e9\u05ea\7\u015b"+
		"\2\2\u05ea\u05ec\5\u00acW\2\u05eb\u05e9\3\2\2\2\u05ec\u05ef\3\2\2\2\u05ed"+
		"\u05eb\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee\u05f0\3\2\2\2\u05ef\u05ed\3\2"+
		"\2\2\u05f0\u05f1\7\u0163\2\2\u05f1\u05f3\3\2\2\2\u05f2\u05e6\3\2\2\2\u05f3"+
		"\u05f4\3\2\2\2\u05f4\u05f2\3\2\2\2\u05f4\u05f5\3\2\2\2\u05f5\u0606\3\2"+
		"\2\2\u05f6\u05f8\7\7\2\2\u05f7\u05f9\7d\2\2\u05f8\u05f7\3\2\2\2\u05f8"+
		"\u05f9\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05fb\7\u0162\2\2\u05fb\u0600"+
		"\5\u00acW\2\u05fc\u05fd\7\u015b\2\2\u05fd\u05ff\5\u00acW\2\u05fe\u05fc"+
		"\3\2\2\2\u05ff\u0602\3\2\2\2\u0600\u05fe\3\2\2\2\u0600\u0601\3\2\2\2\u0601"+
		"\u0603\3\2\2\2\u0602\u0600\3\2\2\2\u0603\u0604\7\u0163\2\2\u0604\u0606"+
		"\3\2\2\2\u0605\u05f2\3\2\2\2\u0605\u05f6\3\2\2\2\u0606\u0607\3\2\2\2\u0607"+
		"\u0609\7\u00e7\2\2\u0608\u060a\7{\2\2\u0609\u0608\3\2\2\2\u0609\u060a"+
		"\3\2\2\2\u060a\u060b\3\2\2\2\u060b\u0610\5\u01b0\u00d9\2\u060c\u060d\7"+
		"\u015b\2\2\u060d\u060f\5\u01b0\u00d9\2\u060e\u060c\3\2\2\2\u060f\u0612"+
		"\3\2\2\2\u0610\u060e\3\2\2\2\u0610\u0611\3\2\2\2\u0611\u0613\3\2\2\2\u0612"+
		"\u0610\3\2\2\2\u0613\u0614\5<\37\2\u0614\u0735\3\2\2\2\u0615\u0619\7n"+
		"\2\2\u0616\u0617\7:\2\2\u0617\u0618\7\u00e9\2\2\u0618\u061a\7\61\2\2\u0619"+
		"\u0616\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u0624\3\2\2\2\u061b\u061d\t\r"+
		"\2\2\u061c\u061b\3\2\2\2\u061d\u061e\3\2\2\2\u061e\u061c\3\2\2\2\u061e"+
		"\u061f\3\2\2\2\u061f\u0625\3\2\2\2\u0620\u0622\7\7\2\2\u0621\u0623\7d"+
		"\2\2\u0622\u0621\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0625\3\2\2\2\u0624"+
		"\u061c\3\2\2\2\u0624\u0620\3\2\2\2\u0625\u0626\3\2\2\2\u0626\u063c\7\u00e7"+
		"\2\2\u0627\u0628\7r\2\2\u0628\u062d\5\u01b0\u00d9\2\u0629\u062a\7\u015b"+
		"\2\2\u062a\u062c\5\u01b0\u00d9\2\u062b\u0629\3\2\2\2\u062c\u062f\3\2\2"+
		"\2\u062d\u062b\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u063d\3\2\2\2\u062f\u062d"+
		"\3\2\2\2\u0630\u0631\7\7\2\2\u0631\u0632\7s\2\2\u0632\u0633\7C\2\2\u0633"+
		"\u0634\7q\2\2\u0634\u0639\5\u00acW\2\u0635\u0636\7\u015b\2\2\u0636\u0638"+
		"\5\u00acW\2\u0637\u0635\3\2\2\2\u0638\u063b\3\2\2\2\u0639\u0637\3\2\2"+
		"\2\u0639\u063a\3\2\2\2\u063a\u063d\3\2\2\2\u063b\u0639\3\2\2\2\u063c\u0627"+
		"\3\2\2\2\u063c\u0630\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u063f\5<\37\2\u063f"+
		"\u0735\3\2\2\2\u0640\u0644\7n\2\2\u0641\u0642\7:\2\2\u0642\u0643\7\u00e9"+
		"\2\2\u0643\u0645\7\61\2\2\u0644\u0641\3\2\2\2\u0644\u0645\3\2\2\2\u0645"+
		"\u064f\3\2\2\2\u0646\u0648\t\22\2\2\u0647\u0646\3\2\2\2\u0648\u0649\3"+
		"\2\2\2\u0649\u0647\3\2\2\2\u0649\u064a\3\2\2\2\u064a\u0650\3\2\2\2\u064b"+
		"\u064d\7\7\2\2\u064c\u064e\7d\2\2\u064d\u064c\3\2\2\2\u064d\u064e\3\2"+
		"\2\2\u064e\u0650\3\2\2\2\u064f\u0647\3\2\2\2\u064f\u064b\3\2\2\2\u0650"+
		"\u0651\3\2\2\2\u0651\u0652\7\u00e7\2\2\u0652\u0653\7\34\2\2\u0653\u0658"+
		"\5\u00acW\2\u0654\u0655\7\u015b\2\2\u0655\u0657\5\u00acW\2\u0656\u0654"+
		"\3\2\2\2\u0657\u065a\3\2\2\2\u0658\u0656\3\2\2\2\u0658\u0659\3\2\2\2\u0659"+
		"\u065b\3\2\2\2\u065a\u0658\3\2\2\2\u065b\u065c\5<\37\2\u065c\u0735\3\2"+
		"\2\2\u065d\u0661\7n\2\2\u065e\u065f\7:\2\2\u065f\u0660\7\u00e9\2\2\u0660"+
		"\u0662\7\61\2\2\u0661\u065e\3\2\2\2\u0661\u0662\3\2\2\2\u0662\u0668\3"+
		"\2\2\2\u0663\u0669\7\u0087\2\2\u0664\u0666\7\7\2\2\u0665\u0667\7d\2\2"+
		"\u0666\u0665\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0669\3\2\2\2\u0668\u0663"+
		"\3\2\2\2\u0668\u0664\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066b\7\u00e7\2"+
		"\2\u066b\u066c\7\62\2\2\u066c\u066d\7\u00aa\2\2\u066d\u066e\7\u0127\2"+
		"\2\u066e\u0673\5\u01b0\u00d9\2\u066f\u0670\7\u015b\2\2\u0670\u0672\5\u01b0"+
		"\u00d9\2\u0671\u066f\3\2\2\2\u0672\u0675\3\2\2\2\u0673\u0671\3\2\2\2\u0673"+
		"\u0674\3\2\2\2\u0674\u0676\3\2\2\2\u0675\u0673\3\2\2\2\u0676\u0677\5<"+
		"\37\2\u0677\u0735\3\2\2\2\u0678\u067c\7n\2\2\u0679\u067a\7:\2\2\u067a"+
		"\u067b\7\u00e9\2\2\u067b\u067d\7\61\2\2\u067c\u0679\3\2\2\2\u067c\u067d"+
		"\3\2\2\2\u067d\u0683\3\2\2\2\u067e\u0684\7\u0087\2\2\u067f\u0681\7\7\2"+
		"\2\u0680\u0682\7d\2\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0684"+
		"\3\2\2\2\u0683\u067e\3\2\2\2\u0683\u067f\3\2\2\2\u0684\u0685\3\2\2\2\u0685"+
		"\u0686\7\u00e7\2\2\u0686\u0687\7\62\2\2\u0687\u0688\7\u0102\2\2\u0688"+
		"\u068d\5\u00acW\2\u0689\u068a\7\u015b\2\2\u068a\u068c\5\u00acW\2\u068b"+
		"\u0689\3\2\2\2\u068c\u068f\3\2\2\2\u068d\u068b\3\2\2\2\u068d\u068e\3\2"+
		"\2\2\u068e\u0690\3\2\2\2\u068f\u068d\3\2\2\2\u0690\u0691\5<\37\2\u0691"+
		"\u0735\3\2\2\2\u0692\u0696\7n\2\2\u0693\u0694\7:\2\2\u0694\u0695\7\u00e9"+
		"\2\2\u0695\u0697\7\61\2\2\u0696\u0693\3\2\2\2\u0696\u0697\3\2\2\2\u0697"+
		"\u069d\3\2\2\2\u0698\u069e\7.\2\2\u0699\u069b\7\7\2\2\u069a\u069c\7d\2"+
		"\2\u069b\u069a\3\2\2\2\u069b\u069c\3\2\2\2\u069c\u069e\3\2\2\2\u069d\u0698"+
		"\3\2\2\2\u069d\u0699\3\2\2\2\u069e\u069f\3\2\2\2\u069f\u06a2\7\u00e7\2"+
		"\2\u06a0\u06a3\5T+\2\u06a1\u06a3\5X-\2\u06a2\u06a0\3\2\2\2\u06a2\u06a1"+
		"\3\2\2\2\u06a3\u06a4\3\2\2\2\u06a4\u06a5\5<\37\2\u06a5\u0735\3\2\2\2\u06a6"+
		"\u06aa\7n\2\2\u06a7\u06a8\7:\2\2\u06a8\u06a9\7\u00e9\2\2\u06a9\u06ab\7"+
		"\61\2\2\u06aa\u06a7\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06b1\3\2\2\2\u06ac"+
		"\u06b2\7\u0087\2\2\u06ad\u06af\7\7\2\2\u06ae\u06b0\7d\2\2\u06af\u06ae"+
		"\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b2\3\2\2\2\u06b1\u06ac\3\2\2\2\u06b1"+
		"\u06ad\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b4\7\u00e7\2\2\u06b4\u06b5"+
		"\7\u00cf\2\2\u06b5\u06ba\5\u00acW\2\u06b6\u06b7\7\u015b\2\2\u06b7\u06b9"+
		"\5\u00acW\2\u06b8\u06b6\3\2\2\2\u06b9\u06bc\3\2\2\2\u06ba\u06b8\3\2\2"+
		"\2\u06ba\u06bb\3\2\2\2\u06bb\u06bd\3\2\2\2\u06bc\u06ba\3\2\2\2\u06bd\u06be"+
		"\5<\37\2\u06be\u0735\3\2\2\2\u06bf\u06c3\7n\2\2\u06c0\u06c1\7:\2\2\u06c1"+
		"\u06c2\7\u00e9\2\2\u06c2\u06c4\7\61\2\2\u06c3\u06c0\3\2\2\2\u06c3\u06c4"+
		"\3\2\2\2\u06c4\u06d2\3\2\2\2\u06c5\u06cb\7t\2\2\u06c6\u06c8\7\u0086\2"+
		"\2\u06c7\u06c9\7\u015b\2\2\u06c8\u06c7\3\2\2\2\u06c8\u06c9\3\2\2\2\u06c9"+
		"\u06cb\3\2\2\2\u06ca\u06c5\3\2\2\2\u06ca\u06c6\3\2\2\2\u06cb\u06cc\3\2"+
		"\2\2\u06cc\u06ca\3\2\2\2\u06cc\u06cd\3\2\2\2\u06cd\u06d3\3\2\2\2\u06ce"+
		"\u06d0\7\7\2\2\u06cf\u06d1\7d\2\2\u06d0\u06cf\3\2\2\2\u06d0\u06d1\3\2"+
		"\2\2\u06d1\u06d3\3\2\2\2\u06d2\u06ca\3\2\2\2\u06d2\u06ce\3\2\2\2\u06d3"+
		"\u06d4\3\2\2\2\u06d4\u06d5\7\u00e7\2\2\u06d5\u06d6\7\u00d0\2\2\u06d6\u06d7"+
		"\7\u00e6\2\2\u06d7\u06dc\5\u00acW\2\u06d8\u06d9\7\u015b\2\2\u06d9\u06db"+
		"\5\u00acW\2\u06da\u06d8\3\2\2\2\u06db\u06de\3\2\2\2\u06dc\u06da\3\2\2"+
		"\2\u06dc\u06dd\3\2\2\2\u06dd\u06df\3\2\2\2\u06de\u06dc\3\2\2\2\u06df\u06e0"+
		"\5<\37\2\u06e0\u0735\3\2\2\2\u06e1\u06e5\7n\2\2\u06e2\u06e3\7:\2\2\u06e3"+
		"\u06e4\7\u00e9\2\2\u06e4\u06e6\7\61\2\2\u06e5\u06e2\3\2\2\2\u06e5\u06e6"+
		"\3\2\2\2\u06e6\u06f3\3\2\2\2\u06e7\u06e9\t\23\2\2\u06e8\u06ea\7\u015b"+
		"\2\2\u06e9\u06e8\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06ec\3\2\2\2\u06eb"+
		"\u06e7\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed\u06eb\3\2\2\2\u06ed\u06ee\3\2"+
		"\2\2\u06ee\u06f4\3\2\2\2\u06ef\u06f1\7\7\2\2\u06f0\u06f2\7d\2\2\u06f1"+
		"\u06f0\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f4\3\2\2\2\u06f3\u06eb\3\2"+
		"\2\2\u06f3\u06ef\3\2\2\2\u06f4\u06f5\3\2\2\2\u06f5\u06f6\7\u00e7\2\2\u06f6"+
		"\u06f7\7q\2\2\u06f7\u06fc\5\u00acW\2\u06f8\u06f9\7\u015b\2\2\u06f9\u06fb"+
		"\5\u00acW\2\u06fa\u06f8\3\2\2\2\u06fb\u06fe\3\2\2\2\u06fc\u06fa\3\2\2"+
		"\2\u06fc\u06fd\3\2\2\2\u06fd\u06ff\3\2\2\2\u06fe\u06fc\3\2\2\2\u06ff\u0700"+
		"\5<\37\2\u0700\u0735\3\2\2\2\u0701\u0705\7n\2\2\u0702\u0703\7:\2\2\u0703"+
		"\u0704\7\u00e9\2\2\u0704\u0706\7\61\2\2\u0705\u0702\3\2\2\2\u0705\u0706"+
		"\3\2\2\2\u0706\u070c\3\2\2\2\u0707\u070d\7\32\2\2\u0708\u070a\7\7\2\2"+
		"\u0709\u070b\7d\2\2\u070a\u0709\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u070d"+
		"\3\2\2\2\u070c\u0707\3\2\2\2\u070c\u0708\3\2\2\2\u070d\u070e\3\2\2\2\u070e"+
		"\u070f\7\u00e7\2\2\u070f\u0710\7\u010f\2\2\u0710\u0715\5\u00acW\2\u0711"+
		"\u0712\7\u015b\2\2\u0712\u0714\5\u00acW\2\u0713\u0711\3\2\2\2\u0714\u0717"+
		"\3\2\2\2\u0715\u0713\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u0718\3\2\2\2\u0717"+
		"\u0715\3\2\2\2\u0718\u0719\5<\37\2\u0719\u0735\3\2\2\2\u071a\u071e\7n"+
		"\2\2\u071b\u071c\7\u0090\2\2\u071c\u071d\7\u00e9\2\2\u071d\u071f\7\61"+
		"\2\2\u071e\u071b\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u0720\3\2\2\2\u0720"+
		"\u0725\5\u00acW\2\u0721\u0722\7\u015b\2\2\u0722\u0724\5\u00acW\2\u0723"+
		"\u0721\3\2\2\2\u0724\u0727\3\2\2\2\u0725\u0723\3\2\2\2\u0725\u0726\3\2"+
		"\2\2\u0726\u0728\3\2\2\2\u0727\u0725\3\2\2\2\u0728\u0729\78\2\2\u0729"+
		"\u072e\5\u00acW\2\u072a\u072b\7\u015b\2\2\u072b\u072d\5\u00acW\2\u072c"+
		"\u072a\3\2\2\2\u072d\u0730\3\2\2\2\u072e\u072c\3\2\2\2\u072e\u072f\3\2"+
		"\2\2\u072f\u0732\3\2\2\2\u0730\u072e\3\2\2\2\u0731\u0733\t\4\2\2\u0732"+
		"\u0731\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0735\3\2\2\2\u0734\u05b6\3\2"+
		"\2\2\u0734\u05e0\3\2\2\2\u0734\u0615\3\2\2\2\u0734\u0640\3\2\2\2\u0734"+
		"\u065d\3\2\2\2\u0734\u0678\3\2\2\2\u0734\u0692\3\2\2\2\u0734\u06a6\3\2"+
		"\2\2\u0734\u06bf\3\2\2\2\u0734\u06e1\3\2\2\2\u0734\u0701\3\2\2\2\u0734"+
		"\u071a\3\2\2\2\u0735;\3\2\2\2\u0736\u073c\78\2\2\u0737\u0739\7;\2\2\u0738"+
		"\u0737\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u073a\3\2\2\2\u073a\u073d\5\u00ac"+
		"W\2\u073b\u073d\7\u00f3\2\2\u073c\u0738\3\2\2\2\u073c\u073b\3\2\2\2\u073d"+
		"\u0748\3\2\2\2\u073e\u0744\7\u015b\2\2\u073f\u0741\7;\2\2\u0740\u073f"+
		"\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0742\3\2\2\2\u0742\u0745\5\u00acW"+
		"\2\u0743\u0745\7\u00f3\2\2\u0744\u0740\3\2\2\2\u0744\u0743\3\2\2\2\u0745"+
		"\u0747\3\2\2\2\u0746\u073e\3\2\2\2\u0747\u074a\3\2\2\2\u0748\u0746\3\2"+
		"\2\2\u0748\u0749\3\2\2\2\u0749\u074c\3\2\2\2\u074a\u0748\3\2\2\2\u074b"+
		"\u074d\t\4\2\2\u074c\u074b\3\2\2\2\u074c\u074d\3\2\2\2\u074d=\3\2\2\2"+
		"\u074e\u075b\7:\2\2\u074f\u0754\t\f\2\2\u0750\u0751\7\u015b\2\2\u0751"+
		"\u0753\t\f\2\2\u0752\u0750\3\2\2\2\u0753\u0756\3\2\2\2\u0754\u0752\3\2"+
		"\2\2\u0754\u0755\3\2\2\2\u0755\u075c\3\2\2\2\u0756\u0754\3\2\2\2\u0757"+
		"\u0759\7\7\2\2\u0758\u075a\7d\2\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2"+
		"\2\2\u075a\u075c\3\2\2\2\u075b\u074f\3\2\2\2\u075b\u0757\3\2\2\2\u075c"+
		"\u075d\3\2\2\2\u075d\u0775\7\u00e7\2\2\u075e\u0760\7{\2\2\u075f\u075e"+
		"\3\2\2\2\u075f\u0760\3\2\2\2\u0760\u0765\3\2\2\2\u0761\u0763\5\u01b0\u00d9"+
		"\2\u0762\u0764\7\u015b\2\2\u0763\u0762\3\2\2\2\u0763\u0764\3\2\2\2\u0764"+
		"\u0766\3\2\2\2\u0765\u0761\3\2\2\2\u0766\u0767\3\2\2\2\u0767\u0765\3\2"+
		"\2\2\u0767\u0768\3\2\2\2\u0768\u0776\3\2\2\2\u0769\u076a\7\7\2\2\u076a"+
		"\u076b\7\u0110\2\2\u076b\u076c\7C\2\2\u076c\u0771\7q\2\2\u076d\u076f\5"+
		"\u00acW\2\u076e\u0770\7\u015b\2\2\u076f\u076e\3\2\2\2\u076f\u0770\3\2"+
		"\2\2\u0770\u0772\3\2\2\2\u0771\u076d\3\2\2\2\u0772\u0773\3\2\2\2\u0773"+
		"\u0771\3\2\2\2\u0773\u0774\3\2\2\2\u0774\u0776\3\2\2\2\u0775\u075f\3\2"+
		"\2\2\u0775\u0769\3\2\2\2\u0776\u0777\3\2\2\2\u0777\u0778\5@!\2\u0778\u089b"+
		"\3\2\2\2\u0779\u0793\7:\2\2\u077a\u077b\t\21\2\2\u077b\u0780\5\u00acW"+
		"\2\u077c\u077d\7\u015b\2\2\u077d\u077f\5\u00acW\2\u077e\u077c\3\2\2\2"+
		"\u077f\u0782\3\2\2\2\u0780\u077e\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u0784"+
		"\3\2\2\2\u0782\u0780\3\2\2\2\u0783\u077a\3\2\2\2\u0784\u0785\3\2\2\2\u0785"+
		"\u0783\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u0794\3\2\2\2\u0787\u0789\7\7"+
		"\2\2\u0788\u078a\7";
	private static final String _serializedATNSegment1 =
		"d\2\2\u0789\u0788\3\2\2\2\u0789\u078a\3\2\2\2\u078a\u078b\3\2\2\2\u078b"+
		"\u0790\5\u00acW\2\u078c\u078d\7\u015b\2\2\u078d\u078f\5\u00acW\2\u078e"+
		"\u078c\3\2\2\2\u078f\u0792\3\2\2\2\u0790\u078e\3\2\2\2\u0790\u0791\3\2"+
		"\2\2\u0791\u0794\3\2\2\2\u0792\u0790\3\2\2\2\u0793\u0783\3\2\2\2\u0793"+
		"\u0787\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u079d\7\u00e7\2\2\u0796\u0798"+
		"\7{\2\2\u0797\u0796\3\2\2\2\u0797\u0798\3\2\2\2\u0798\u0799\3\2\2\2\u0799"+
		"\u079b\5\u01b0\u00d9\2\u079a\u079c\7\u015b\2\2\u079b\u079a\3\2\2\2\u079b"+
		"\u079c\3\2\2\2\u079c\u079e\3\2\2\2\u079d\u0797\3\2\2\2\u079e\u079f\3\2"+
		"\2\2\u079f\u079d\3\2\2\2\u079f\u07a0\3\2\2\2\u07a0\u07a1\3\2\2\2\u07a1"+
		"\u07a2\5@!\2\u07a2\u089b\3\2\2\2\u07a3\u07b0\7:\2\2\u07a4\u07a9\t\r\2"+
		"\2\u07a5\u07a6\7\u015b\2\2\u07a6\u07a8\t\r\2\2\u07a7\u07a5\3\2\2\2\u07a8"+
		"\u07ab\3\2\2\2\u07a9\u07a7\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07b1\3\2"+
		"\2\2\u07ab\u07a9\3\2\2\2\u07ac\u07ae\7\7\2\2\u07ad\u07af\7d\2\2\u07ae"+
		"\u07ad\3\2\2\2\u07ae\u07af\3\2\2\2\u07af\u07b1\3\2\2\2\u07b0\u07a4\3\2"+
		"\2\2\u07b0\u07ac\3\2\2\2\u07b1\u07b2\3\2\2\2\u07b2\u07cc\7\u00e7\2\2\u07b3"+
		"\u07b4\7r\2\2\u07b4\u07b9\5\u00acW\2\u07b5\u07b6\7\u015b\2\2\u07b6\u07b8"+
		"\5\u00acW\2\u07b7\u07b5\3\2\2\2\u07b8\u07bb\3\2\2\2\u07b9\u07b7\3\2\2"+
		"\2\u07b9\u07ba\3\2\2\2\u07ba\u07bd\3\2\2\2\u07bb\u07b9\3\2\2\2\u07bc\u07b3"+
		"\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07bc\3\2\2\2\u07be\u07bf\3\2\2\2\u07bf"+
		"\u07cd\3\2\2\2\u07c0\u07c1\7\7\2\2\u07c1\u07c2\7s\2\2\u07c2\u07c3\7C\2"+
		"\2\u07c3\u07c4\7q\2\2\u07c4\u07c9\5\u00acW\2\u07c5\u07c6\7\u015b\2\2\u07c6"+
		"\u07c8\5\u00acW\2\u07c7\u07c5\3\2\2\2\u07c8\u07cb\3\2\2\2\u07c9\u07c7"+
		"\3\2\2\2\u07c9\u07ca\3\2\2\2\u07ca\u07cd\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cc"+
		"\u07bc\3\2\2\2\u07cc\u07c0\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07cf\5@"+
		"!\2\u07cf\u089b\3\2\2\2\u07d0\u07dd\7:\2\2\u07d1\u07d6\t\22\2\2\u07d2"+
		"\u07d3\7\u015b\2\2\u07d3\u07d5\t\22\2\2\u07d4\u07d2\3\2\2\2\u07d5\u07d8"+
		"\3\2\2\2\u07d6\u07d4\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07de\3\2\2\2\u07d8"+
		"\u07d6\3\2\2\2\u07d9\u07db\7\7\2\2\u07da\u07dc\7d\2\2\u07db\u07da\3\2"+
		"\2\2\u07db\u07dc\3\2\2\2\u07dc\u07de\3\2\2\2\u07dd\u07d1\3\2\2\2\u07dd"+
		"\u07d9\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e0\7\u00e7\2\2\u07e0\u07e1"+
		"\7\34\2\2\u07e1\u07e6\5\u00acW\2\u07e2\u07e3\7\u015b\2\2\u07e3\u07e5\5"+
		"\u00acW\2\u07e4\u07e2\3\2\2\2\u07e5\u07e8\3\2\2\2\u07e6\u07e4\3\2\2\2"+
		"\u07e6\u07e7\3\2\2\2\u07e7\u07e9\3\2\2\2\u07e8\u07e6\3\2\2\2\u07e9\u07ea"+
		"\5@!\2\u07ea\u089b\3\2\2\2\u07eb\u07f1\7:\2\2\u07ec\u07f2\7\u0087\2\2"+
		"\u07ed\u07ef\7\7\2\2\u07ee\u07f0\7d\2\2\u07ef\u07ee\3\2\2\2\u07ef\u07f0"+
		"\3\2\2\2\u07f0\u07f2\3\2\2\2\u07f1\u07ec\3\2\2\2\u07f1\u07ed\3\2\2\2\u07f2"+
		"\u07f3\3\2\2\2\u07f3\u07f4\7\u00e7\2\2\u07f4\u07f5\7\62\2\2\u07f5\u07f6"+
		"\7\u00aa\2\2\u07f6\u07f7\7\u0127\2\2\u07f7\u07fc\5\u00acW\2\u07f8\u07f9"+
		"\7\u015b\2\2\u07f9\u07fb\5\u00acW\2\u07fa\u07f8\3\2\2\2\u07fb\u07fe\3"+
		"\2\2\2\u07fc\u07fa\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u07ff\3\2\2\2\u07fe"+
		"\u07fc\3\2\2\2\u07ff\u0800\5@!\2\u0800\u089b\3\2\2\2\u0801\u0807\7:\2"+
		"\2\u0802\u0808\7\u0087\2\2\u0803\u0805\7\7\2\2\u0804\u0806\7d\2\2\u0805"+
		"\u0804\3\2\2\2\u0805\u0806\3\2\2\2\u0806\u0808\3\2\2\2\u0807\u0802\3\2"+
		"\2\2\u0807\u0803\3\2\2\2\u0808\u0809\3\2\2\2\u0809\u080a\7\u00e7\2\2\u080a"+
		"\u080b\7\62\2\2\u080b\u080c\7\u0102\2\2\u080c\u0811\5\u00acW\2\u080d\u080e"+
		"\7\u015b\2\2\u080e\u0810\5\u00acW\2\u080f\u080d\3\2\2\2\u0810\u0813\3"+
		"\2\2\2\u0811\u080f\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0814\3\2\2\2\u0813"+
		"\u0811\3\2\2\2\u0814\u0815\5@!\2\u0815\u089b\3\2\2\2\u0816\u081c\7:\2"+
		"\2\u0817\u081d\7.\2\2\u0818\u081a\7\7\2\2\u0819\u081b\7d\2\2\u081a\u0819"+
		"\3\2\2\2\u081a\u081b\3\2\2\2\u081b\u081d\3\2\2\2\u081c\u0817\3\2\2\2\u081c"+
		"\u0818\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u0821\7\u00e7\2\2\u081f\u0822"+
		"\5T+\2\u0820\u0822\5X-\2\u0821\u081f\3\2\2\2\u0821\u0820\3\2\2\2\u0822"+
		"\u0823\3\2\2\2\u0823\u0824\5@!\2\u0824\u089b\3\2\2\2\u0825\u082b\7:\2"+
		"\2\u0826\u082c\7\u0087\2\2\u0827\u0829\7\7\2\2\u0828\u082a\7d\2\2\u0829"+
		"\u0828\3\2\2\2\u0829\u082a\3\2\2\2\u082a\u082c\3\2\2\2\u082b\u0826\3\2"+
		"\2\2\u082b\u0827\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082e\7\u00e7\2\2\u082e"+
		"\u082f\7\u00cf\2\2\u082f\u0834\5\u00acW\2\u0830\u0831\7\u015b\2\2\u0831"+
		"\u0833\5\u00acW\2\u0832\u0830\3\2\2\2\u0833\u0836\3\2\2\2\u0834\u0832"+
		"\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0837\3\2\2\2\u0836\u0834\3\2\2\2\u0837"+
		"\u0838\5@!\2\u0838\u089b\3\2\2\2\u0839\u0846\7:\2\2\u083a\u083c\t\24\2"+
		"\2\u083b\u083d\7\u015b\2\2\u083c\u083b\3\2\2\2\u083c\u083d\3\2\2\2\u083d"+
		"\u083f\3\2\2\2\u083e\u083a\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u083e\3\2"+
		"\2\2\u0840\u0841\3\2\2\2\u0841\u0847\3\2\2\2\u0842\u0844\7\7\2\2\u0843"+
		"\u0845\7d\2\2\u0844\u0843\3\2\2\2\u0844\u0845\3\2\2\2\u0845\u0847\3\2"+
		"\2\2\u0846\u083e\3\2\2\2\u0846\u0842\3\2\2\2\u0847\u0848\3\2\2\2\u0848"+
		"\u0849\7\u00e7\2\2\u0849\u084a\7\u00d0\2\2\u084a\u084b\7\u00e6\2\2\u084b"+
		"\u0850\5\u00acW\2\u084c\u084d\7\u015b\2\2\u084d\u084f\5\u00acW\2\u084e"+
		"\u084c\3\2\2\2\u084f\u0852\3\2\2\2\u0850\u084e\3\2\2\2\u0850\u0851\3\2"+
		"\2\2\u0851\u0853\3\2\2\2\u0852\u0850\3\2\2\2\u0853\u0854\5@!\2\u0854\u089b"+
		"\3\2\2\2\u0855\u0862\7:\2\2\u0856\u0858\t\23\2\2\u0857\u0859\7\u015b\2"+
		"\2\u0858\u0857\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085b\3\2\2\2\u085a\u0856"+
		"\3\2\2\2\u085b\u085c\3\2\2\2\u085c\u085a\3\2\2\2\u085c\u085d\3\2\2\2\u085d"+
		"\u0863\3\2\2\2\u085e\u0860\7\7\2\2\u085f\u0861\7d\2\2\u0860\u085f\3\2"+
		"\2\2\u0860\u0861\3\2\2\2\u0861\u0863\3\2\2\2\u0862\u085a\3\2\2\2\u0862"+
		"\u085e\3\2\2\2\u0863\u0864\3\2\2\2\u0864\u0865\7\u00e7\2\2\u0865\u0866"+
		"\7q\2\2\u0866\u086b\5\u00acW\2\u0867\u0868\7\u015b\2\2\u0868\u086a\5\u00ac"+
		"W\2\u0869\u0867\3\2\2\2\u086a\u086d\3\2\2\2\u086b\u0869\3\2\2\2\u086b"+
		"\u086c\3\2\2\2\u086c\u086e\3\2\2\2\u086d\u086b\3\2\2\2\u086e\u086f\5@"+
		"!\2\u086f\u089b\3\2\2\2\u0870\u0876\7:\2\2\u0871\u0877\7\32\2\2\u0872"+
		"\u0874\7\7\2\2\u0873\u0875\7d\2\2\u0874\u0873\3\2\2\2\u0874\u0875\3\2"+
		"\2\2\u0875\u0877\3\2\2\2\u0876\u0871\3\2\2\2\u0876\u0872\3\2\2\2\u0877"+
		"\u0878\3\2\2\2\u0878\u0879\7\u00e7\2\2\u0879\u087a\7\u010f\2\2\u087a\u087f"+
		"\5\u00acW\2\u087b\u087c\7\u015b\2\2\u087c\u087e\5\u00acW\2\u087d\u087b"+
		"\3\2\2\2\u087e\u0881\3\2\2\2\u087f\u087d\3\2\2\2\u087f\u0880\3\2\2\2\u0880"+
		"\u0882\3\2\2\2\u0881\u087f\3\2\2\2\u0882\u0883\5@!\2\u0883\u0884\7:\2"+
		"\2\u0884\u0889\5\u00acW\2\u0885\u0886\7\u015b\2\2\u0886\u0888\5\u00ac"+
		"W\2\u0887\u0885\3\2\2\2\u0888\u088b\3\2\2\2\u0889\u0887\3\2\2\2\u0889"+
		"\u088a\3\2\2\2\u088a\u088c\3\2\2\2\u088b\u0889\3\2\2\2\u088c\u088d\7\u0117"+
		"\2\2\u088d\u0892\5\u00acW\2\u088e\u088f\7\u015b\2\2\u088f\u0891\5\u00ac"+
		"W\2\u0890\u088e\3\2\2\2\u0891\u0894\3\2\2\2\u0892\u0890\3\2\2\2\u0892"+
		"\u0893\3\2\2\2\u0893\u0898\3\2\2\2\u0894\u0892\3\2\2\2\u0895\u0896\7\u008e"+
		"\2\2\u0896\u0897\7\u0090\2\2\u0897\u0899\7\u00e9\2\2\u0898\u0895\3\2\2"+
		"\2\u0898\u0899\3\2\2\2\u0899\u089b\3\2\2\2\u089a\u074e\3\2\2\2\u089a\u0779"+
		"\3\2\2\2\u089a\u07a3\3\2\2\2\u089a\u07d0\3\2\2\2\u089a\u07eb\3\2\2\2\u089a"+
		"\u0801\3\2\2\2\u089a\u0816\3\2\2\2\u089a\u0825\3\2\2\2\u089a\u0839\3\2"+
		"\2\2\u089a\u0855\3\2\2\2\u089a\u0870\3\2\2\2\u089b?\3\2\2\2\u089c\u08a2"+
		"\7\u0117\2\2\u089d\u089f\7;\2\2\u089e\u089d\3\2\2\2\u089e\u089f\3\2\2"+
		"\2\u089f\u08a0\3\2\2\2\u08a0\u08a3\5\u00acW\2\u08a1\u08a3\7\u00f3\2\2"+
		"\u08a2\u089e\3\2\2\2\u08a2\u08a1\3\2\2\2\u08a3\u08ae\3\2\2\2\u08a4\u08aa"+
		"\7\u015b\2\2\u08a5\u08a7\7;\2\2\u08a6\u08a5\3\2\2\2\u08a6\u08a7\3\2\2"+
		"\2\u08a7\u08a8\3\2\2\2\u08a8\u08ab\5\u00acW\2\u08a9\u08ab\7\u00f3\2\2"+
		"\u08aa\u08a6\3\2\2\2\u08aa\u08a9\3\2\2\2\u08ab\u08ad\3\2\2\2\u08ac\u08a4"+
		"\3\2\2\2\u08ad\u08b0\3\2\2\2\u08ae\u08ac\3\2\2\2\u08ae\u08af\3\2\2\2\u08af"+
		"\u08b4\3\2\2\2\u08b0\u08ae\3\2\2\2\u08b1\u08b2\7\u008e\2\2\u08b2\u08b3"+
		"\7:\2\2\u08b3\u08b5\7\u00e9\2\2\u08b4\u08b1\3\2\2\2\u08b4\u08b5\3\2\2"+
		"\2\u08b5A\3\2\2\2\u08b6\u08b7\7\u00a0\2\2\u08b7\u08f5\7\u00e7\2\2\u08b8"+
		"\u08b9\7\4\2\2\u08b9\u08ba\5\u01b0\u00d9\2\u08ba\u08c3\7\u0162\2\2\u08bb"+
		"\u08c0\5\u00bc_\2\u08bc\u08bd\7\u015b\2\2\u08bd\u08bf\5\u00bc_\2\u08be"+
		"\u08bc\3\2\2\2\u08bf\u08c2\3\2\2\2\u08c0\u08be\3\2\2\2\u08c0\u08c1\3\2"+
		"\2\2\u08c1\u08c4\3\2\2\2\u08c2\u08c0\3\2\2\2\u08c3\u08bb\3\2\2\2\u08c3"+
		"\u08c4\3\2\2\2\u08c4\u08c5\3\2\2\2\u08c5\u08c6\7\u0163\2\2\u08c6\u08f6"+
		"\3\2\2\2\u08c7\u08c8\7\22\2\2\u08c8\u08c9\7\u0162\2\2\u08c9\u08ca\5\u00bc"+
		"_\2\u08ca\u08cb\7\6\2\2\u08cb\u08cc\5\u00bc_\2\u08cc\u08cd\7\u0163\2\2"+
		"\u08cd\u08f6\3\2\2\2\u08ce\u08cf\t\25\2\2\u08cf\u08d0\5\u01b0\u00d9\2"+
		"\u08d0\u08d1\7\u00e7\2\2\u08d1\u08d2\5\u01b0\u00d9\2\u08d2\u08f6\3\2\2"+
		"\2\u08d3\u08f6\5T+\2\u08d4\u08d5\7]\2\2\u08d5\u08d6\5\u01b0\u00d9\2\u08d6"+
		"\u08d7\7\u0162\2\2\u08d7\u08d8\5\u00bc_\2\u08d8\u08d9\7\u015b\2\2\u08d9"+
		"\u08da\5\u00bc_\2\u08da\u08db\7\u0163\2\2\u08db\u08f6\3\2\2\2\u08dc\u08dd"+
		"\7]\2\2\u08dd\u08de\t\26\2\2\u08de\u08df\5\u01b0\u00d9\2\u08df\u08e0\7"+
		"\u0088\2\2\u08e0\u08e1\5\u00acW\2\u08e1\u08f6\3\2\2\2\u08e2\u08e3\7\u0148"+
		"\2\2\u08e3\u08e4\7\u00ff\2\2\u08e4\u08f3\t\27\2\2\u08e5\u08e7\7f\2\2\u08e6"+
		"\u08e5\3\2\2\2\u08e6\u08e7\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08f3\7\u00cf"+
		"\2\2\u08e9\u08ea\7\u00d0\2\2\u08ea\u08f3\7\u00e6\2\2\u08eb\u08ef\7\62"+
		"\2\2\u08ec\u08ed\7\u00aa\2\2\u08ed\u08f0\7\u0127\2\2\u08ee\u08f0\7{\2"+
		"\2\u08ef\u08ec\3\2\2\2\u08ef\u08ee\3\2\2\2\u08f0\u08f3\3\2\2\2\u08f1\u08f3"+
		"\t\30\2\2\u08f2\u08e2\3\2\2\2\u08f2\u08e6\3\2\2\2\u08f2\u08e9\3\2\2\2"+
		"\u08f2\u08eb\3\2\2\2\u08f2\u08f1\3\2\2\2\u08f3\u08f4\3\2\2\2\u08f4\u08f6"+
		"\5\u01b0\u00d9\2\u08f5\u08b8\3\2\2\2\u08f5\u08c7\3\2\2\2\u08f5\u08ce\3"+
		"\2\2\2\u08f5\u08d3\3\2\2\2\u08f5\u08d4\3\2\2\2\u08f5\u08dc\3\2\2\2\u08f5"+
		"\u08f2\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7\u08f8\7N\2\2\u08f8\u08f9\7\u0179"+
		"\2\2\u08f9C\3\2\2\2\u08fa\u08fd\7\32\2\2\u08fb\u08fc\7^\2\2\u08fc\u08fe"+
		"\7k\2\2\u08fd\u08fb\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe\u08ff\3\2\2\2\u08ff"+
		"\u0900\7\66\2\2\u0900\u0913\5H%\2\u0901\u0904\7m\2\2\u0902\u0905\5\u010a"+
		"\u0086\2\u0903\u0905\5\u00bc_\2\u0904\u0902\3\2\2\2\u0904\u0903\3\2\2"+
		"\2\u0905\u0914\3\2\2\2\u0906\u0907\7m\2\2\u0907\u0908\7{\2\2\u0908\u0909"+
		"\7\u0162\2\2\u0909\u090e\5F$\2\u090a\u090b\7\u015b\2\2\u090b\u090d\5F"+
		"$\2\u090c\u090a\3\2\2\2\u090d\u0910\3\2\2\2\u090e\u090c\3\2\2\2\u090e"+
		"\u090f\3\2\2\2\u090f\u0911\3\2\2\2\u0910\u090e\3\2\2\2\u0911\u0912\7\u0163"+
		"\2\2\u0912\u0914\3\2\2\2\u0913\u0901\3\2\2\2\u0913\u0906\3\2\2\2\u0913"+
		"\u0914\3\2\2\2\u0914\u0946\3\2\2\2\u0915\u0916\7\u00cf\2\2\u0916\u0947"+
		"\5\u00acW\2\u0917\u0947\t\31\2\2\u0918\u0919\7\u0097\2\2\u0919\u091a\7"+
		"\u00e7\2\2\u091a\u091b\7X\2\2\u091b\u0947\7\u00c8\2\2\u091c\u091d\7m\2"+
		"\2\u091d\u091e\7X\2\2\u091e\u091f\7\u00e7\2\2\u091f\u0920\7X\2\2\u0920"+
		"\u0947\7\u00c8\2\2\u0921\u0923\7\u00ba\2\2\u0922\u0921\3\2\2\2\u0922\u0923"+
		"\3\2\2\2\u0923\u0924\3\2\2\2\u0924\u0925\7\u0101\2\2\u0925\u0947\t\32"+
		"\2\2\u0926\u0927\7\u00a5\2\2\u0927\u0947\7\u0172\2\2\u0928\u0929\7i\2"+
		"\2\u0929\u0947\7\u0172\2\2\u092a\u092b\7\u0103\2\2\u092b\u0932\5\u00ac"+
		"W\2\u092c\u092d\7\u0117\2\2\u092d\u0933\5\u00acW\2\u092e\u092f\7\u0158"+
		"\2\2\u092f\u0933\5\u00acW\2\u0930\u0931\78\2\2\u0931\u0933\7\u00a8\2\2"+
		"\u0932\u092c\3\2\2\2\u0932\u092e\3\2\2\2\u0932\u0930\3\2\2\2\u0933\u0938"+
		"\3\2\2\2\u0934\u0935\7\u015b\2\2\u0935\u0937\5\u00acW\2\u0936\u0934\3"+
		"\2\2\2\u0937\u093a\3\2\2\2\u0938\u0936\3\2\2\2\u0938\u0939\3\2\2\2\u0939"+
		"\u0947\3\2\2\2\u093a\u0938\3\2\2\2\u093b\u093c\7\6\2\2\u093c\u0947\5L"+
		"\'\2\u093d\u093e\7\6\2\2\u093e\u0943\7\u0179\2\2\u093f\u0940\7\u015b\2"+
		"\2\u0940\u0942\7\u0179\2\2\u0941\u093f\3\2\2\2\u0942\u0945\3\2\2\2\u0943"+
		"\u0941\3\2\2\2\u0943\u0944\3\2\2\2\u0944\u0947\3\2\2\2\u0945\u0943\3\2"+
		"\2\2\u0946\u0915\3\2\2\2\u0946\u0917\3\2\2\2\u0946\u0918\3\2\2\2\u0946"+
		"\u091c\3\2\2\2\u0946\u0922\3\2\2\2\u0946\u0926\3\2\2\2\u0946\u0928\3\2"+
		"\2\2\u0946\u092a\3\2\2\2\u0946\u093b\3\2\2\2\u0946\u093d\3\2\2\2\u0947"+
		"\u0948\3\2\2\2\u0948\u0946\3\2\2\2\u0948\u0949\3\2\2\2\u0949\u0956\3\2"+
		"\2\2\u094a\u094b\7\u008e\2\2\u094b\u094c\7\u0162\2\2\u094c\u0951\5P)\2"+
		"\u094d\u094e\7\u015b\2\2\u094e\u0950\5P)\2\u094f\u094d\3\2\2\2\u0950\u0953"+
		"\3\2\2\2\u0951\u094f\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0954\3\2\2\2\u0953"+
		"\u0951\3\2\2\2\u0954\u0955\7\u0163\2\2\u0955\u0957\3\2\2\2\u0956\u094a"+
		"\3\2\2\2\u0956\u0957\3\2\2\2\u0957E\3\2\2\2\u0958\u0959\5\u00acW\2\u0959"+
		"\u095a\5\u00bc_\2\u095aG\3\2\2\2\u095b\u095c\5\u01b0\u00d9\2\u095c\u096b"+
		"\7\u0162\2\2\u095d\u095f\5N(\2\u095e\u0960\5J&\2\u095f\u095e\3\2\2\2\u095f"+
		"\u0960\3\2\2\2\u0960\u0968\3\2\2\2\u0961\u0962\7\u015b\2\2\u0962\u0964"+
		"\5N(\2\u0963\u0965\5J&\2\u0964\u0963\3\2\2\2\u0964\u0965\3\2\2\2\u0965"+
		"\u0967\3\2\2\2\u0966\u0961\3\2\2\2\u0967\u096a\3\2\2\2\u0968\u0966\3\2"+
		"\2\2\u0968\u0969\3\2\2\2\u0969\u096c\3\2\2\2\u096a\u0968\3\2\2\2\u096b"+
		"\u095d\3\2\2\2\u096b\u096c\3\2\2\2\u096c\u096d\3\2\2\2\u096d\u096e\7\u0163"+
		"\2\2\u096eI\3\2\2\2\u096f\u0970\t\33\2\2\u0970\u0971\5\u010a\u0086\2\u0971"+
		"K\3\2\2\2\u0972\u0974\7\u017b\2\2\u0973\u0975\7\u017f\2\2\u0974\u0973"+
		"\3\2\2\2\u0975\u0976\3\2\2\2\u0976\u0974\3\2\2\2\u0976\u0977\3\2\2\2\u0977"+
		"\u0978\3\2\2\2\u0978\u0979\7\u0180\2\2\u0979M\3\2\2\2\u097a\u097c\5R*"+
		"\2\u097b\u097a\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u097e\3\2\2\2\u097d\u097f"+
		"\5\u00acW\2\u097e\u097d\3\2\2\2\u097e\u097f\3\2\2\2\u097f\u0983\3\2\2"+
		"\2\u0980\u0984\5\u00bc_\2\u0981\u0984\5\u010a\u0086\2\u0982\u0984\5\u01b0"+
		"\u00d9\2\u0983\u0980\3\2\2\2\u0983\u0981\3\2\2\2\u0983\u0982\3\2\2\2\u0984"+
		"O\3\2\2\2\u0985\u0986\t\34\2\2\u0986Q\3\2\2\2\u0987\u0988\t\35\2\2\u0988"+
		"S\3\2\2\2\u0989\u098a\7\66\2\2\u098a\u098b\5V,\2\u098bU\3\2\2\2\u098c"+
		"\u098d\5\u01b0\u00d9\2\u098d\u0996\7\u0162\2\2\u098e\u0993\5N(\2\u098f"+
		"\u0990\7\u015b\2\2\u0990\u0992\5N(\2\u0991\u098f\3\2\2\2\u0992\u0995\3"+
		"\2\2\2\u0993\u0991\3\2\2\2\u0993\u0994\3\2\2\2\u0994\u0997\3\2\2\2\u0995"+
		"\u0993\3\2\2\2\u0996\u098e\3\2\2\2\u0996\u0997\3\2\2\2\u0997\u0998\3\2"+
		"\2\2\u0998\u0999\7\u0163\2\2\u0999W\3\2\2\2\u099a\u099b\7\7\2\2\u099b"+
		"\u099c\7\67\2\2\u099c\u099d\7C\2\2\u099d\u099e\7q\2\2\u099e\u09a3\5\u00ac"+
		"W\2\u099f\u09a0\7\u015b\2\2\u09a0\u09a2\5\u00acW\2\u09a1\u099f\3\2\2\2"+
		"\u09a2\u09a5\3\2\2\2\u09a3\u09a1\3\2\2\2\u09a3\u09a4\3\2\2\2\u09a4Y\3"+
		"\2\2\2\u09a5\u09a3\3\2\2\2\u09a6\u09a8\7\32\2\2\u09a7\u09a9\t\36\2\2\u09a8"+
		"\u09a7\3\2\2\2\u09a8\u09a9\3\2\2\2\u09a9\u09aa\3\2\2\2\u09aa\u09ab\7r"+
		"\2\2\u09ab\u09af\5\u01b0\u00d9\2\u09ac\u09ae\5\\/\2\u09ad\u09ac\3\2\2"+
		"\2\u09ae\u09b1\3\2\2\2\u09af\u09ad\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0["+
		"\3\2\2\2\u09b1\u09af\3\2\2\2\u09b2\u09b4\7\u00c7\2\2\u09b3\u09b5\7\u0095"+
		"\2\2\u09b4\u09b3\3\2\2\2\u09b4\u09b5\3\2\2\2\u09b5\u09b6\3\2\2\2\u09b6"+
		"\u09d5\7\u0172\2\2\u09b7\u09b8\7\u00dd\2\2\u09b8\u09bc\5\u00e4s\2\u09b9"+
		"\u09ba\7\u00e1\2\2\u09ba\u09bc\7\u00dd\2\2\u09bb\u09b7\3\2\2\2\u09bb\u09b9"+
		"\3\2\2\2\u09bc\u09d5\3\2\2\2\u09bd\u09be\7\u00d8\2\2\u09be\u09c2\5\u00e4"+
		"s\2\u09bf\u09c0\7\u00e1\2\2\u09c0\u09c2\7\u00d8\2\2\u09c1\u09bd\3\2\2"+
		"\2\u09c1\u09bf\3\2\2\2\u09c2\u09d5\3\2\2\2\u09c3\u09c5\7\u0107\2\2\u09c4"+
		"\u09c6\7\u008e\2\2\u09c5\u09c4\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6\u09c7"+
		"\3\2\2\2\u09c7\u09d5\5\u00e4s\2\u09c8\u09c9\7\u0096\2\2\u09c9\u09d5\5"+
		"\u00e4s\2\u09ca\u09cc\7\u00e1\2\2\u09cb\u09ca\3\2\2\2\u09cb\u09cc\3\2"+
		"\2\2\u09cc\u09cd\3\2\2\2\u09cd\u09d5\7\u00a9\2\2\u09ce\u09cf\7`\2\2\u09cf"+
		"\u09d2\7\u0095\2\2\u09d0\u09d3\5\u01b0\u00d9\2\u09d1\u09d3\7\u00e2\2\2"+
		"\u09d2\u09d0\3\2\2\2\u09d2\u09d1\3\2\2\2\u09d3\u09d5\3\2\2\2\u09d4\u09b2"+
		"\3\2\2\2\u09d4\u09bb\3\2\2\2\u09d4\u09c1\3\2\2\2\u09d4\u09c3\3\2\2\2\u09d4"+
		"\u09c8\3\2\2\2\u09d4\u09cb\3\2\2\2\u09d4\u09ce\3\2\2\2\u09d5]\3\2\2\2"+
		"\u09d6\u09d7\7\32\2\2\u09d7\u09f7\7q\2\2\u09d8\u09db\5\u00acW\2\u09d9"+
		"\u09da\7\r\2\2\u09da\u09dc\5\u00acW\2\u09db\u09d9\3\2\2\2\u09db\u09dc"+
		"\3\2\2\2\u09dc\u09e0\3\2\2\2\u09dd\u09df\5\2\2\2\u09de\u09dd\3\2\2\2\u09df"+
		"\u09e2\3\2\2\2\u09e0\u09de\3\2\2\2\u09e0\u09e1\3\2\2\2\u09e1\u09f8\3\2"+
		"\2\2\u09e2\u09e0\3\2\2\2\u09e3\u09e4\7\r\2\2\u09e4\u09e8\5\u00acW\2\u09e5"+
		"\u09e7\5\2\2\2\u09e6\u09e5\3\2\2\2\u09e7\u09ea\3\2\2\2\u09e8\u09e6\3\2"+
		"\2\2\u09e8\u09e9\3\2\2\2\u09e9\u09f8\3\2\2\2\u09ea\u09e8\3\2\2\2\u09eb"+
		"\u09ec\7?\2\2\u09ec\u09ed\7W\2\2\u09ed\u09f5\7\u00b8\2\2\u09ee\u09f1\5"+
		"\u00acW\2\u09ef\u09f0\7\r\2\2\u09f0\u09f2\5\u00acW\2\u09f1\u09ef\3\2\2"+
		"\2\u09f1\u09f2\3\2\2\2\u09f2\u09f6\3\2\2\2\u09f3\u09f4\7\r\2\2\u09f4\u09f6"+
		"\5\u00acW\2\u09f5\u09ee\3\2\2\2\u09f5\u09f3\3\2\2\2\u09f6\u09f8\3\2\2"+
		"\2\u09f7\u09d8\3\2\2\2\u09f7\u09e3\3\2\2\2\u09f7\u09eb\3\2\2\2\u09f8_"+
		"\3\2\2\2\u09f9\u09fc\7\32\2\2\u09fa\u09fb\7^\2\2\u09fb\u09fd\7k\2\2\u09fc"+
		"\u09fa\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u09ff\3\2\2\2\u09fe\u0a00\t\36"+
		"\2\2\u09ff\u09fe\3\2\2\2\u09ff\u0a00\3\2\2\2\u0a00\u0a01\3\2\2\2\u0a01"+
		"\u0a02\7\u008b\2\2\u0a02\u0a09\5\u01b0\u00d9\2\u0a03\u0a05\5\u00acW\2"+
		"\u0a04\u0a06\7\u015b\2\2\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06"+
		"\u0a08\3\2\2\2\u0a07\u0a03\3\2\2\2\u0a08\u0a0b\3\2\2\2\u0a09\u0a07\3\2"+
		"\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a19\3\2\2\2\u0a0b\u0a09\3\2\2\2\u0a0c"+
		"\u0a0d\7\u008e\2\2\u0a0d\u0a13\7\u0162\2\2\u0a0e\u0a11\5\u00acW\2\u0a0f"+
		"\u0a10\7\u0158\2\2\u0a10\u0a12\5\u00acW\2\u0a11\u0a0f\3\2\2\2\u0a11\u0a12"+
		"\3\2\2\2\u0a12\u0a14\3\2\2\2\u0a13\u0a0e\3\2\2\2\u0a14\u0a15\3\2\2\2\u0a15"+
		"\u0a13\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a17\3\2\2\2\u0a17\u0a18\7\u0163"+
		"\2\2\u0a18\u0a1a\3\2\2\2\u0a19\u0a0c\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a"+
		"\u0a1b\3\2\2\2\u0a1b\u0a1c\7\6\2\2\u0a1c\u0a24\5\u01b2\u00da\2\u0a1d\u0a1f"+
		"\7\u0084\2\2\u0a1e\u0a20\7\7\2\2\u0a1f\u0a1e\3\2\2\2\u0a1f\u0a20\3\2\2"+
		"\2\u0a20\u0a21\3\2\2\2\u0a21\u0a23\5\u01b2\u00da\2\u0a22\u0a1d\3\2\2\2"+
		"\u0a23\u0a26\3\2\2\2\u0a24\u0a22\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25a\3"+
		"\2\2\2\u0a26\u0a24\3\2\2\2\u0a27\u0a2d\7\32\2\2\u0a28\u0a2a\t\37\2\2\u0a29"+
		"\u0a28\3\2\2\2\u0a29\u0a2a\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2e\t\36"+
		"\2\2\u0a2c\u0a2e\7\u011b\2\2\u0a2d\u0a29\3\2\2\2\u0a2d\u0a2c\3\2\2\2\u0a2d"+
		"\u0a2e\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a33\7{\2\2\u0a30\u0a31\7?\2"+
		"\2\u0a31\u0a32\7W\2\2\u0a32\u0a34\7\u00b8\2\2\u0a33\u0a30\3\2\2\2\u0a33"+
		"\u0a34\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a7b\5\u01b0\u00d9\2\u0a36\u0a3f"+
		"\7\u0162\2\2\u0a37\u0a3c\5d\63\2\u0a38\u0a39\7\u015b\2\2\u0a39\u0a3b\5"+
		"d\63\2\u0a3a\u0a38\3\2\2\2\u0a3b\u0a3e\3\2\2\2\u0a3c\u0a3a\3\2\2\2\u0a3c"+
		"\u0a3d\3\2\2\2\u0a3d\u0a40\3\2\2\2\u0a3e\u0a3c\3\2\2\2\u0a3f\u0a37\3\2"+
		"\2\2\u0a3f\u0a40\3\2\2\2\u0a40\u0a41\3\2\2\2\u0a41\u0a4e\7\u0163\2\2\u0a42"+
		"\u0a43\7E\2\2\u0a43\u0a48\7\u0162\2\2\u0a44\u0a46\5\u01b0\u00d9\2\u0a45"+
		"\u0a47\7\u015b\2\2\u0a46\u0a45\3\2\2\2\u0a46\u0a47\3\2\2\2\u0a47\u0a49"+
		"\3\2\2\2\u0a48\u0a44\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0a48\3\2\2\2\u0a4a"+
		"\u0a4b\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a4d\7\u0163\2\2\u0a4d\u0a4f"+
		"\3\2\2\2\u0a4e\u0a42\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a50\3\2\2\2\u0a50"+
		"\u0a51\5t;\2\u0a51\u0a52\5v<\2\u0a52\u0a53\5x=\2\u0a53\u0a7c\3\2\2\2\u0a54"+
		"\u0a55\7Y\2\2\u0a55\u0a75\5\u00acW\2\u0a56\u0a61\7\u0162\2\2\u0a57\u0a58"+
		"\5\u00acW\2\u0a58\u0a59\7\u008e\2\2\u0a59\u0a5d\7\u00ea\2\2\u0a5a\u0a5c"+
		"\5l\67\2\u0a5b\u0a5a\3\2\2\2\u0a5c\u0a5f\3\2\2\2\u0a5d\u0a5b\3\2\2\2\u0a5d"+
		"\u0a5e\3\2\2\2\u0a5e\u0a62\3\2\2\2\u0a5f\u0a5d\3\2\2\2\u0a60\u0a62\5j"+
		"\66\2\u0a61\u0a57\3\2\2\2\u0a61\u0a60\3\2\2\2\u0a62\u0a70\3\2\2\2\u0a63"+
		"\u0a64\7\u015b\2\2\u0a64\u0a65\5\u00acW\2\u0a65\u0a66\7\u008e\2\2\u0a66"+
		"\u0a6a\7\u00ea\2\2\u0a67\u0a69\5l\67\2\u0a68\u0a67\3\2\2\2\u0a69\u0a6c"+
		"\3\2\2\2\u0a6a\u0a68\3\2\2\2\u0a6a\u0a6b\3\2\2\2\u0a6b\u0a6f\3\2\2\2\u0a6c"+
		"\u0a6a\3\2\2\2\u0a6d\u0a6f\5j\66\2\u0a6e\u0a63\3\2\2\2\u0a6e\u0a6d\3\2"+
		"\2\2\u0a6f\u0a72\3\2\2\2\u0a70\u0a6e\3\2\2\2\u0a70\u0a71\3\2\2\2\u0a71"+
		"\u0a73\3\2\2\2\u0a72\u0a70\3\2\2\2\u0a73\u0a74\7\u0163\2\2\u0a74\u0a76"+
		"\3\2\2\2\u0a75\u0a56\3\2\2\2\u0a75\u0a76\3\2\2\2\u0a76\u0a77\3\2\2\2\u0a77"+
		"\u0a78\5t;\2\u0a78\u0a79\5v<\2\u0a79\u0a7a\5x=\2\u0a7a\u0a7c\3\2\2\2\u0a7b"+
		"\u0a36\3\2\2\2\u0a7b\u0a54\3\2\2\2\u0a7cc\3\2\2\2\u0a7d\u0a88\5f\64\2"+
		"\u0a7e\u0a88\5j\66\2\u0a7f\u0a80\7S\2\2\u0a80\u0a84\5\u00acW\2\u0a81\u0a83"+
		"\5h\65\2\u0a82\u0a81\3\2\2\2\u0a83\u0a86\3\2\2\2\u0a84\u0a82\3\2\2\2\u0a84"+
		"\u0a85\3\2\2\2\u0a85\u0a88\3\2\2\2\u0a86\u0a84\3\2\2\2\u0a87\u0a7d\3\2"+
		"\2\2\u0a87\u0a7e\3\2\2\2\u0a87\u0a7f\3\2\2\2\u0a88e\3\2\2\2\u0a89\u0a8a"+
		"\5\u00acW\2\u0a8a\u0a8d\5\u00bc_\2\u0a8b\u0a8c\7\23\2\2\u0a8c\u0a8e\5"+
		"\u00acW\2\u0a8d\u0a8b\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e\u0a92\3\2\2\2"+
		"\u0a8f\u0a91\5l\67\2\u0a90\u0a8f\3\2\2\2\u0a91\u0a94\3\2\2\2\u0a92\u0a90"+
		"\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93g\3\2\2\2\u0a94\u0a92\3\2\2\2\u0a95"+
		"\u0a96\t \2\2\u0a96\u0a97\t!\2\2\u0a97i\3\2\2\2\u0a98\u0a99\7\26\2\2\u0a99"+
		"\u0a9b\5\u00acW\2\u0a9a\u0a98\3\2\2\2\u0a9a\u0a9b\3\2\2\2\u0a9b\u0aff"+
		"\3\2\2\2\u0a9c\u0b00\5n8\2\u0a9d\u0a9e\7\u0085\2\2\u0a9e\u0a9f\7\u0162"+
		"\2\2\u0a9f\u0aa4\5\u00acW\2\u0aa0\u0aa1\7\u015b\2\2\u0aa1\u0aa3\5\u00ac"+
		"W\2\u0aa2\u0aa0\3\2\2\2\u0aa3\u0aa6\3\2\2\2\u0aa4\u0aa2\3\2\2\2\u0aa4"+
		"\u0aa5\3\2\2\2\u0aa5\u0aa7\3\2\2\2\u0aa6\u0aa4\3\2\2\2\u0aa7\u0aa8\7\u0163"+
		"\2\2\u0aa8\u0aa9\5|?\2\u0aa9\u0b00\3\2\2\2\u0aaa\u0aab\7c\2\2\u0aab\u0aac"+
		"\7P\2\2\u0aac\u0aad\7\u0162\2\2\u0aad\u0ab2\5\u00acW\2\u0aae\u0aaf\7\u015b"+
		"\2\2\u0aaf\u0ab1\5\u00acW\2\u0ab0\u0aae\3\2\2\2\u0ab1\u0ab4\3\2\2\2\u0ab2"+
		"\u0ab0\3\2\2\2\u0ab2\u0ab3\3\2\2\2\u0ab3\u0ab5\3\2\2\2\u0ab4\u0ab2\3\2"+
		"\2\2\u0ab5\u0ab6\7\u0163\2\2\u0ab6\u0ab7\5|?\2\u0ab7\u0b00\3\2\2\2\u0ab8"+
		"\u0abb\7,\2\2\u0ab9\u0aba\7\u0088\2\2\u0aba\u0abc\5\u00acW\2\u0abb\u0ab9"+
		"\3\2\2\2\u0abb\u0abc\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abe\7\u0162\2"+
		"\2\u0abe\u0abf\5\u00acW\2\u0abf\u0ac0\7\u008e\2\2\u0ac0\u0ac5\5\u00ac"+
		"W\2\u0ac1\u0ac2\7\u015b\2\2\u0ac2\u0ac4\5\u00acW\2\u0ac3\u0ac1\3\2\2\2"+
		"\u0ac4\u0ac7\3\2\2\2\u0ac5\u0ac3\3\2\2\2\u0ac5\u0ac6\3\2\2\2\u0ac6\u0ac8"+
		"\3\2\2\2\u0ac7\u0ac5\3\2\2\2\u0ac8\u0ac9\7\u0163\2\2\u0ac9\u0acf\5|?\2"+
		"\u0aca\u0acb\7\u008d\2\2\u0acb\u0acc\7\u0162\2\2\u0acc\u0acd\5\u00acW"+
		"\2\u0acd\u0ace\7\u0163\2\2\u0ace\u0ad0\3\2\2\2\u0acf\u0aca\3\2\2\2\u0acf"+
		"\u0ad0\3\2\2\2\u0ad0\u0b00\3\2\2\2\u0ad1\u0ad2\7\62\2\2\u0ad2\u0ad3\7"+
		"P\2\2\u0ad3\u0ad4\7\u0162\2\2\u0ad4\u0ad9\5\u00acW\2\u0ad5\u0ad6\7\u015b"+
		"\2\2\u0ad6\u0ad8\5\u00acW\2\u0ad7\u0ad5\3\2\2\2\u0ad8\u0adb\3\2\2\2\u0ad9"+
		"\u0ad7\3\2\2\2\u0ad9\u0ada\3\2\2\2\u0ada\u0adc\3\2\2\2\u0adb\u0ad9\3\2"+
		"\2\2\u0adc\u0add\7\u0163\2\2\u0add\u0ade\7j\2\2\u0ade\u0aea\5\u01b0\u00d9"+
		"\2\u0adf\u0ae0\7\u0162\2\2\u0ae0\u0ae5\5\u00acW\2\u0ae1\u0ae2\7\u015b"+
		"\2\2\u0ae2\u0ae4\5\u00acW\2\u0ae3\u0ae1\3\2\2\2\u0ae4\u0ae7\3\2\2\2\u0ae5"+
		"\u0ae3\3\2\2\2\u0ae5\u0ae6\3\2\2\2\u0ae6\u0ae8\3\2\2\2\u0ae7\u0ae5\3\2"+
		"\2\2\u0ae8\u0ae9\7\u0163\2\2\u0ae9\u0aeb\3\2\2\2\u0aea\u0adf\3\2\2\2\u0aea"+
		"\u0aeb\3\2\2\2\u0aeb\u0afc\3\2\2\2\u0aec\u0aed\7\u00d6\2\2\u0aed\u0af3"+
		"\7\65\2\2\u0aee\u0aef\7\u00d6\2\2\u0aef\u0af3\7\u00ee\2\2\u0af0\u0af1"+
		"\7\u00d6\2\2\u0af1\u0af3\7\u0105\2\2\u0af2\u0aec\3\2\2\2\u0af2\u0aee\3"+
		"\2\2\2\u0af2\u0af0\3\2\2\2\u0af3\u0afb\3\2\2\2\u0af4\u0af5\7\u00e7\2\2"+
		"\u0af5\u0af6\7!\2\2\u0af6\u0afb\5z>\2\u0af7\u0af8\7\u00e7\2\2\u0af8\u0af9"+
		"\7\u0086\2\2\u0af9\u0afb\5z>\2\u0afa\u0af2\3\2\2\2\u0afa\u0af4\3\2\2\2"+
		"\u0afa\u0af7\3\2\2\2\u0afb\u0afe\3\2\2\2\u0afc\u0afa\3\2\2\2\u0afc\u0afd"+
		"\3\2\2\2\u0afd\u0b00\3\2\2\2\u0afe\u0afc\3\2\2\2\u0aff\u0a9c\3\2\2\2\u0aff"+
		"\u0a9d\3\2\2\2\u0aff\u0aaa\3\2\2\2\u0aff\u0ab8\3\2\2\2\u0aff\u0ad1\3\2"+
		"\2\2\u0b00\u0b04\3\2\2\2\u0b01\u0b05\7\37\2\2\u0b02\u0b03\7W\2\2\u0b03"+
		"\u0b05\7\37\2\2\u0b04\u0b01\3\2\2\2\u0b04\u0b02\3\2\2\2\u0b04\u0b05\3"+
		"\2\2\2\u0b05\u0b0a\3\2\2\2\u0b06\u0b07\7F\2\2\u0b07\u0b0b\7 \2\2\u0b08"+
		"\u0b09\7F\2\2\u0b09\u0b0b\7A\2\2\u0b0a\u0b06\3\2\2\2\u0b0a\u0b08\3\2\2"+
		"\2\u0b0a\u0b0b\3\2\2\2\u0b0bk\3\2\2\2\u0b0c\u0b0d\7\26\2\2\u0b0d\u0b0f"+
		"\5\u00acW\2\u0b0e\u0b0c\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b33\3\2\2"+
		"\2\u0b10\u0b11\7W\2\2\u0b11\u0b34\7X\2\2\u0b12\u0b34\7X\2\2\u0b13\u0b34"+
		"\5n8\2\u0b14\u0b17\7\35\2\2\u0b15\u0b18\5\u00bc_\2\u0b16\u0b18\5\u010a"+
		"\u0086\2\u0b17\u0b15\3\2\2\2\u0b17\u0b16\3\2\2\2\u0b18\u0b34\3\2\2\2\u0b19"+
		"\u0b1a\7\u0085\2\2\u0b1a\u0b34\5|?\2\u0b1b\u0b1c\7c\2\2\u0b1c\u0b1d\7"+
		"P\2\2\u0b1d\u0b34\5|?\2\u0b1e\u0b1f\7j\2\2\u0b1f\u0b20\5\u01b0\u00d9\2"+
		"\u0b20\u0b27\5\u00acW\2\u0b21\u0b22\7\u00d6\2\2\u0b22\u0b28\7\65\2\2\u0b23"+
		"\u0b24\7\u00d6\2\2\u0b24\u0b28\7\u00ee\2\2\u0b25\u0b26\7\u00d6\2\2\u0b26"+
		"\u0b28\7\u0105\2\2\u0b27\u0b21\3\2\2\2\u0b27\u0b23\3\2\2\2\u0b27\u0b25"+
		"\3\2\2\2\u0b27\u0b28\3\2\2\2\u0b28\u0b2c\3\2\2\2\u0b29\u0b2a\7\u00e7\2"+
		"\2\u0b2a\u0b2b\7!\2\2\u0b2b\u0b2d\5z>\2\u0b2c\u0b29\3\2\2\2\u0b2c\u0b2d"+
		"\3\2\2\2\u0b2d\u0b31\3\2\2\2\u0b2e\u0b2f\7\u00e7\2\2\u0b2f\u0b30\7\u0086"+
		"\2\2\u0b30\u0b32\5z>\2\u0b31\u0b2e\3\2\2\2\u0b31\u0b32\3\2\2\2\u0b32\u0b34"+
		"\3\2\2\2\u0b33\u0b10\3\2\2\2\u0b33\u0b12\3\2\2\2\u0b33\u0b13\3\2\2\2\u0b33"+
		"\u0b14\3\2\2\2\u0b33\u0b19\3\2\2\2\u0b33\u0b1b\3\2\2\2\u0b33\u0b1e\3\2"+
		"\2\2\u0b34\u0b38\3\2\2\2\u0b35\u0b39\7\37\2\2\u0b36\u0b37\7W\2\2\u0b37"+
		"\u0b39\7\37\2\2\u0b38\u0b35\3\2\2\2\u0b38\u0b36\3\2\2\2\u0b38\u0b39\3"+
		"\2\2\2\u0b39\u0b3e\3\2\2\2\u0b3a\u0b3b\7F\2\2\u0b3b\u0b3f\7 \2\2\u0b3c"+
		"\u0b3d\7F\2\2\u0b3d\u0b3f\7A\2\2\u0b3e\u0b3a\3\2\2\2\u0b3e\u0b3c\3\2\2"+
		"\2\u0b3e\u0b3f\3\2\2\2\u0b3fm\3\2\2\2\u0b40\u0b42\7\u009b\2\2\u0b41\u0b43"+
		"\7\u0162\2\2\u0b42\u0b41\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0b42\3\2\2"+
		"\2\u0b44\u0b45\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b48\5\u010a\u0086\2"+
		"\u0b47\u0b49\7\u0163\2\2\u0b48\u0b47\3\2\2\2\u0b49\u0b4a\3\2\2\2\u0b4a"+
		"\u0b48\3\2\2\2\u0b4a\u0b4b\3\2\2\2\u0b4bo\3\2\2\2\u0b4c\u0b55\7\u0162"+
		"\2\2\u0b4d\u0b50\5\u00acW\2\u0b4e\u0b4f\7\u0158\2\2\u0b4f\u0b51\5\u010a"+
		"\u0086\2\u0b50\u0b4e\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b53\3\2\2\2\u0b52"+
		"\u0b54\7\u015b\2\2\u0b53\u0b52\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54\u0b56"+
		"\3\2\2\2\u0b55\u0b4d\3\2\2\2\u0b56\u0b57\3\2\2\2\u0b57\u0b55\3\2\2\2\u0b57"+
		"\u0b58\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5a\7\u0163\2\2\u0b5aq\3\2"+
		"\2\2\u0b5b\u0b5c\7\u008e\2\2\u0b5c\u0b5d\5p9\2\u0b5ds\3\2\2\2\u0b5e\u0b64"+
		"\5r:\2\u0b5f\u0b60\7\u008e\2\2\u0b60\u0b64\7Z\2\2\u0b61\u0b62\7\u008f"+
		"\2\2\u0b62\u0b64\7Z\2\2\u0b63\u0b5e\3\2\2\2\u0b63\u0b5f\3\2\2\2\u0b63"+
		"\u0b61\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64u\3\2\2\2\u0b65\u0b66\7\u00e7"+
		"\2\2\u0b66\u0b6c\7\u00a2\2\2\u0b67\u0b68\7b\2\2\u0b68\u0b6d\7i\2\2\u0b69"+
		"\u0b6a\7!\2\2\u0b6a\u0b6d\7i\2\2\u0b6b\u0b6d\7\u00b3\2\2\u0b6c\u0b67\3"+
		"\2\2\2\u0b6c\u0b69\3\2\2\2\u0b6c\u0b6b\3\2\2\2\u0b6d\u0b6f\3\2\2\2\u0b6e"+
		"\u0b65\3\2\2\2\u0b6e\u0b6f\3\2\2\2\u0b6fw\3\2\2\2\u0b70\u0b71\7\u010f"+
		"\2\2\u0b71\u0b73\5\u00acW\2\u0b72\u0b70\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73"+
		"y\3\2\2\2\u0b74\u0b7b\7l\2\2\u0b75\u0b7b\7\21\2\2\u0b76\u0b77\7\u0103"+
		"\2\2\u0b77\u0b7b\7X\2\2\u0b78\u0b79\7\u0103\2\2\u0b79\u0b7b\7\35\2\2\u0b7a"+
		"\u0b74\3\2\2\2\u0b7a\u0b75\3\2\2\2\u0b7a\u0b76\3\2\2\2\u0b7a\u0b78\3\2"+
		"\2\2\u0b7b{\3\2\2\2\u0b7c\u0b7e\5r:\2\u0b7d\u0b7c\3\2\2\2\u0b7d\u0b7e"+
		"\3\2\2\2\u0b7e\u0b83\3\2\2\2\u0b7f\u0b80\7\u0088\2\2\u0b80\u0b81\7\u00c5"+
		"\2\2\u0b81\u0b82\7\u010f\2\2\u0b82\u0b84\5\u00acW\2\u0b83\u0b7f\3\2\2"+
		"\2\u0b83\u0b84\3\2\2\2\u0b84}\3\2\2\2\u0b85\u0b86\7\u0162\2\2\u0b86\u0b8b"+
		"\5\u0080A\2\u0b87\u0b88\7\u015b\2\2\u0b88\u0b8a\5\u0080A\2\u0b89\u0b87"+
		"\3\2\2\2\u0b8a\u0b8d\3\2\2\2\u0b8b\u0b89\3\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c"+
		"\u0b8e\3\2\2\2\u0b8d\u0b8b\3\2\2\2\u0b8e\u0b8f\7\u0163\2\2\u0b8f\177\3"+
		"\2\2\2\u0b90\u0b91\5\u00acW\2\u0b91\u0b92\5\u0082B\2\u0b92\u0081\3\2\2"+
		"\2\u0b93\u0b94\5\u00bc_\2\u0b94\u0083\3\2\2\2\u0b95\u0b96\7\u008e\2\2"+
		"\u0b96\u0b97\7\u0162\2\2\u0b97\u0b9c\5\u0086D\2\u0b98\u0b99\7\u015b\2"+
		"\2\u0b99\u0b9b\5\u0086D\2\u0b9a\u0b98\3\2\2\2\u0b9b\u0b9e\3\2\2\2\u0b9c"+
		"\u0b9a\3\2\2\2\u0b9c\u0b9d\3\2\2\2\u0b9d\u0b9f\3\2\2\2\u0b9e\u0b9c\3\2"+
		"\2\2\u0b9f\u0ba0\7\u0163\2\2\u0ba0\u0085\3\2\2\2\u0ba1\u0ba2\5\u00acW"+
		"\2\u0ba2\u0ba3\7\u0158\2\2\u0ba3\u0ba4\5\u0114\u008b\2\u0ba4\u0087\3\2"+
		"\2\2\u0ba5\u0ba6\7\u0088\2\2\u0ba6\u0ba7\5\u00acW\2\u0ba7\u0089\3\2\2"+
		"\2\u0ba8\u0ba9\7\u010f\2\2\u0ba9\u0baa\5\u008cG\2\u0baa\u008b\3\2\2\2"+
		"\u0bab\u0bac\5\u00acW\2\u0bac\u008d\3\2\2\2\u0bad\u0bb2\5\u0090I\2\u0bae"+
		"\u0bb2\5\u0096L\2\u0baf\u0bb2\5\u009eP\2\u0bb0\u0bb2\5\u00a4S\2\u0bb1"+
		"\u0bad\3\2\2\2\u0bb1\u0bae\3\2\2\2\u0bb1\u0baf\3\2\2\2\u0bb1\u0bb0\3\2"+
		"\2\2\u0bb2\u008f\3\2\2\2\u0bb3\u0bb4\7\u00ef\2\2\u0bb4\u0bb5\7\u0095\2"+
		"\2\u0bb5\u0bb6\7\u00f6\2\2\u0bb6\u0bb7\7\u0162\2\2\u0bb7\u0bb8\5\u01c4"+
		"\u00e3\2\u0bb8\u0bb9\7\u0163\2\2\u0bb9\u0bba\7\u0162\2\2\u0bba\u0bbb\5"+
		"\u0092J\2\u0bbb\u0bbc\7\u0163\2\2\u0bbc\u0091\3\2\2\2\u0bbd\u0bc2\5\u0094"+
		"K\2\u0bbe\u0bbf\7\u015b\2\2\u0bbf\u0bc1\5\u0094K\2\u0bc0\u0bbe\3\2\2\2"+
		"\u0bc1\u0bc4\3\2\2\2\u0bc2\u0bc0\3\2\2\2\u0bc2\u0bc3\3\2\2\2\u0bc3\u0093"+
		"\3\2\2\2\u0bc4\u0bc2\3\2\2\2\u0bc5\u0bc6\7\u00ef\2\2\u0bc6\u0bc7\5\u00a8"+
		"U\2\u0bc7\u0bc8\7\u011f\2\2\u0bc8\u0bc9\7\u00d2\2\2\u0bc9\u0bd5\7\u0112"+
		"\2\2\u0bca\u0bcb\7\u0162\2\2\u0bcb\u0bcc\5\u010a\u0086\2\u0bcc\u0bcd\7"+
		"\u0163\2\2\u0bcd\u0bd6\3\2\2\2\u0bce\u0bd0\7\u0162\2\2\u0bcf\u0bce\3\2"+
		"\2\2\u0bcf\u0bd0\3\2\2\2\u0bd0\u0bd1\3\2\2\2\u0bd1\u0bd3\7\u00d8\2\2\u0bd2"+
		"\u0bd4\7\u0163\2\2\u0bd3\u0bd2\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4\u0bd6"+
		"\3\2\2\2\u0bd5\u0bca\3\2\2\2\u0bd5\u0bcf\3\2\2\2\u0bd6\u0095\3\2\2\2\u0bd7"+
		"\u0bd8\7\u00ef\2\2\u0bd8\u0bd9\7\u0095\2\2\u0bd9\u0bda\7\u00c2\2\2\u0bda"+
		"\u0bdb\7\u0162\2\2\u0bdb\u0bdc\5\u01c4\u00e3\2\u0bdc\u0be2\7\u0163\2\2"+
		"\u0bdd\u0bde\7\u0162\2\2\u0bde\u0bdf\5\u0098M\2\u0bdf\u0be0\7\u0163\2"+
		"\2\u0be0\u0be3\3\2\2\2\u0be1\u0be3\5\u009cO\2\u0be2\u0bdd\3\2\2\2\u0be2"+
		"\u0be1\3\2\2\2\u0be3\u0097\3\2\2\2\u0be4\u0be9\5\u009aN\2\u0be5\u0be6"+
		"\7\u015b\2\2\u0be6\u0be8\5\u009aN\2\u0be7\u0be5\3\2\2\2\u0be8\u0beb\3"+
		"\2\2\2\u0be9\u0be7\3\2\2\2\u0be9\u0bea\3\2\2\2\u0bea\u0099\3\2\2\2\u0beb"+
		"\u0be9\3\2\2\2\u0bec\u0bed\7\u00ef\2\2\u0bed\u0bee\5\u00a8U\2\u0bee\u009b"+
		"\3\2\2\2\u0bef\u0bf0\7\u00f0\2\2\u0bf0\u0bf1\5\u0114\u008b\2\u0bf1\u009d"+
		"\3\2\2\2\u0bf2\u0bf3\7\u00ef\2\2\u0bf3\u0bf4\7\u0095\2\2\u0bf4\u0bf5\7"+
		"\u00d3\2\2\u0bf5\u0bf6\7\u0162\2\2\u0bf6\u0bf7\5\u01c4\u00e3\2\u0bf7\u0bf8"+
		"\7\u0163\2\2\u0bf8\u0bf9\7\u0162\2\2\u0bf9\u0bfa\5\u00a0Q\2\u0bfa\u0bfb"+
		"\7\u0163\2\2\u0bfb\u009f\3\2\2\2\u0bfc\u0c01\5\u00a2R\2\u0bfd\u0bfe\7"+
		"\u015b\2\2\u0bfe\u0c00\5\u00a2R\2\u0bff\u0bfd\3\2\2\2\u0c00\u0c03\3\2"+
		"\2\2\u0c01\u0bff\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02\u00a1\3\2\2\2\u0c03"+
		"\u0c01\3\2\2\2\u0c04\u0c05\7\u00ef\2\2\u0c05\u0c06\5\u00a8U\2\u0c06\u0c08"+
		"\7\u011f\2\2\u0c07\u0c09\7C\2\2\u0c08\u0c07\3\2\2\2\u0c08\u0c09\3\2\2"+
		"\2\u0c09\u0c0a\3\2\2\2\u0c0a\u0c0b\7\u0162\2\2\u0c0b\u0c0c\5\u01dc\u00ef"+
		"\2\u0c0c\u0c0d\7\u0163\2\2\u0c0d\u00a3\3\2\2\2\u0c0e\u0c0f\7\u00ef\2\2"+
		"\u0c0f\u0c10\7\u0095\2\2\u0c10\u0c11\7\u009f\2\2\u0c11\u0c12\5~@\2\u0c12"+
		"\u00a5\3\2\2\2\u0c13\u0c14\7\u00ef\2\2\u0c14\u0c15\7\u0095\2\2\u0c15\u0c1a"+
		"\5\u01b0\u00d9\2\u0c16\u0c17\7\u015b\2\2\u0c17\u0c19\5\u01b0\u00d9\2\u0c18"+
		"\u0c16\3\2\2\2\u0c19\u0c1c\3\2\2\2\u0c1a\u0c18\3\2\2\2\u0c1a\u0c1b\3\2"+
		"\2\2\u0c1b\u00a7\3\2\2\2\u0c1c\u0c1a\3\2\2\2\u0c1d\u0c1e\5\u00acW\2\u0c1e"+
		"\u00a9\3\2\2\2\u0c1f\u0c20\7\u00b3\2\2\u0c20\u0c21\7{\2\2\u0c21\u0c23"+
		"\5\u01b0\u00d9\2\u0c22\u0c24\7\u00f4\2\2\u0c23\u0c22\3\2\2\2\u0c23\u0c24"+
		"\3\2\2\2\u0c24\u00ab\3\2\2\2\u0c25\u0c2e\t\"\2\2\u0c26\u0c28\7\u016d\2"+
		"\2\u0c27\u0c26\3\2\2\2\u0c27\u0c28\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c2b"+
		"\5\u00aeX\2\u0c2a\u0c2c\7\u016d\2\2\u0c2b\u0c2a\3\2\2\2\u0c2b\u0c2c\3"+
		"\2\2\2\u0c2c\u0c2e\3\2\2\2\u0c2d\u0c25\3\2\2\2\u0c2d\u0c27\3\2\2\2\u0c2e"+
		"\u00ad\3\2\2\2\u0c2f\u0c30\t#\2\2\u0c30\u00af\3\2\2\2\u0c31\u0c34\5\u00e2"+
		"r\2\u0c32\u0c34\5\u00b2Z\2\u0c33\u0c31\3\2\2\2\u0c33\u0c32\3\2\2\2\u0c34"+
		"\u00b1\3\2\2\2\u0c35\u0c39\7\u0179\2\2\u0c36\u0c39\5\u00b4[\2\u0c37\u0c39"+
		"\5\u0148\u00a5\2\u0c38\u0c35\3\2\2\2\u0c38\u0c36\3\2\2\2\u0c38\u0c37\3"+
		"\2\2\2\u0c39\u00b3\3\2\2\2\u0c3a\u0c3e\5\u00b8]\2\u0c3b\u0c3e\5\u00b6"+
		"\\\2\u0c3c\u0c3e\5\u00ba^\2\u0c3d\u0c3a\3\2\2\2\u0c3d\u0c3b\3\2\2\2\u0c3d"+
		"\u0c3c\3\2\2\2\u0c3e\u00b5\3\2\2\2\u0c3f\u0c40\7\u0144\2\2\u0c40\u0c41"+
		"\7\u0179\2\2\u0c41\u00b7\3\2\2\2\u0c42\u0c43\7\u0146\2\2\u0c43\u0c44\7"+
		"\u0179\2\2\u0c44\u00b9\3\2\2\2\u0c45\u0c46\7\u0143\2\2\u0c46\u0c47\7\u0179"+
		"\2\2\u0c47\u00bb\3\2\2\2\u0c48\u0c4b\5\u00be`\2\u0c49\u0c4a\7\u016f\2"+
		"\2\u0c4a\u0c4c\7\u0170\2\2\u0c4b\u0c49\3\2\2\2\u0c4b\u0c4c\3\2\2\2\u0c4c"+
		"\u0c50\3\2\2\2\u0c4d\u0c4e\7v\2\2\u0c4e\u0c50\5\u00acW\2\u0c4f\u0c48\3"+
		"\2\2\2\u0c4f\u0c4d\3\2\2\2\u0c50\u00bd\3\2\2\2\u0c51\u0c5d\5\u00c2b\2"+
		"\u0c52\u0c5d\5\u00c6d\2\u0c53\u0c5d\5\u00c8e\2\u0c54\u0c5d\5\u00caf\2"+
		"\u0c55\u0c5d\5\u00d2j\2\u0c56\u0c5d\5\u00d4k\2\u0c57\u0c5d\5\u00d6l\2"+
		"\u0c58\u0c5d\5\u00d8m\2\u0c59\u0c5d\5\u00c0a\2\u0c5a\u0c5d\t$\2\2\u0c5b"+
		"\u0c5d\5\u01b0\u00d9\2\u0c5c\u0c51\3\2\2\2\u0c5c\u0c52\3\2\2\2\u0c5c\u0c53"+
		"\3\2\2\2\u0c5c\u0c54\3\2\2\2\u0c5c\u0c55\3\2\2\2\u0c5c\u0c56\3\2\2\2\u0c5c"+
		"\u0c57\3\2\2\2\u0c5c\u0c58\3\2\2\2\u0c5c\u0c59\3\2\2\2\u0c5c\u0c5a\3\2"+
		"\2\2\u0c5c\u0c5b\3\2\2\2\u0c5d\u00bf\3\2\2\2\u0c5e\u0c5f\7\u014e\2\2\u0c5f"+
		"\u00c1\3\2\2\2\u0c60\u0c62\7\u009a\2\2\u0c61\u0c63\5\u00c4c\2\u0c62\u0c61"+
		"\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c78\3\2\2\2\u0c64\u0c66\7\u013f\2"+
		"\2\u0c65\u0c67\5\u00c4c\2\u0c66\u0c65\3\2\2\2\u0c66\u0c67\3\2\2\2\u0c67"+
		"\u0c78\3\2\2\2\u0c68\u0c69\7\u009a\2\2\u0c69\u0c6b\7\u0122\2\2\u0c6a\u0c6c"+
		"\5\u00c4c\2\u0c6b\u0c6a\3\2\2\2\u0c6b\u0c6c\3\2\2\2\u0c6c\u0c78\3\2\2"+
		"\2\u0c6d\u0c6e\7\u013f\2\2\u0c6e\u0c70\7\u0122\2\2\u0c6f\u0c71\5\u00c4"+
		"c\2\u0c70\u0c6f\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u0c78\3\2\2\2\u0c72"+
		"\u0c74\7\u0140\2\2\u0c73\u0c75\5\u00c4c\2\u0c74\u0c73\3\2\2\2\u0c74\u0c75"+
		"\3\2\2\2\u0c75\u0c78\3\2\2\2\u0c76\u0c78\t%\2\2\u0c77\u0c60\3\2\2\2\u0c77"+
		"\u0c64\3\2\2\2\u0c77\u0c68\3\2\2\2\u0c77\u0c6d\3\2\2\2\u0c77\u0c72\3\2"+
		"\2\2\u0c77\u0c76\3\2\2\2\u0c78\u00c3\3\2\2\2\u0c79\u0c7a\7\u0162\2\2\u0c7a"+
		"\u0c7b\7\u0172\2\2\u0c7b\u0c7c\7\u0163\2\2\u0c7c\u00c5\3\2\2\2\u0c7d\u0c7e"+
		"\7\u00e0\2\2\u0c7e\u0c80\7\u009a\2\2\u0c7f\u0c81\5\u00c4c\2\u0c80\u0c7f"+
		"\3\2\2\2\u0c80\u0c81\3\2\2\2\u0c81\u0ca1\3\2\2\2\u0c82\u0c83\7\u00e0\2"+
		"\2\u0c83\u0c85\7\u013f\2\2\u0c84\u0c86\5\u00c4c\2\u0c85\u0c84\3\2\2\2"+
		"\u0c85\u0c86\3\2\2\2\u0c86\u0ca1\3\2\2\2\u0c87\u0c89\7\u0141\2\2\u0c88"+
		"\u0c8a\5\u00c4c\2\u0c89\u0c88\3\2\2\2\u0c89\u0c8a\3\2\2\2\u0c8a\u0ca1"+
		"\3\2\2\2\u0c8b\u0c8c\7\u00e0\2\2\u0c8c\u0c8d\7\u009a\2\2\u0c8d\u0c8f\7"+
		"\u0122\2\2\u0c8e\u0c90\5\u00c4c\2\u0c8f\u0c8e\3\2\2\2\u0c8f\u0c90\3\2"+
		"\2\2\u0c90\u0ca1\3\2\2\2\u0c91\u0c92\7\u00e0\2\2\u0c92\u0c93\7\u013f\2"+
		"\2\u0c93\u0c95\7\u0122\2\2\u0c94\u0c96\5\u00c4c\2\u0c95\u0c94\3\2\2\2"+
		"\u0c95\u0c96\3\2\2\2\u0c96\u0ca1\3\2\2\2\u0c97\u0c98\7\u0141\2\2\u0c98"+
		"\u0c9a\7\u0122\2\2\u0c99\u0c9b\5\u00c4c\2\u0c9a\u0c99\3\2\2\2\u0c9a\u0c9b"+
		"\3\2\2\2\u0c9b\u0ca1\3\2\2\2\u0c9c\u0c9e\7\u0142\2\2\u0c9d\u0c9f\5\u00c4"+
		"c\2\u0c9e\u0c9d\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca1\3\2\2\2\u0ca0"+
		"\u0c7d\3\2\2\2\u0ca0\u0c82\3\2\2\2\u0ca0\u0c87\3\2\2\2\u0ca0\u0c8b\3\2"+
		"\2\2\u0ca0\u0c91\3\2\2\2\u0ca0\u0c97\3\2\2\2\u0ca0\u0c9c\3\2\2\2\u0ca1"+
		"\u00c7\3\2\2\2\u0ca2\u0ca4\7\u014c\2\2\u0ca3\u0ca5\5\u00c4c\2\u0ca4\u0ca3"+
		"\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0cab\3\2\2\2\u0ca6\u0ca8\7\u014d\2"+
		"\2\u0ca7\u0ca9\5\u00c4c\2\u0ca8\u0ca7\3\2\2\2\u0ca8\u0ca9\3\2\2\2\u0ca9"+
		"\u0cab\3\2\2\2\u0caa\u0ca2\3\2\2\2\u0caa\u0ca6\3\2\2\2\u0cab\u00c9\3\2"+
		"\2\2\u0cac\u0caf\5\u00ccg\2\u0cad\u0caf\5\u00ceh\2\u0cae\u0cac\3\2\2\2"+
		"\u0cae\u0cad\3\2\2\2\u0caf\u00cb\3\2\2\2\u0cb0\u0cb2\7\u013d\2\2\u0cb1"+
		"\u0cb3\5\u00d0i\2\u0cb2\u0cb1\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cbe"+
		"\3\2\2\2\u0cb4\u0cb6\7\u013e\2\2\u0cb5\u0cb7\5\u00d0i\2\u0cb6\u0cb5\3"+
		"\2\2\2\u0cb6\u0cb7\3\2\2\2\u0cb7\u0cbe\3\2\2\2\u0cb8\u0cba\7\u00ac\2\2"+
		"\u0cb9\u0cbb\5\u00d0i\2\u0cba\u0cb9\3\2\2\2\u0cba\u0cbb\3\2\2\2\u0cbb"+
		"\u0cbe\3\2\2\2\u0cbc\u0cbe\t&\2\2\u0cbd\u0cb0\3\2\2\2\u0cbd\u0cb4\3\2"+
		"\2\2\u0cbd\u0cb8\3\2\2\2\u0cbd\u0cbc\3\2\2\2\u0cbe\u00cd\3\2\2\2\u0cbf"+
		"\u0cc1\7\u013b\2\2\u0cc0\u0cc2\5\u00d0i\2\u0cc1\u0cc0\3\2\2\2\u0cc1\u0cc2"+
		"\3\2\2\2\u0cc2\u0cc9\3\2\2\2\u0cc3\u0cc9\t\'\2\2\u0cc4\u0cc6\7\u013c\2"+
		"\2\u0cc5\u0cc7\7\u00f2\2\2\u0cc6\u0cc5\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7"+
		"\u0cc9\3\2\2\2\u0cc8\u0cbf\3\2\2\2\u0cc8\u0cc3\3\2\2\2\u0cc8\u0cc4\3\2"+
		"\2\2\u0cc9\u00cf\3\2\2\2\u0cca\u0ccb\7\u0162\2\2\u0ccb\u0ccc\7\u0172\2"+
		"\2\u0ccc\u0cd3\7\u0163\2\2\u0ccd\u0cce\7\u0162\2\2\u0cce\u0ccf\7\u0172"+
		"\2\2\u0ccf\u0cd0\7\u015b\2\2\u0cd0\u0cd1\7\u0172\2\2\u0cd1\u0cd3\7\u0163"+
		"\2\2\u0cd2\u0cca\3\2\2\2\u0cd2\u0ccd\3\2\2\2\u0cd3\u00d1\3\2\2\2\u0cd4"+
		"\u0cd5\t(\2\2\u0cd5\u00d3\3\2\2\2\u0cd6\u0ce6\7\u0143\2\2\u0cd7\u0cdb"+
		"\7\u0144\2\2\u0cd8\u0cd9\7\u008e\2\2\u0cd9\u0cda\7\u0144\2\2\u0cda\u0cdc"+
		"\7\u0129\2\2\u0cdb\u0cd8\3\2\2\2\u0cdb\u0cdc\3\2\2\2\u0cdc\u0ce6\3\2\2"+
		"\2\u0cdd\u0ce6\7\u0145\2\2\u0cde\u0ce2\7\u0146\2\2\u0cdf\u0ce0\t)\2\2"+
		"\u0ce0\u0ce1\7\u0144\2\2\u0ce1\u0ce3\7\u0129\2\2\u0ce2\u0cdf\3\2\2\2\u0ce2"+
		"\u0ce3\3\2\2\2\u0ce3\u0ce6\3\2\2\2\u0ce4\u0ce6\7\u0147\2\2\u0ce5\u0cd6"+
		"\3\2\2\2\u0ce5\u0cd7\3\2\2\2\u0ce5\u0cdd\3\2\2\2\u0ce5\u0cde\3\2\2\2\u0ce5"+
		"\u0ce4\3\2\2\2\u0ce6\u00d5\3\2\2\2\u0ce7\u0ce9\7\u012c\2\2\u0ce8\u0cea"+
		"\5\u00c4c\2\u0ce9\u0ce8\3\2\2\2\u0ce9\u0cea\3\2\2\2\u0cea\u0cf5\3\2\2"+
		"\2\u0ceb\u0ced\7\u012d\2\2\u0cec\u0cee\5\u00c4c\2\u0ced\u0cec\3\2\2\2"+
		"\u0ced\u0cee\3\2\2\2\u0cee\u0cf5\3\2\2\2\u0cef\u0cf0\7\u012c\2\2\u0cf0"+
		"\u0cf2\7\u0122\2\2\u0cf1\u0cf3\5\u00c4c\2\u0cf2\u0cf1\3\2\2\2\u0cf2\u0cf3"+
		"\3\2\2\2\u0cf3\u0cf5\3\2\2\2\u0cf4\u0ce7\3\2\2\2\u0cf4\u0ceb\3\2\2\2\u0cf4"+
		"\u0cef\3\2\2\2\u0cf5\u00d7\3\2\2\2\u0cf6\u0cf8\7\u014a\2\2\u0cf7\u0cf9"+
		"\5\u00c4c\2\u0cf8\u0cf7\3\2\2\2\u0cf8\u0cf9\3\2\2\2\u0cf9\u0d04\3\2\2"+
		"\2\u0cfa\u0cfb\7\u014a\2\2\u0cfb\u0cfd\7\u0122\2\2\u0cfc\u0cfe\5\u00c4"+
		"c\2\u0cfd\u0cfc\3\2\2\2\u0cfd\u0cfe\3\2\2\2\u0cfe\u0d04\3\2\2\2\u0cff"+
		"\u0d01\7\u014b\2\2\u0d00\u0d02\5\u00c4c\2\u0d01\u0d00\3\2\2\2\u0d01\u0d02"+
		"\3\2\2\2\u0d02\u0d04\3\2\2\2\u0d03\u0cf6\3\2\2\2\u0d03\u0cfa\3\2\2\2\u0d03"+
		"\u0cff\3\2\2\2\u0d04\u00d9\3\2\2\2\u0d05\u0d08\5\u00dco\2\u0d06\u0d08"+
		"\5\u00dep\2\u0d07\u0d05\3\2\2\2\u0d07\u0d06\3\2\2\2\u0d08\u00db\3\2\2"+
		"\2\u0d09\u0d0a\7\u0162\2\2\u0d0a\u0d0b\5\u010a\u0086\2\u0d0b\u0d0c\7\u0163"+
		"\2\2\u0d0c\u00dd\3\2\2\2\u0d0d\u0d19\5\u00e0q\2\u0d0e\u0d19\5\u01be\u00e0"+
		"\2\u0d0f\u0d19\5\u00e6t\2\u0d10\u0d19\5\u01c6\u00e4\2\u0d11\u0d19\5\u00f2"+
		"z\2\u0d12\u0d19\5\u0104\u0083\2\u0d13\u0d19\5V,\2\u0d14\u0d19\7X\2\2\u0d15"+
		"\u0d19\5\u01b2\u00da\2\u0d16\u0d19\5\u010e\u0088\2\u0d17\u0d19\5\u00f4"+
		"{\2\u0d18\u0d0d\3\2\2\2\u0d18\u0d0e\3\2\2\2\u0d18\u0d0f\3\2\2\2\u0d18"+
		"\u0d10\3\2\2\2\u0d18\u0d11\3\2\2\2\u0d18\u0d12\3\2\2\2\u0d18\u0d13\3\2"+
		"\2\2\u0d18\u0d14\3\2\2\2\u0d18\u0d15\3\2\2\2\u0d18\u0d16\3\2\2\2\u0d18"+
		"\u0d17\3\2\2\2\u0d19\u00df\3\2\2\2\u0d1a\u0d1b\5\u00b0Y\2\u0d1b\u00e1"+
		"\3\2\2\2\u0d1c\u0d1d\t*\2\2\u0d1d\u00e3\3\2\2\2\u0d1e\u0d20\5\u0120\u0091"+
		"\2\u0d1f\u0d1e\3\2\2\2\u0d1f\u0d20\3\2\2\2\u0d20\u0d21\3\2\2\2\u0d21\u0d22"+
		"\5\u00e2r\2\u0d22\u00e5\3\2\2\2\u0d23\u0d24\5\u00e8u\2\u0d24\u00e7\3\2"+
		"\2\2\u0d25\u0d26\7\u00a6\2\2\u0d26\u0d27\7\u0162\2\2\u0d27\u0d28\7\u0166"+
		"\2\2\u0d28\u0d2e\7\u0163\2\2\u0d29\u0d2b\5\u00eav\2\u0d2a\u0d2c\5\u00ee"+
		"x\2\u0d2b\u0d2a\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2e\3\2\2\2\u0d2d"+
		"\u0d25\3\2\2\2\u0d2d\u0d29\3\2\2\2\u0d2e\u00e9\3\2\2\2\u0d2f\u0d30\5\u00ec"+
		"w\2\u0d30\u0d32\7\u0162\2\2\u0d31\u0d33\5\u01bc\u00df\2\u0d32\u0d31\3"+
		"\2\2\2\u0d32\u0d33\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34\u0d35\5\u010a\u0086"+
		"\2\u0d35\u0d36\7\u0163\2\2\u0d36\u00eb\3\2\2\2\u0d37\u0d38\t+\2\2\u0d38"+
		"\u00ed\3\2\2\2\u0d39\u0d3a\7\u00bd\2\2\u0d3a\u0d3b\7\u0162\2\2\u0d3b\u0d3c"+
		"\5\u0184\u00c3\2\u0d3c\u0d3d\7\u0163\2\2\u0d3d\u00ef\3\2\2\2\u0d3e\u0d3f"+
		"\7\u00c1\2\2\u0d3f\u0d40\7\u0162\2\2\u0d40\u0d41\5\u01c4\u00e3\2\u0d41"+
		"\u0d42\7\u0163\2\2\u0d42\u00f1\3\2\2\2\u0d43\u0d44\5\u00f6|\2\u0d44\u00f3"+
		"\3\2\2\2\u0d45\u0d46\7\u00e3\2\2\u0d46\u0d47\7\u0162\2\2\u0d47\u0d48\5"+
		"\u0114\u008b\2\u0d48\u0d49\7\u015b\2\2\u0d49\u0d4a\5\u010a\u0086\2\u0d4a"+
		"\u0d4b\7\u0163\2\2\u0d4b\u0d58\3\2\2\2\u0d4c\u0d4d\7\u009e\2\2\u0d4d\u0d4e"+
		"\7\u0162\2\2\u0d4e\u0d51\5\u0114\u008b\2\u0d4f\u0d50\7\u015b\2\2\u0d50"+
		"\u0d52\5\u010a\u0086\2\u0d51\u0d4f\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53\u0d51"+
		"\3\2\2\2\u0d53\u0d54\3\2\2\2\u0d54\u0d55\3\2\2\2\u0d55\u0d56\7\u0163\2"+
		"\2\u0d56\u0d58\3\2\2\2\u0d57\u0d45\3\2\2\2\u0d57\u0d4c\3\2\2\2\u0d58\u00f5"+
		"\3\2\2\2\u0d59\u0d5c\5\u00f8}\2\u0d5a\u0d5c\5\u00fa~\2\u0d5b\u0d59\3\2"+
		"\2\2\u0d5b\u0d5a\3\2\2\2\u0d5c\u00f7\3\2\2\2\u0d5d\u0d5e\7\20\2\2\u0d5e"+
		"\u0d60\5\u010a\u0086\2\u0d5f\u0d61\5\u00fc\177\2\u0d60\u0d5f\3\2\2\2\u0d61"+
		"\u0d62\3\2\2\2\u0d62\u0d60\3\2\2\2\u0d62\u0d63\3\2\2\2\u0d63\u0d65\3\2"+
		"\2\2\u0d64\u0d66\5\u0100\u0081\2\u0d65\u0d64\3\2\2\2\u0d65\u0d66\3\2\2"+
		"\2\u0d66\u0d67\3\2\2\2\u0d67\u0d68\7(\2\2\u0d68\u00f9\3\2\2\2\u0d69\u0d6b"+
		"\7\20\2\2\u0d6a\u0d6c\5\u00fe\u0080\2\u0d6b\u0d6a\3\2\2\2\u0d6c\u0d6d"+
		"\3\2\2\2\u0d6d\u0d6b\3\2\2\2\u0d6d\u0d6e\3\2\2\2\u0d6e\u0d70\3\2\2\2\u0d6f"+
		"\u0d71\5\u0100\u0081\2\u0d70\u0d6f\3\2\2\2\u0d70\u0d71\3\2\2\2\u0d71\u0d72"+
		"\3\2\2\2\u0d72\u0d73\7(\2\2\u0d73\u00fb\3\2\2\2\u0d74\u0d75\7\u008c\2"+
		"\2\u0d75\u0d76\5\u0186\u00c4\2\u0d76\u0d77\7~\2\2\u0d77\u0d78\5\u0102"+
		"\u0082\2\u0d78\u00fd\3\2\2\2\u0d79\u0d7a\7\u008c\2\2\u0d7a\u0d7b\5\u0186"+
		"\u00c4\2\u0d7b\u0d7c\7~\2\2\u0d7c\u0d7d\5\u0102\u0082\2\u0d7d\u00ff\3"+
		"\2\2\2\u0d7e\u0d7f\7\'\2\2\u0d7f\u0d80\5\u0102\u0082\2\u0d80\u0101\3\2"+
		"\2\2\u0d81\u0d84\5\u010a\u0086\2\u0d82\u0d84\7X\2\2\u0d83\u0d81\3\2\2"+
		"\2\u0d83\u0d82\3\2\2\2\u0d84\u0103\3\2\2\2\u0d85\u0d86\7\22\2\2\u0d86"+
		"\u0d87\7\u0162\2\2\u0d87\u0d88\5\u0106\u0084\2\u0d88\u0d89\7\6\2\2\u0d89"+
		"\u0d8a\5\u0108\u0085\2\u0d8a\u0d8b\7\u0163\2\2\u0d8b\u0105\3\2\2\2\u0d8c"+
		"\u0d8d\5\u010a\u0086\2\u0d8d\u0107\3\2\2\2\u0d8e\u0d8f\5\u00bc_\2\u0d8f"+
		"\u0109\3\2\2\2\u0d90\u0d95\5\u0112\u008a\2\u0d91\u0d95\5\u0150\u00a9\2"+
		"\u0d92\u0d95\5\u013c\u009f\2\u0d93\u0d95\5\u010c\u0087\2\u0d94\u0d90\3"+
		"\2\2\2\u0d94\u0d91\3\2\2\2\u0d94\u0d92\3\2\2\2\u0d94\u0d93\3\2\2\2\u0d95"+
		"\u010b\3\2\2\2\u0d96\u0d97\7\u0092\2\2\u0d97\u0d98\7\u016f\2\2\u0d98\u0d9d"+
		"\5\u010a\u0086\2\u0d99\u0d9a\7\u015b\2\2\u0d9a\u0d9c\5\u010a\u0086\2\u0d9b"+
		"\u0d99\3\2\2\2\u0d9c\u0d9f\3\2\2\2\u0d9d\u0d9b\3\2\2\2\u0d9d\u0d9e\3\2"+
		"\2\2\u0d9e\u0da0\3\2\2\2\u0d9f\u0d9d\3\2\2\2\u0da0\u0da1\7\u0170\2\2\u0da1"+
		"\u010d\3\2\2\2\u0da2\u0da3\7\7\2\2\u0da3\u0da4\7\u0162\2\2\u0da4\u0da5"+
		"\5\u010c\u0087\2\u0da5\u0da6\7\u0163\2\2\u0da6\u010f\3\2\2\2\u0da7\u0da8"+
		"\5\u012e\u0098\2\u0da8\u0da9\7\u0171\2\2\u0da9\u0daa\5\u012e\u0098\2\u0daa"+
		"\u0111\3\2\2\2\u0dab\u0db0\5\u0114\u008b\2\u0dac\u0db0\5\u012c\u0097\2"+
		"\u0dad\u0db0\5\u0110\u0089\2\u0dae\u0db0\7X\2\2\u0daf\u0dab\3\2\2\2\u0daf"+
		"\u0dac\3\2\2\2\u0daf\u0dad\3\2\2\2\u0daf\u0dae\3\2\2\2\u0db0\u0113\3\2"+
		"\2\2\u0db1\u0db6\5\u0116\u008c\2\u0db2\u0db3\t,\2\2\u0db3\u0db5\5\u0116"+
		"\u008c\2\u0db4\u0db2\3\2\2\2\u0db5\u0db8\3\2\2\2\u0db6\u0db4\3\2\2\2\u0db6"+
		"\u0db7\3\2\2\2\u0db7\u0115\3\2\2\2\u0db8\u0db6\3\2\2\2\u0db9\u0dbe\5\u0118"+
		"\u008d\2\u0dba\u0dbb\t-\2\2\u0dbb\u0dbd\5\u0118\u008d\2\u0dbc\u0dba\3"+
		"\2\2\2\u0dbd\u0dc0\3\2\2\2\u0dbe\u0dbc\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf"+
		"\u0117\3\2\2\2\u0dc0\u0dbe\3\2\2\2\u0dc1\u0dc3\5\u0120\u0091\2\u0dc2\u0dc1"+
		"\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u0dc4\3\2\2\2\u0dc4\u0dc5\5\u011c\u008f"+
		"\2\u0dc5\u0119\3\2\2\2\u0dc6\u0dc7\7\u0162\2\2\u0dc7\u0dcc\5\u0114\u008b"+
		"\2\u0dc8\u0dc9\7\u015b\2\2\u0dc9\u0dcb\5\u0114\u008b\2\u0dca\u0dc8\3\2"+
		"\2\2\u0dcb\u0dce\3\2\2\2\u0dcc\u0dca\3\2\2\2\u0dcc\u0dcd\3\2\2\2\u0dcd"+
		"\u0dcf\3\2\2\2\u0dce\u0dcc\3\2\2\2\u0dcf\u0dd0\7\u0163\2\2\u0dd0\u011b"+
		"\3\2\2\2\u0dd1\u0dd4\5\u011e\u0090\2\u0dd2\u0dd4\5\u0122\u0092\2\u0dd3"+
		"\u0dd1\3\2\2\2\u0dd3\u0dd2\3\2\2\2\u0dd4\u011d\3\2\2\2\u0dd5\u0dda\5\u00da"+
		"n\2\u0dd6\u0dd7\7\u0156\2\2\u0dd7\u0dd9\5\u0108\u0085\2\u0dd8\u0dd6\3"+
		"\2\2\2\u0dd9\u0ddc\3\2\2\2\u0dda\u0dd8\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb"+
		"\u011f\3\2\2\2\u0ddc\u0dda\3\2\2\2\u0ddd\u0dde\t,\2\2\u0dde\u0121\3\2"+
		"\2\2\u0ddf\u0de0\5\u0124\u0093\2\u0de0\u0123\3\2\2\2\u0de1\u0de2\7\u00bb"+
		"\2\2\u0de2\u0de3\7\u0162\2\2\u0de3\u0de4\5\u0126\u0094\2\u0de4\u0de5\7"+
		"8\2\2\u0de5\u0de6\5\u012a\u0096\2\u0de6\u0de7\7\u0163\2\2\u0de7\u0125"+
		"\3\2\2\2\u0de8\u0dec\5\u01f4\u00fb\2\u0de9\u0dec\5\u0128\u0095\2\u0dea"+
		"\u0dec\5\u01f8\u00fd\2\u0deb\u0de8\3\2\2\2\u0deb\u0de9\3\2\2\2\u0deb\u0dea"+
		"\3\2\2\2\u0dec\u0127\3\2\2\2\u0ded\u0dee\t.\2\2\u0dee\u0129\3\2\2\2\u0def"+
		"\u0df2\5\u01be\u00e0\2\u0df0\u0df2\5\u00b4[\2\u0df1\u0def\3\2\2\2\u0df1"+
		"\u0df0\3\2\2\2\u0df2\u012b\3\2\2\2\u0df3\u0df4\5\u012e\u0098\2\u0df4\u012d"+
		"\3\2\2\2\u0df5\u0dfa\5\u0130\u0099\2\u0df6\u0df7\7\u015c\2\2\u0df7\u0df9"+
		"\5\u0130\u0099\2\u0df8\u0df6\3\2\2\2\u0df9\u0dfc\3\2\2\2\u0dfa\u0df8\3"+
		"\2\2\2\u0dfa\u0dfb\3\2\2\2\u0dfb\u0e02\3\2\2\2\u0dfc\u0dfa\3\2\2\2\u0dfd"+
		"\u0dfe\7\u0162\2\2\u0dfe\u0dff\5\u012e\u0098\2\u0dff\u0e00\7\u0163\2\2"+
		"\u0e00\u0e02\3\2\2\2\u0e01\u0df5\3\2\2\2\u0e01\u0dfd\3\2\2\2\u0e02\u012f"+
		"\3\2\2\2\u0e03\u0e04\5\u0132\u009a\2\u0e04\u0131\3\2\2\2\u0e05\u0e08\5"+
		"\u011e\u0090\2\u0e06\u0e08\5\u0134\u009b\2\u0e07\u0e05\3\2\2\2\u0e07\u0e06"+
		"\3\2\2\2\u0e08\u0133\3\2\2\2\u0e09\u0e0a\5\u0136\u009c\2\u0e0a\u0135\3"+
		"\2\2\2\u0e0b\u0e0c\7\u0116\2\2\u0e0c\u0e0d\7\u0162\2\2\u0e0d\u0e0e\5\u0138"+
		"\u009d\2\u0e0e\u0e0f\7\u0163\2\2\u0e0f\u0137\3\2\2\2\u0e10\u0e12\5\u013a"+
		"\u009e\2\u0e11\u0e10\3\2\2\2\u0e11\u0e12\3\2\2\2\u0e12\u0e14\3\2\2\2\u0e13"+
		"\u0e15\5\u012e\u0098\2\u0e14\u0e13\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u0e16"+
		"\3\2\2\2\u0e16\u0e18\78\2\2\u0e17\u0e11\3\2\2\2\u0e17\u0e18\3\2\2\2\u0e18"+
		"\u0e19\3\2\2\2\u0e19\u0e1f\5\u012e\u0098\2\u0e1a\u0e1b\5\u012e\u0098\2"+
		"\u0e1b\u0e1c\7\u015b\2\2\u0e1c\u0e1d\5\u012e\u0098\2\u0e1d\u0e1f\3\2\2"+
		"\2\u0e1e\u0e17\3\2\2\2\u0e1e\u0e1a\3\2\2\2\u0e1f\u0139\3\2\2\2\u0e20\u0e21"+
		"\t/\2\2\u0e21\u013b\3\2\2\2\u0e22\u0e23\5\u013e\u00a0\2\u0e23\u013d\3"+
		"\2\2\2\u0e24\u0e29\5\u0140\u00a1\2\u0e25\u0e26\7^\2\2\u0e26\u0e28\5\u013e"+
		"\u00a0\2\u0e27\u0e25\3\2\2\2\u0e28\u0e2b\3\2\2\2\u0e29\u0e27\3\2\2\2\u0e29"+
		"\u0e2a\3\2\2\2\u0e2a\u013f\3\2\2\2\u0e2b\u0e29\3\2\2\2\u0e2c\u0e31\5\u0142"+
		"\u00a2\2\u0e2d\u0e2e\7\t\2\2\u0e2e\u0e30\5\u0140\u00a1\2\u0e2f\u0e2d\3"+
		"\2\2\2\u0e30\u0e33\3\2\2\2\u0e31\u0e2f\3\2\2\2\u0e31\u0e32\3\2\2\2\u0e32"+
		"\u0141\3\2\2\2\u0e33\u0e31\3\2\2\2\u0e34\u0e38\5\u0144\u00a3\2\u0e35\u0e36"+
		"\7W\2\2\u0e36\u0e38\5\u0144\u00a3\2\u0e37\u0e34\3\2\2\2\u0e37\u0e35\3"+
		"\2\2\2\u0e38\u0143\3\2\2\2\u0e39\u0e3b\5\u014a\u00a6\2\u0e3a\u0e3c\5\u0146"+
		"\u00a4\2\u0e3b\u0e3a\3\2\2\2\u0e3b\u0e3c\3\2\2\2\u0e3c\u0145\3\2\2\2\u0e3d"+
		"\u0e3f\7N\2\2\u0e3e\u0e40\7W\2\2\u0e3f\u0e3e\3\2\2\2\u0e3f\u0e40\3\2\2"+
		"\2\u0e40\u0e41\3\2\2\2\u0e41\u0e42\5\u0148\u00a5\2\u0e42\u0147\3\2\2\2"+
		"\u0e43\u0e44\t\60\2\2\u0e44\u0149\3\2\2\2\u0e45\u0e48\5\u01ce\u00e8\2"+
		"\u0e46\u0e48\5\u014c\u00a7\2\u0e47\u0e45\3\2\2\2\u0e47\u0e46\3\2\2\2\u0e48"+
		"\u014b\3\2\2\2\u0e49\u0e4c\5\u014e\u00a8\2\u0e4a\u0e4c\5\u00dep\2\u0e4b"+
		"\u0e49\3\2\2\2\u0e4b\u0e4a\3\2\2\2\u0e4c\u014d\3\2\2\2\u0e4d\u0e4e\7\u0162"+
		"\2\2\u0e4e\u0e4f\5\u013c\u009f\2\u0e4f\u0e50\7\u0163\2\2\u0e50\u014f\3"+
		"\2\2\2\u0e51\u0e54\5\u0152\u00aa\2\u0e52\u0e54\5\u0154\u00ab\2\u0e53\u0e51"+
		"\3\2\2\2\u0e53\u0e52\3\2\2\2\u0e54\u0151\3\2\2\2\u0e55\u0e56\5\u00dep"+
		"\2\u0e56\u0153\3\2\2\2\u0e57\u0e58\7X\2\2\u0e58\u0155\3\2\2\2\u0e59\u0e5c"+
		"\5\u0152\u00aa\2\u0e5a\u0e5c\5\u0158\u00ad\2\u0e5b\u0e59\3\2\2\2\u0e5b"+
		"\u0e5a\3\2\2\2\u0e5c\u0157\3\2\2\2\u0e5d\u0e60\5\u0112\u008a\2\u0e5e\u0e60"+
		"\5\u014c\u00a7\2\u0e5f\u0e5d\3\2\2\2\u0e5f\u0e5e\3\2\2\2\u0e60\u0159\3"+
		"\2\2\2\u0e61\u0e63\5\u015c\u00af\2\u0e62\u0e64\5\u0184\u00c3\2\u0e63\u0e62"+
		"\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e66\3\2\2\2\u0e65\u0e67\5\u0188\u00c5"+
		"\2\u0e66\u0e65\3\2\2\2\u0e66\u0e67\3\2\2\2\u0e67\u0e69\3\2\2\2\u0e68\u0e6a"+
		"\5\u0198\u00cd\2\u0e69\u0e68\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a\u0e6c\3"+
		"\2\2\2\u0e6b\u0e6d\5\u01fa\u00fe\2\u0e6c\u0e6b\3\2\2\2\u0e6c\u0e6d\3\2"+
		"\2\2\u0e6d\u0e6f\3\2\2\2\u0e6e\u0e70\5\u0204\u0103\2\u0e6f\u0e6e\3\2\2"+
		"\2\u0e6f\u0e70\3\2\2\2\u0e70\u015b\3\2\2\2\u0e71\u0e73\78\2\2\u0e72\u0e74"+
		"\7\u0162\2\2\u0e73\u0e72\3\2\2\2\u0e73\u0e74\3\2\2\2\u0e74\u0e77\3\2\2"+
		"\2\u0e75\u0e78\5\u015e\u00b0\2\u0e76\u0e78\5\u01b2\u00da\2\u0e77\u0e75"+
		"\3\2\2\2\u0e77\u0e76\3\2\2\2\u0e78\u0e7a\3\2\2\2\u0e79\u0e7b\7\u0163\2"+
		"\2\u0e7a\u0e79\3\2\2\2\u0e7a\u0e7b\3\2\2\2\u0e7b\u0e7d\3\2\2\2\u0e7c\u0e7e"+
		"\5\u01c0\u00e1\2\u0e7d\u0e7c\3\2\2\2\u0e7d\u0e7e\3\2\2\2\u0e7e\u015d\3"+
		"\2\2\2\u0e7f\u0e84\5\u0160\u00b1\2\u0e80\u0e81\7\u015b\2\2\u0e81\u0e83"+
		"\5\u0160\u00b1\2\u0e82\u0e80\3\2\2\2\u0e83\u0e86\3\2\2\2\u0e84\u0e82\3"+
		"\2\2\2\u0e84\u0e85\3\2\2\2\u0e85\u015f\3\2\2\2\u0e86\u0e84\3\2\2\2\u0e87"+
		"\u0e8a\5\u0162\u00b2\2\u0e88\u0e8a\5\u017a\u00be\2\u0e89\u0e87\3\2\2\2"+
		"\u0e89\u0e88\3\2\2\2\u0e8a\u0161\3\2\2\2\u0e8b\u0e8d\5\u017a\u00be\2\u0e8c"+
		"\u0e8e\5\u0164\u00b3\2\u0e8d\u0e8c\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e8d"+
		"\3\2\2\2\u0e8f\u0e90\3\2\2\2\u0e90\u0163\3\2\2\2\u0e91\u0e92\7\33\2\2"+
		"\u0e92\u0e93\7O\2\2\u0e93\u0ea5\5\u017a\u00be\2\u0e94\u0e96\5\u016e\u00b8"+
		"\2\u0e95\u0e94\3\2\2\2\u0e95\u0e96\3\2\2\2\u0e96\u0e97\3\2\2\2\u0e97\u0e98"+
		"\7O\2\2\u0e98\u0e99\5\u017a\u00be\2\u0e99\u0e9a\5\u0174\u00bb\2\u0e9a"+
		"\u0ea5\3\2\2\2\u0e9b\u0e9d\7V\2\2\u0e9c\u0e9e\5\u016e\u00b8\2\u0e9d\u0e9c"+
		"\3\2\2\2\u0e9d\u0e9e\3\2\2\2\u0e9e\u0e9f\3\2\2\2\u0e9f\u0ea0\7O\2\2\u0ea0"+
		"\u0ea5\5\u017a\u00be\2\u0ea1\u0ea2\7\u0084\2\2\u0ea2\u0ea3\7O\2\2\u0ea3"+
		"\u0ea5\5\u017a\u00be\2\u0ea4\u0e91\3\2\2\2\u0ea4\u0e95\3\2\2\2\u0ea4\u0e9b"+
		"\3\2\2\2\u0ea4\u0ea1\3\2\2\2\u0ea5\u0165\3\2\2\2\u0ea6\u0ea7\7\33\2\2"+
		"\u0ea7\u0ea8\7O\2\2\u0ea8\u0ea9\5\u017a\u00be\2\u0ea9\u0167\3\2\2\2\u0eaa"+
		"\u0eac\5\u016e\u00b8\2\u0eab\u0eaa\3\2\2\2\u0eab\u0eac\3\2\2\2\u0eac\u0ead"+
		"\3\2\2\2\u0ead\u0eae\7O\2\2\u0eae\u0eaf\5\u017a\u00be\2\u0eaf\u0eb0\5"+
		"\u0174\u00bb\2\u0eb0\u0169\3\2\2\2\u0eb1\u0eb3\7V\2\2\u0eb2\u0eb4\5\u016e"+
		"\u00b8\2\u0eb3\u0eb2\3\2\2\2\u0eb3\u0eb4\3\2\2\2\u0eb4\u0eb5\3\2\2\2\u0eb5"+
		"\u0eb6\7O\2\2\u0eb6\u0eb7\5\u017a\u00be\2\u0eb7\u016b\3\2\2\2\u0eb8\u0eb9"+
		"\7\u0084\2\2\u0eb9\u0eba\7O\2\2\u0eba\u0ebb\5\u017a\u00be\2\u0ebb\u016d"+
		"\3\2\2\2\u0ebc\u0ebf\7H\2\2\u0ebd\u0ebf\5\u0170\u00b9\2\u0ebe\u0ebc\3"+
		"\2\2\2\u0ebe\u0ebd\3\2\2\2\u0ebf\u016f\3\2\2\2\u0ec0\u0ec2\5\u0172\u00ba"+
		"\2\u0ec1\u0ec3\7[\2\2\u0ec2\u0ec1\3\2\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3\u0171"+
		"\3\2\2\2\u0ec4\u0ec5\t\61\2\2\u0ec5\u0173\3\2\2\2\u0ec6\u0ec9\5\u0176"+
		"\u00bc\2\u0ec7\u0ec9\5\u0178\u00bd\2\u0ec8\u0ec6\3\2\2\2\u0ec8\u0ec7\3"+
		"\2\2\2\u0ec9\u0175\3\2\2\2\u0eca\u0ecb\7\u00e7\2\2\u0ecb\u0ecc\5\u0186"+
		"\u00c4\2\u0ecc\u0177\3\2\2\2\u0ecd\u0ece\7\u0088\2\2\u0ece\u0ecf\7\u0162"+
		"\2\2\u0ecf\u0ed0\5\u01c4\u00e3\2\u0ed0\u0ed1\7\u0163\2\2\u0ed1\u0179\3"+
		"\2\2\2\u0ed2\u0ed5\5\u0180\u00c1\2\u0ed3\u0ed5\5\u01ae\u00d8\2\u0ed4\u0ed2"+
		"\3\2\2\2\u0ed4\u0ed3\3\2\2\2\u0ed5\u0eda\3\2\2\2\u0ed6\u0ed8\7\6\2\2\u0ed7"+
		"\u0ed6\3\2\2\2\u0ed7\u0ed8\3\2\2\2\u0ed8\u0ed9\3\2\2\2\u0ed9\u0edb\5\u017e"+
		"\u00c0\2\u0eda\u0ed7\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb\u0ee0\3\2\2\2\u0edc"+
		"\u0edd\7\u0162\2\2\u0edd\u0ede\5\u017c\u00bf\2\u0ede\u0edf\7\u0163\2\2"+
		"\u0edf\u0ee1\3\2\2\2\u0ee0\u0edc\3\2\2\2\u0ee0\u0ee1\3\2\2\2\u0ee1\u0ef2"+
		"\3\2\2\2\u0ee2\u0ee4\5\u0182\u00c2\2\u0ee3\u0ee5\7\6\2\2\u0ee4\u0ee3\3"+
		"\2\2\2\u0ee4\u0ee5\3\2\2\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0eeb\5\u00acW\2"+
		"\u0ee7\u0ee8\7\u0162\2\2\u0ee8\u0ee9\5\u017c\u00bf\2\u0ee9\u0eea\7\u0163"+
		"\2\2\u0eea\u0eec\3\2\2\2\u0eeb\u0ee7\3\2\2\2\u0eeb\u0eec\3\2\2\2\u0eec"+
		"\u0ef2\3\2\2\2\u0eed\u0eee\7\u0162\2\2\u0eee\u0eef\5\u0160\u00b1\2\u0eef"+
		"\u0ef0\7\u0163\2\2\u0ef0\u0ef2\3\2\2\2\u0ef1\u0ed4\3\2\2\2\u0ef1\u0ee2"+
		"\3\2\2\2\u0ef1\u0eed\3\2\2\2\u0ef2\u017b\3\2\2\2\u0ef3\u0ef8\5\u00acW"+
		"\2\u0ef4\u0ef5\7\u015b\2\2\u0ef5\u0ef7\5\u00acW\2\u0ef6\u0ef4\3\2\2\2"+
		"\u0ef7\u0efa\3\2\2\2\u0ef8\u0ef6\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u017d"+
		"\3\2\2\2\u0efa\u0ef8\3\2\2\2\u0efb\u0efe\5\u01b0\u00d9\2\u0efc\u0efe\5"+
		"\u0180\u00c1\2\u0efd\u0efb\3\2\2\2\u0efd\u0efc\3\2\2\2\u0efe\u017f\3\2"+
		"\2\2\u0eff\u0f00\5\u01b0\u00d9\2\u0f00\u0f09\7\u0162\2\2\u0f01\u0f06\5"+
		"\u00acW\2\u0f02\u0f03\7\u015b\2\2\u0f03\u0f05\5\u00acW\2\u0f04\u0f02\3"+
		"\2\2\2\u0f05\u0f08\3\2\2\2\u0f06\u0f04\3\2\2\2\u0f06\u0f07\3\2\2\2\u0f07"+
		"\u0f0a\3\2\2\2\u0f08\u0f06\3\2\2\2\u0f09\u0f01\3\2\2\2\u0f09\u0f0a\3\2"+
		"\2\2\u0f0a\u0f0b\3\2\2\2\u0f0b\u0f0c\7\u0163\2\2\u0f0c\u0181\3\2\2\2\u0f0d"+
		"\u0f0e\5\u01ca\u00e6\2\u0f0e\u0183\3\2\2\2\u0f0f\u0f10\7\u008d\2\2\u0f10"+
		"\u0f11\5\u0186\u00c4\2\u0f11\u0185\3\2\2\2\u0f12\u0f13\7\u0162\2\2\u0f13"+
		"\u0f14\5\u0186\u00c4\2\u0f14\u0f15\7\u0163\2\2\u0f15\u0f18\3\2\2\2\u0f16"+
		"\u0f18\5\u010a\u0086\2\u0f17\u0f12\3\2\2\2\u0f17\u0f16\3\2\2\2\u0f18\u0187"+
		"\3\2\2\2\u0f19\u0f1a\7;\2\2\u0f1a\u0f1b\7\u0095\2\2\u0f1b\u0f1c\5\u018a"+
		"\u00c6\2\u0f1c\u0189\3\2\2\2\u0f1d\u0f22\5\u018c\u00c7\2\u0f1e\u0f1f\7"+
		"\u015b\2\2\u0f1f\u0f21\5\u018c\u00c7\2\u0f20\u0f1e\3\2\2\2\u0f21\u0f24"+
		"\3\2\2\2\u0f22\u0f20\3\2\2\2\u0f22\u0f23\3\2\2\2\u0f23\u018b\3\2\2\2\u0f24"+
		"\u0f22\3\2\2\2\u0f25\u0f2a\5\u0192\u00ca\2\u0f26\u0f2a\5\u0194\u00cb\2"+
		"\u0f27\u0f2a\5\u0196\u00cc\2\u0f28\u0f2a\5\u018e\u00c8\2\u0f29\u0f25\3"+
		"\2\2\2\u0f29\u0f26\3\2\2\2\u0f29\u0f27\3\2\2\2\u0f29\u0f28\3\2\2\2\u0f2a"+
		"\u018d\3\2\2\2\u0f2b\u0f31\5\u0156\u00ac\2\u0f2c\u0f2d\7\u0162\2\2\u0f2d"+
		"\u0f2e\5\u019a\u00ce\2\u0f2e\u0f2f\7\u0163\2\2\u0f2f\u0f31\3\2\2\2\u0f30"+
		"\u0f2b\3\2\2\2\u0f30\u0f2c\3\2\2\2\u0f31\u018f\3\2\2\2\u0f32\u0f37\5\u018e"+
		"\u00c8\2\u0f33\u0f34\7\u015b\2\2\u0f34\u0f36\5\u018e\u00c8\2\u0f35\u0f33"+
		"\3\2\2\2\u0f36\u0f39\3\2\2\2\u0f37\u0f35\3\2\2\2\u0f37\u0f38\3\2\2\2\u0f38"+
		"\u0191\3\2\2\2\u0f39\u0f37\3\2\2\2\u0f3a\u0f3b\7\u00fe\2\2\u0f3b\u0f3c"+
		"\7\u0162\2\2\u0f3c\u0f3d\5\u0190\u00c9\2\u0f3d\u0f3e\7\u0163\2\2\u0f3e"+
		"\u0193\3\2\2\2\u0f3f\u0f40\7\u00a7\2\2\u0f40\u0f41\7\u0162\2\2\u0f41\u0f42"+
		"\5\u0190\u00c9\2\u0f42\u0f43\7\u0163\2\2\u0f43\u0195\3\2\2\2\u0f44\u0f45"+
		"\7\u0162\2\2\u0f45\u0f46\7\u0163\2\2\u0f46\u0197\3\2\2\2\u0f47\u0f48\7"+
		"<\2\2\u0f48\u0f49\5\u013c\u009f\2\u0f49\u0199\3\2\2\2\u0f4a\u0f4f\5\u0156"+
		"\u00ac\2\u0f4b\u0f4c\7\u015b\2\2\u0f4c\u0f4e\5\u0156\u00ac\2\u0f4d\u0f4b"+
		"\3\2\2\2\u0f4e\u0f51\3\2\2\2\u0f4f\u0f4d\3\2\2\2\u0f4f\u0f50\3\2\2\2\u0f50"+
		"\u019b\3\2\2\2\u0f51\u0f4f\3\2\2\2\u0f52\u0f53\5\u019e\u00d0\2\u0f53\u019d"+
		"\3\2\2\2\u0f54\u0f57\5\u01a0\u00d1\2\u0f55\u0f57\5\u0162\u00b2\2\u0f56"+
		"\u0f54\3\2\2\2\u0f56\u0f55\3\2\2\2\u0f57\u019f\3\2\2\2\u0f58\u0f61\5\u01a4"+
		"\u00d3\2\u0f59\u0f5a\5\u0162\u00b2\2\u0f5a\u0f5c\t\62\2\2\u0f5b\u0f5d"+
		"\t\63\2\2\u0f5c\u0f5b\3\2\2\2\u0f5c\u0f5d\3\2\2\2\u0f5d\u0f5e\3\2\2\2"+
		"\u0f5e\u0f5f\5\u01a2\u00d2\2\u0f5f\u0f61\3\2\2\2\u0f60\u0f58\3\2\2\2\u0f60"+
		"\u0f59\3\2\2\2\u0f61\u0f69\3\2\2\2\u0f62\u0f64\t\62\2\2\u0f63\u0f65\t"+
		"\63\2\2\u0f64\u0f63\3\2\2\2\u0f64\u0f65\3\2\2\2\u0f65\u0f66\3\2\2\2\u0f66"+
		"\u0f68\5\u01a2\u00d2\2\u0f67\u0f62\3\2\2\2\u0f68\u0f6b\3\2\2\2\u0f69\u0f67"+
		"\3\2\2\2\u0f69\u0f6a\3\2\2\2\u0f6a\u01a1\3\2\2\2\u0f6b\u0f69\3\2\2\2\u0f6c"+
		"\u0f6f\5\u01a4\u00d3\2\u0f6d\u0f6f\5\u0162\u00b2\2\u0f6e\u0f6c\3\2\2\2"+
		"\u0f6e\u0f6d\3\2\2\2\u0f6f\u01a3\3\2\2\2\u0f70\u0f79\5\u01a8\u00d5\2\u0f71"+
		"\u0f72\5\u0162\u00b2\2\u0f72\u0f74\7I\2\2\u0f73\u0f75\t\63\2\2\u0f74\u0f73"+
		"\3\2\2\2\u0f74\u0f75\3\2\2\2\u0f75\u0f76\3\2\2\2\u0f76\u0f77\5\u01a6\u00d4"+
		"\2\u0f77\u0f79\3\2\2\2\u0f78\u0f70\3\2\2\2\u0f78\u0f71\3\2\2\2\u0f79\u0f81"+
		"\3\2\2\2\u0f7a\u0f7c\7I\2\2\u0f7b\u0f7d\t\63\2\2\u0f7c\u0f7b\3\2\2\2\u0f7c"+
		"\u0f7d\3\2\2\2\u0f7d\u0f7e\3\2\2\2\u0f7e\u0f80\5\u01a6\u00d4\2\u0f7f\u0f7a"+
		"\3\2\2\2\u0f80\u0f83\3\2\2\2\u0f81\u0f7f\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82"+
		"\u01a5\3\2\2\2\u0f83\u0f81\3\2\2\2\u0f84\u0f87\5\u01a8\u00d5\2\u0f85\u0f87"+
		"\5\u0162\u00b2\2\u0f86\u0f84\3\2\2\2\u0f86\u0f85\3\2\2\2\u0f87\u01a7\3"+
		"\2\2\2\u0f88\u0f8e\5\u01aa\u00d6\2\u0f89\u0f8a\7\u0162\2\2\u0f8a\u0f8b"+
		"\5\u01a0\u00d1\2\u0f8b\u0f8c\7\u0163\2\2\u0f8c\u0f8e\3\2\2\2\u0f8d\u0f88"+
		"\3\2\2\2\u0f8d\u0f89\3\2\2\2\u0f8e\u01a9\3\2\2\2\u0f8f\u0f92\5\u01b2\u00da"+
		"\2\u0f90\u0f92\5\u01ac\u00d7\2\u0f91\u0f8f\3\2\2\2\u0f91\u0f90\3\2\2\2"+
		"\u0f92\u01ab\3\2\2\2\u0f93\u0f94\7{\2\2\u0f94\u0f95\5\u01ae\u00d8\2\u0f95"+
		"\u01ad\3\2\2\2\u0f96\u0f99\5\u01b0\u00d9\2\u0f97\u0f99\5\u00acW\2\u0f98"+
		"\u0f96\3\2\2\2\u0f98\u0f97\3\2\2\2\u0f99\u01af\3\2\2\2\u0f9a\u0fa1\5\u00ac"+
		"W\2\u0f9b\u0f9c\7\u0169\2\2\u0f9c\u0f9f\5\u00acW\2\u0f9d\u0f9e\7\u0169"+
		"\2\2\u0f9e\u0fa0\5\u00acW\2\u0f9f\u0f9d\3\2\2\2\u0f9f\u0fa0\3\2\2\2\u0fa0"+
		"\u0fa2\3\2\2\2\u0fa1\u0f9b\3\2\2\2\u0fa1\u0fa2\3\2\2\2\u0fa2\u01b1\3\2"+
		"\2\2\u0fa3\u0fa5\7t\2\2\u0fa4\u0fa6\5\u01bc\u00df\2\u0fa5\u0fa4\3\2\2"+
		"\2\u0fa5\u0fa6\3\2\2\2\u0fa6\u0fa7\3\2\2\2\u0fa7\u0fa9\5\u01b4\u00db\2"+
		"\u0fa8\u0faa\5\u015a\u00ae\2\u0fa9\u0fa8\3\2\2\2\u0fa9\u0faa\3\2\2\2\u0faa"+
		"\u01b3\3\2\2\2\u0fab\u0fb0\5\u01b6\u00dc\2\u0fac\u0fad\7\u015b\2\2\u0fad"+
		"\u0faf\5\u01b6\u00dc\2\u0fae\u0fac\3\2\2\2\u0faf\u0fb2\3\2\2\2\u0fb0\u0fae"+
		"\3\2\2\2\u0fb0\u0fb1\3\2\2\2\u0fb1\u01b5\3\2\2\2\u0fb2\u0fb0\3\2\2\2\u0fb3"+
		"\u0fb6\5\u01b8\u00dd\2\u0fb4\u0fb6\5\u01ba\u00de\2\u0fb5\u0fb3\3\2\2\2"+
		"\u0fb5\u0fb4\3\2\2\2\u0fb6\u01b7\3\2\2\2\u0fb7\u0fbc\5\u010a\u0086\2\u0fb8"+
		"\u0fbb\5\u01c0\u00e1\2\u0fb9\u0fbb\5\u01c2\u00e2\2\u0fba\u0fb8\3\2\2\2"+
		"\u0fba\u0fb9\3\2\2\2\u0fbb\u0fbe\3\2\2\2\u0fbc\u0fba\3\2\2\2\u0fbc\u0fbd"+
		"\3\2\2\2\u0fbd\u01b9\3\2\2\2\u0fbe\u0fbc\3\2\2\2\u0fbf\u0fc0\7\u0176\2"+
		"\2\u0fc0\u0fc2\7\u0169\2\2\u0fc1\u0fbf\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2"+
		"\u0fc3\3\2\2\2\u0fc3\u0fc4\7\u0166\2\2\u0fc4\u01bb\3\2\2\2\u0fc5\u0fc6"+
		"\t\63\2\2\u0fc6\u01bd\3\2\2\2\u0fc7\u0fc8\5\u00acW\2\u0fc8\u0fc9\7\u0169"+
		"\2\2\u0fc9\u0fcb\3\2\2\2\u0fca\u0fc7\3\2\2\2\u0fca\u0fcb\3\2\2\2\u0fcb"+
		"\u0fcc\3\2\2\2\u0fcc\u0fcd\5\u00acW\2\u0fcd\u01bf\3\2\2\2\u0fce\u0fd0"+
		"\7\6\2\2\u0fcf\u0fce\3\2\2\2\u0fcf\u0fd0\3\2\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1"+
		"\u0fd2\5\u00acW\2\u0fd2\u01c1\3\2\2\2\u0fd3\u0fd4\7\u00eb\2\2\u0fd4\u0fda"+
		"\7\u0162\2\2\u0fd5\u0fd9\5\u00a6T\2\u0fd6\u0fd9\5\u01fa\u00fe\2\u0fd7"+
		"\u0fd9\5\u0202\u0102\2\u0fd8\u0fd5\3\2\2\2\u0fd8\u0fd6\3\2\2\2\u0fd8\u0fd7"+
		"\3\2\2\2\u0fd9\u0fdc\3\2\2\2\u0fda\u0fd8\3\2\2\2\u0fda\u0fdb\3\2\2\2\u0fdb"+
		"\u0fdd\3\2\2\2\u0fdc\u0fda\3\2\2\2\u0fdd\u0fde\7\u0163\2\2\u0fde\u01c3"+
		"\3\2\2\2\u0fdf\u0fe4\5\u01be\u00e0\2\u0fe0\u0fe1\7\u015b\2\2\u0fe1\u0fe3"+
		"\5\u01be\u00e0\2\u0fe2\u0fe0\3\2\2\2\u0fe3\u0fe6\3\2\2\2\u0fe4\u0fe2\3"+
		"\2\2\2\u0fe4\u0fe5\3\2\2\2\u0fe5\u01c5\3\2\2\2\u0fe6\u0fe4\3\2\2\2\u0fe7"+
		"\u0fe8\5\u01cc\u00e7\2\u0fe8\u01c7\3\2\2\2\u0fe9\u0fea\5\u01cc\u00e7\2"+
		"\u0fea\u01c9\3\2\2\2\u0feb\u0fec\5\u01cc\u00e7\2\u0fec\u01cb\3\2\2\2\u0fed"+
		"\u0fee\7\u0162\2\2\u0fee\u0fef\5\u019c\u00cf\2\u0fef\u0ff0\7\u0163\2\2"+
		"\u0ff0\u01cd\3\2\2\2\u0ff1\u0ff8\5\u01d0\u00e9\2\u0ff2\u0ff8\5\u01d4\u00eb"+
		"\2\u0ff3\u0ff8\5\u01d8\u00ed\2\u0ff4\u0ff8\5\u01de\u00f0\2\u0ff5\u0ff8"+
		"\5\u01e6\u00f4\2\u0ff6\u0ff8\5\u01f0\u00f9\2\u0ff7\u0ff1\3\2\2\2\u0ff7"+
		"\u0ff2\3\2\2\2\u0ff7\u0ff3\3\2\2\2\u0ff7\u0ff4\3\2\2\2\u0ff7\u0ff5\3\2"+
		"\2\2\u0ff7\u0ff6\3\2\2\2\u0ff8\u01cf\3\2\2\2\u0ff9\u0ffa\5\u0156\u00ac"+
		"\2\u0ffa\u0ffb\5\u01d2\u00ea\2\u0ffb\u0ffc\5\u0156\u00ac\2\u0ffc\u01d1"+
		"\3\2\2\2\u0ffd\u0ffe\t\64\2\2\u0ffe\u01d3\3\2\2\2\u0fff\u1000\5\u0156"+
		"\u00ac\2\u1000\u1001\5\u01d6\u00ec\2\u1001\u01d5\3\2\2\2\u1002\u1004\7"+
		"W\2\2\u1003\u1002\3\2\2\2\u1003\u1004\3\2\2\2\u1004\u1005\3\2\2\2\u1005"+
		"\u1007\7\u0094\2\2\u1006\u1008\t\65\2\2\u1007\u1006\3\2\2\2\u1007\u1008"+
		"\3\2\2\2\u1008\u1009\3\2\2\2\u1009\u100a\5\u0156\u00ac\2\u100a\u100b\7"+
		"\t\2\2\u100b\u100c\5\u0156\u00ac\2\u100c\u01d7\3\2\2\2\u100d\u100f\5\u0114"+
		"\u008b\2\u100e\u1010\7W\2\2\u100f\u100e\3\2\2\2\u100f\u1010\3\2\2\2\u1010"+
		"\u1011\3\2\2\2\u1011\u1012\7C\2\2\u1012\u1013\5\u01da\u00ee\2\u1013\u01d9"+
		"\3\2\2\2\u1014\u101a\5\u01ca\u00e6\2\u1015\u1016\7\u0162\2\2\u1016\u1017"+
		"\5\u01dc\u00ef\2\u1017\u1018\7\u0163\2\2\u1018\u101a\3\2\2\2\u1019\u1014"+
		"\3\2\2\2\u1019\u1015\3\2\2\2\u101a\u01db\3\2\2\2\u101b\u1020\5\u0150\u00a9"+
		"\2\u101c\u101d\7\u015b\2\2\u101d\u101f\5\u0150\u00a9\2\u101e\u101c\3\2"+
		"\2\2\u101f\u1022\3\2\2\2\u1020\u101e\3\2\2\2\u1020\u1021\3\2\2\2\u1021"+
		"\u01dd\3\2\2\2\u1022\u1020\3\2\2\2\u1023\u1024\5\u0156\u00ac\2\u1024\u1025"+
		"\5\u01e0\u00f1\2\u1025\u1026\7\u0179\2\2\u1026\u01df\3\2\2\2\u1027\u1029"+
		"\7W\2\2\u1028\u1027\3\2\2\2\u1028\u1029\3\2\2\2\u1029\u102a\3\2\2\2\u102a"+
		"\u102d\5\u01e2\u00f2\2\u102b\u102d\5\u01e4\u00f3\2\u102c\u1028\3\2\2\2"+
		"\u102c\u102b\3\2\2\2\u102d\u01e1\3\2\2\2\u102e\u1032\t\66\2\2\u102f\u1030"+
		"\7\u0104\2\2\u1030\u1032\7\u0117\2\2\u1031\u102e\3\2\2\2\u1031\u102f\3"+
		"\2\2\2\u1032\u01e3\3\2\2\2\u1033\u1034\t\67\2\2\u1034\u01e5\3\2\2\2\u1035"+
		"\u1036\5\u0156\u00ac\2\u1036\u1038\7N\2\2\u1037\u1039\7W\2\2\u1038\u1037"+
		"\3\2\2\2\u1038\u1039\3\2\2\2\u1039\u103a\3\2\2\2\u103a\u103b\7X\2\2\u103b"+
		"\u01e7\3\2\2\2\u103c\u103d\5\u0114\u008b\2\u103d\u103e\5\u01d2\u00ea\2"+
		"\u103e\u103f\5\u01ea\u00f6\2\u103f\u1040\5\u01ca\u00e6\2\u1040\u01e9\3"+
		"\2\2\2\u1041\u1044\5\u01ec\u00f7\2\u1042\u1044\5\u01ee\u00f8\2\u1043\u1041"+
		"\3\2\2\2\u1043\u1042\3\2\2\2\u1044\u01eb\3\2\2\2\u1045\u1046\7\7\2\2\u1046"+
		"\u01ed\3\2\2\2\u1047\u1048\t8\2\2\u1048\u01ef\3\2\2\2\u1049\u104b\7W\2"+
		"\2\u104a\u1049\3\2\2\2\u104a\u104b\3\2\2\2\u104b\u104c\3\2\2\2\u104c\u104d"+
		"\7\u00b8\2\2\u104d\u104e\5\u01ca\u00e6\2\u104e\u01f1\3\2\2\2\u104f\u1050"+
		"\7\u0085\2\2\u1050\u1051\5\u01ca\u00e6\2\u1051\u01f3\3\2\2\2\u1052\u1055"+
		"\5\u01f6\u00fc\2\u1053\u1055\7\u0100\2\2\u1054\u1052\3\2\2\2\u1054\u1053"+
		"\3\2\2\2\u1055\u01f5\3\2\2\2\u1056\u1057\t9\2\2\u1057\u01f7\3\2\2\2\u1058"+
		"\u1059\t:\2\2\u1059\u01f9\3\2\2\2\u105a\u105b\7_\2\2\u105b\u105c\7\u0095"+
		"\2\2\u105c\u105d\5\u01fe\u0100\2\u105d\u01fb\3\2\2\2\u105e\u1068\5\u01fe"+
		"\u0100\2\u105f\u1062\7\u0162\2\2\u1060\u1063\n;\2\2\u1061\u1063\5\u01fc"+
		"\u00ff\2\u1062\u1060\3\2\2\2\u1062\u1061\3\2\2\2\u1063\u1064\3\2\2\2\u1064"+
		"\u1062\3\2\2\2\u1064\u1065\3\2\2\2\u1065\u1066\3\2\2\2\u1066\u1068\7\u0163"+
		"\2\2\u1067\u105e\3\2\2\2\u1067\u105f\3\2\2\2\u1068\u01fd\3\2\2\2\u1069"+
		"\u106e\5\u0200\u0101\2\u106a\u106b\7\u015b\2\2\u106b\u106d\5\u0200\u0101"+
		"\2\u106c\u106a\3\2\2\2\u106d\u1070\3\2\2\2\u106e\u106c\3\2\2\2\u106e\u106f"+
		"\3\2\2\2\u106f\u01ff\3\2\2\2\u1070\u106e\3\2\2\2\u1071\u1073\5\u0156\u00ac"+
		"\2\u1072\u1074\5\u0202\u0102\2\u1073\u1072\3\2\2\2\u1073\u1074\3\2\2\2"+
		"\u1074\u1076\3\2\2\2\u1075\u1077\5\u0206\u0104\2\u1076\u1075\3\2\2\2\u1076"+
		"\u1077\3\2\2\2\u1077\u0201\3\2\2\2\u1078\u1079\t<\2\2\u1079\u0203\3\2"+
		"\2\2\u107a\u107b\7T\2\2\u107b\u107c\5\u0114\u008b\2\u107c\u0205\3\2\2"+
		"\2\u107d\u107e\7X\2\2\u107e\u1082\7\u00be\2\2\u107f\u1080\7X\2\2\u1080"+
		"\u1082\7\u00d1\2\2\u1081\u107d\3\2\2\2\u1081\u107f\3\2\2\2\u1082\u0207"+
		"\3\2\2\2\u0242\u020d\u0214\u0218\u0222\u0227\u022a\u022f\u0232\u023a\u023f"+
		"\u0245\u024d\u025a\u0260\u0269\u0270\u0275\u0285\u028e\u0296\u0299\u02a4"+
		"\u02af\u02ba\u02bf\u02c6\u02cb\u02d1\u02da\u02de\u02e2\u02e7\u02eb\u02ef"+
		"\u02f3\u02f8\u02fe\u0302\u0306\u031b\u0327\u0332\u0334\u033a\u0345\u034f"+
		"\u036e\u0382\u038a\u038f\u0395\u0398\u039c\u03ae\u03b3\u03c2\u03c6\u03cb"+
		"\u03cd\u03d9\u03dc\u03e5\u03e8\u03f2\u03f7\u03f9\u0404\u0409\u040b\u0414"+
		"\u0416\u041f\u0421\u042a\u0431\u0436\u0438\u0441\u0448\u044d\u044f\u0458"+
		"\u045d\u045f\u0468\u046d\u046f\u0474\u047a\u0480\u0483\u0485\u0487\u048e"+
		"\u0491\u0497\u049c\u04a4\u04aa\u04b2\u04b8\u04bc\u04c8\u04cd\u04d1\u04d5"+
		"\u04d8\u04de\u04e2\u04e6\u04ea\u04f1\u04f5\u04f9\u04fd\u0501\u0506\u0509"+
		"\u050c\u0514\u0518\u051a\u052b\u0530\u0534\u0536\u053e\u0547\u054f\u0555"+
		"\u0559\u055c\u0564\u0568\u0570\u057c\u057f\u0581\u0584\u0588\u058e\u0593"+
		"\u0599\u059d\u05a0\u05a4\u05ab\u05b1\u05ba\u05c1\u05c6\u05c8\u05cc\u05d1"+
		"\u05da\u05dc\u05e4\u05ed\u05f4\u05f8\u0600\u0605\u0609\u0610\u0619\u061e"+
		"\u0622\u0624\u062d\u0639\u063c\u0644\u0649\u064d\u064f\u0658\u0661\u0666"+
		"\u0668\u0673\u067c\u0681\u0683\u068d\u0696\u069b\u069d\u06a2\u06aa\u06af"+
		"\u06b1\u06ba\u06c3\u06c8\u06ca\u06cc\u06d0\u06d2\u06dc\u06e5\u06e9\u06ed"+
		"\u06f1\u06f3\u06fc\u0705\u070a\u070c\u0715\u071e\u0725\u072e\u0732\u0734"+
		"\u0738\u073c\u0740\u0744\u0748\u074c\u0754\u0759\u075b\u075f\u0763\u0767"+
		"\u076f\u0773\u0775\u0780\u0785\u0789\u0790\u0793\u0797\u079b\u079f\u07a9"+
		"\u07ae\u07b0\u07b9\u07be\u07c9\u07cc\u07d6\u07db\u07dd\u07e6\u07ef\u07f1"+
		"\u07fc\u0805\u0807\u0811\u081a\u081c\u0821\u0829\u082b\u0834\u083c\u0840"+
		"\u0844\u0846\u0850\u0858\u085c\u0860\u0862\u086b\u0874\u0876\u087f\u0889"+
		"\u0892\u0898\u089a\u089e\u08a2\u08a6\u08aa\u08ae\u08b4\u08c0\u08c3\u08e6"+
		"\u08ef\u08f2\u08f5\u08fd\u0904\u090e\u0913\u0922\u0932\u0938\u0943\u0946"+
		"\u0948\u0951\u0956\u095f\u0964\u0968\u096b\u0976\u097b\u097e\u0983\u0993"+
		"\u0996\u09a3\u09a8\u09af\u09b4\u09bb\u09c1\u09c5\u09cb\u09d2\u09d4\u09db"+
		"\u09e0\u09e8\u09f1\u09f5\u09f7\u09fc\u09ff\u0a05\u0a09\u0a11\u0a15\u0a19"+
		"\u0a1f\u0a24\u0a29\u0a2d\u0a33\u0a3c\u0a3f\u0a46\u0a4a\u0a4e\u0a5d\u0a61"+
		"\u0a6a\u0a6e\u0a70\u0a75\u0a7b\u0a84\u0a87\u0a8d\u0a92\u0a9a\u0aa4\u0ab2"+
		"\u0abb\u0ac5\u0acf\u0ad9\u0ae5\u0aea\u0af2\u0afa\u0afc\u0aff\u0b04\u0b0a"+
		"\u0b0e\u0b17\u0b27\u0b2c\u0b31\u0b33\u0b38\u0b3e\u0b44\u0b4a\u0b50\u0b53"+
		"\u0b57\u0b63\u0b6c\u0b6e\u0b72\u0b7a\u0b7d\u0b83\u0b8b\u0b9c\u0bb1\u0bc2"+
		"\u0bcf\u0bd3\u0bd5\u0be2\u0be9\u0c01\u0c08\u0c1a\u0c23\u0c27\u0c2b\u0c2d"+
		"\u0c33\u0c38\u0c3d\u0c4b\u0c4f\u0c5c\u0c62\u0c66\u0c6b\u0c70\u0c74\u0c77"+
		"\u0c80\u0c85\u0c89\u0c8f\u0c95\u0c9a\u0c9e\u0ca0\u0ca4\u0ca8\u0caa\u0cae"+
		"\u0cb2\u0cb6\u0cba\u0cbd\u0cc1\u0cc6\u0cc8\u0cd2\u0cdb\u0ce2\u0ce5\u0ce9"+
		"\u0ced\u0cf2\u0cf4\u0cf8\u0cfd\u0d01\u0d03\u0d07\u0d18\u0d1f\u0d2b\u0d2d"+
		"\u0d32\u0d53\u0d57\u0d5b\u0d62\u0d65\u0d6d\u0d70\u0d83\u0d94\u0d9d\u0daf"+
		"\u0db6\u0dbe\u0dc2\u0dcc\u0dd3\u0dda\u0deb\u0df1\u0dfa\u0e01\u0e07\u0e11"+
		"\u0e14\u0e17\u0e1e\u0e29\u0e31\u0e37\u0e3b\u0e3f\u0e47\u0e4b\u0e53\u0e5b"+
		"\u0e5f\u0e63\u0e66\u0e69\u0e6c\u0e6f\u0e73\u0e77\u0e7a\u0e7d\u0e84\u0e89"+
		"\u0e8f\u0e95\u0e9d\u0ea4\u0eab\u0eb3\u0ebe\u0ec2\u0ec8\u0ed4\u0ed7\u0eda"+
		"\u0ee0\u0ee4\u0eeb\u0ef1\u0ef8\u0efd\u0f06\u0f09\u0f17\u0f22\u0f29\u0f30"+
		"\u0f37\u0f4f\u0f56\u0f5c\u0f60\u0f64\u0f69\u0f6e\u0f74\u0f78\u0f7c\u0f81"+
		"\u0f86\u0f8d\u0f91\u0f98\u0f9f\u0fa1\u0fa5\u0fa9\u0fb0\u0fb5\u0fba\u0fbc"+
		"\u0fc1\u0fca\u0fcf\u0fd8\u0fda\u0fe4\u0ff7\u1003\u1007\u100f\u1019\u1020"+
		"\u1028\u102c\u1031\u1038\u1043\u104a\u1054\u1062\u1064\u1067\u106e\u1073"+
		"\u1076\u1081";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}