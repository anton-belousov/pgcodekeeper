// Generated from SQLParser.g4 by ANTLR 4.4
package ru.taximaxim.codekeeper.ui.sqledit.antlrv4;


import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		FUNCTION=46, ISODOW=194, OVERWRITE=225, FUNCTIONS=47, ROW=95, PRECISION=231, 
		ILIKE=55, TYPES=269, ENABLE=170, Character_String_Literal=363, NOT=78, 
		EXCEPT=37, FOREIGN=44, CACHE=140, PRIVILEGES=91, BYTEA=321, MONTH=213, 
		STATEMENT=111, CHARACTER=144, TYPE=268, BlockComment=358, VARBIT=289, 
		STDDEV_POP=255, CREATE=23, COMMENTS=151, ESC_SEQUENCES=364, USING=127, 
		UNLOGGED=271, NOT_EQUAL=337, TIMEZONE_MINUTE=265, VERTICAL_BAR=351, VARIADIC=129, 
		TIMESTAMPTZ=315, VALID=273, REGEXP=237, FAMILY=178, GEQ=341, HANDLER=53, 
		STDDEV_SAMP=256, DIVIDE=347, DISABLE=166, BLOB=320, REPLICA=239, STRICT=112, 
		PRESERVE=89, ASC=10, GROUPING=183, SUBPARTITION=257, VALIDATOR=128, KEY=71, 
		SETOF=109, TEMP=115, ELSE=36, NUMBER=356, BOOL=287, TRAILING=118, DEFINER=164, 
		SEMI_COLON=334, INT=296, RLIKE=242, LEADING=72, RESTRICT=99, SERVER=247, 
		PROCEDURAL=93, TABLESPACE=259, MILLISECONDS=209, REAL=301, INTERSECT=64, 
		GROUP=51, LANGUAGE=197, SEQUENCES=106, OUT=83, REAL_NUMBER=357, NONE=216, 
		USER=272, TRIM=266, LEFT_PAREN=342, LOCATION=202, SEARCH=244, END=35, 
		N_DISTINCT=218, CONSTRAINT=20, TIMEZONE_HOUR=264, RENAME=238, CAST_EXPRESSION=330, 
		ALTER=6, OPTION=223, ISOYEAR=195, UUID=317, NCHAR=309, PLAIN=230, ONLY=222, 
		EXECUTE=40, OWNER=88, INPUT=190, TABLE=114, VARCHAR=308, FLOAT=303, VERSION=279, 
		MICROSECONDS=207, IMMUTABLE=57, ASYMMETRIC=9, SUM=258, N_DISTINCT_INHERITED=219, 
		UnterminatedQuotedIdentifier=362, OWNED=87, EndDollarStringConstant=371, 
		Space=367, INOUT=66, STORAGE=254, TIME=312, AS=4, RIGHT_PAREN=343, THEN=117, 
		MAXVALUE=206, COLLATION=18, LEFT=73, REPLACE=98, AVG=137, ZONE=285, TRUNCATE=122, 
		COLUMN=149, TRUSTED=119, PLUS=344, EXISTS=174, NVARCHAR=310, Not_Similar_To=327, 
		RETURNS=100, LIKE=74, COLLATE=17, ADD=1, INTEGER=297, OUTER=82, BY=139, 
		DEFERRABLE=28, TO=267, DOLLAR_FIELD=365, INHERIT=186, SET=248, RIGHT=102, 
		HAVING=52, MIN=210, SESSION=108, MINUS=345, TEXT=316, HOUR=185, QuotedIdentifier=361, 
		CONCATENATION_OPERATOR=336, CONVERSION=22, UNION=123, CURRENT=158, COLON=333, 
		COMMIT=152, SCHEMA=104, DATABASE=25, DECIMAL=306, DROP=169, BIGINT=298, 
		WHEN=131, VALIDATE=274, CONCURRENTLY=153, ROWS=96, START=252, BIT=288, 
		LARGE=198, REVOKE=101, NATURAL=77, FORMAT=181, PUBLIC=232, AGGREGATE=2, 
		EXTENSION=41, BETWEEN=138, OPTIONS=224, FIRST=180, CAST=16, WEEK=281, 
		EXTERNAL=176, DOUBLE_QUOTE=353, VARYING=278, RESET=240, REGCONFIG=236, 
		TRIGGER=120, CASE=14, CHAR=307, INT8=293, COUNT=156, DAY=161, CASCADE=15, 
		COST=155, INT2=291, INT1=290, Identifier=360, INT4=292, ISCACHABLE=193, 
		EXTENDED=175, QUOTE=352, MODULAR=348, INVOKER=68, FULL=45, DICTIONARY=165, 
		THAN=262, QUARTER=234, INSERT=191, INHERITS=60, CONNECT=19, ALWAYS=136, 
		INTERSECTION=192, LESS=200, TINYINT=294, BOTH=13, Similar_To_Case_Insensitive=328, 
		DOUBLE=304, ADMIN=135, SYMMETRIC=113, VOID=325, ISSTRICT=196, EACH=34, 
		LAST=199, COMMENT=150, SELECT=107, INTO=65, UNIQUE=124, COALESCE=148, 
		SECOND=245, ROLE=94, RULE=103, VIEW=130, EPOCH=171, ROLLUP=243, NULL=79, 
		WITHOUT=134, NO=215, EVERY=173, ON=221, RESTART=241, MATCH=204, PRIMARY=90, 
		DELETE=30, INET4=322, NUMERIC=305, LOCAL=76, LIST=201, OF=80, EXCLUDING=39, 
		TABLES=260, UNDERLINE=350, SEQUENCE=105, Not_Similar_To_Case_Insensitive=329, 
		CUBE=157, NATIONAL=214, CALLED=141, STATISTICS=253, VAR_POP=277, OR=85, 
		FILTER=179, CHECK=145, INLINE=62, FROM=48, FALSE=42, COLLECT=147, BeginDollarStringConstant=366, 
		PARSER=226, DISTINCT=32, TEMPORARY=116, TIMESTAMP=314, SIMPLE=250, DOLLAR=354, 
		CONSTRAINTS=21, WHERE=132, DEC=162, VAR_SAMP=276, NULLIF=217, MAIN=203, 
		CLASS=142, Text_between_Dollar=370, TIMETZ=313, INNER=63, YEAR=284, TIMEZONE=263, 
		ORDER=86, AUTHORIZATION=11, LIMIT=75, DECADE=163, GTH=340, CYCLE=159, 
		White_Space=368, MAX=205, UPDATE=125, LineComment=359, DEFERRED=29, FOR=43, 
		FLOAT4=299, CONFIGURATION=154, FLOAT8=300, AND=7, CROSS=24, Similar_To=326, 
		INTERVAL=324, USAGE=126, IF=54, INDEX=187, OIDS=81, BOOLEAN=286, IN=58, 
		MINVALUE=211, UNKNOWN=270, MULTIPLY=346, OBJECT=220, COMMA=335, REFERENCES=97, 
		PARTITION=228, IS=69, PARTITIONS=229, SOME=110, EQUAL=332, ALL=5, DOUBLE_DOLLAR=355, 
		DOT=349, EXTRACT=177, CENTURY=143, STABLE=251, SECURITY=246, PARTIAL=227, 
		DOW=167, EXCLUDE=38, WITH=133, INITIALLY=61, DOY=168, FUSION=182, GRANT=50, 
		VARBINARY=319, VOLATILE=280, OPERATOR=84, DEFAULT=26, VALUES=275, HASH=184, 
		RANGE=235, MILLENNIUM=208, INDEXES=188, PURGE=233, BEFORE=12, AFTER=3, 
		INSTEAD=67, EVENT=172, WRAPPER=283, TRUE=121, PROCEDURE=92, JOIN=70, SIMILAR=249, 
		DOMAIN=33, DEFAULTS=27, LTH=338, INCREMENT=189, ANY=8, INET=323, TEMPLATE=261, 
		BAD=369, ASSIGN=331, REGCLASS=302, IMMEDIATE=56, CLUSTER=146, WINDOW=282, 
		BINARY=318, DESC=31, DATE=311, MINUTE=212, GLOBAL=49, DATA=160, INCLUDING=59, 
		LEQ=339, SMALLINT=295;
	public static final String[] tokenNames = {
		"<INVALID>", "ADD", "AGGREGATE", "AFTER", "AS", "ALL", "ALTER", "AND", 
		"ANY", "ASYMMETRIC", "ASC", "AUTHORIZATION", "BEFORE", "BOTH", "CASE", 
		"CASCADE", "CAST", "COLLATE", "COLLATION", "CONNECT", "CONSTRAINT", "CONSTRAINTS", 
		"CONVERSION", "CREATE", "CROSS", "DATABASE", "DEFAULT", "DEFAULTS", "DEFERRABLE", 
		"DEFERRED", "DELETE", "DESC", "DISTINCT", "DOMAIN", "EACH", "END", "ELSE", 
		"EXCEPT", "EXCLUDE", "EXCLUDING", "EXECUTE", "EXTENSION", "FALSE", "FOR", 
		"FOREIGN", "FULL", "FUNCTION", "FUNCTIONS", "FROM", "GLOBAL", "GRANT", 
		"GROUP", "HAVING", "HANDLER", "IF", "ILIKE", "IMMEDIATE", "IMMUTABLE", 
		"IN", "INCLUDING", "INHERITS", "INITIALLY", "INLINE", "INNER", "INTERSECT", 
		"INTO", "INOUT", "INSTEAD", "INVOKER", "IS", "JOIN", "KEY", "LEADING", 
		"LEFT", "LIKE", "LIMIT", "LOCAL", "NATURAL", "NOT", "NULL", "OF", "OIDS", 
		"OUTER", "OUT", "OPERATOR", "OR", "ORDER", "OWNED", "OWNER", "PRESERVE", 
		"PRIMARY", "PRIVILEGES", "PROCEDURE", "PROCEDURAL", "ROLE", "ROW", "ROWS", 
		"REFERENCES", "REPLACE", "RESTRICT", "RETURNS", "REVOKE", "RIGHT", "RULE", 
		"SCHEMA", "SEQUENCE", "SEQUENCES", "SELECT", "SESSION", "SETOF", "SOME", 
		"STATEMENT", "STRICT", "SYMMETRIC", "TABLE", "TEMP", "TEMPORARY", "THEN", 
		"TRAILING", "TRUSTED", "TRIGGER", "TRUE", "TRUNCATE", "UNION", "UNIQUE", 
		"UPDATE", "USAGE", "USING", "VALIDATOR", "VARIADIC", "VIEW", "WHEN", "WHERE", 
		"WITH", "WITHOUT", "ADMIN", "ALWAYS", "AVG", "BETWEEN", "BY", "CACHE", 
		"CALLED", "CLASS", "CENTURY", "CHARACTER", "CHECK", "CLUSTER", "COLLECT", 
		"COALESCE", "COLUMN", "COMMENT", "COMMENTS", "COMMIT", "CONCURRENTLY", 
		"CONFIGURATION", "COST", "COUNT", "CUBE", "CURRENT", "CYCLE", "DATA", 
		"DAY", "DEC", "DECADE", "DEFINER", "DICTIONARY", "DISABLE", "DOW", "DOY", 
		"DROP", "ENABLE", "EPOCH", "EVENT", "EVERY", "EXISTS", "EXTENDED", "EXTERNAL", 
		"EXTRACT", "FAMILY", "FILTER", "FIRST", "FORMAT", "FUSION", "GROUPING", 
		"HASH", "HOUR", "INHERIT", "INDEX", "INDEXES", "INCREMENT", "INPUT", "INSERT", 
		"INTERSECTION", "ISCACHABLE", "ISODOW", "ISOYEAR", "ISSTRICT", "LANGUAGE", 
		"LARGE", "LAST", "LESS", "LIST", "LOCATION", "MAIN", "MATCH", "MAX", "MAXVALUE", 
		"MICROSECONDS", "MILLENNIUM", "MILLISECONDS", "MIN", "MINVALUE", "MINUTE", 
		"MONTH", "NATIONAL", "NO", "NONE", "NULLIF", "N_DISTINCT", "N_DISTINCT_INHERITED", 
		"OBJECT", "ON", "ONLY", "OPTION", "OPTIONS", "OVERWRITE", "PARSER", "PARTIAL", 
		"PARTITION", "PARTITIONS", "PLAIN", "PRECISION", "PUBLIC", "PURGE", "QUARTER", 
		"RANGE", "REGCONFIG", "REGEXP", "RENAME", "REPLICA", "RESET", "RESTART", 
		"RLIKE", "ROLLUP", "SEARCH", "SECOND", "SECURITY", "SERVER", "SET", "SIMILAR", 
		"SIMPLE", "STABLE", "START", "STATISTICS", "STORAGE", "STDDEV_POP", "STDDEV_SAMP", 
		"SUBPARTITION", "SUM", "TABLESPACE", "TABLES", "TEMPLATE", "THAN", "TIMEZONE", 
		"TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TRIM", "TO", "TYPE", "TYPES", "UNKNOWN", 
		"UNLOGGED", "USER", "VALID", "VALIDATE", "VALUES", "VAR_SAMP", "VAR_POP", 
		"VARYING", "VERSION", "VOLATILE", "WEEK", "WINDOW", "WRAPPER", "YEAR", 
		"ZONE", "BOOLEAN", "BOOL", "BIT", "VARBIT", "INT1", "INT2", "INT4", "INT8", 
		"TINYINT", "SMALLINT", "INT", "INTEGER", "BIGINT", "FLOAT4", "FLOAT8", 
		"REAL", "REGCLASS", "FLOAT", "DOUBLE", "NUMERIC", "DECIMAL", "CHAR", "VARCHAR", 
		"NCHAR", "NVARCHAR", "DATE", "TIME", "TIMETZ", "TIMESTAMP", "TIMESTAMPTZ", 
		"TEXT", "UUID", "BINARY", "VARBINARY", "BLOB", "BYTEA", "INET4", "INET", 
		"INTERVAL", "VOID", "'~'", "'!~'", "'~*'", "'!~*'", "CAST_EXPRESSION", 
		"':='", "'='", "':'", "';'", "','", "CONCATENATION_OPERATOR", "NOT_EQUAL", 
		"'<'", "'<='", "'>'", "'>='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'.'", "'_'", "'|'", "'''", "'\"'", "'$'", "'$$'", "NUMBER", "REAL_NUMBER", 
		"BlockComment", "LineComment", "Identifier", "QuotedIdentifier", "UnterminatedQuotedIdentifier", 
		"Character_String_Literal", "ESC_SEQUENCES", "DOLLAR_FIELD", "BeginDollarStringConstant", 
		"' '", "White_Space", "BAD", "Text_between_Dollar", "EndDollarStringConstant"
	};
	public static final int
		RULE_sql = 0, RULE_statement = 1, RULE_data_statement = 2, RULE_data_change_statement = 3, 
		RULE_schema_statement = 4, RULE_schema_create = 5, RULE_schema_alter = 6, 
		RULE_alter_function_statement = 7, RULE_alter_schema_statement = 8, RULE_alter_language_statement = 9, 
		RULE_alter_table_statement = 10, RULE_table_action = 11, RULE_table_constraint_using_index = 12, 
		RULE_table_attribute_option = 13, RULE_function_action = 14, RULE_alter_default_privileges = 15, 
		RULE_abbreviated_grant_or_revoke = 16, RULE_alter_sequence_statement = 17, 
		RULE_index_statement = 18, RULE_create_extension_statement = 19, RULE_create_language_statement = 20, 
		RULE_create_event_trigger = 21, RULE_set_statement = 22, RULE_create_trigger_statement = 23, 
		RULE_revoke_statement = 24, RULE_revoke_from_cascade_restrict = 25, RULE_grant_statement = 26, 
		RULE_grant_to_rule = 27, RULE_comment_on_statement = 28, RULE_create_function_statement = 29, 
		RULE_function_parameters = 30, RULE_function_body = 31, RULE_function_attribute = 32, 
		RULE_argmode = 33, RULE_function_definition = 34, RULE_functions_definition_schema = 35, 
		RULE_create_sequence_statement = 36, RULE_sequence_body = 37, RULE_create_schema_statement = 38, 
		RULE_create_view_statement = 39, RULE_create_table_statement = 40, RULE_table_column_definition = 41, 
		RULE_like_option = 42, RULE_table_constraint = 43, RULE_column_constraint = 44, 
		RULE_check_boolean_expression = 45, RULE_storage_parameter = 46, RULE_with_storage_parameter = 47, 
		RULE_storage_parameter_oid = 48, RULE_on_commit = 49, RULE_table_space = 50, 
		RULE_action = 51, RULE_index_parameters = 52, RULE_table_elements = 53, 
		RULE_field_element = 54, RULE_field_type = 55, RULE_param_clause = 56, 
		RULE_param = 57, RULE_method_specifier = 58, RULE_table_space_specifier = 59, 
		RULE_table_space_name = 60, RULE_table_partitioning_clauses = 61, RULE_range_partitions = 62, 
		RULE_range_value_clause_list = 63, RULE_range_value_clause = 64, RULE_hash_partitions = 65, 
		RULE_individual_hash_partitions = 66, RULE_individual_hash_partition = 67, 
		RULE_hash_partitions_by_quantity = 68, RULE_list_partitions = 69, RULE_list_value_clause_list = 70, 
		RULE_list_value_partition = 71, RULE_column_partitions = 72, RULE_partition_name = 73, 
		RULE_drop_table_statement = 74, RULE_identifier = 75, RULE_nonreserved_keywords = 76, 
		RULE_unsigned_literal = 77, RULE_general_literal = 78, RULE_datetime_literal = 79, 
		RULE_time_literal = 80, RULE_timestamp_literal = 81, RULE_date_literal = 82, 
		RULE_boolean_literal = 83, RULE_data_type = 84, RULE_predefined_type = 85, 
		RULE_regclass = 86, RULE_network_type = 87, RULE_character_string_type = 88, 
		RULE_type_length = 89, RULE_national_character_string_type = 90, RULE_binary_large_object_string_type = 91, 
		RULE_numeric_type = 92, RULE_exact_numeric_type = 93, RULE_approximate_numeric_type = 94, 
		RULE_precision_param = 95, RULE_boolean_type = 96, RULE_datetime_type = 97, 
		RULE_bit_type = 98, RULE_binary_type = 99, RULE_value_expression_primary = 100, 
		RULE_parenthesized_value_expression = 101, RULE_nonparenthesized_value_expression_primary = 102, 
		RULE_unsigned_value_specification = 103, RULE_unsigned_numeric_literal = 104, 
		RULE_signed_numerical_literal = 105, RULE_set_function_specification = 106, 
		RULE_aggregate_function = 107, RULE_general_set_function = 108, RULE_set_function_type = 109, 
		RULE_filter_clause = 110, RULE_grouping_operation = 111, RULE_case_expression = 112, 
		RULE_case_abbreviation = 113, RULE_case_specification = 114, RULE_simple_case = 115, 
		RULE_searched_case = 116, RULE_simple_when_clause = 117, RULE_searched_when_clause = 118, 
		RULE_else_clause = 119, RULE_result = 120, RULE_cast_specification = 121, 
		RULE_cast_operand = 122, RULE_cast_target = 123, RULE_value_expression = 124, 
		RULE_common_value_expression = 125, RULE_numeric_value_expression = 126, 
		RULE_term = 127, RULE_factor = 128, RULE_array = 129, RULE_numeric_primary = 130, 
		RULE_sign = 131, RULE_numeric_value_function = 132, RULE_extract_expression = 133, 
		RULE_extract_field = 134, RULE_time_zone_field = 135, RULE_extract_source = 136, 
		RULE_string_value_expression = 137, RULE_character_value_expression = 138, 
		RULE_character_factor = 139, RULE_character_primary = 140, RULE_string_value_function = 141, 
		RULE_trim_function = 142, RULE_trim_operands = 143, RULE_trim_specification = 144, 
		RULE_boolean_value_expression = 145, RULE_or_predicate = 146, RULE_and_predicate = 147, 
		RULE_boolean_factor = 148, RULE_boolean_test = 149, RULE_is_clause = 150, 
		RULE_truth_value = 151, RULE_boolean_primary = 152, RULE_boolean_predicand = 153, 
		RULE_parenthesized_boolean_value_expression = 154, RULE_row_value_expression = 155, 
		RULE_row_value_special_case = 156, RULE_explicit_row_value_constructor = 157, 
		RULE_row_value_predicand = 158, RULE_row_value_constructor_predicand = 159, 
		RULE_table_expression = 160, RULE_from_clause = 161, RULE_table_reference_list_paren = 162, 
		RULE_table_reference_list = 163, RULE_table_reference = 164, RULE_joined_table = 165, 
		RULE_joined_table_primary = 166, RULE_cross_join = 167, RULE_qualified_join = 168, 
		RULE_natural_join = 169, RULE_union_join = 170, RULE_join_type = 171, 
		RULE_outer_join_type = 172, RULE_outer_join_type_part2 = 173, RULE_join_specification = 174, 
		RULE_join_condition = 175, RULE_named_columns_join = 176, RULE_table_primary = 177, 
		RULE_column_name_list = 178, RULE_derived_table = 179, RULE_where_clause = 180, 
		RULE_search_condition = 181, RULE_groupby_clause = 182, RULE_grouping_element_list = 183, 
		RULE_grouping_element = 184, RULE_ordinary_grouping_set = 185, RULE_ordinary_grouping_set_list = 186, 
		RULE_rollup_list = 187, RULE_cube_list = 188, RULE_empty_grouping_set = 189, 
		RULE_having_clause = 190, RULE_row_value_predicand_list = 191, RULE_query_expression = 192, 
		RULE_query_expression_body = 193, RULE_non_join_query_expression = 194, 
		RULE_query_term = 195, RULE_non_join_query_term = 196, RULE_query_primary = 197, 
		RULE_non_join_query_primary = 198, RULE_simple_table = 199, RULE_explicit_table = 200, 
		RULE_table_or_query_name = 201, RULE_schema_qualified_name = 202, RULE_query_specification = 203, 
		RULE_select_list = 204, RULE_select_sublist = 205, RULE_derived_column = 206, 
		RULE_qualified_asterisk = 207, RULE_set_qualifier = 208, RULE_column_reference = 209, 
		RULE_as_clause = 210, RULE_column_reference_list = 211, RULE_scalar_subquery = 212, 
		RULE_row_subquery = 213, RULE_table_subquery = 214, RULE_subquery = 215, 
		RULE_predicate = 216, RULE_comparison_predicate = 217, RULE_comp_op = 218, 
		RULE_between_predicate = 219, RULE_between_predicate_part_2 = 220, RULE_in_predicate = 221, 
		RULE_in_predicate_value = 222, RULE_in_value_list = 223, RULE_pattern_matching_predicate = 224, 
		RULE_pattern_matcher = 225, RULE_negativable_matcher = 226, RULE_regex_matcher = 227, 
		RULE_null_predicate = 228, RULE_quantified_comparison_predicate = 229, 
		RULE_quantifier = 230, RULE_all = 231, RULE_some = 232, RULE_exists_predicate = 233, 
		RULE_unique_predicate = 234, RULE_primary_datetime_field = 235, RULE_non_second_primary_datetime_field = 236, 
		RULE_extended_datetime_field = 237, RULE_routine_invocation = 238, RULE_function_names_for_reserved_words = 239, 
		RULE_function_name = 240, RULE_sql_argument_list = 241, RULE_orderby_clause = 242, 
		RULE_sort_specifier_paren = 243, RULE_sort_specifier_list = 244, RULE_sort_specifier = 245, 
		RULE_order_specification = 246, RULE_limit_clause = 247, RULE_null_ordering = 248, 
		RULE_insert_statement = 249;
	public static final String[] ruleNames = {
		"sql", "statement", "data_statement", "data_change_statement", "schema_statement", 
		"schema_create", "schema_alter", "alter_function_statement", "alter_schema_statement", 
		"alter_language_statement", "alter_table_statement", "table_action", "table_constraint_using_index", 
		"table_attribute_option", "function_action", "alter_default_privileges", 
		"abbreviated_grant_or_revoke", "alter_sequence_statement", "index_statement", 
		"create_extension_statement", "create_language_statement", "create_event_trigger", 
		"set_statement", "create_trigger_statement", "revoke_statement", "revoke_from_cascade_restrict", 
		"grant_statement", "grant_to_rule", "comment_on_statement", "create_function_statement", 
		"function_parameters", "function_body", "function_attribute", "argmode", 
		"function_definition", "functions_definition_schema", "create_sequence_statement", 
		"sequence_body", "create_schema_statement", "create_view_statement", "create_table_statement", 
		"table_column_definition", "like_option", "table_constraint", "column_constraint", 
		"check_boolean_expression", "storage_parameter", "with_storage_parameter", 
		"storage_parameter_oid", "on_commit", "table_space", "action", "index_parameters", 
		"table_elements", "field_element", "field_type", "param_clause", "param", 
		"method_specifier", "table_space_specifier", "table_space_name", "table_partitioning_clauses", 
		"range_partitions", "range_value_clause_list", "range_value_clause", "hash_partitions", 
		"individual_hash_partitions", "individual_hash_partition", "hash_partitions_by_quantity", 
		"list_partitions", "list_value_clause_list", "list_value_partition", "column_partitions", 
		"partition_name", "drop_table_statement", "identifier", "nonreserved_keywords", 
		"unsigned_literal", "general_literal", "datetime_literal", "time_literal", 
		"timestamp_literal", "date_literal", "boolean_literal", "data_type", "predefined_type", 
		"regclass", "network_type", "character_string_type", "type_length", "national_character_string_type", 
		"binary_large_object_string_type", "numeric_type", "exact_numeric_type", 
		"approximate_numeric_type", "precision_param", "boolean_type", "datetime_type", 
		"bit_type", "binary_type", "value_expression_primary", "parenthesized_value_expression", 
		"nonparenthesized_value_expression_primary", "unsigned_value_specification", 
		"unsigned_numeric_literal", "signed_numerical_literal", "set_function_specification", 
		"aggregate_function", "general_set_function", "set_function_type", "filter_clause", 
		"grouping_operation", "case_expression", "case_abbreviation", "case_specification", 
		"simple_case", "searched_case", "simple_when_clause", "searched_when_clause", 
		"else_clause", "result", "cast_specification", "cast_operand", "cast_target", 
		"value_expression", "common_value_expression", "numeric_value_expression", 
		"term", "factor", "array", "numeric_primary", "sign", "numeric_value_function", 
		"extract_expression", "extract_field", "time_zone_field", "extract_source", 
		"string_value_expression", "character_value_expression", "character_factor", 
		"character_primary", "string_value_function", "trim_function", "trim_operands", 
		"trim_specification", "boolean_value_expression", "or_predicate", "and_predicate", 
		"boolean_factor", "boolean_test", "is_clause", "truth_value", "boolean_primary", 
		"boolean_predicand", "parenthesized_boolean_value_expression", "row_value_expression", 
		"row_value_special_case", "explicit_row_value_constructor", "row_value_predicand", 
		"row_value_constructor_predicand", "table_expression", "from_clause", 
		"table_reference_list_paren", "table_reference_list", "table_reference", 
		"joined_table", "joined_table_primary", "cross_join", "qualified_join", 
		"natural_join", "union_join", "join_type", "outer_join_type", "outer_join_type_part2", 
		"join_specification", "join_condition", "named_columns_join", "table_primary", 
		"column_name_list", "derived_table", "where_clause", "search_condition", 
		"groupby_clause", "grouping_element_list", "grouping_element", "ordinary_grouping_set", 
		"ordinary_grouping_set_list", "rollup_list", "cube_list", "empty_grouping_set", 
		"having_clause", "row_value_predicand_list", "query_expression", "query_expression_body", 
		"non_join_query_expression", "query_term", "non_join_query_term", "query_primary", 
		"non_join_query_primary", "simple_table", "explicit_table", "table_or_query_name", 
		"schema_qualified_name", "query_specification", "select_list", "select_sublist", 
		"derived_column", "qualified_asterisk", "set_qualifier", "column_reference", 
		"as_clause", "column_reference_list", "scalar_subquery", "row_subquery", 
		"table_subquery", "subquery", "predicate", "comparison_predicate", "comp_op", 
		"between_predicate", "between_predicate_part_2", "in_predicate", "in_predicate_value", 
		"in_value_list", "pattern_matching_predicate", "pattern_matcher", "negativable_matcher", 
		"regex_matcher", "null_predicate", "quantified_comparison_predicate", 
		"quantifier", "all", "some", "exists_predicate", "unique_predicate", "primary_datetime_field", 
		"non_second_primary_datetime_field", "extended_datetime_field", "routine_invocation", 
		"function_names_for_reserved_words", "function_name", "sql_argument_list", 
		"orderby_clause", "sort_specifier_paren", "sort_specifier_list", "sort_specifier", 
		"order_specification", "limit_clause", "null_ordering", "insert_statement"
	};

	@Override
	public String getGrammarFileName() { return "SQLParser.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }



	public SQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class SqlContext extends ParserRuleContext {
		public TerminalNode SEMI_COLON(int i) {
			return getToken(SQLParser.SEMI_COLON, i);
		}
		public List<TerminalNode> SEMI_COLON() { return getTokens(SQLParser.SEMI_COLON); }
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public TerminalNode EOF() { return getToken(SQLParser.EOF, 0); }
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public SqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSql(this);
		}
	}

	public final SqlContext sql() throws RecognitionException {
		SqlContext _localctx = new SqlContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << CREATE) | (1L << GRANT))) != 0) || _la==REVOKE || _la==COMMENT || _la==DROP || _la==SET) {
				{
				{
				setState(500); statement();
				setState(502);
				_la = _input.LA(1);
				if (_la==SEMI_COLON) {
					{
					setState(501); match(SEMI_COLON);
					}
				}

				}
				}
				setState(508);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(509); match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public Schema_statementContext schema_statement() {
			return getRuleContext(Schema_statementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(511); schema_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_statementContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public Data_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterData_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitData_statement(this);
		}
	}

	public final Data_statementContext data_statement() throws RecognitionException {
		Data_statementContext _localctx = new Data_statementContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_data_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(513); query_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_change_statementContext extends ParserRuleContext {
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Data_change_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_change_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterData_change_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitData_change_statement(this);
		}
	}

	public final Data_change_statementContext data_change_statement() throws RecognitionException {
		Data_change_statementContext _localctx = new Data_change_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_data_change_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(515); insert_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_statementContext extends ParserRuleContext {
		public Drop_table_statementContext drop_table_statement() {
			return getRuleContext(Drop_table_statementContext.class,0);
		}
		public Schema_createContext schema_create() {
			return getRuleContext(Schema_createContext.class,0);
		}
		public Schema_alterContext schema_alter() {
			return getRuleContext(Schema_alterContext.class,0);
		}
		public Schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchema_statement(this);
		}
	}

	public final Schema_statementContext schema_statement() throws RecognitionException {
		Schema_statementContext _localctx = new Schema_statementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_schema_statement);
		try {
			setState(520);
			switch (_input.LA(1)) {
			case CREATE:
			case GRANT:
			case REVOKE:
			case COMMENT:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(517); schema_create();
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(518); schema_alter();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 3);
				{
				setState(519); drop_table_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_createContext extends ParserRuleContext {
		public Create_function_statementContext create_function_statement() {
			return getRuleContext(Create_function_statementContext.class,0);
		}
		public Create_table_statementContext create_table_statement() {
			return getRuleContext(Create_table_statementContext.class,0);
		}
		public Create_sequence_statementContext create_sequence_statement() {
			return getRuleContext(Create_sequence_statementContext.class,0);
		}
		public Index_statementContext index_statement() {
			return getRuleContext(Index_statementContext.class,0);
		}
		public Create_language_statementContext create_language_statement() {
			return getRuleContext(Create_language_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Create_extension_statementContext create_extension_statement() {
			return getRuleContext(Create_extension_statementContext.class,0);
		}
		public Comment_on_statementContext comment_on_statement() {
			return getRuleContext(Comment_on_statementContext.class,0);
		}
		public Revoke_statementContext revoke_statement() {
			return getRuleContext(Revoke_statementContext.class,0);
		}
		public Grant_statementContext grant_statement() {
			return getRuleContext(Grant_statementContext.class,0);
		}
		public Create_schema_statementContext create_schema_statement() {
			return getRuleContext(Create_schema_statementContext.class,0);
		}
		public Create_trigger_statementContext create_trigger_statement() {
			return getRuleContext(Create_trigger_statementContext.class,0);
		}
		public Create_event_triggerContext create_event_trigger() {
			return getRuleContext(Create_event_triggerContext.class,0);
		}
		public Create_view_statementContext create_view_statement() {
			return getRuleContext(Create_view_statementContext.class,0);
		}
		public Schema_createContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_create; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchema_create(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchema_create(this);
		}
	}

	public final Schema_createContext schema_create() throws RecognitionException {
		Schema_createContext _localctx = new Schema_createContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_schema_create);
		try {
			setState(536);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(522); create_table_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(523); index_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(524); create_extension_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(525); create_trigger_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(526); create_function_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(527); create_sequence_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(528); create_schema_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(529); create_view_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(530); comment_on_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(531); revoke_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(532); set_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(533); grant_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(534); create_language_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(535); create_event_trigger();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_alterContext extends ParserRuleContext {
		public Alter_function_statementContext alter_function_statement() {
			return getRuleContext(Alter_function_statementContext.class,0);
		}
		public Alter_schema_statementContext alter_schema_statement() {
			return getRuleContext(Alter_schema_statementContext.class,0);
		}
		public Alter_table_statementContext alter_table_statement() {
			return getRuleContext(Alter_table_statementContext.class,0);
		}
		public Alter_sequence_statementContext alter_sequence_statement() {
			return getRuleContext(Alter_sequence_statementContext.class,0);
		}
		public Alter_language_statementContext alter_language_statement() {
			return getRuleContext(Alter_language_statementContext.class,0);
		}
		public Alter_default_privilegesContext alter_default_privileges() {
			return getRuleContext(Alter_default_privilegesContext.class,0);
		}
		public Schema_alterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_alter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchema_alter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchema_alter(this);
		}
	}

	public final Schema_alterContext schema_alter() throws RecognitionException {
		Schema_alterContext _localctx = new Schema_alterContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_schema_alter);
		try {
			setState(544);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(538); alter_function_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(539); alter_schema_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(540); alter_language_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(541); alter_table_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(542); alter_default_privileges();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(543); alter_sequence_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_function_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext new_name;
		public IdentifierContext new_owner;
		public Schema_qualified_nameContext new_schema;
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public Function_actionContext function_action(int i) {
			return getRuleContext(Function_actionContext.class,i);
		}
		public List<Function_actionContext> function_action() {
			return getRuleContexts(Function_actionContext.class);
		}
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Function_parametersContext function_parameters() {
			return getRuleContext(Function_parametersContext.class,0);
		}
		public Alter_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_function_statement(this);
		}
	}

	public final Alter_function_statementContext alter_function_statement() throws RecognitionException {
		Alter_function_statementContext _localctx = new Alter_function_statementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_alter_function_statement);
		int _la;
		try {
			setState(582);
			switch ( getInterpreter().adaptivePredict(_input,7,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(546); match(ALTER);
				setState(547); match(FUNCTION);
				setState(548); ((Alter_function_statementContext)_localctx).name = schema_qualified_name();
				setState(549); function_parameters();
				setState(551); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(550); function_action();
					}
					}
					setState(553); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (RETURNS - 100)) | (1L << (STRICT - 100)) | (1L << (CALLED - 100)))) != 0) || _la==EXTERNAL || ((((_la - 246)) & ~0x3f) == 0 && ((1L << (_la - 246)) & ((1L << (SECURITY - 246)) | (1L << (STABLE - 246)) | (1L << (VOLATILE - 246)))) != 0) );
				setState(556);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(555); match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(558); match(ALTER);
				setState(559); match(FUNCTION);
				setState(560); ((Alter_function_statementContext)_localctx).name = schema_qualified_name();
				setState(561); function_parameters();
				setState(562); match(RENAME);
				setState(563); match(TO);
				setState(564); ((Alter_function_statementContext)_localctx).new_name = schema_qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(566); match(ALTER);
				setState(567); match(FUNCTION);
				setState(568); ((Alter_function_statementContext)_localctx).name = schema_qualified_name();
				setState(569); function_parameters();
				setState(570); match(OWNER);
				setState(571); match(TO);
				setState(572); ((Alter_function_statementContext)_localctx).new_owner = identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(574); match(ALTER);
				setState(575); match(FUNCTION);
				setState(576); ((Alter_function_statementContext)_localctx).name = schema_qualified_name();
				setState(577); function_parameters();
				setState(578); match(SET);
				setState(579); match(SCHEMA);
				setState(580); ((Alter_function_statementContext)_localctx).new_schema = schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Alter_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_schema_statement(this);
		}
	}

	public final Alter_schema_statementContext alter_schema_statement() throws RecognitionException {
		Alter_schema_statementContext _localctx = new Alter_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_alter_schema_statement);
		try {
			setState(598);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(584); match(ALTER);
				setState(585); match(SCHEMA);
				setState(586); ((Alter_schema_statementContext)_localctx).name = identifier();
				setState(587); match(RENAME);
				setState(588); match(TO);
				setState(589); ((Alter_schema_statementContext)_localctx).new_name = identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(591); match(ALTER);
				setState(592); match(SCHEMA);
				setState(593); ((Alter_schema_statementContext)_localctx).name = identifier();
				setState(594); match(OWNER);
				setState(595); match(TO);
				setState(596); ((Alter_schema_statementContext)_localctx).new_owner = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_language_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext new_name;
		public IdentifierContext new_owner;
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Alter_language_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_language_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_language_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_language_statement(this);
		}
	}

	public final Alter_language_statementContext alter_language_statement() throws RecognitionException {
		Alter_language_statementContext _localctx = new Alter_language_statementContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_alter_language_statement);
		int _la;
		try {
			setState(620);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(600); match(ALTER);
				setState(602);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(601); match(PROCEDURAL);
					}
				}

				setState(604); match(LANGUAGE);
				setState(605); ((Alter_language_statementContext)_localctx).name = identifier();
				setState(606); match(RENAME);
				setState(607); match(TO);
				setState(608); ((Alter_language_statementContext)_localctx).new_name = identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(610); match(ALTER);
				setState(612);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(611); match(PROCEDURAL);
					}
				}

				setState(614); match(LANGUAGE);
				setState(615); ((Alter_language_statementContext)_localctx).name = identifier();
				setState(616); match(OWNER);
				setState(617); match(TO);
				setState(618); ((Alter_language_statementContext)_localctx).new_owner = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_table_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext column;
		public Schema_qualified_nameContext new_column;
		public Schema_qualified_nameContext new_name;
		public Schema_qualified_nameContext new_schema;
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Table_actionContext> table_action() {
			return getRuleContexts(Table_actionContext.class);
		}
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public Table_actionContext table_action(int i) {
			return getRuleContext(Table_actionContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Alter_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_table_statement(this);
		}
	}

	public final Alter_table_statementContext alter_table_statement() throws RecognitionException {
		Alter_table_statementContext _localctx = new Alter_table_statementContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_alter_table_statement);
		int _la;
		try {
			int _alt;
			setState(672);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(622); match(ALTER);
				setState(623); match(TABLE);
				setState(625);
				switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
				case 1:
					{
					setState(624); match(ONLY);
					}
					break;
				}
				setState(628); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(627); ((Alter_table_statementContext)_localctx).name = schema_qualified_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(630); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,13,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(636); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(632); table_action();
						setState(634);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(633); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(638); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(640); match(ALTER);
				setState(641); match(TABLE);
				setState(643);
				switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
				case 1:
					{
					setState(642); match(ONLY);
					}
					break;
				}
				setState(646); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(645); ((Alter_table_statementContext)_localctx).name = schema_qualified_name();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(648); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(650); match(RENAME);
				setState(652);
				switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
				case 1:
					{
					setState(651); match(COLUMN);
					}
					break;
				}
				setState(654); ((Alter_table_statementContext)_localctx).column = schema_qualified_name();
				setState(655); match(TO);
				setState(656); ((Alter_table_statementContext)_localctx).new_column = schema_qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(658); match(ALTER);
				setState(659); match(TABLE);
				setState(660); ((Alter_table_statementContext)_localctx).name = schema_qualified_name();
				setState(661); match(RENAME);
				setState(662); match(TO);
				setState(663); ((Alter_table_statementContext)_localctx).new_name = schema_qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(665); match(ALTER);
				setState(666); match(TABLE);
				setState(667); ((Alter_table_statementContext)_localctx).name = schema_qualified_name();
				setState(668); match(SET);
				setState(669); match(SCHEMA);
				setState(670); ((Alter_table_statementContext)_localctx).new_schema = schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_actionContext extends ParserRuleContext {
		public Schema_qualified_nameContext column;
		public Data_typeContext datatype;
		public IdentifierContext collation;
		public Value_expressionContext expression;
		public Token integer;
		public Table_attribute_optionContext attribute_option;
		public Signed_numerical_literalContext value;
		public Table_constraintContext tabl_constraint;
		public Table_constraint_using_indexContext tabl_constraint_using_index;
		public Schema_qualified_nameContext constraint_name;
		public Schema_qualified_nameContext trigger_name;
		public Schema_qualified_nameContext rewrite_rule_name;
		public Schema_qualified_nameContext index_name;
		public Schema_qualified_nameContext parent_table;
		public Schema_qualified_nameContext type_name;
		public Schema_qualified_nameContext new_owner;
		public Schema_qualified_nameContext new_tablespace;
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public With_storage_parameterContext with_storage_parameter(int i) {
			return getRuleContext(With_storage_parameterContext.class,i);
		}
		public List<Table_attribute_optionContext> table_attribute_option() {
			return getRuleContexts(Table_attribute_optionContext.class);
		}
		public List<Signed_numerical_literalContext> signed_numerical_literal() {
			return getRuleContexts(Signed_numerical_literalContext.class);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Table_column_definitionContext table_column_definition() {
			return getRuleContext(Table_column_definitionContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode EXTENDED() { return getToken(SQLParser.EXTENDED, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public Table_attribute_optionContext table_attribute_option(int i) {
			return getRuleContext(Table_attribute_optionContext.class,i);
		}
		public List<With_storage_parameterContext> with_storage_parameter() {
			return getRuleContexts(With_storage_parameterContext.class);
		}
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLParser.EXTERNAL, 0); }
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode COLLATE() { return getToken(SQLParser.COLLATE, 0); }
		public TerminalNode VALIDATE() { return getToken(SQLParser.VALIDATE, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode INHERIT() { return getToken(SQLParser.INHERIT, 0); }
		public TerminalNode CLUSTER() { return getToken(SQLParser.CLUSTER, 0); }
		public TerminalNode DISABLE() { return getToken(SQLParser.DISABLE, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode ENABLE() { return getToken(SQLParser.ENABLE, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode VALID() { return getToken(SQLParser.VALID, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode NUMBER() { return getToken(SQLParser.NUMBER, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode PLAIN() { return getToken(SQLParser.PLAIN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Table_constraint_using_indexContext table_constraint_using_index() {
			return getRuleContext(Table_constraint_using_indexContext.class,0);
		}
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode MAIN() { return getToken(SQLParser.MAIN, 0); }
		public TerminalNode OIDS() { return getToken(SQLParser.OIDS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode REPLICA() { return getToken(SQLParser.REPLICA, 0); }
		public Signed_numerical_literalContext signed_numerical_literal(int i) {
			return getRuleContext(Signed_numerical_literalContext.class,i);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Table_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_action(this);
		}
	}

	public final Table_actionContext table_action() throws RecognitionException {
		Table_actionContext _localctx = new Table_actionContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_table_action);
		int _la;
		try {
			setState(891);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(674); match(ADD);
				setState(676);
				switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					setState(675); match(COLUMN);
					}
					break;
				}
				setState(678); table_column_definition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(679); match(DROP);
				setState(681);
				switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
				case 1:
					{
					setState(680); match(COLUMN);
					}
					break;
				}
				setState(685);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(683); match(IF);
					setState(684); match(EXISTS);
					}
				}

				setState(687); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(689);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(688);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(691); match(ALTER);
				setState(693);
				switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
				case 1:
					{
					setState(692); match(COLUMN);
					}
					break;
				}
				setState(695); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(698);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(696); match(SET);
					setState(697); match(DATA);
					}
				}

				setState(700); match(TYPE);
				setState(701); ((Table_actionContext)_localctx).datatype = data_type();
				setState(704);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(702); match(COLLATE);
					setState(703); ((Table_actionContext)_localctx).collation = identifier();
					}
				}

				setState(708);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(706); match(USING);
					setState(707); ((Table_actionContext)_localctx).expression = value_expression();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(710); match(ALTER);
				setState(712);
				switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					setState(711); match(COLUMN);
					}
					break;
				}
				setState(714); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(715); match(SET);
				setState(716); match(DEFAULT);
				setState(717); ((Table_actionContext)_localctx).expression = value_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(719); match(ALTER);
				setState(721);
				switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {
				case 1:
					{
					setState(720); match(COLUMN);
					}
					break;
				}
				setState(723); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(724); match(DROP);
				setState(725); match(DEFAULT);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(727); match(ALTER);
				setState(729);
				switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
				case 1:
					{
					setState(728); match(COLUMN);
					}
					break;
				}
				setState(731); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(732); match(SET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(734); match(DROP);
				setState(735); match(NOT);
				setState(736); match(NULL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(737); match(ALTER);
				setState(739);
				switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
				case 1:
					{
					setState(738); match(COLUMN);
					}
					break;
				}
				setState(741); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(742); match(SET);
				setState(743); match(STATISTICS);
				setState(744); ((Table_actionContext)_localctx).integer = match(NUMBER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(746); match(ALTER);
				setState(748);
				switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
				case 1:
					{
					setState(747); match(COLUMN);
					}
					break;
				}
				setState(750); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(751); match(SET);
				setState(752); match(LEFT_PAREN);
				setState(759); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(753); ((Table_actionContext)_localctx).attribute_option = table_attribute_option();
					setState(754); match(EQUAL);
					setState(755); ((Table_actionContext)_localctx).value = signed_numerical_literal();
					setState(757);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(756); match(COMMA);
						}
					}

					}
					}
					setState(761); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==N_DISTINCT || _la==N_DISTINCT_INHERITED );
				setState(763); match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(765); match(ALTER);
				setState(767);
				switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
				case 1:
					{
					setState(766); match(COLUMN);
					}
					break;
				}
				setState(769); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(770); match(RESET);
				setState(771); match(LEFT_PAREN);
				setState(776); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(772); ((Table_actionContext)_localctx).attribute_option = table_attribute_option();
					setState(774);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(773); match(COMMA);
						}
					}

					}
					}
					setState(778); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==N_DISTINCT || _la==N_DISTINCT_INHERITED );
				setState(780); match(RIGHT_PAREN);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(782); match(ALTER);
				setState(784);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(783); match(COLUMN);
					}
					break;
				}
				setState(786); ((Table_actionContext)_localctx).column = schema_qualified_name();
				setState(787); match(SET);
				setState(788); match(STORAGE);
				setState(789); match(PLAIN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(791); match(EXTERNAL);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(792); match(EXTENDED);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(793); match(MAIN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(794); match(ADD);
				setState(795); ((Table_actionContext)_localctx).tabl_constraint = table_constraint();
				setState(798);
				switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
				case 1:
					{
					setState(796); match(NOT);
					setState(797); match(VALID);
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(800); match(ADD);
				setState(801); ((Table_actionContext)_localctx).tabl_constraint_using_index = table_constraint_using_index();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(802); match(VALIDATE);
				setState(803); match(CONSTRAINT);
				setState(804); ((Table_actionContext)_localctx).constraint_name = schema_qualified_name();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(805); match(DROP);
				setState(806); match(CONSTRAINT);
				setState(809);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(807); match(IF);
					setState(808); match(EXISTS);
					}
				}

				setState(811); ((Table_actionContext)_localctx).constraint_name = schema_qualified_name();
				setState(812);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(814); match(DISABLE);
				setState(815); match(TRIGGER);
				setState(819);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(816); ((Table_actionContext)_localctx).trigger_name = schema_qualified_name();
					}
					break;
				case 2:
					{
					setState(817); match(ALL);
					}
					break;
				case 3:
					{
					setState(818); match(USER);
					}
					break;
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(821); match(ENABLE);
				setState(822); match(TRIGGER);
				setState(826);
				switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
				case 1:
					{
					setState(823); ((Table_actionContext)_localctx).trigger_name = schema_qualified_name();
					}
					break;
				case 2:
					{
					setState(824); match(ALL);
					}
					break;
				case 3:
					{
					setState(825); match(USER);
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(828); match(ENABLE);
				setState(829); match(REPLICA);
				setState(830); match(TRIGGER);
				setState(831); ((Table_actionContext)_localctx).trigger_name = schema_qualified_name();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(832); match(ENABLE);
				setState(833); match(ALWAYS);
				setState(834); match(TRIGGER);
				setState(835); ((Table_actionContext)_localctx).trigger_name = schema_qualified_name();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(836); match(DISABLE);
				setState(837); match(RULE);
				setState(838); ((Table_actionContext)_localctx).rewrite_rule_name = schema_qualified_name();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(839); match(ENABLE);
				setState(840); match(RULE);
				setState(841); ((Table_actionContext)_localctx).rewrite_rule_name = schema_qualified_name();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(842); match(ENABLE);
				setState(843); match(REPLICA);
				setState(844); match(RULE);
				setState(845); ((Table_actionContext)_localctx).rewrite_rule_name = schema_qualified_name();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(846); match(ENABLE);
				setState(847); match(ALWAYS);
				setState(848); match(RULE);
				setState(849); ((Table_actionContext)_localctx).rewrite_rule_name = schema_qualified_name();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(850); match(CLUSTER);
				setState(851); match(ON);
				setState(852); ((Table_actionContext)_localctx).index_name = schema_qualified_name();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(853); match(SET);
				setState(854); match(WITHOUT);
				setState(855); match(CLUSTER);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(856); match(SET);
				setState(857); match(WITH);
				setState(858); match(OIDS);
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(859); match(SET);
				setState(860); match(WITHOUT);
				setState(861); match(OIDS);
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(862); match(SET);
				setState(863); storage_parameter();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(864); match(RESET);
				setState(865); match(LEFT_PAREN);
				setState(870); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(866); with_storage_parameter();
					setState(868);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(867); match(COMMA);
						}
					}

					}
					}
					setState(872); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WITH );
				setState(874); match(RIGHT_PAREN);
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(876); match(INHERIT);
				setState(877); ((Table_actionContext)_localctx).parent_table = schema_qualified_name();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(878); match(NO);
				setState(879); match(INHERIT);
				setState(880); ((Table_actionContext)_localctx).parent_table = schema_qualified_name();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(881); match(OF);
				setState(882); ((Table_actionContext)_localctx).type_name = schema_qualified_name();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(883); match(NOT);
				setState(884); match(OF);
				}
				break;
			case 37:
				enterOuterAlt(_localctx, 37);
				{
				setState(885); match(OWNER);
				setState(886); match(TO);
				setState(887); ((Table_actionContext)_localctx).new_owner = schema_qualified_name();
				}
				break;
			case 38:
				enterOuterAlt(_localctx, 38);
				{
				setState(888); match(SET);
				setState(889); match(TABLESPACE);
				setState(890); ((Table_actionContext)_localctx).new_tablespace = schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraint_using_indexContext extends ParserRuleContext {
		public Schema_qualified_nameContext constraint_name;
		public Schema_qualified_nameContext index_name;
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode KEY() { return getToken(SQLParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(SQLParser.PRIMARY, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public Table_constraint_using_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint_using_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_constraint_using_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_constraint_using_index(this);
		}
	}

	public final Table_constraint_using_indexContext table_constraint_using_index() throws RecognitionException {
		Table_constraint_using_indexContext _localctx = new Table_constraint_using_indexContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_table_constraint_using_index);
		int _la;
		try {
			setState(914);
			switch (_input.LA(1)) {
			case CONSTRAINT:
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(895);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(893); match(CONSTRAINT);
					setState(894); ((Table_constraint_using_indexContext)_localctx).constraint_name = schema_qualified_name();
					}
				}

				setState(897); match(UNIQUE);
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 2);
				{
				setState(898); match(PRIMARY);
				setState(899); match(KEY);
				setState(900); match(USING);
				setState(901); match(INDEX);
				setState(902); ((Table_constraint_using_indexContext)_localctx).index_name = schema_qualified_name();
				setState(906);
				switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
				case 1:
					{
					setState(903); match(DEFERRABLE);
					}
					break;
				case 2:
					{
					setState(904); match(NOT);
					setState(905); match(DEFERRABLE);
					}
					break;
				}
				setState(912);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(908); match(INITIALLY);
					setState(909); match(DEFERRED);
					}
					break;
				case 2:
					{
					setState(910); match(INITIALLY);
					setState(911); match(IMMEDIATE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_attribute_optionContext extends ParserRuleContext {
		public TerminalNode N_DISTINCT_INHERITED() { return getToken(SQLParser.N_DISTINCT_INHERITED, 0); }
		public TerminalNode N_DISTINCT() { return getToken(SQLParser.N_DISTINCT, 0); }
		public Table_attribute_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_attribute_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_attribute_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_attribute_option(this);
		}
	}

	public final Table_attribute_optionContext table_attribute_option() throws RecognitionException {
		Table_attribute_optionContext _localctx = new Table_attribute_optionContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_table_attribute_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(916);
			_la = _input.LA(1);
			if ( !(_la==N_DISTINCT || _la==N_DISTINCT_INHERITED) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_actionContext extends ParserRuleContext {
		public Token execution_cost;
		public Token result_rows;
		public IdentifierContext configuration_parameter;
		public IdentifierContext value;
		public List<TerminalNode> SET() { return getTokens(SQLParser.SET); }
		public List<TerminalNode> RESET() { return getTokens(SQLParser.RESET); }
		public TerminalNode INPUT() { return getToken(SQLParser.INPUT, 0); }
		public TerminalNode VOLATILE() { return getToken(SQLParser.VOLATILE, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode SET(int i) {
			return getToken(SQLParser.SET, i);
		}
		public TerminalNode STABLE() { return getToken(SQLParser.STABLE, 0); }
		public TerminalNode STRICT() { return getToken(SQLParser.STRICT, 0); }
		public TerminalNode COST() { return getToken(SQLParser.COST, 0); }
		public TerminalNode CALLED() { return getToken(SQLParser.CALLED, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SQLParser.IMMUTABLE, 0); }
		public List<TerminalNode> NUMBER() { return getTokens(SQLParser.NUMBER); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode INVOKER() { return getToken(SQLParser.INVOKER, 0); }
		public TerminalNode DEFINER() { return getToken(SQLParser.DEFINER, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode NULL(int i) {
			return getToken(SQLParser.NULL, i);
		}
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLParser.EXTERNAL, 0); }
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode SECURITY() { return getToken(SQLParser.SECURITY, 0); }
		public TerminalNode NUMBER(int i) {
			return getToken(SQLParser.NUMBER, i);
		}
		public TerminalNode RESET(int i) {
			return getToken(SQLParser.RESET, i);
		}
		public TerminalNode RETURNS() { return getToken(SQLParser.RETURNS, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(SQLParser.NULL); }
		public Function_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_action(this);
		}
	}

	public final Function_actionContext function_action() throws RecognitionException {
		Function_actionContext _localctx = new Function_actionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_function_action);
		int _la;
		try {
			setState(963);
			switch (_input.LA(1)) {
			case CALLED:
				enterOuterAlt(_localctx, 1);
				{
				setState(918); match(CALLED);
				setState(919); match(ON);
				setState(920); match(NULL);
				setState(921); match(INPUT);
				}
				break;
			case RETURNS:
				enterOuterAlt(_localctx, 2);
				{
				setState(922); match(RETURNS);
				setState(923); match(NULL);
				setState(924); match(ON);
				setState(925); match(NULL);
				setState(926); match(INPUT);
				}
				break;
			case STRICT:
				enterOuterAlt(_localctx, 3);
				{
				setState(927); match(STRICT);
				setState(928); match(IMMUTABLE);
				}
				break;
			case STABLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(929); match(STABLE);
				}
				break;
			case VOLATILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(930); match(VOLATILE);
				setState(932);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(931); match(EXTERNAL);
					}
				}

				setState(934); match(SECURITY);
				setState(935); match(INVOKER);
				}
				break;
			case EXTERNAL:
			case SECURITY:
				enterOuterAlt(_localctx, 6);
				{
				setState(937);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(936); match(EXTERNAL);
					}
				}

				setState(939); match(SECURITY);
				setState(940); match(DEFINER);
				setState(941); match(COST);
				setState(942); ((Function_actionContext)_localctx).execution_cost = match(NUMBER);
				setState(943); match(ROWS);
				setState(944); ((Function_actionContext)_localctx).result_rows = match(NUMBER);
				setState(945); match(SET);
				setState(946); ((Function_actionContext)_localctx).configuration_parameter = identifier();
				setState(952);
				switch (_input.LA(1)) {
				case TO:
					{
					setState(947); match(TO);
					setState(948); ((Function_actionContext)_localctx).value = identifier();
					}
					break;
				case EQUAL:
					{
					setState(949); match(EQUAL);
					setState(950); ((Function_actionContext)_localctx).value = identifier();
					}
					break;
				case DEFAULT:
					{
					setState(951); match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(954); match(SET);
				setState(955); ((Function_actionContext)_localctx).configuration_parameter = identifier();
				setState(956); match(FROM);
				setState(957); match(CURRENT);
				setState(958); match(RESET);
				setState(959); ((Function_actionContext)_localctx).configuration_parameter = identifier();
				setState(960); match(RESET);
				setState(961); match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_default_privilegesContext extends ParserRuleContext {
		public IdentifierContext target_role;
		public IdentifierContext schema_name;
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Abbreviated_grant_or_revokeContext abbreviated_grant_or_revoke() {
			return getRuleContext(Abbreviated_grant_or_revokeContext.class,0);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Alter_default_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_default_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_default_privileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_default_privileges(this);
		}
	}

	public final Alter_default_privilegesContext alter_default_privileges() throws RecognitionException {
		Alter_default_privilegesContext _localctx = new Alter_default_privilegesContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_alter_default_privileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(965); match(ALTER);
			setState(966); match(DEFAULT);
			setState(967); match(PRIVILEGES);
			setState(978);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(968); match(FOR);
				setState(969);
				_la = _input.LA(1);
				if ( !(_la==ROLE || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(974); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(970); ((Alter_default_privilegesContext)_localctx).target_role = identifier();
					setState(972);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(971); match(COMMA);
						}
					}

					}
					}
					setState(976); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				}
			}

			setState(990);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(980); match(IN);
				setState(981); match(SCHEMA);
				setState(986); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(982); ((Alter_default_privilegesContext)_localctx).schema_name = identifier();
					setState(984);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(983); match(COMMA);
						}
					}

					}
					}
					setState(988); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				}
			}

			setState(992); abbreviated_grant_or_revoke();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Abbreviated_grant_or_revokeContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode SELECT(int i) {
			return getToken(SQLParser.SELECT, i);
		}
		public Grant_to_ruleContext grant_to_rule() {
			return getRuleContext(Grant_to_ruleContext.class,0);
		}
		public List<TerminalNode> INSERT() { return getTokens(SQLParser.INSERT); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public TerminalNode FUNCTIONS() { return getToken(SQLParser.FUNCTIONS, 0); }
		public List<TerminalNode> TRUNCATE() { return getTokens(SQLParser.TRUNCATE); }
		public TerminalNode USAGE(int i) {
			return getToken(SQLParser.USAGE, i);
		}
		public TerminalNode REVOKE() { return getToken(SQLParser.REVOKE, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode TRIGGER(int i) {
			return getToken(SQLParser.TRIGGER, i);
		}
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode TRUNCATE(int i) {
			return getToken(SQLParser.TRUNCATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public Revoke_from_cascade_restrictContext revoke_from_cascade_restrict() {
			return getRuleContext(Revoke_from_cascade_restrictContext.class,0);
		}
		public TerminalNode TYPES() { return getToken(SQLParser.TYPES, 0); }
		public List<TerminalNode> SELECT() { return getTokens(SQLParser.SELECT); }
		public List<TerminalNode> USAGE() { return getTokens(SQLParser.USAGE); }
		public TerminalNode INSERT(int i) {
			return getToken(SQLParser.INSERT, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> REFERENCES() { return getTokens(SQLParser.REFERENCES); }
		public List<TerminalNode> TRIGGER() { return getTokens(SQLParser.TRIGGER); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode REFERENCES(int i) {
			return getToken(SQLParser.REFERENCES, i);
		}
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public Abbreviated_grant_or_revokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviated_grant_or_revoke; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAbbreviated_grant_or_revoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAbbreviated_grant_or_revoke(this);
		}
	}

	public final Abbreviated_grant_or_revokeContext abbreviated_grant_or_revoke() throws RecognitionException {
		Abbreviated_grant_or_revokeContext _localctx = new Abbreviated_grant_or_revokeContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_abbreviated_grant_or_revoke);
		int _la;
		try {
			setState(1130);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(994); match(GRANT);
				setState(1007);
				switch (_input.LA(1)) {
				case DELETE:
				case REFERENCES:
				case SELECT:
				case TRIGGER:
				case TRUNCATE:
				case UPDATE:
				case INSERT:
					{
					setState(999); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(995);
						_la = _input.LA(1);
						if ( !(_la==DELETE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (TRIGGER - 97)) | (1L << (TRUNCATE - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(997);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(996); match(COMMA);
							}
						}

						}
						}
						setState(1001); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DELETE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (TRIGGER - 97)) | (1L << (TRUNCATE - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT );
					}
					break;
				case ALL:
					{
					setState(1003); match(ALL);
					setState(1005);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1004); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1009); match(ON);
				setState(1010); match(TABLES);
				setState(1011); grant_to_rule();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1012); match(GRANT);
				setState(1025);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
				case USAGE:
					{
					setState(1017); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1013);
						_la = _input.LA(1);
						if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (SELECT - 107)) | (1L << (UPDATE - 107)) | (1L << (USAGE - 107)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1015);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1014); match(COMMA);
							}
						}

						}
						}
						setState(1019); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (SELECT - 107)) | (1L << (UPDATE - 107)) | (1L << (USAGE - 107)))) != 0) );
					}
					break;
				case ALL:
					{
					setState(1021); match(ALL);
					setState(1023);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1022); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1027); match(ON);
				setState(1028); match(SEQUENCES);
				setState(1029); grant_to_rule();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1030); match(GRANT);
				setState(1036);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(1031); match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(1032); match(ALL);
					setState(1034);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1033); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1038); match(ON);
				setState(1039); match(FUNCTIONS);
				setState(1040); grant_to_rule();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1041); match(GRANT);
				setState(1047);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1042); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1043); match(ALL);
					setState(1045);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1044); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1049); match(ON);
				setState(1050); match(TYPES);
				setState(1051); grant_to_rule();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1052); match(REVOKE);
				setState(1056);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1053); match(GRANT);
					setState(1054); match(OPTION);
					setState(1055); match(FOR);
					}
				}

				setState(1070);
				switch (_input.LA(1)) {
				case DELETE:
				case REFERENCES:
				case SELECT:
				case TRIGGER:
				case TRUNCATE:
				case UPDATE:
				case INSERT:
					{
					setState(1062); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1058);
						_la = _input.LA(1);
						if ( !(_la==DELETE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (TRIGGER - 97)) | (1L << (TRUNCATE - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1060);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1059); match(COMMA);
							}
						}

						}
						}
						setState(1064); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DELETE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (TRIGGER - 97)) | (1L << (TRUNCATE - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT );
					}
					break;
				case ALL:
					{
					setState(1066); match(ALL);
					setState(1068);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1067); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1072); match(ON);
				setState(1073); match(TABLES);
				setState(1074); revoke_from_cascade_restrict();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1075); match(REVOKE);
				setState(1079);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1076); match(GRANT);
					setState(1077); match(OPTION);
					setState(1078); match(FOR);
					}
				}

				setState(1093);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
				case USAGE:
					{
					setState(1085); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1081);
						_la = _input.LA(1);
						if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (SELECT - 107)) | (1L << (UPDATE - 107)) | (1L << (USAGE - 107)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1083);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1082); match(COMMA);
							}
						}

						}
						}
						setState(1087); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (SELECT - 107)) | (1L << (UPDATE - 107)) | (1L << (USAGE - 107)))) != 0) );
					}
					break;
				case ALL:
					{
					setState(1089); match(ALL);
					setState(1091);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1090); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1095); match(ON);
				setState(1096); match(SEQUENCES);
				setState(1097); revoke_from_cascade_restrict();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1098); match(REVOKE);
				setState(1102);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1099); match(GRANT);
					setState(1100); match(OPTION);
					setState(1101); match(FOR);
					}
				}

				setState(1109);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(1104); match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(1105); match(ALL);
					setState(1107);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1106); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1111); match(ON);
				setState(1112); match(FUNCTIONS);
				setState(1113); revoke_from_cascade_restrict();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1114); match(REVOKE);
				setState(1118);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1115); match(GRANT);
					setState(1116); match(OPTION);
					setState(1117); match(FOR);
					}
				}

				setState(1125);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1120); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1121); match(ALL);
					setState(1123);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1122); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1127); match(ON);
				setState(1128); match(TYPES);
				setState(1129); revoke_from_cascade_restrict();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequence_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public IdentifierContext restart;
		public Schema_qualified_nameContext new_owner;
		public Schema_qualified_nameContext new_name;
		public Schema_qualified_nameContext new_schema;
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode RESTART(int i) {
			return getToken(SQLParser.RESTART, i);
		}
		public List<TerminalNode> WITH() { return getTokens(SQLParser.WITH); }
		public Sequence_bodyContext sequence_body(int i) {
			return getRuleContext(Sequence_bodyContext.class,i);
		}
		public TerminalNode WITH(int i) {
			return getToken(SQLParser.WITH, i);
		}
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public List<TerminalNode> RESTART() { return getTokens(SQLParser.RESTART); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public List<Sequence_bodyContext> sequence_body() {
			return getRuleContexts(Sequence_bodyContext.class);
		}
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Alter_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlter_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlter_sequence_statement(this);
		}
	}

	public final Alter_sequence_statementContext alter_sequence_statement() throws RecognitionException {
		Alter_sequence_statementContext _localctx = new Alter_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_alter_sequence_statement);
		int _la;
		try {
			setState(1185);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1132); match(ALTER);
				setState(1133); match(SEQUENCE);
				setState(1136);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1134); match(IF);
					setState(1135); match(EXISTS);
					}
				}

				setState(1138); ((Alter_sequence_statementContext)_localctx).name = schema_qualified_name();
				setState(1149);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==OWNED || _la==CACHE || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (CYCLE - 159)) | (1L << (INCREMENT - 159)) | (1L << (MAXVALUE - 159)) | (1L << (MINVALUE - 159)) | (1L << (NO - 159)))) != 0) || _la==RESTART || _la==START) {
					{
					setState(1147);
					switch (_input.LA(1)) {
					case OWNED:
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case MAXVALUE:
					case MINVALUE:
					case NO:
					case START:
						{
						setState(1139); sequence_body();
						}
						break;
					case RESTART:
						{
						setState(1140); match(RESTART);
						setState(1145);
						switch ( getInterpreter().adaptivePredict(_input,91,_ctx) ) {
						case 1:
							{
							setState(1142);
							_la = _input.LA(1);
							if (_la==WITH) {
								{
								setState(1141); match(WITH);
								}
							}

							setState(1144); ((Alter_sequence_statementContext)_localctx).restart = identifier();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1151);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1152); match(ALTER);
				setState(1153); match(SEQUENCE);
				setState(1156);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1154); match(IF);
					setState(1155); match(EXISTS);
					}
				}

				setState(1158); ((Alter_sequence_statementContext)_localctx).name = schema_qualified_name();
				setState(1159); match(OWNER);
				setState(1160); match(TO);
				setState(1161); ((Alter_sequence_statementContext)_localctx).new_owner = schema_qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1163); match(ALTER);
				setState(1164); match(SEQUENCE);
				setState(1167);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1165); match(IF);
					setState(1166); match(EXISTS);
					}
				}

				setState(1169); ((Alter_sequence_statementContext)_localctx).name = schema_qualified_name();
				setState(1170); match(RENAME);
				setState(1171); match(TO);
				setState(1172); ((Alter_sequence_statementContext)_localctx).new_name = schema_qualified_name();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1174); match(ALTER);
				setState(1175); match(SEQUENCE);
				setState(1178);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1176); match(IF);
					setState(1177); match(EXISTS);
					}
				}

				setState(1180); ((Alter_sequence_statementContext)_localctx).name = schema_qualified_name();
				setState(1181); match(SET);
				setState(1182); match(SCHEMA);
				setState(1183); ((Alter_sequence_statementContext)_localctx).new_schema = schema_qualified_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext table_name;
		public Schema_qualified_nameContext method;
		public Schema_qualified_nameContext tablespace_name;
		public Boolean_value_expressionContext predic;
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public Sort_specifier_parenContext sort_specifier_paren() {
			return getRuleContext(Sort_specifier_parenContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SQLParser.CONCURRENTLY, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public Param_clauseContext param_clause() {
			return getRuleContext(Param_clauseContext.class,0);
		}
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public Index_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndex_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndex_statement(this);
		}
	}

	public final Index_statementContext index_statement() throws RecognitionException {
		Index_statementContext _localctx = new Index_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_index_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1187); match(CREATE);
			setState(1189);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(1188); match(UNIQUE);
				}
			}

			setState(1191); match(INDEX);
			setState(1193);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(1192); match(CONCURRENTLY);
				}
				break;
			}
			setState(1196);
			switch ( getInterpreter().adaptivePredict(_input,100,_ctx) ) {
			case 1:
				{
				setState(1195); ((Index_statementContext)_localctx).name = schema_qualified_name();
				}
				break;
			}
			setState(1198); match(ON);
			setState(1199); ((Index_statementContext)_localctx).table_name = schema_qualified_name();
			setState(1202);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(1200); match(USING);
				setState(1201); ((Index_statementContext)_localctx).method = schema_qualified_name();
				}
			}

			setState(1204); sort_specifier_paren();
			setState(1206);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1205); param_clause();
				}
			}

			setState(1210);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(1208); match(TABLESPACE);
				setState(1209); ((Index_statementContext)_localctx).tablespace_name = schema_qualified_name();
				}
			}

			setState(1214);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1212); match(WHERE);
				setState(1213); ((Index_statementContext)_localctx).predic = boolean_value_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_extension_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext schema_name;
		public IdentifierContext version;
		public IdentifierContext old_version;
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Create_extension_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_extension_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_extension_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_extension_statement(this);
		}
	}

	public final Create_extension_statementContext create_extension_statement() throws RecognitionException {
		Create_extension_statementContext _localctx = new Create_extension_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_create_extension_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1216); match(CREATE);
			setState(1217); match(EXTENSION);
			setState(1221);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1218); match(IF);
				setState(1219); match(NOT);
				setState(1220); match(EXISTS);
				}
			}

			setState(1223); ((Create_extension_statementContext)_localctx).name = identifier();
			setState(1225);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1224); match(WITH);
				}
			}

			setState(1229);
			_la = _input.LA(1);
			if (_la==SCHEMA) {
				{
				setState(1227); match(SCHEMA);
				setState(1228); ((Create_extension_statementContext)_localctx).schema_name = identifier();
				}
			}

			setState(1233);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(1231); match(VERSION);
				setState(1232); ((Create_extension_statementContext)_localctx).version = identifier();
				}
			}

			setState(1237);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1235); match(FROM);
				setState(1236); ((Create_extension_statementContext)_localctx).old_version = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_language_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Schema_qualified_nameContext call_handler;
		public Schema_qualified_nameContext inline_handler;
		public Schema_qualified_nameContext valfunction;
		public TerminalNode VALIDATOR() { return getToken(SQLParser.VALIDATOR, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode TRUSTED() { return getToken(SQLParser.TRUSTED, 0); }
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode INLINE() { return getToken(SQLParser.INLINE, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode HANDLER() { return getToken(SQLParser.HANDLER, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Create_language_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_language_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_language_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_language_statement(this);
		}
	}

	public final Create_language_statementContext create_language_statement() throws RecognitionException {
		Create_language_statementContext _localctx = new Create_language_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_create_language_statement);
		int _la;
		try {
			setState(1272);
			switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1239); match(CREATE);
				setState(1242);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1240); match(OR);
					setState(1241); match(REPLACE);
					}
				}

				setState(1245);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1244); match(PROCEDURAL);
					}
				}

				setState(1247); match(LANGUAGE);
				setState(1248); ((Create_language_statementContext)_localctx).name = identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1249); match(CREATE);
				setState(1252);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1250); match(OR);
					setState(1251); match(REPLACE);
					}
				}

				setState(1255);
				_la = _input.LA(1);
				if (_la==TRUSTED) {
					{
					setState(1254); match(TRUSTED);
					}
				}

				setState(1258);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1257); match(PROCEDURAL);
					}
				}

				setState(1260); match(LANGUAGE);
				setState(1261); ((Create_language_statementContext)_localctx).name = identifier();
				setState(1262); match(HANDLER);
				setState(1263); ((Create_language_statementContext)_localctx).call_handler = schema_qualified_name();
				setState(1266);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(1264); match(INLINE);
					setState(1265); ((Create_language_statementContext)_localctx).inline_handler = schema_qualified_name();
					}
				}

				setState(1270);
				_la = _input.LA(1);
				if (_la==VALIDATOR) {
					{
					setState(1268); match(VALIDATOR);
					setState(1269); ((Create_language_statementContext)_localctx).valfunction = schema_qualified_name();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_triggerContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Schema_qualified_nameContext event;
		public Schema_qualified_nameContext filter_variable;
		public Token filter_value;
		public Value_expressionContext funct_name;
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public List<TerminalNode> AND() { return getTokens(SQLParser.AND); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode AND(int i) {
			return getToken(SQLParser.AND, i);
		}
		public List<TerminalNode> Character_String_Literal() { return getTokens(SQLParser.Character_String_Literal); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public List<TerminalNode> IN() { return getTokens(SQLParser.IN); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode IN(int i) {
			return getToken(SQLParser.IN, i);
		}
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode Character_String_Literal(int i) {
			return getToken(SQLParser.Character_String_Literal, i);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public Create_event_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_event_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_event_trigger(this);
		}
	}

	public final Create_event_triggerContext create_event_trigger() throws RecognitionException {
		Create_event_triggerContext _localctx = new Create_event_triggerContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_create_event_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1274); match(CREATE);
			setState(1275); match(EVENT);
			setState(1276); match(TRIGGER);
			setState(1277); ((Create_event_triggerContext)_localctx).name = schema_qualified_name();
			setState(1278); match(ON);
			setState(1279); ((Create_event_triggerContext)_localctx).event = schema_qualified_name();
			setState(1300);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1280); match(WHEN);
				setState(1281); ((Create_event_triggerContext)_localctx).filter_variable = schema_qualified_name();
				setState(1296); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1282); match(IN);
					setState(1283); match(LEFT_PAREN);
					setState(1288); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1284); ((Create_event_triggerContext)_localctx).filter_value = match(Character_String_Literal);
						setState(1286);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1285); match(COMMA);
							}
						}

						}
						}
						setState(1290); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==Character_String_Literal );
					setState(1292); match(RIGHT_PAREN);
					setState(1294);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(1293); match(AND);
						}
					}

					}
					}
					setState(1298); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==IN );
				}
			}

			setState(1302); match(EXECUTE);
			setState(1303); match(PROCEDURE);
			setState(1304); ((Create_event_triggerContext)_localctx).funct_name = value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public IdentifierContext config_param;
		public Value_expressionContext value;
		public IdentifierContext timezone;
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode QUOTE(int i) {
			return getToken(SQLParser.QUOTE, i);
		}
		public TerminalNode SESSION() { return getToken(SQLParser.SESSION, 0); }
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SQLParser.DEFAULT); }
		public List<TerminalNode> QUOTE() { return getTokens(SQLParser.QUOTE); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SQLParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode LOCAL(int i) {
			return getToken(SQLParser.LOCAL, i);
		}
		public List<TerminalNode> LOCAL() { return getTokens(SQLParser.LOCAL); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSet_statement(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_set_statement);
		int _la;
		try {
			int _alt;
			setState(1345);
			switch ( getInterpreter().adaptivePredict(_input,131,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1306); match(SET);
				setState(1308);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==SESSION) {
					{
					setState(1307);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(1310); ((Set_statementContext)_localctx).config_param = identifier();
				setState(1311);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(1323); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1318);
						switch (_input.LA(1)) {
						case ANY:
						case CASE:
						case CAST:
						case FALSE:
						case LEFT:
						case NOT:
						case NULL:
						case RIGHT:
						case SOME:
						case TRUE:
						case ADMIN:
						case ALWAYS:
						case AVG:
						case BETWEEN:
						case BY:
						case CACHE:
						case CALLED:
						case CLASS:
						case CENTURY:
						case CHARACTER:
						case CHECK:
						case CLUSTER:
						case COLLECT:
						case COALESCE:
						case COLUMN:
						case COMMENT:
						case COMMENTS:
						case COMMIT:
						case CONCURRENTLY:
						case CONFIGURATION:
						case COST:
						case COUNT:
						case CUBE:
						case CURRENT:
						case CYCLE:
						case DATA:
						case DAY:
						case DEC:
						case DECADE:
						case DEFINER:
						case DICTIONARY:
						case DISABLE:
						case DOW:
						case DOY:
						case DROP:
						case ENABLE:
						case EPOCH:
						case EVENT:
						case EVERY:
						case EXISTS:
						case EXTENDED:
						case EXTERNAL:
						case EXTRACT:
						case FAMILY:
						case FILTER:
						case FIRST:
						case FORMAT:
						case FUSION:
						case GROUPING:
						case HASH:
						case INHERIT:
						case INDEX:
						case INCREMENT:
						case INPUT:
						case INSERT:
						case INTERSECTION:
						case ISCACHABLE:
						case ISODOW:
						case ISOYEAR:
						case ISSTRICT:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LESS:
						case LIST:
						case LOCATION:
						case MAIN:
						case MATCH:
						case MAX:
						case MAXVALUE:
						case MICROSECONDS:
						case MILLENNIUM:
						case MILLISECONDS:
						case MIN:
						case MINVALUE:
						case MINUTE:
						case MONTH:
						case NATIONAL:
						case NO:
						case NONE:
						case NULLIF:
						case OBJECT:
						case ON:
						case ONLY:
						case OPTION:
						case OPTIONS:
						case OVERWRITE:
						case PARSER:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PLAIN:
						case PRECISION:
						case PUBLIC:
						case PURGE:
						case QUARTER:
						case RANGE:
						case REGCONFIG:
						case REGEXP:
						case RENAME:
						case REPLICA:
						case RESET:
						case RESTART:
						case RLIKE:
						case ROLLUP:
						case SEARCH:
						case SECOND:
						case SECURITY:
						case SERVER:
						case SET:
						case SIMILAR:
						case SIMPLE:
						case STABLE:
						case START:
						case STATISTICS:
						case STORAGE:
						case STDDEV_POP:
						case STDDEV_SAMP:
						case SUBPARTITION:
						case SUM:
						case TABLESPACE:
						case TEMPLATE:
						case THAN:
						case TIMEZONE:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TRIM:
						case TO:
						case TYPE:
						case TYPES:
						case UNKNOWN:
						case UNLOGGED:
						case USER:
						case VALID:
						case VALIDATE:
						case VALUES:
						case VAR_SAMP:
						case VAR_POP:
						case VARYING:
						case VERSION:
						case VOLATILE:
						case WEEK:
						case WINDOW:
						case WRAPPER:
						case YEAR:
						case ZONE:
						case BOOLEAN:
						case BOOL:
						case BIT:
						case VARBIT:
						case INT1:
						case INT2:
						case INT4:
						case INT8:
						case TINYINT:
						case SMALLINT:
						case INT:
						case INTEGER:
						case BIGINT:
						case FLOAT4:
						case FLOAT8:
						case REAL:
						case FLOAT:
						case DOUBLE:
						case NUMERIC:
						case DECIMAL:
						case CHAR:
						case VARCHAR:
						case NCHAR:
						case NVARCHAR:
						case DATE:
						case TIME:
						case TIMETZ:
						case TIMESTAMP:
						case TIMESTAMPTZ:
						case TEXT:
						case UUID:
						case VARBINARY:
						case BLOB:
						case BYTEA:
						case INET4:
						case INET:
						case INTERVAL:
						case VOID:
						case LEFT_PAREN:
						case PLUS:
						case MINUS:
						case DOUBLE_QUOTE:
						case NUMBER:
						case REAL_NUMBER:
						case Identifier:
						case QuotedIdentifier:
						case Character_String_Literal:
							{
							setState(1312); ((Set_statementContext)_localctx).value = value_expression();
							}
							break;
						case QUOTE:
							{
							setState(1313); match(QUOTE);
							setState(1314); ((Set_statementContext)_localctx).value = value_expression();
							setState(1315); match(QUOTE);
							}
							break;
						case DEFAULT:
							{
							setState(1317); match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1321);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1320); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1325); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,126,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1327); match(SET);
				setState(1329);
				_la = _input.LA(1);
				if (_la==LOCAL || _la==SESSION) {
					{
					setState(1328);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(1331); match(TIME);
				setState(1332); match(ZONE);
				setState(1341); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1336);
						switch (_input.LA(1)) {
						case ADMIN:
						case ALWAYS:
						case AVG:
						case BETWEEN:
						case BY:
						case CACHE:
						case CALLED:
						case CLASS:
						case CENTURY:
						case CHARACTER:
						case CHECK:
						case CLUSTER:
						case COLLECT:
						case COALESCE:
						case COLUMN:
						case COMMENT:
						case COMMENTS:
						case COMMIT:
						case CONCURRENTLY:
						case CONFIGURATION:
						case COST:
						case COUNT:
						case CUBE:
						case CURRENT:
						case CYCLE:
						case DATA:
						case DAY:
						case DEC:
						case DECADE:
						case DEFINER:
						case DICTIONARY:
						case DISABLE:
						case DOW:
						case DOY:
						case DROP:
						case ENABLE:
						case EPOCH:
						case EVENT:
						case EVERY:
						case EXISTS:
						case EXTENDED:
						case EXTERNAL:
						case EXTRACT:
						case FAMILY:
						case FILTER:
						case FIRST:
						case FORMAT:
						case FUSION:
						case GROUPING:
						case HASH:
						case INHERIT:
						case INDEX:
						case INCREMENT:
						case INPUT:
						case INSERT:
						case INTERSECTION:
						case ISCACHABLE:
						case ISODOW:
						case ISOYEAR:
						case ISSTRICT:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LESS:
						case LIST:
						case LOCATION:
						case MAIN:
						case MATCH:
						case MAX:
						case MAXVALUE:
						case MICROSECONDS:
						case MILLENNIUM:
						case MILLISECONDS:
						case MIN:
						case MINVALUE:
						case MINUTE:
						case MONTH:
						case NATIONAL:
						case NO:
						case NONE:
						case NULLIF:
						case OBJECT:
						case ON:
						case ONLY:
						case OPTION:
						case OPTIONS:
						case OVERWRITE:
						case PARSER:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PLAIN:
						case PRECISION:
						case PUBLIC:
						case PURGE:
						case QUARTER:
						case RANGE:
						case REGCONFIG:
						case REGEXP:
						case RENAME:
						case REPLICA:
						case RESET:
						case RESTART:
						case RLIKE:
						case ROLLUP:
						case SEARCH:
						case SECOND:
						case SECURITY:
						case SERVER:
						case SET:
						case SIMILAR:
						case SIMPLE:
						case STABLE:
						case START:
						case STATISTICS:
						case STORAGE:
						case STDDEV_POP:
						case STDDEV_SAMP:
						case SUBPARTITION:
						case SUM:
						case TABLESPACE:
						case TEMPLATE:
						case THAN:
						case TIMEZONE:
						case TIMEZONE_HOUR:
						case TIMEZONE_MINUTE:
						case TRIM:
						case TO:
						case TYPE:
						case TYPES:
						case UNKNOWN:
						case UNLOGGED:
						case USER:
						case VALID:
						case VALIDATE:
						case VALUES:
						case VAR_SAMP:
						case VAR_POP:
						case VARYING:
						case VERSION:
						case VOLATILE:
						case WEEK:
						case WINDOW:
						case WRAPPER:
						case YEAR:
						case ZONE:
						case BOOLEAN:
						case BOOL:
						case BIT:
						case VARBIT:
						case INT1:
						case INT2:
						case INT4:
						case INT8:
						case TINYINT:
						case SMALLINT:
						case INT:
						case INTEGER:
						case BIGINT:
						case FLOAT4:
						case FLOAT8:
						case REAL:
						case FLOAT:
						case DOUBLE:
						case NUMERIC:
						case DECIMAL:
						case CHAR:
						case VARCHAR:
						case NCHAR:
						case NVARCHAR:
						case DATE:
						case TIME:
						case TIMETZ:
						case TIMESTAMP:
						case TIMESTAMPTZ:
						case TEXT:
						case UUID:
						case VARBINARY:
						case BLOB:
						case BYTEA:
						case INET4:
						case INET:
						case INTERVAL:
						case VOID:
						case DOUBLE_QUOTE:
						case Identifier:
						case QuotedIdentifier:
							{
							setState(1333); ((Set_statementContext)_localctx).timezone = identifier();
							}
							break;
						case LOCAL:
							{
							setState(1334); match(LOCAL);
							}
							break;
						case DEFAULT:
							{
							setState(1335); match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1339);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1338); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1343); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,130,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_trigger_statementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext columnName;
		public Schema_qualified_nameContext tabl_name;
		public Schema_qualified_nameContext referenced_table_name;
		public Schema_qualified_nameContext func_name;
		public IdentifierContext arguments;
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode BEFORE() { return getToken(SQLParser.BEFORE, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode OF(int i) {
			return getToken(SQLParser.OF, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(SQLParser.INSERT); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public TerminalNode EACH() { return getToken(SQLParser.EACH, 0); }
		public List<TerminalNode> TRUNCATE() { return getTokens(SQLParser.TRUNCATE); }
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public TerminalNode INSTEAD() { return getToken(SQLParser.INSTEAD, 0); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode TRUNCATE(int i) {
			return getToken(SQLParser.TRUNCATE, i);
		}
		public List<TerminalNode> OF() { return getTokens(SQLParser.OF); }
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode OR(int i) {
			return getToken(SQLParser.OR, i);
		}
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode STATEMENT() { return getToken(SQLParser.STATEMENT, 0); }
		public List<TerminalNode> OR() { return getTokens(SQLParser.OR); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode INSERT(int i) {
			return getToken(SQLParser.INSERT, i);
		}
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode AFTER() { return getToken(SQLParser.AFTER, 0); }
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Create_trigger_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_trigger_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_trigger_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_trigger_statement(this);
		}
	}

	public final Create_trigger_statementContext create_trigger_statement() throws RecognitionException {
		Create_trigger_statementContext _localctx = new Create_trigger_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_create_trigger_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1347); match(CREATE);
			setState(1349);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(1348); match(CONSTRAINT);
				}
			}

			setState(1351); match(TRIGGER);
			setState(1352); ((Create_trigger_statementContext)_localctx).name = identifier();
			setState(1357);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(1353); match(BEFORE);
				}
				break;
			case INSTEAD:
				{
				{
				setState(1354); match(INSTEAD);
				setState(1355); match(OF);
				}
				}
				break;
			case AFTER:
				{
				setState(1356); match(AFTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1379); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1374);
				switch (_input.LA(1)) {
				case INSERT:
					{
					setState(1359); match(INSERT);
					}
					break;
				case DELETE:
					{
					setState(1360); match(DELETE);
					}
					break;
				case TRUNCATE:
					{
					setState(1361); match(TRUNCATE);
					}
					break;
				case UPDATE:
					{
					{
					setState(1362); match(UPDATE);
					setState(1372);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(1363); match(OF);
						setState(1368); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(1364); ((Create_trigger_statementContext)_localctx).columnName = identifier();
								setState(1366);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(1365); match(COMMA);
									}
								}

								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(1370); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,135,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1377);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(1376); match(OR);
					}
				}

				}
				}
				setState(1381); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DELETE || _la==TRUNCATE || _la==UPDATE || _la==INSERT );
			setState(1383); match(ON);
			setState(1384); ((Create_trigger_statementContext)_localctx).tabl_name = schema_qualified_name();
			setState(1387);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1385); match(FROM);
				setState(1386); ((Create_trigger_statementContext)_localctx).referenced_table_name = schema_qualified_name();
				}
			}

			setState(1398);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				{
				setState(1389); match(NOT);
				setState(1390); match(DEFERRABLE);
				}
				break;
			case 2:
				{
				setState(1392);
				_la = _input.LA(1);
				if (_la==DEFERRABLE) {
					{
					setState(1391); match(DEFERRABLE);
					}
				}

				{
				setState(1394); match(INITIALLY);
				setState(1395); match(IMMEDIATE);
				}
				}
				break;
			case 3:
				{
				{
				setState(1396); match(INITIALLY);
				setState(1397); match(DEFERRED);
				}
				}
				break;
			}
			setState(1406);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(1400); match(FOR);
				setState(1402);
				_la = _input.LA(1);
				if (_la==EACH) {
					{
					setState(1401); match(EACH);
					}
				}

				setState(1404); match(ROW);
				}
				break;
			case STATEMENT:
				{
				setState(1405); match(STATEMENT);
				}
				break;
			case EXECUTE:
			case WHEN:
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1410);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(1408); match(WHEN);
				{
				setState(1409); boolean_value_expression();
				}
				}
			}

			setState(1412); match(EXECUTE);
			setState(1413); match(PROCEDURE);
			setState(1414); ((Create_trigger_statementContext)_localctx).func_name = schema_qualified_name();
			setState(1415); match(LEFT_PAREN);
			setState(1422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0)) {
				{
				{
				setState(1416); ((Create_trigger_statementContext)_localctx).arguments = identifier();
				setState(1418);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1417); match(COMMA);
					}
				}

				}
				}
				setState(1424);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1425); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext table_name;
		public IdentifierContext schema_name;
		public IdentifierContext column;
		public Schema_qualified_nameContext sequence_name;
		public IdentifierContext database_name;
		public Schema_qualified_nameContext fdw_name;
		public IdentifierContext server_name;
		public IdentifierContext lang_name;
		public IdentifierContext loid;
		public IdentifierContext tablespace_name;
		public IdentifierContext role_name;
		public TerminalNode TABLE(int i) {
			return getToken(SQLParser.TABLE, i);
		}
		public TerminalNode SELECT(int i) {
			return getToken(SQLParser.SELECT, i);
		}
		public List<TerminalNode> INSERT() { return getTokens(SQLParser.INSERT); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public List<TerminalNode> TRUNCATE() { return getTokens(SQLParser.TRUNCATE); }
		public TerminalNode REVOKE() { return getToken(SQLParser.REVOKE, 0); }
		public Functions_definition_schemaContext functions_definition_schema() {
			return getRuleContext(Functions_definition_schemaContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode TRUNCATE(int i) {
			return getToken(SQLParser.TRUNCATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public List<TerminalNode> TABLE() { return getTokens(SQLParser.TABLE); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public Revoke_from_cascade_restrictContext revoke_from_cascade_restrict() {
			return getRuleContext(Revoke_from_cascade_restrictContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public List<TerminalNode> USAGE() { return getTokens(SQLParser.USAGE); }
		public List<TerminalNode> REFERENCES() { return getTokens(SQLParser.REFERENCES); }
		public List<TerminalNode> TRIGGER() { return getTokens(SQLParser.TRIGGER); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public List<TerminalNode> CONNECT() { return getTokens(SQLParser.CONNECT); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode CONNECT(int i) {
			return getToken(SQLParser.CONNECT, i);
		}
		public TerminalNode ADMIN() { return getToken(SQLParser.ADMIN, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode USAGE(int i) {
			return getToken(SQLParser.USAGE, i);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode TRIGGER(int i) {
			return getToken(SQLParser.TRIGGER, i);
		}
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public List<TerminalNode> TEMP() { return getTokens(SQLParser.TEMP); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public List<TerminalNode> CREATE() { return getTokens(SQLParser.CREATE); }
		public TerminalNode CREATE(int i) {
			return getToken(SQLParser.CREATE, i);
		}
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public List<TerminalNode> TEMPORARY() { return getTokens(SQLParser.TEMPORARY); }
		public List<TerminalNode> SELECT() { return getTokens(SQLParser.SELECT); }
		public TerminalNode INSERT(int i) {
			return getToken(SQLParser.INSERT, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode TEMP(int i) {
			return getToken(SQLParser.TEMP, i);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TEMPORARY(int i) {
			return getToken(SQLParser.TEMPORARY, i);
		}
		public Function_definitionContext function_definition() {
			return getRuleContext(Function_definitionContext.class,0);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode REFERENCES(int i) {
			return getToken(SQLParser.REFERENCES, i);
		}
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public Revoke_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRevoke_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRevoke_statement(this);
		}
	}

	public final Revoke_statementContext revoke_statement() throws RecognitionException {
		Revoke_statementContext _localctx = new Revoke_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_revoke_statement);
		int _la;
		try {
			int _alt;
			setState(1806);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1427); match(REVOKE);
				setState(1431);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1428); match(GRANT);
					setState(1429); match(OPTION);
					setState(1430); match(FOR);
					}
				}

				setState(1442);
				switch (_input.LA(1)) {
				case DELETE:
				case REFERENCES:
				case SELECT:
				case TRIGGER:
				case TRUNCATE:
				case UPDATE:
				case INSERT:
					{
					setState(1434); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1433);
						_la = _input.LA(1);
						if ( !(_la==DELETE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (TRIGGER - 97)) | (1L << (TRUNCATE - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1436); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DELETE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (TRIGGER - 97)) | (1L << (TRUNCATE - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT );
					}
					break;
				case ALL:
					{
					setState(1438); match(ALL);
					setState(1440);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1439); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1444); match(ON);
				setState(1462);
				switch (_input.LA(1)) {
				case TABLE:
				case ADMIN:
				case ALWAYS:
				case AVG:
				case BETWEEN:
				case BY:
				case CACHE:
				case CALLED:
				case CLASS:
				case CENTURY:
				case CHARACTER:
				case CHECK:
				case CLUSTER:
				case COLLECT:
				case COALESCE:
				case COLUMN:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case CONCURRENTLY:
				case CONFIGURATION:
				case COST:
				case COUNT:
				case CUBE:
				case CURRENT:
				case CYCLE:
				case DATA:
				case DAY:
				case DEC:
				case DECADE:
				case DEFINER:
				case DICTIONARY:
				case DISABLE:
				case DOW:
				case DOY:
				case DROP:
				case ENABLE:
				case EPOCH:
				case EVENT:
				case EVERY:
				case EXISTS:
				case EXTENDED:
				case EXTERNAL:
				case EXTRACT:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FUSION:
				case GROUPING:
				case HASH:
				case INHERIT:
				case INDEX:
				case INCREMENT:
				case INPUT:
				case INSERT:
				case INTERSECTION:
				case ISCACHABLE:
				case ISODOW:
				case ISOYEAR:
				case ISSTRICT:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LESS:
				case LIST:
				case LOCATION:
				case MAIN:
				case MATCH:
				case MAX:
				case MAXVALUE:
				case MICROSECONDS:
				case MILLENNIUM:
				case MILLISECONDS:
				case MIN:
				case MINVALUE:
				case MINUTE:
				case MONTH:
				case NATIONAL:
				case NO:
				case NONE:
				case NULLIF:
				case OBJECT:
				case ON:
				case ONLY:
				case OPTION:
				case OPTIONS:
				case OVERWRITE:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PLAIN:
				case PRECISION:
				case PUBLIC:
				case PURGE:
				case QUARTER:
				case RANGE:
				case REGCONFIG:
				case REGEXP:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RLIKE:
				case ROLLUP:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SERVER:
				case SET:
				case SIMILAR:
				case SIMPLE:
				case STABLE:
				case START:
				case STATISTICS:
				case STORAGE:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUBPARTITION:
				case SUM:
				case TABLESPACE:
				case TEMPLATE:
				case THAN:
				case TIMEZONE:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TRIM:
				case TO:
				case TYPE:
				case TYPES:
				case UNKNOWN:
				case UNLOGGED:
				case USER:
				case VALID:
				case VALIDATE:
				case VALUES:
				case VAR_SAMP:
				case VAR_POP:
				case VARYING:
				case VERSION:
				case VOLATILE:
				case WEEK:
				case WINDOW:
				case WRAPPER:
				case YEAR:
				case ZONE:
				case BOOLEAN:
				case BOOL:
				case BIT:
				case VARBIT:
				case INT1:
				case INT2:
				case INT4:
				case INT8:
				case TINYINT:
				case SMALLINT:
				case INT:
				case INTEGER:
				case BIGINT:
				case FLOAT4:
				case FLOAT8:
				case REAL:
				case FLOAT:
				case DOUBLE:
				case NUMERIC:
				case DECIMAL:
				case CHAR:
				case VARCHAR:
				case NCHAR:
				case NVARCHAR:
				case DATE:
				case TIME:
				case TIMETZ:
				case TIMESTAMP:
				case TIMESTAMPTZ:
				case TEXT:
				case UUID:
				case VARBINARY:
				case BLOB:
				case BYTEA:
				case INET4:
				case INET:
				case INTERVAL:
				case VOID:
				case DOUBLE_QUOTE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(1449); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1446);
						_la = _input.LA(1);
						if (_la==TABLE) {
							{
							setState(1445); match(TABLE);
							}
						}

						setState(1448); ((Revoke_statementContext)_localctx).table_name = schema_qualified_name();
						}
						}
						setState(1451); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & ((1L << (TABLE - 114)) | (1L << (ADMIN - 114)) | (1L << (ALWAYS - 114)) | (1L << (AVG - 114)) | (1L << (BETWEEN - 114)) | (1L << (BY - 114)) | (1L << (CACHE - 114)) | (1L << (CALLED - 114)) | (1L << (CLASS - 114)) | (1L << (CENTURY - 114)) | (1L << (CHARACTER - 114)) | (1L << (CHECK - 114)) | (1L << (CLUSTER - 114)) | (1L << (COLLECT - 114)) | (1L << (COALESCE - 114)) | (1L << (COLUMN - 114)) | (1L << (COMMENT - 114)) | (1L << (COMMENTS - 114)) | (1L << (COMMIT - 114)) | (1L << (CONCURRENTLY - 114)) | (1L << (CONFIGURATION - 114)) | (1L << (COST - 114)) | (1L << (COUNT - 114)) | (1L << (CUBE - 114)) | (1L << (CURRENT - 114)) | (1L << (CYCLE - 114)) | (1L << (DATA - 114)) | (1L << (DAY - 114)) | (1L << (DEC - 114)) | (1L << (DECADE - 114)) | (1L << (DEFINER - 114)) | (1L << (DICTIONARY - 114)) | (1L << (DISABLE - 114)) | (1L << (DOW - 114)) | (1L << (DOY - 114)) | (1L << (DROP - 114)) | (1L << (ENABLE - 114)) | (1L << (EPOCH - 114)) | (1L << (EVENT - 114)) | (1L << (EVERY - 114)) | (1L << (EXISTS - 114)) | (1L << (EXTENDED - 114)) | (1L << (EXTERNAL - 114)) | (1L << (EXTRACT - 114)))) != 0) || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (FAMILY - 178)) | (1L << (FILTER - 178)) | (1L << (FIRST - 178)) | (1L << (FORMAT - 178)) | (1L << (FUSION - 178)) | (1L << (GROUPING - 178)) | (1L << (HASH - 178)) | (1L << (INHERIT - 178)) | (1L << (INDEX - 178)) | (1L << (INCREMENT - 178)) | (1L << (INPUT - 178)) | (1L << (INSERT - 178)) | (1L << (INTERSECTION - 178)) | (1L << (ISCACHABLE - 178)) | (1L << (ISODOW - 178)) | (1L << (ISOYEAR - 178)) | (1L << (ISSTRICT - 178)) | (1L << (LANGUAGE - 178)) | (1L << (LARGE - 178)) | (1L << (LAST - 178)) | (1L << (LESS - 178)) | (1L << (LIST - 178)) | (1L << (LOCATION - 178)) | (1L << (MAIN - 178)) | (1L << (MATCH - 178)) | (1L << (MAX - 178)) | (1L << (MAXVALUE - 178)) | (1L << (MICROSECONDS - 178)) | (1L << (MILLENNIUM - 178)) | (1L << (MILLISECONDS - 178)) | (1L << (MIN - 178)) | (1L << (MINVALUE - 178)) | (1L << (MINUTE - 178)) | (1L << (MONTH - 178)) | (1L << (NATIONAL - 178)) | (1L << (NO - 178)) | (1L << (NONE - 178)) | (1L << (NULLIF - 178)) | (1L << (OBJECT - 178)) | (1L << (ON - 178)) | (1L << (ONLY - 178)) | (1L << (OPTION - 178)) | (1L << (OPTIONS - 178)) | (1L << (OVERWRITE - 178)) | (1L << (PARSER - 178)) | (1L << (PARTIAL - 178)) | (1L << (PARTITION - 178)) | (1L << (PARTITIONS - 178)) | (1L << (PLAIN - 178)) | (1L << (PRECISION - 178)) | (1L << (PUBLIC - 178)) | (1L << (PURGE - 178)) | (1L << (QUARTER - 178)) | (1L << (RANGE - 178)) | (1L << (REGCONFIG - 178)) | (1L << (REGEXP - 178)) | (1L << (RENAME - 178)) | (1L << (REPLICA - 178)) | (1L << (RESET - 178)) | (1L << (RESTART - 178)))) != 0) || ((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & ((1L << (RLIKE - 242)) | (1L << (ROLLUP - 242)) | (1L << (SEARCH - 242)) | (1L << (SECOND - 242)) | (1L << (SECURITY - 242)) | (1L << (SERVER - 242)) | (1L << (SET - 242)) | (1L << (SIMILAR - 242)) | (1L << (SIMPLE - 242)) | (1L << (STABLE - 242)) | (1L << (START - 242)) | (1L << (STATISTICS - 242)) | (1L << (STORAGE - 242)) | (1L << (STDDEV_POP - 242)) | (1L << (STDDEV_SAMP - 242)) | (1L << (SUBPARTITION - 242)) | (1L << (SUM - 242)) | (1L << (TABLESPACE - 242)) | (1L << (TEMPLATE - 242)) | (1L << (THAN - 242)) | (1L << (TIMEZONE - 242)) | (1L << (TIMEZONE_HOUR - 242)) | (1L << (TIMEZONE_MINUTE - 242)) | (1L << (TRIM - 242)) | (1L << (TO - 242)) | (1L << (TYPE - 242)) | (1L << (TYPES - 242)) | (1L << (UNKNOWN - 242)) | (1L << (UNLOGGED - 242)) | (1L << (USER - 242)) | (1L << (VALID - 242)) | (1L << (VALIDATE - 242)) | (1L << (VALUES - 242)) | (1L << (VAR_SAMP - 242)) | (1L << (VAR_POP - 242)) | (1L << (VARYING - 242)) | (1L << (VERSION - 242)) | (1L << (VOLATILE - 242)) | (1L << (WEEK - 242)) | (1L << (WINDOW - 242)) | (1L << (WRAPPER - 242)) | (1L << (YEAR - 242)) | (1L << (ZONE - 242)) | (1L << (BOOLEAN - 242)) | (1L << (BOOL - 242)) | (1L << (BIT - 242)) | (1L << (VARBIT - 242)) | (1L << (INT1 - 242)) | (1L << (INT2 - 242)) | (1L << (INT4 - 242)) | (1L << (INT8 - 242)) | (1L << (TINYINT - 242)) | (1L << (SMALLINT - 242)) | (1L << (INT - 242)) | (1L << (INTEGER - 242)) | (1L << (BIGINT - 242)) | (1L << (FLOAT4 - 242)) | (1L << (FLOAT8 - 242)) | (1L << (REAL - 242)) | (1L << (FLOAT - 242)) | (1L << (DOUBLE - 242)) | (1L << (NUMERIC - 242)))) != 0) || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (DECIMAL - 306)) | (1L << (CHAR - 306)) | (1L << (VARCHAR - 306)) | (1L << (NCHAR - 306)) | (1L << (NVARCHAR - 306)) | (1L << (DATE - 306)) | (1L << (TIME - 306)) | (1L << (TIMETZ - 306)) | (1L << (TIMESTAMP - 306)) | (1L << (TIMESTAMPTZ - 306)) | (1L << (TEXT - 306)) | (1L << (UUID - 306)) | (1L << (VARBINARY - 306)) | (1L << (BLOB - 306)) | (1L << (BYTEA - 306)) | (1L << (INET4 - 306)) | (1L << (INET - 306)) | (1L << (INTERVAL - 306)) | (1L << (VOID - 306)) | (1L << (DOUBLE_QUOTE - 306)) | (1L << (Identifier - 306)) | (1L << (QuotedIdentifier - 306)))) != 0) );
					}
					break;
				case ALL:
					{
					setState(1453); match(ALL);
					setState(1454); match(TABLES);
					setState(1455); match(IN);
					setState(1456); match(SCHEMA);
					setState(1458); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1457); ((Revoke_statementContext)_localctx).schema_name = identifier();
						}
						}
						setState(1460); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1464); revoke_from_cascade_restrict();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1466); match(REVOKE);
				setState(1470);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1467); match(GRANT);
					setState(1468); match(OPTION);
					setState(1469); match(FOR);
					}
				}

				setState(1503);
				switch (_input.LA(1)) {
				case REFERENCES:
				case SELECT:
				case UPDATE:
				case INSERT:
					{
					setState(1484); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1472);
						_la = _input.LA(1);
						if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1473); match(LEFT_PAREN);
						setState(1478); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(1474); ((Revoke_statementContext)_localctx).column = identifier();
							setState(1476);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1475); match(COMMA);
								}
							}

							}
							}
							setState(1480); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
						setState(1482); match(RIGHT_PAREN);
						}
						}
						setState(1486); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT );
					}
					break;
				case ALL:
					{
					setState(1488); match(ALL);
					setState(1490);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1489); match(PRIVILEGES);
						}
					}

					setState(1492); match(LEFT_PAREN);
					setState(1497); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1493); ((Revoke_statementContext)_localctx).column = identifier();
						setState(1495);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1494); match(COMMA);
							}
						}

						}
						}
						setState(1499); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
					setState(1501); match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1505); match(ON);
				setState(1507);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(1506); match(TABLE);
					}
				}

				setState(1513); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1509); ((Revoke_statementContext)_localctx).table_name = schema_qualified_name();
					setState(1511);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1510); match(COMMA);
						}
					}

					}
					}
					setState(1515); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(1517); revoke_from_cascade_restrict();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1519); match(REVOKE);
				setState(1523);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1520); match(GRANT);
					setState(1521); match(OPTION);
					setState(1522); match(FOR);
					}
				}

				setState(1534);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
				case USAGE:
					{
					setState(1526); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1525);
						_la = _input.LA(1);
						if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (SELECT - 107)) | (1L << (UPDATE - 107)) | (1L << (USAGE - 107)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1528); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (SELECT - 107)) | (1L << (UPDATE - 107)) | (1L << (USAGE - 107)))) != 0) );
					}
					break;
				case ALL:
					{
					setState(1530); match(ALL);
					setState(1532);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1531); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1536); match(ON);
				setState(1558);
				switch (_input.LA(1)) {
				case SEQUENCE:
					{
					setState(1537); match(SEQUENCE);
					setState(1542); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1538); ((Revoke_statementContext)_localctx).sequence_name = schema_qualified_name();
						setState(1540);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1539); match(COMMA);
							}
						}

						}
						}
						setState(1544); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
					}
					break;
				case ALL:
					{
					setState(1546); match(ALL);
					setState(1547); match(SEQUENCES);
					setState(1548); match(IN);
					setState(1549); match(SCHEMA);
					setState(1554); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1550); ((Revoke_statementContext)_localctx).schema_name = identifier();
						setState(1552);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1551); match(COMMA);
							}
						}

						}
						}
						setState(1556); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1560); revoke_from_cascade_restrict();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1562); match(REVOKE);
				setState(1566);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1563); match(GRANT);
					setState(1564); match(OPTION);
					setState(1565); match(FOR);
					}
				}

				setState(1577);
				switch (_input.LA(1)) {
				case CONNECT:
				case CREATE:
				case TEMP:
				case TEMPORARY:
					{
					setState(1569); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1568);
						_la = _input.LA(1);
						if ( !(_la==CONNECT || _la==CREATE || _la==TEMP || _la==TEMPORARY) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						}
						setState(1571); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==CONNECT || _la==CREATE || _la==TEMP || _la==TEMPORARY );
					}
					break;
				case ALL:
					{
					setState(1573); match(ALL);
					setState(1575);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1574); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1579); match(ON);
				setState(1580); match(DATABASE);
				setState(1585); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1581); ((Revoke_statementContext)_localctx).database_name = identifier();
					setState(1583);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1582); match(COMMA);
						}
					}

					}
					}
					setState(1587); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(1589); revoke_from_cascade_restrict();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1591); match(REVOKE);
				setState(1595);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1592); match(GRANT);
					setState(1593); match(OPTION);
					setState(1594); match(FOR);
					}
				}

				setState(1602);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1597); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1598); match(ALL);
					setState(1600);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1599); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1604); match(ON);
				setState(1605); match(FOREIGN);
				setState(1606); match(DATA);
				setState(1607); match(WRAPPER);
				setState(1612); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1608); ((Revoke_statementContext)_localctx).fdw_name = schema_qualified_name();
					setState(1610);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1609); match(COMMA);
						}
					}

					}
					}
					setState(1614); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(1616); revoke_from_cascade_restrict();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1618); match(REVOKE);
				setState(1622);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1619); match(GRANT);
					setState(1620); match(OPTION);
					setState(1621); match(FOR);
					}
				}

				setState(1629);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1624); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1625); match(ALL);
					setState(1627);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1626); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1631); match(ON);
				setState(1632); match(FOREIGN);
				setState(1633); match(SERVER);
				setState(1638); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1634); ((Revoke_statementContext)_localctx).server_name = identifier();
					setState(1636);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1635); match(COMMA);
						}
					}

					}
					}
					setState(1640); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(1642); revoke_from_cascade_restrict();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1644); match(REVOKE);
				setState(1648);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1645); match(GRANT);
					setState(1646); match(OPTION);
					setState(1647); match(FOR);
					}
				}

				setState(1655);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(1650); match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(1651); match(ALL);
					setState(1653);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1652); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1657); match(ON);
				setState(1660);
				switch (_input.LA(1)) {
				case FUNCTION:
					{
					setState(1658); function_definition();
					}
					break;
				case ALL:
					{
					setState(1659); functions_definition_schema();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1662); revoke_from_cascade_restrict();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1664); match(REVOKE);
				setState(1668);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1665); match(GRANT);
					setState(1666); match(OPTION);
					setState(1667); match(FOR);
					}
				}

				setState(1675);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1670); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1671); match(ALL);
					setState(1673);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1672); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1677); match(ON);
				setState(1678); match(LANGUAGE);
				setState(1683); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1679); ((Revoke_statementContext)_localctx).lang_name = identifier();
					setState(1681);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1680); match(COMMA);
						}
					}

					}
					}
					setState(1685); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(1687); revoke_from_cascade_restrict();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1689); match(REVOKE);
				setState(1693);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1690); match(GRANT);
					setState(1691); match(OPTION);
					setState(1692); match(FOR);
					}
				}

				setState(1708);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
					{
					setState(1700); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(1700);
						switch (_input.LA(1)) {
						case SELECT:
							{
							setState(1695); match(SELECT);
							}
							break;
						case UPDATE:
							{
							setState(1696); match(UPDATE);
							setState(1698);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1697); match(COMMA);
								}
							}

							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						setState(1702); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SELECT || _la==UPDATE );
					}
					break;
				case ALL:
					{
					setState(1704); match(ALL);
					setState(1706);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1705); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1710); match(ON);
				setState(1711); match(LARGE);
				setState(1712); match(OBJECT);
				setState(1717); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1713); ((Revoke_statementContext)_localctx).loid = identifier();
					setState(1715);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1714); match(COMMA);
						}
					}

					}
					}
					setState(1719); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(1721); revoke_from_cascade_restrict();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1723); match(REVOKE);
				setState(1727);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1724); match(GRANT);
					setState(1725); match(OPTION);
					setState(1726); match(FOR);
					}
				}

				setState(1741);
				switch (_input.LA(1)) {
				case CREATE:
				case USAGE:
					{
					setState(1733); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1729);
						_la = _input.LA(1);
						if ( !(_la==CREATE || _la==USAGE) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1731);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1730); match(COMMA);
							}
						}

						}
						}
						setState(1735); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==CREATE || _la==USAGE );
					}
					break;
				case ALL:
					{
					setState(1737); match(ALL);
					setState(1739);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1738); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1743); match(ON);
				setState(1744); match(SCHEMA);
				setState(1749); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1745); ((Revoke_statementContext)_localctx).schema_name = identifier();
					setState(1747);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1746); match(COMMA);
						}
					}

					}
					}
					setState(1751); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(1753); revoke_from_cascade_restrict();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1755); match(REVOKE);
				setState(1759);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1756); match(GRANT);
					setState(1757); match(OPTION);
					setState(1758); match(FOR);
					}
				}

				setState(1766);
				switch (_input.LA(1)) {
				case CREATE:
					{
					setState(1761); match(CREATE);
					}
					break;
				case ALL:
					{
					setState(1762); match(ALL);
					setState(1764);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1763); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1768); match(ON);
				setState(1769); match(TABLESPACE);
				setState(1774); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1770); ((Revoke_statementContext)_localctx).tablespace_name = identifier();
					setState(1772);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1771); match(COMMA);
						}
					}

					}
					}
					setState(1776); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(1778); revoke_from_cascade_restrict();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1780); match(REVOKE);
				setState(1784);
				switch ( getInterpreter().adaptivePredict(_input,221,_ctx) ) {
				case 1:
					{
					setState(1781); match(ADMIN);
					setState(1782); match(OPTION);
					setState(1783); match(FOR);
					}
					break;
				}
				setState(1790); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1786); ((Revoke_statementContext)_localctx).role_name = identifier();
					setState(1788);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1787); match(COMMA);
						}
					}

					}
					}
					setState(1792); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(1794); match(FROM);
				setState(1799); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1795); ((Revoke_statementContext)_localctx).role_name = identifier();
						setState(1797);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1796); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1801); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,225,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1804);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(1803);
					_la = _input.LA(1);
					if ( !(_la==CASCADE || _la==RESTRICT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Revoke_from_cascade_restrictContext extends ParserRuleContext {
		public IdentifierContext role_name;
		public List<TerminalNode> PUBLIC() { return getTokens(SQLParser.PUBLIC); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode GROUP(int i) {
			return getToken(SQLParser.GROUP, i);
		}
		public TerminalNode PUBLIC(int i) {
			return getToken(SQLParser.PUBLIC, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<TerminalNode> GROUP() { return getTokens(SQLParser.GROUP); }
		public Revoke_from_cascade_restrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revoke_from_cascade_restrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRevoke_from_cascade_restrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRevoke_from_cascade_restrict(this);
		}
	}

	public final Revoke_from_cascade_restrictContext revoke_from_cascade_restrict() throws RecognitionException {
		Revoke_from_cascade_restrictContext _localctx = new Revoke_from_cascade_restrictContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_revoke_from_cascade_restrict);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1808); match(FROM);
			setState(1817); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(1817);
					switch ( getInterpreter().adaptivePredict(_input,230,_ctx) ) {
					case 1:
						{
						setState(1810);
						_la = _input.LA(1);
						if (_la==GROUP) {
							{
							setState(1809); match(GROUP);
							}
						}

						setState(1812); ((Revoke_from_cascade_restrictContext)_localctx).role_name = identifier();
						}
						break;
					case 2:
						{
						setState(1813); match(PUBLIC);
						setState(1815);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1814); match(COMMA);
							}
						}

						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1819); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,231,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1822);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1821);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext tabl_name;
		public IdentifierContext schem_name;
		public IdentifierContext column;
		public IdentifierContext sequence_name;
		public IdentifierContext schema_name;
		public IdentifierContext database_name;
		public IdentifierContext fdw_name;
		public IdentifierContext server_name;
		public IdentifierContext lang_name;
		public IdentifierContext loid;
		public IdentifierContext tablespace_name;
		public IdentifierContext role_name;
		public TerminalNode TABLE(int i) {
			return getToken(SQLParser.TABLE, i);
		}
		public TerminalNode SELECT(int i) {
			return getToken(SQLParser.SELECT, i);
		}
		public Grant_to_ruleContext grant_to_rule() {
			return getRuleContext(Grant_to_ruleContext.class,0);
		}
		public List<TerminalNode> INSERT() { return getTokens(SQLParser.INSERT); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public List<TerminalNode> TRUNCATE() { return getTokens(SQLParser.TRUNCATE); }
		public Functions_definition_schemaContext functions_definition_schema() {
			return getRuleContext(Functions_definition_schemaContext.class,0);
		}
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public List<TerminalNode> GRANT() { return getTokens(SQLParser.GRANT); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode TRUNCATE(int i) {
			return getToken(SQLParser.TRUNCATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public List<TerminalNode> TABLE() { return getTokens(SQLParser.TABLE); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<TerminalNode> USAGE() { return getTokens(SQLParser.USAGE); }
		public List<TerminalNode> REFERENCES() { return getTokens(SQLParser.REFERENCES); }
		public List<TerminalNode> TRIGGER() { return getTokens(SQLParser.TRIGGER); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public List<TerminalNode> CONNECT() { return getTokens(SQLParser.CONNECT); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode CONNECT(int i) {
			return getToken(SQLParser.CONNECT, i);
		}
		public TerminalNode ADMIN() { return getToken(SQLParser.ADMIN, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public TerminalNode GRANT(int i) {
			return getToken(SQLParser.GRANT, i);
		}
		public TerminalNode USAGE(int i) {
			return getToken(SQLParser.USAGE, i);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode TRIGGER(int i) {
			return getToken(SQLParser.TRIGGER, i);
		}
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public List<TerminalNode> TEMP() { return getTokens(SQLParser.TEMP); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode SEQUENCE(int i) {
			return getToken(SQLParser.SEQUENCE, i);
		}
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public List<TerminalNode> CREATE() { return getTokens(SQLParser.CREATE); }
		public TerminalNode CREATE(int i) {
			return getToken(SQLParser.CREATE, i);
		}
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public List<TerminalNode> TEMPORARY() { return getTokens(SQLParser.TEMPORARY); }
		public List<TerminalNode> SELECT() { return getTokens(SQLParser.SELECT); }
		public TerminalNode INSERT(int i) {
			return getToken(SQLParser.INSERT, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> SEQUENCE() { return getTokens(SQLParser.SEQUENCE); }
		public TerminalNode TEMP(int i) {
			return getToken(SQLParser.TEMP, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TEMPORARY(int i) {
			return getToken(SQLParser.TEMPORARY, i);
		}
		public Function_definitionContext function_definition() {
			return getRuleContext(Function_definitionContext.class,0);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public TerminalNode REFERENCES(int i) {
			return getToken(SQLParser.REFERENCES, i);
		}
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public Grant_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrant_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrant_statement(this);
		}
	}

	public final Grant_statementContext grant_statement() throws RecognitionException {
		Grant_statementContext _localctx = new Grant_statementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_grant_statement);
		int _la;
		try {
			int _alt;
			setState(2152);
			switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1824); match(GRANT);
				setState(1837);
				switch (_input.LA(1)) {
				case DELETE:
				case REFERENCES:
				case SELECT:
				case TRIGGER:
				case TRUNCATE:
				case UPDATE:
				case INSERT:
					{
					setState(1829); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1825);
						_la = _input.LA(1);
						if ( !(_la==DELETE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (TRIGGER - 97)) | (1L << (TRUNCATE - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1827);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1826); match(COMMA);
							}
						}

						}
						}
						setState(1831); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DELETE || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (TRIGGER - 97)) | (1L << (TRUNCATE - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT );
					}
					break;
				case ALL:
					{
					setState(1833); match(ALL);
					setState(1835);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1834); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1839); match(ON);
				setState(1863);
				switch (_input.LA(1)) {
				case TABLE:
				case ADMIN:
				case ALWAYS:
				case AVG:
				case BETWEEN:
				case BY:
				case CACHE:
				case CALLED:
				case CLASS:
				case CENTURY:
				case CHARACTER:
				case CHECK:
				case CLUSTER:
				case COLLECT:
				case COALESCE:
				case COLUMN:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case CONCURRENTLY:
				case CONFIGURATION:
				case COST:
				case COUNT:
				case CUBE:
				case CURRENT:
				case CYCLE:
				case DATA:
				case DAY:
				case DEC:
				case DECADE:
				case DEFINER:
				case DICTIONARY:
				case DISABLE:
				case DOW:
				case DOY:
				case DROP:
				case ENABLE:
				case EPOCH:
				case EVENT:
				case EVERY:
				case EXISTS:
				case EXTENDED:
				case EXTERNAL:
				case EXTRACT:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FORMAT:
				case FUSION:
				case GROUPING:
				case HASH:
				case INHERIT:
				case INDEX:
				case INCREMENT:
				case INPUT:
				case INSERT:
				case INTERSECTION:
				case ISCACHABLE:
				case ISODOW:
				case ISOYEAR:
				case ISSTRICT:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LESS:
				case LIST:
				case LOCATION:
				case MAIN:
				case MATCH:
				case MAX:
				case MAXVALUE:
				case MICROSECONDS:
				case MILLENNIUM:
				case MILLISECONDS:
				case MIN:
				case MINVALUE:
				case MINUTE:
				case MONTH:
				case NATIONAL:
				case NO:
				case NONE:
				case NULLIF:
				case OBJECT:
				case ON:
				case ONLY:
				case OPTION:
				case OPTIONS:
				case OVERWRITE:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PLAIN:
				case PRECISION:
				case PUBLIC:
				case PURGE:
				case QUARTER:
				case RANGE:
				case REGCONFIG:
				case REGEXP:
				case RENAME:
				case REPLICA:
				case RESET:
				case RESTART:
				case RLIKE:
				case ROLLUP:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SERVER:
				case SET:
				case SIMILAR:
				case SIMPLE:
				case STABLE:
				case START:
				case STATISTICS:
				case STORAGE:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUBPARTITION:
				case SUM:
				case TABLESPACE:
				case TEMPLATE:
				case THAN:
				case TIMEZONE:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TRIM:
				case TO:
				case TYPE:
				case TYPES:
				case UNKNOWN:
				case UNLOGGED:
				case USER:
				case VALID:
				case VALIDATE:
				case VALUES:
				case VAR_SAMP:
				case VAR_POP:
				case VARYING:
				case VERSION:
				case VOLATILE:
				case WEEK:
				case WINDOW:
				case WRAPPER:
				case YEAR:
				case ZONE:
				case BOOLEAN:
				case BOOL:
				case BIT:
				case VARBIT:
				case INT1:
				case INT2:
				case INT4:
				case INT8:
				case TINYINT:
				case SMALLINT:
				case INT:
				case INTEGER:
				case BIGINT:
				case FLOAT4:
				case FLOAT8:
				case REAL:
				case FLOAT:
				case DOUBLE:
				case NUMERIC:
				case DECIMAL:
				case CHAR:
				case VARCHAR:
				case NCHAR:
				case NVARCHAR:
				case DATE:
				case TIME:
				case TIMETZ:
				case TIMESTAMP:
				case TIMESTAMPTZ:
				case TEXT:
				case UUID:
				case VARBINARY:
				case BLOB:
				case BYTEA:
				case INET4:
				case INET:
				case INTERVAL:
				case VOID:
				case DOUBLE_QUOTE:
				case Identifier:
				case QuotedIdentifier:
					{
					{
					setState(1841);
					_la = _input.LA(1);
					if (_la==TABLE) {
						{
						setState(1840); match(TABLE);
						}
					}

					setState(1847); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1843); ((Grant_statementContext)_localctx).tabl_name = schema_qualified_name();
							setState(1845);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1844); match(COMMA);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1849); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,239,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					break;
				case ALL:
					{
					{
					setState(1851); match(ALL);
					setState(1852); match(TABLES);
					setState(1853); match(IN);
					setState(1854); match(SCHEMA);
					setState(1859); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1855); ((Grant_statementContext)_localctx).schem_name = identifier();
							setState(1857);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1856); match(COMMA);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1861); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,241,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1865); grant_to_rule();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1867); match(GRANT);
				setState(1893);
				switch (_input.LA(1)) {
				case REFERENCES:
				case SELECT:
				case UPDATE:
				case INSERT:
					{
					setState(1877); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1868);
						_la = _input.LA(1);
						if ( !(((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1873); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(1869); ((Grant_statementContext)_localctx).column = identifier();
								setState(1871);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(1870); match(COMMA);
									}
								}

								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(1875); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,244,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						}
						setState(1879); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (REFERENCES - 97)) | (1L << (SELECT - 97)) | (1L << (UPDATE - 97)))) != 0) || _la==INSERT );
					}
					break;
				case ALL:
					{
					setState(1881); match(ALL);
					setState(1883);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1882); match(PRIVILEGES);
						}
					}

					setState(1889); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1885); ((Grant_statementContext)_localctx).column = identifier();
							setState(1887);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1886); match(COMMA);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1891); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,248,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1895); match(ON);
				setState(1903); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1897);
						_la = _input.LA(1);
						if (_la==TABLE) {
							{
							setState(1896); match(TABLE);
							}
						}

						setState(1899); ((Grant_statementContext)_localctx).tabl_name = schema_qualified_name();
						setState(1901);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1900); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1905); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,252,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1907); grant_to_rule();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1909); match(GRANT);
				setState(1922);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
				case USAGE:
					{
					setState(1914); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1910);
						_la = _input.LA(1);
						if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (SELECT - 107)) | (1L << (UPDATE - 107)) | (1L << (USAGE - 107)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1912);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1911); match(COMMA);
							}
						}

						}
						}
						setState(1916); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (SELECT - 107)) | (1L << (UPDATE - 107)) | (1L << (USAGE - 107)))) != 0) );
					}
					break;
				case ALL:
					{
					setState(1918); match(ALL);
					setState(1920);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1919); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1924); match(ON);
				setState(1946);
				switch (_input.LA(1)) {
				case SEQUENCE:
					{
					setState(1930); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1925); match(SEQUENCE);
						setState(1926); ((Grant_statementContext)_localctx).sequence_name = identifier();
						setState(1928);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1927); match(COMMA);
							}
						}

						}
						}
						setState(1932); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SEQUENCE );
					}
					break;
				case ALL:
					{
					setState(1934); match(ALL);
					setState(1935); match(SEQUENCES);
					setState(1936); match(IN);
					setState(1937); match(SCHEMA);
					setState(1942); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(1938); ((Grant_statementContext)_localctx).schema_name = identifier();
							setState(1940);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1939); match(COMMA);
								}
							}

							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1944); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,260,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1948); grant_to_rule();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1950); match(GRANT);
				setState(1963);
				switch (_input.LA(1)) {
				case CONNECT:
				case CREATE:
				case TEMP:
				case TEMPORARY:
					{
					setState(1955); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1951);
						_la = _input.LA(1);
						if ( !(_la==CONNECT || _la==CREATE || _la==TEMP || _la==TEMPORARY) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(1953);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1952); match(COMMA);
							}
						}

						}
						}
						setState(1957); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==CONNECT || _la==CREATE || _la==TEMP || _la==TEMPORARY );
					}
					break;
				case ALL:
					{
					setState(1959); match(ALL);
					setState(1961);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1960); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1965); match(ON);
				setState(1966); match(DATABASE);
				setState(1971); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1967); ((Grant_statementContext)_localctx).database_name = identifier();
						setState(1969);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1968); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1973); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,267,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1975); grant_to_rule();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1977); match(GRANT);
				setState(1983);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(1978); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(1979); match(ALL);
					setState(1981);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(1980); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1985); match(ON);
				setState(1986); match(FOREIGN);
				setState(1987); match(DATA);
				setState(1988); match(WRAPPER);
				setState(1993); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1989); ((Grant_statementContext)_localctx).fdw_name = identifier();
						setState(1991);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1990); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1995); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,271,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1997); grant_to_rule();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1999); match(GRANT);
				setState(2005);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(2000); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(2001); match(ALL);
					setState(2003);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2002); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2007); match(ON);
				setState(2008); match(FOREIGN);
				setState(2009); match(SERVER);
				setState(2014); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2010); ((Grant_statementContext)_localctx).server_name = identifier();
						setState(2012);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2011); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2016); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2018); grant_to_rule();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2020); match(GRANT);
				setState(2026);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(2021); match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(2022); match(ALL);
					setState(2024);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2023); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2028); match(ON);
				setState(2031);
				switch (_input.LA(1)) {
				case FUNCTION:
					{
					setState(2029); function_definition();
					}
					break;
				case ALL:
					{
					setState(2030); functions_definition_schema();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2033); grant_to_rule();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2035); match(GRANT);
				setState(2041);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(2036); match(USAGE);
					}
					break;
				case ALL:
					{
					setState(2037); match(ALL);
					setState(2039);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2038); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2043); match(ON);
				setState(2044); match(LANGUAGE);
				setState(2049); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2045); ((Grant_statementContext)_localctx).lang_name = identifier();
						setState(2047);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2046); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2051); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,282,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2053); grant_to_rule();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2055); match(GRANT);
				setState(2068);
				switch (_input.LA(1)) {
				case SELECT:
				case UPDATE:
					{
					setState(2060); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2056);
						_la = _input.LA(1);
						if ( !(_la==SELECT || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(2058);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2057); match(COMMA);
							}
						}

						}
						}
						setState(2062); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==SELECT || _la==UPDATE );
					}
					break;
				case ALL:
					{
					setState(2064); match(ALL);
					setState(2066);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2065); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2070); match(ON);
				setState(2071); match(LARGE);
				setState(2072); match(OBJECT);
				setState(2077); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2073); ((Grant_statementContext)_localctx).loid = identifier();
						setState(2075);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2074); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2079); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,288,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2081); grant_to_rule();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2083); match(GRANT);
				setState(2096);
				switch (_input.LA(1)) {
				case CREATE:
				case USAGE:
					{
					setState(2088); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2084);
						_la = _input.LA(1);
						if ( !(_la==CREATE || _la==USAGE) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						setState(2086);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2085); match(COMMA);
							}
						}

						}
						}
						setState(2090); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==CREATE || _la==USAGE );
					}
					break;
				case ALL:
					{
					setState(2092); match(ALL);
					setState(2094);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2093); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2098); match(ON);
				setState(2099); match(SCHEMA);
				setState(2104); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2100); ((Grant_statementContext)_localctx).schema_name = identifier();
						setState(2102);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2101); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2106); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,294,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2108); grant_to_rule();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2110); match(GRANT);
				setState(2116);
				switch (_input.LA(1)) {
				case CREATE:
					{
					setState(2111); match(CREATE);
					}
					break;
				case ALL:
					{
					setState(2112); match(ALL);
					setState(2114);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2113); match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2118); match(ON);
				setState(2119); match(TABLESPACE);
				setState(2124); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2120); ((Grant_statementContext)_localctx).tablespace_name = identifier();
						setState(2122);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2121); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2126); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,298,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2128); grant_to_rule();
				setState(2129); match(GRANT);
				setState(2134); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2130); ((Grant_statementContext)_localctx).role_name = identifier();
						setState(2132);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2131); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2136); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,300,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2138); match(TO);
				setState(2143); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2139); ((Grant_statementContext)_localctx).role_name = identifier();
						setState(2141);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2140); match(COMMA);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2145); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,302,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(2150);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2147); match(WITH);
					setState(2148); match(ADMIN);
					setState(2149); match(OPTION);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grant_to_ruleContext extends ParserRuleContext {
		public IdentifierContext role_name;
		public List<TerminalNode> PUBLIC() { return getTokens(SQLParser.PUBLIC); }
		public TerminalNode GROUP(int i) {
			return getToken(SQLParser.GROUP, i);
		}
		public TerminalNode PUBLIC(int i) {
			return getToken(SQLParser.PUBLIC, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> GROUP() { return getTokens(SQLParser.GROUP); }
		public Grant_to_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grant_to_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrant_to_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrant_to_rule(this);
		}
	}

	public final Grant_to_ruleContext grant_to_rule() throws RecognitionException {
		Grant_to_ruleContext _localctx = new Grant_to_ruleContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_grant_to_rule);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2154); match(TO);
			setState(2165); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2156);
					_la = _input.LA(1);
					if (_la==GROUP) {
						{
						setState(2155); match(GROUP);
						}
					}

					setState(2160);
					switch ( getInterpreter().adaptivePredict(_input,306,_ctx) ) {
					case 1:
						{
						{
						setState(2158); ((Grant_to_ruleContext)_localctx).role_name = identifier();
						}
						}
						break;
					case 2:
						{
						setState(2159); match(PUBLIC);
						}
						break;
					}
					setState(2163);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2162); match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2167); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,308,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2172);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2169); match(WITH);
				setState(2170); match(GRANT);
				setState(2171); match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comment_on_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext agg_name;
		public Data_typeContext agg_type;
		public Data_typeContext source_type;
		public Data_typeContext target_type;
		public Schema_qualified_nameContext object_name;
		public Schema_qualified_nameContext column_name;
		public Schema_qualified_nameContext constraint_name;
		public Schema_qualified_nameContext table_name;
		public IdentifierContext large_object_oid;
		public Schema_qualified_nameContext operator_name;
		public Data_typeContext left_type;
		public Data_typeContext right_type;
		public IdentifierContext index_method;
		public Schema_qualified_nameContext rule_name;
		public Schema_qualified_nameContext trigger_name;
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode CONVERSION() { return getToken(SQLParser.CONVERSION, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode COLLATION() { return getToken(SQLParser.COLLATION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public TerminalNode COMMENT() { return getToken(SQLParser.COMMENT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public Function_definitionContext function_definition() {
			return getRuleContext(Function_definitionContext.class,0);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Comment_on_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comment_on_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterComment_on_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitComment_on_statement(this);
		}
	}

	public final Comment_on_statementContext comment_on_statement() throws RecognitionException {
		Comment_on_statementContext _localctx = new Comment_on_statementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_comment_on_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2174); match(COMMENT);
			setState(2175); match(ON);
			setState(2294);
			switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				setState(2176); match(AGGREGATE);
				setState(2177); ((Comment_on_statementContext)_localctx).agg_name = schema_qualified_name();
				setState(2178); match(LEFT_PAREN);
				setState(2185);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (SETOF - 109)) | (1L << (TRIGGER - 109)) | (1L << (CHARACTER - 109)) | (1L << (DEC - 109)))) != 0) || _la==NATIONAL || _la==REGCONFIG || ((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (BOOLEAN - 286)) | (1L << (BOOL - 286)) | (1L << (BIT - 286)) | (1L << (VARBIT - 286)) | (1L << (INT1 - 286)) | (1L << (INT2 - 286)) | (1L << (INT4 - 286)) | (1L << (INT8 - 286)) | (1L << (TINYINT - 286)) | (1L << (SMALLINT - 286)) | (1L << (INT - 286)) | (1L << (INTEGER - 286)) | (1L << (BIGINT - 286)) | (1L << (FLOAT4 - 286)) | (1L << (FLOAT8 - 286)) | (1L << (REAL - 286)) | (1L << (REGCLASS - 286)) | (1L << (FLOAT - 286)) | (1L << (DOUBLE - 286)) | (1L << (NUMERIC - 286)) | (1L << (DECIMAL - 286)) | (1L << (CHAR - 286)) | (1L << (VARCHAR - 286)) | (1L << (NCHAR - 286)) | (1L << (NVARCHAR - 286)) | (1L << (DATE - 286)) | (1L << (TIME - 286)) | (1L << (TIMETZ - 286)) | (1L << (TIMESTAMP - 286)) | (1L << (TIMESTAMPTZ - 286)) | (1L << (TEXT - 286)) | (1L << (UUID - 286)) | (1L << (BINARY - 286)) | (1L << (VARBINARY - 286)) | (1L << (BLOB - 286)) | (1L << (BYTEA - 286)) | (1L << (INET4 - 286)) | (1L << (INET - 286)) | (1L << (INTERVAL - 286)) | (1L << (VOID - 286)))) != 0)) {
					{
					{
					setState(2179); ((Comment_on_statementContext)_localctx).agg_type = data_type();
					setState(2181);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2180); match(COMMA);
						}
					}

					}
					}
					setState(2187);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2188); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2190); match(CAST);
				setState(2191); match(LEFT_PAREN);
				setState(2192); ((Comment_on_statementContext)_localctx).source_type = data_type();
				setState(2193); match(AS);
				setState(2194); ((Comment_on_statementContext)_localctx).target_type = data_type();
				setState(2195); match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(2197); match(COLLATION);
				setState(2198); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 4:
				{
				setState(2199); match(COLUMN);
				setState(2200); ((Comment_on_statementContext)_localctx).column_name = schema_qualified_name();
				}
				break;
			case 5:
				{
				setState(2201); match(CONSTRAINT);
				setState(2202); ((Comment_on_statementContext)_localctx).constraint_name = schema_qualified_name();
				setState(2203); match(ON);
				setState(2204); ((Comment_on_statementContext)_localctx).table_name = schema_qualified_name();
				}
				break;
			case 6:
				{
				setState(2206); match(CONVERSION);
				setState(2207); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 7:
				{
				setState(2208); match(DATABASE);
				setState(2209); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 8:
				{
				setState(2210); match(DOMAIN);
				setState(2211); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 9:
				{
				setState(2212); match(EXTENSION);
				setState(2213); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 10:
				{
				setState(2214); match(FOREIGN);
				setState(2215); match(DATA);
				setState(2216); match(WRAPPER);
				setState(2217); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 11:
				{
				setState(2218); match(FOREIGN);
				setState(2219); match(TABLE);
				setState(2220); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 12:
				{
				setState(2221); function_definition();
				}
				break;
			case 13:
				{
				setState(2222); match(INDEX);
				setState(2223); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 14:
				{
				setState(2224); match(LARGE);
				setState(2225); match(OBJECT);
				setState(2226); ((Comment_on_statementContext)_localctx).large_object_oid = identifier();
				}
				break;
			case 15:
				{
				setState(2227); match(OPERATOR);
				setState(2228); ((Comment_on_statementContext)_localctx).operator_name = schema_qualified_name();
				setState(2229); match(LEFT_PAREN);
				setState(2230); ((Comment_on_statementContext)_localctx).left_type = data_type();
				setState(2231); match(COMMA);
				setState(2232); ((Comment_on_statementContext)_localctx).right_type = data_type();
				setState(2233); match(RIGHT_PAREN);
				}
				break;
			case 16:
				{
				setState(2235); match(OPERATOR);
				setState(2236); match(CLASS);
				setState(2237); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				setState(2238); match(USING);
				setState(2239); ((Comment_on_statementContext)_localctx).index_method = identifier();
				}
				break;
			case 17:
				{
				setState(2241); match(OPERATOR);
				setState(2242); match(FAMILY);
				setState(2243); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				setState(2244); match(USING);
				setState(2245); ((Comment_on_statementContext)_localctx).index_method = identifier();
				}
				break;
			case 18:
				{
				setState(2248);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(2247); match(PROCEDURAL);
					}
				}

				setState(2250); match(LANGUAGE);
				setState(2251); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 19:
				{
				setState(2252); match(ROLE);
				setState(2253); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 20:
				{
				setState(2254); match(RULE);
				setState(2255); ((Comment_on_statementContext)_localctx).rule_name = schema_qualified_name();
				setState(2256); match(ON);
				setState(2257); ((Comment_on_statementContext)_localctx).table_name = schema_qualified_name();
				}
				break;
			case 21:
				{
				setState(2259); match(SCHEMA);
				setState(2260); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 22:
				{
				setState(2261); match(SEQUENCE);
				setState(2262); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 23:
				{
				setState(2263); match(SERVER);
				setState(2264); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 24:
				{
				setState(2265); match(TABLE);
				setState(2266); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 25:
				{
				setState(2267); match(TABLESPACE);
				setState(2268); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 26:
				{
				setState(2269); match(TEXT);
				setState(2270); match(SEARCH);
				setState(2271); match(CONFIGURATION);
				setState(2272); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 27:
				{
				setState(2273); match(TEXT);
				setState(2274); match(SEARCH);
				setState(2275); match(DICTIONARY);
				setState(2276); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 28:
				{
				setState(2277); match(TEXT);
				setState(2278); match(SEARCH);
				setState(2279); match(PARSER);
				setState(2280); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 29:
				{
				setState(2281); match(TEXT);
				setState(2282); match(SEARCH);
				setState(2283); match(TEMPLATE);
				setState(2284); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 30:
				{
				setState(2285); match(TRIGGER);
				setState(2286); ((Comment_on_statementContext)_localctx).trigger_name = schema_qualified_name();
				setState(2287); match(ON);
				setState(2288); ((Comment_on_statementContext)_localctx).table_name = schema_qualified_name();
				}
				break;
			case 31:
				{
				setState(2290); match(TYPE);
				setState(2291); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			case 32:
				{
				setState(2292); match(VIEW);
				setState(2293); ((Comment_on_statementContext)_localctx).object_name = schema_qualified_name();
				}
				break;
			}
			setState(2296); match(IS);
			setState(2297); match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_function_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public Value_expressionContext rettype;
		public Data_typeContext rettype_data;
		public IdentifierContext column_name;
		public Data_typeContext column_type;
		public IdentifierContext lang_name;
		public Token execution_cost;
		public Token result_rows;
		public IdentifierContext configuration_parameter;
		public IdentifierContext value;
		public Function_attributeContext attribute;
		public TerminalNode VOLATILE(int i) {
			return getToken(SQLParser.VOLATILE, i);
		}
		public TerminalNode TO(int i) {
			return getToken(SQLParser.TO, i);
		}
		public List<Function_bodyContext> function_body() {
			return getRuleContexts(Function_bodyContext.class);
		}
		public List<TerminalNode> Character_String_Literal() { return getTokens(SQLParser.Character_String_Literal); }
		public TerminalNode AS(int i) {
			return getToken(SQLParser.AS, i);
		}
		public TerminalNode SET(int i) {
			return getToken(SQLParser.SET, i);
		}
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode STABLE(int i) {
			return getToken(SQLParser.STABLE, i);
		}
		public List<TerminalNode> COST() { return getTokens(SQLParser.COST); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public List<TerminalNode> TO() { return getTokens(SQLParser.TO); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode ROWS(int i) {
			return getToken(SQLParser.ROWS, i);
		}
		public List<TerminalNode> INVOKER() { return getTokens(SQLParser.INVOKER); }
		public List<TerminalNode> WINDOW() { return getTokens(SQLParser.WINDOW); }
		public TerminalNode CURRENT(int i) {
			return getToken(SQLParser.CURRENT, i);
		}
		public TerminalNode NULL(int i) {
			return getToken(SQLParser.NULL, i);
		}
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<TerminalNode> CURRENT() { return getTokens(SQLParser.CURRENT); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode RETURNS(int i) {
			return getToken(SQLParser.RETURNS, i);
		}
		public List<TerminalNode> EXTERNAL() { return getTokens(SQLParser.EXTERNAL); }
		public TerminalNode INPUT(int i) {
			return getToken(SQLParser.INPUT, i);
		}
		public TerminalNode CALLED(int i) {
			return getToken(SQLParser.CALLED, i);
		}
		public TerminalNode INVOKER(int i) {
			return getToken(SQLParser.INVOKER, i);
		}
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(SQLParser.NULL); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(SQLParser.LANGUAGE, i);
		}
		public List<TerminalNode> SET() { return getTokens(SQLParser.SET); }
		public List<TerminalNode> AS() { return getTokens(SQLParser.AS); }
		public Function_attributeContext function_attribute(int i) {
			return getRuleContext(Function_attributeContext.class,i);
		}
		public TerminalNode IMMUTABLE(int i) {
			return getToken(SQLParser.IMMUTABLE, i);
		}
		public List<TerminalNode> INPUT() { return getTokens(SQLParser.INPUT); }
		public List<TerminalNode> VOLATILE() { return getTokens(SQLParser.VOLATILE); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode Character_String_Literal(int i) {
			return getToken(SQLParser.Character_String_Literal, i);
		}
		public List<TerminalNode> STABLE() { return getTokens(SQLParser.STABLE); }
		public TerminalNode COST(int i) {
			return getToken(SQLParser.COST, i);
		}
		public List<TerminalNode> STRICT() { return getTokens(SQLParser.STRICT); }
		public List<TerminalNode> CALLED() { return getTokens(SQLParser.CALLED); }
		public List<TerminalNode> NUMBER() { return getTokens(SQLParser.NUMBER); }
		public List<TerminalNode> IMMUTABLE() { return getTokens(SQLParser.IMMUTABLE); }
		public List<TerminalNode> LANGUAGE() { return getTokens(SQLParser.LANGUAGE); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public List<TerminalNode> FROM() { return getTokens(SQLParser.FROM); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Function_parametersContext function_parameters() {
			return getRuleContext(Function_parametersContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public List<TerminalNode> DEFINER() { return getTokens(SQLParser.DEFINER); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode STRICT(int i) {
			return getToken(SQLParser.STRICT, i);
		}
		public TerminalNode SECURITY(int i) {
			return getToken(SQLParser.SECURITY, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode FROM(int i) {
			return getToken(SQLParser.FROM, i);
		}
		public List<Function_attributeContext> function_attribute() {
			return getRuleContexts(Function_attributeContext.class);
		}
		public List<TerminalNode> ROWS() { return getTokens(SQLParser.ROWS); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public List<TerminalNode> SECURITY() { return getTokens(SQLParser.SECURITY); }
		public TerminalNode NUMBER(int i) {
			return getToken(SQLParser.NUMBER, i);
		}
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public List<TerminalNode> RETURNS() { return getTokens(SQLParser.RETURNS); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode WINDOW(int i) {
			return getToken(SQLParser.WINDOW, i);
		}
		public TerminalNode EXTERNAL(int i) {
			return getToken(SQLParser.EXTERNAL, i);
		}
		public Function_bodyContext function_body(int i) {
			return getRuleContext(Function_bodyContext.class,i);
		}
		public TerminalNode DEFINER(int i) {
			return getToken(SQLParser.DEFINER, i);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Create_function_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_function_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_function_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_function_statement(this);
		}
	}

	public final Create_function_statementContext create_function_statement() throws RecognitionException {
		Create_function_statementContext _localctx = new Create_function_statementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_create_function_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2299); match(CREATE);
			setState(2302);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2300); match(OR);
				setState(2301); match(REPLACE);
				}
			}

			setState(2304); match(FUNCTION);
			setState(2305); ((Create_function_statementContext)_localctx).name = schema_qualified_name();
			setState(2306); function_parameters();
			setState(2326);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(2307); match(RETURNS);
				setState(2310);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(2308); ((Create_function_statementContext)_localctx).rettype = value_expression();
					}
					break;
				case 2:
					{
					setState(2309); ((Create_function_statementContext)_localctx).rettype_data = data_type();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(2312); match(RETURNS);
				setState(2313); match(TABLE);
				setState(2314); match(LEFT_PAREN);
				setState(2320); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2315); ((Create_function_statementContext)_localctx).column_name = identifier();
					setState(2316); ((Create_function_statementContext)_localctx).column_type = data_type();
					setState(2318);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2317); match(COMMA);
						}
					}

					}
					}
					setState(2322); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(2324); match(RIGHT_PAREN);
				}
				break;
			}
			setState(2381); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					setState(2381);
					switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
					case 1:
						{
						setState(2328); match(LANGUAGE);
						setState(2329); ((Create_function_statementContext)_localctx).lang_name = identifier();
						}
						break;
					case 2:
						{
						setState(2330); match(WINDOW);
						}
						break;
					case 3:
						{
						setState(2331); match(IMMUTABLE);
						}
						break;
					case 4:
						{
						setState(2332); match(STABLE);
						}
						break;
					case 5:
						{
						setState(2333); match(VOLATILE);
						}
						break;
					case 6:
						{
						setState(2334); match(CALLED);
						setState(2335); match(ON);
						setState(2336); match(NULL);
						setState(2337); match(INPUT);
						}
						break;
					case 7:
						{
						setState(2338); match(RETURNS);
						setState(2339); match(NULL);
						setState(2340); match(ON);
						setState(2341); match(NULL);
						setState(2342); match(INPUT);
						}
						break;
					case 8:
						{
						setState(2343); match(STRICT);
						}
						break;
					case 9:
						{
						setState(2345);
						_la = _input.LA(1);
						if (_la==EXTERNAL) {
							{
							setState(2344); match(EXTERNAL);
							}
						}

						setState(2347); match(SECURITY);
						setState(2348); match(INVOKER);
						}
						break;
					case 10:
						{
						setState(2350);
						_la = _input.LA(1);
						if (_la==EXTERNAL) {
							{
							setState(2349); match(EXTERNAL);
							}
						}

						setState(2352); match(SECURITY);
						setState(2353); match(DEFINER);
						}
						break;
					case 11:
						{
						setState(2354); match(COST);
						setState(2355); ((Create_function_statementContext)_localctx).execution_cost = match(NUMBER);
						}
						break;
					case 12:
						{
						setState(2356); match(ROWS);
						setState(2357); ((Create_function_statementContext)_localctx).result_rows = match(NUMBER);
						}
						break;
					case 13:
						{
						setState(2358); match(SET);
						setState(2359); ((Create_function_statementContext)_localctx).configuration_parameter = identifier();
						setState(2366);
						switch (_input.LA(1)) {
						case TO:
							{
							setState(2360); match(TO);
							setState(2361); ((Create_function_statementContext)_localctx).value = identifier();
							}
							break;
						case EQUAL:
							{
							setState(2362); match(EQUAL);
							setState(2363); ((Create_function_statementContext)_localctx).value = identifier();
							}
							break;
						case FROM:
							{
							setState(2364); match(FROM);
							setState(2365); match(CURRENT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2372);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(2368); match(COMMA);
							setState(2369); ((Create_function_statementContext)_localctx).value = identifier();
							}
							}
							setState(2374);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case 14:
						{
						setState(2375); match(AS);
						setState(2376); function_body();
						}
						break;
					case 15:
						{
						setState(2377); match(AS);
						setState(2378); match(Character_String_Literal);
						setState(2379); match(COMMA);
						setState(2380); match(Character_String_Literal);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2383); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,324,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(2397);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2385); match(WITH);
				setState(2386); match(LEFT_PAREN);
				setState(2391); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2387); ((Create_function_statementContext)_localctx).attribute = function_attribute();
					setState(2389);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2388); match(COMMA);
						}
					}

					}
					}
					setState(2393); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ISCACHABLE || _la==ISSTRICT );
				setState(2395); match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_parametersContext extends ParserRuleContext {
		public ArgmodeContext arg_mode;
		public IdentifierContext argname;
		public Data_typeContext argtype;
		public IdentifierContext argtype_string;
		public Value_expressionContext def_value;
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ArgmodeContext argmode(int i) {
			return getRuleContext(ArgmodeContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SQLParser.DEFAULT, i);
		}
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<ArgmodeContext> argmode() {
			return getRuleContexts(ArgmodeContext.class);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Function_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_parameters(this);
		}
	}

	public final Function_parametersContext function_parameters() throws RecognitionException {
		Function_parametersContext _localctx = new Function_parametersContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_function_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2399); match(LEFT_PAREN);
			setState(2425);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (IN - 58)) | (1L << (INOUT - 58)) | (1L << (OUT - 58)) | (1L << (SETOF - 58)) | (1L << (TRIGGER - 58)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (VARIADIC - 129)) | (1L << (ADMIN - 129)) | (1L << (ALWAYS - 129)) | (1L << (AVG - 129)) | (1L << (BETWEEN - 129)) | (1L << (BY - 129)) | (1L << (CACHE - 129)) | (1L << (CALLED - 129)) | (1L << (CLASS - 129)) | (1L << (CENTURY - 129)) | (1L << (CHARACTER - 129)) | (1L << (CHECK - 129)) | (1L << (CLUSTER - 129)) | (1L << (COLLECT - 129)) | (1L << (COALESCE - 129)) | (1L << (COLUMN - 129)) | (1L << (COMMENT - 129)) | (1L << (COMMENTS - 129)) | (1L << (COMMIT - 129)) | (1L << (CONCURRENTLY - 129)) | (1L << (CONFIGURATION - 129)) | (1L << (COST - 129)) | (1L << (COUNT - 129)) | (1L << (CUBE - 129)) | (1L << (CURRENT - 129)) | (1L << (CYCLE - 129)) | (1L << (DATA - 129)) | (1L << (DAY - 129)) | (1L << (DEC - 129)) | (1L << (DECADE - 129)) | (1L << (DEFINER - 129)) | (1L << (DICTIONARY - 129)) | (1L << (DISABLE - 129)) | (1L << (DOW - 129)) | (1L << (DOY - 129)) | (1L << (DROP - 129)) | (1L << (ENABLE - 129)) | (1L << (EPOCH - 129)) | (1L << (EVENT - 129)) | (1L << (EVERY - 129)) | (1L << (EXISTS - 129)) | (1L << (EXTENDED - 129)) | (1L << (EXTERNAL - 129)) | (1L << (EXTRACT - 129)) | (1L << (FAMILY - 129)) | (1L << (FILTER - 129)) | (1L << (FIRST - 129)) | (1L << (FORMAT - 129)) | (1L << (FUSION - 129)) | (1L << (GROUPING - 129)) | (1L << (HASH - 129)) | (1L << (INHERIT - 129)) | (1L << (INDEX - 129)) | (1L << (INCREMENT - 129)) | (1L << (INPUT - 129)) | (1L << (INSERT - 129)) | (1L << (INTERSECTION - 129)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (ISCACHABLE - 193)) | (1L << (ISODOW - 193)) | (1L << (ISOYEAR - 193)) | (1L << (ISSTRICT - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LARGE - 193)) | (1L << (LAST - 193)) | (1L << (LESS - 193)) | (1L << (LIST - 193)) | (1L << (LOCATION - 193)) | (1L << (MAIN - 193)) | (1L << (MATCH - 193)) | (1L << (MAX - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MICROSECONDS - 193)) | (1L << (MILLENNIUM - 193)) | (1L << (MILLISECONDS - 193)) | (1L << (MIN - 193)) | (1L << (MINVALUE - 193)) | (1L << (MINUTE - 193)) | (1L << (MONTH - 193)) | (1L << (NATIONAL - 193)) | (1L << (NO - 193)) | (1L << (NONE - 193)) | (1L << (NULLIF - 193)) | (1L << (OBJECT - 193)) | (1L << (ON - 193)) | (1L << (ONLY - 193)) | (1L << (OPTION - 193)) | (1L << (OPTIONS - 193)) | (1L << (OVERWRITE - 193)) | (1L << (PARSER - 193)) | (1L << (PARTIAL - 193)) | (1L << (PARTITION - 193)) | (1L << (PARTITIONS - 193)) | (1L << (PLAIN - 193)) | (1L << (PRECISION - 193)) | (1L << (PUBLIC - 193)) | (1L << (PURGE - 193)) | (1L << (QUARTER - 193)) | (1L << (RANGE - 193)) | (1L << (REGCONFIG - 193)) | (1L << (REGEXP - 193)) | (1L << (RENAME - 193)) | (1L << (REPLICA - 193)) | (1L << (RESET - 193)) | (1L << (RESTART - 193)) | (1L << (RLIKE - 193)) | (1L << (ROLLUP - 193)) | (1L << (SEARCH - 193)) | (1L << (SECOND - 193)) | (1L << (SECURITY - 193)) | (1L << (SERVER - 193)) | (1L << (SET - 193)) | (1L << (SIMILAR - 193)) | (1L << (SIMPLE - 193)) | (1L << (STABLE - 193)) | (1L << (START - 193)) | (1L << (STATISTICS - 193)) | (1L << (STORAGE - 193)) | (1L << (STDDEV_POP - 193)) | (1L << (STDDEV_SAMP - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (SUBPARTITION - 257)) | (1L << (SUM - 257)) | (1L << (TABLESPACE - 257)) | (1L << (TEMPLATE - 257)) | (1L << (THAN - 257)) | (1L << (TIMEZONE - 257)) | (1L << (TIMEZONE_HOUR - 257)) | (1L << (TIMEZONE_MINUTE - 257)) | (1L << (TRIM - 257)) | (1L << (TO - 257)) | (1L << (TYPE - 257)) | (1L << (TYPES - 257)) | (1L << (UNKNOWN - 257)) | (1L << (UNLOGGED - 257)) | (1L << (USER - 257)) | (1L << (VALID - 257)) | (1L << (VALIDATE - 257)) | (1L << (VALUES - 257)) | (1L << (VAR_SAMP - 257)) | (1L << (VAR_POP - 257)) | (1L << (VARYING - 257)) | (1L << (VERSION - 257)) | (1L << (VOLATILE - 257)) | (1L << (WEEK - 257)) | (1L << (WINDOW - 257)) | (1L << (WRAPPER - 257)) | (1L << (YEAR - 257)) | (1L << (ZONE - 257)) | (1L << (BOOLEAN - 257)) | (1L << (BOOL - 257)) | (1L << (BIT - 257)) | (1L << (VARBIT - 257)) | (1L << (INT1 - 257)) | (1L << (INT2 - 257)) | (1L << (INT4 - 257)) | (1L << (INT8 - 257)) | (1L << (TINYINT - 257)) | (1L << (SMALLINT - 257)) | (1L << (INT - 257)) | (1L << (INTEGER - 257)) | (1L << (BIGINT - 257)) | (1L << (FLOAT4 - 257)) | (1L << (FLOAT8 - 257)) | (1L << (REAL - 257)) | (1L << (REGCLASS - 257)) | (1L << (FLOAT - 257)) | (1L << (DOUBLE - 257)) | (1L << (NUMERIC - 257)) | (1L << (DECIMAL - 257)) | (1L << (CHAR - 257)) | (1L << (VARCHAR - 257)) | (1L << (NCHAR - 257)) | (1L << (NVARCHAR - 257)) | (1L << (DATE - 257)) | (1L << (TIME - 257)) | (1L << (TIMETZ - 257)) | (1L << (TIMESTAMP - 257)) | (1L << (TIMESTAMPTZ - 257)) | (1L << (TEXT - 257)) | (1L << (UUID - 257)) | (1L << (BINARY - 257)) | (1L << (VARBINARY - 257)) | (1L << (BLOB - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (BYTEA - 321)) | (1L << (INET4 - 321)) | (1L << (INET - 321)) | (1L << (INTERVAL - 321)) | (1L << (VOID - 321)) | (1L << (DOUBLE_QUOTE - 321)) | (1L << (Identifier - 321)) | (1L << (QuotedIdentifier - 321)))) != 0)) {
				{
				{
				setState(2401);
				_la = _input.LA(1);
				if (_la==IN || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INOUT - 66)) | (1L << (OUT - 66)) | (1L << (VARIADIC - 66)))) != 0)) {
					{
					setState(2400); ((Function_parametersContext)_localctx).arg_mode = argmode();
					}
				}

				setState(2404);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(2403); ((Function_parametersContext)_localctx).argname = identifier();
					}
					break;
				}
				setState(2408);
				switch ( getInterpreter().adaptivePredict(_input,330,_ctx) ) {
				case 1:
					{
					setState(2406); ((Function_parametersContext)_localctx).argtype = data_type();
					}
					break;
				case 2:
					{
					setState(2407); ((Function_parametersContext)_localctx).argtype_string = identifier();
					}
					break;
				}
				setState(2418);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==EQUAL) {
					{
					setState(2410);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==EQUAL) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(2412);
					switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
					case 1:
						{
						setState(2411); match(LEFT_PAREN);
						}
						break;
					}
					setState(2414); ((Function_parametersContext)_localctx).def_value = value_expression();
					setState(2416);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2415); match(LEFT_PAREN);
						}
					}

					}
				}

				setState(2421);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2420); match(COMMA);
					}
				}

				}
				}
				setState(2427);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2428); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_bodyContext extends ParserRuleContext {
		public TerminalNode BeginDollarStringConstant() { return getToken(SQLParser.BeginDollarStringConstant, 0); }
		public TerminalNode EndDollarStringConstant() { return getToken(SQLParser.EndDollarStringConstant, 0); }
		public TerminalNode Text_between_Dollar() { return getToken(SQLParser.Text_between_Dollar, 0); }
		public Function_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_body(this);
		}
	}

	public final Function_bodyContext function_body() throws RecognitionException {
		Function_bodyContext _localctx = new Function_bodyContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_function_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2430); match(BeginDollarStringConstant);
			setState(2431); match(Text_between_Dollar);
			setState(2432); match(EndDollarStringConstant);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_attributeContext extends ParserRuleContext {
		public TerminalNode ISCACHABLE() { return getToken(SQLParser.ISCACHABLE, 0); }
		public TerminalNode ISSTRICT() { return getToken(SQLParser.ISSTRICT, 0); }
		public Function_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_attribute(this);
		}
	}

	public final Function_attributeContext function_attribute() throws RecognitionException {
		Function_attributeContext _localctx = new Function_attributeContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_function_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2434);
			_la = _input.LA(1);
			if ( !(_la==ISCACHABLE || _la==ISSTRICT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgmodeContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(SQLParser.OUT, 0); }
		public TerminalNode VARIADIC() { return getToken(SQLParser.VARIADIC, 0); }
		public TerminalNode INOUT() { return getToken(SQLParser.INOUT, 0); }
		public ArgmodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argmode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArgmode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArgmode(this);
		}
	}

	public final ArgmodeContext argmode() throws RecognitionException {
		ArgmodeContext _localctx = new ArgmodeContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_argmode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2436);
			_la = _input.LA(1);
			if ( !(_la==IN || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INOUT - 66)) | (1L << (OUT - 66)) | (1L << (VARIADIC - 66)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_definitionContext extends ParserRuleContext {
		public IdentifierContext func_name;
		public ArgmodeContext arg_mode;
		public IdentifierContext argname;
		public Data_typeContext argtype_data;
		public Value_expressionContext argtype_expres;
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public ArgmodeContext argmode(int i) {
			return getRuleContext(ArgmodeContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Data_typeContext data_type(int i) {
			return getRuleContext(Data_typeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<ArgmodeContext> argmode() {
			return getRuleContexts(ArgmodeContext.class);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<Data_typeContext> data_type() {
			return getRuleContexts(Data_typeContext.class);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_definition(this);
		}
	}

	public final Function_definitionContext function_definition() throws RecognitionException {
		Function_definitionContext _localctx = new Function_definitionContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_function_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2438); match(FUNCTION);
			setState(2439); ((Function_definitionContext)_localctx).func_name = identifier();
			setState(2440); match(LEFT_PAREN);
			setState(2456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << CASE) | (1L << CAST) | (1L << FALSE) | (1L << IN))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INOUT - 66)) | (1L << (LEFT - 66)) | (1L << (NOT - 66)) | (1L << (NULL - 66)) | (1L << (OUT - 66)) | (1L << (RIGHT - 66)) | (1L << (SETOF - 66)) | (1L << (SOME - 66)) | (1L << (TRIGGER - 66)) | (1L << (TRUE - 66)) | (1L << (VARIADIC - 66)))) != 0) || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (REGCLASS - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (BINARY - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (LEFT_PAREN - 342)) | (1L << (PLUS - 342)) | (1L << (MINUS - 342)) | (1L << (DOUBLE_QUOTE - 342)) | (1L << (NUMBER - 342)) | (1L << (REAL_NUMBER - 342)) | (1L << (Identifier - 342)) | (1L << (QuotedIdentifier - 342)) | (1L << (Character_String_Literal - 342)))) != 0)) {
				{
				{
				setState(2442);
				_la = _input.LA(1);
				if (_la==IN || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (INOUT - 66)) | (1L << (OUT - 66)) | (1L << (VARIADIC - 66)))) != 0)) {
					{
					setState(2441); ((Function_definitionContext)_localctx).arg_mode = argmode();
					}
				}

				setState(2445);
				switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
				case 1:
					{
					setState(2444); ((Function_definitionContext)_localctx).argname = identifier();
					}
					break;
				}
				setState(2449);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(2447); ((Function_definitionContext)_localctx).argtype_data = data_type();
					}
					break;
				case 2:
					{
					setState(2448); ((Function_definitionContext)_localctx).argtype_expres = value_expression();
					}
					break;
				}
				setState(2452);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2451); match(COMMA);
					}
				}

				}
				}
				setState(2458);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2459); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Functions_definition_schemaContext extends ParserRuleContext {
		public IdentifierContext schema_name;
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FUNCTIONS() { return getToken(SQLParser.FUNCTIONS, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Functions_definition_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functions_definition_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctions_definition_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctions_definition_schema(this);
		}
	}

	public final Functions_definition_schemaContext functions_definition_schema() throws RecognitionException {
		Functions_definition_schemaContext _localctx = new Functions_definition_schemaContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_functions_definition_schema);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2461); match(ALL);
			setState(2462); match(FUNCTIONS);
			setState(2463); match(IN);
			setState(2464); match(SCHEMA);
			setState(2469); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2465); ((Functions_definition_schemaContext)_localctx).schema_name = identifier();
					setState(2467);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2466); match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2471); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,342,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequence_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public Sequence_bodyContext sequence_body(int i) {
			return getRuleContext(Sequence_bodyContext.class,i);
		}
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public List<Sequence_bodyContext> sequence_body() {
			return getRuleContexts(Sequence_bodyContext.class);
		}
		public Create_sequence_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_sequence_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_sequence_statement(this);
		}
	}

	public final Create_sequence_statementContext create_sequence_statement() throws RecognitionException {
		Create_sequence_statementContext _localctx = new Create_sequence_statementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_create_sequence_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2473); match(CREATE);
			setState(2475);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(2474);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2477); match(SEQUENCE);
			setState(2478); ((Create_sequence_statementContext)_localctx).name = schema_qualified_name();
			setState(2482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OWNED || _la==CACHE || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (CYCLE - 159)) | (1L << (INCREMENT - 159)) | (1L << (MAXVALUE - 159)) | (1L << (MINVALUE - 159)) | (1L << (NO - 159)))) != 0) || _la==START) {
				{
				{
				setState(2479); sequence_body();
				}
				}
				setState(2484);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_bodyContext extends ParserRuleContext {
		public Token incr;
		public Token minval;
		public Numeric_typeContext maxval;
		public Token start_val;
		public Token cache_val;
		public Schema_qualified_nameContext col_name;
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode OWNED() { return getToken(SQLParser.OWNED, 0); }
		public TerminalNode MAXVALUE() { return getToken(SQLParser.MAXVALUE, 0); }
		public TerminalNode INCREMENT() { return getToken(SQLParser.INCREMENT, 0); }
		public TerminalNode NONE() { return getToken(SQLParser.NONE, 0); }
		public TerminalNode START() { return getToken(SQLParser.START, 0); }
		public TerminalNode MINVALUE() { return getToken(SQLParser.MINVALUE, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Numeric_typeContext numeric_type() {
			return getRuleContext(Numeric_typeContext.class,0);
		}
		public TerminalNode CYCLE() { return getToken(SQLParser.CYCLE, 0); }
		public TerminalNode NUMBER() { return getToken(SQLParser.NUMBER, 0); }
		public TerminalNode CACHE() { return getToken(SQLParser.CACHE, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Sequence_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSequence_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSequence_body(this);
		}
	}

	public final Sequence_bodyContext sequence_body() throws RecognitionException {
		Sequence_bodyContext _localctx = new Sequence_bodyContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_sequence_body);
		int _la;
		try {
			setState(2519);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2485); match(INCREMENT);
				setState(2487);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(2486); match(BY);
					}
				}

				setState(2489); ((Sequence_bodyContext)_localctx).incr = match(NUMBER);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2494);
				switch (_input.LA(1)) {
				case MINVALUE:
					{
					setState(2490); match(MINVALUE);
					setState(2491); ((Sequence_bodyContext)_localctx).minval = match(NUMBER);
					}
					break;
				case NO:
					{
					setState(2492); match(NO);
					setState(2493); match(MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2500);
				switch (_input.LA(1)) {
				case MAXVALUE:
					{
					setState(2496); match(MAXVALUE);
					setState(2497); ((Sequence_bodyContext)_localctx).maxval = numeric_type();
					}
					break;
				case NO:
					{
					setState(2498); match(NO);
					setState(2499); match(MAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2502); match(START);
				setState(2504);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2503); match(WITH);
					}
				}

				setState(2506); ((Sequence_bodyContext)_localctx).start_val = match(NUMBER);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2507); match(CACHE);
				setState(2508); ((Sequence_bodyContext)_localctx).cache_val = match(NUMBER);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2510);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(2509); match(NO);
					}
				}

				setState(2512); match(CYCLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2513); match(OWNED);
				setState(2514); match(BY);
				setState(2517);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(2515); ((Sequence_bodyContext)_localctx).col_name = schema_qualified_name();
					}
					break;
				case 2:
					{
					setState(2516); match(NONE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schema_statementContext extends ParserRuleContext {
		public IdentifierContext schema_name;
		public IdentifierContext user_name;
		public SqlContext schema_element;
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public List<SqlContext> sql() {
			return getRuleContexts(SqlContext.class);
		}
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public SqlContext sql(int i) {
			return getRuleContext(SqlContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode AUTHORIZATION() { return getToken(SQLParser.AUTHORIZATION, 0); }
		public Create_schema_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_schema_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_schema_statement(this);
		}
	}

	public final Create_schema_statementContext create_schema_statement() throws RecognitionException {
		Create_schema_statementContext _localctx = new Create_schema_statementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_create_schema_statement);
		int _la;
		try {
			int _alt;
			setState(2561);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2521); match(CREATE);
				setState(2522); match(SCHEMA);
				setState(2523); ((Create_schema_statementContext)_localctx).schema_name = identifier();
				setState(2526);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(2524); match(AUTHORIZATION);
					setState(2525); ((Create_schema_statementContext)_localctx).user_name = identifier();
					}
				}

				setState(2531);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2528); ((Create_schema_statementContext)_localctx).schema_element = sql();
						}
						} 
					}
					setState(2533);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,353,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2534); match(CREATE);
				setState(2535); match(SCHEMA);
				setState(2536); match(AUTHORIZATION);
				setState(2537); ((Create_schema_statementContext)_localctx).user_name = identifier();
				setState(2541);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2538); ((Create_schema_statementContext)_localctx).schema_element = sql();
						}
						} 
					}
					setState(2543);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,354,_ctx);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2544); match(CREATE);
				setState(2545); match(SCHEMA);
				setState(2546); match(IF);
				setState(2547); match(NOT);
				setState(2548); match(EXISTS);
				setState(2549); ((Create_schema_statementContext)_localctx).schema_name = identifier();
				setState(2552);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(2550); match(AUTHORIZATION);
					setState(2551); ((Create_schema_statementContext)_localctx).user_name = identifier();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2554); match(CREATE);
				setState(2555); match(SCHEMA);
				setState(2556); match(IF);
				setState(2557); match(NOT);
				setState(2558); match(EXISTS);
				setState(2559); match(AUTHORIZATION);
				setState(2560); ((Create_schema_statementContext)_localctx).user_name = identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_view_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext name;
		public IdentifierContext column_name;
		public IdentifierContext view_option_name;
		public IdentifierContext view_option_value;
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Create_view_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_view_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_view_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_view_statement(this);
		}
	}

	public final Create_view_statementContext create_view_statement() throws RecognitionException {
		Create_view_statementContext _localctx = new Create_view_statementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_create_view_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2563); match(CREATE);
			setState(2566);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2564); match(OR);
				setState(2565); match(REPLACE);
				}
			}

			setState(2569);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(2568);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(2571); match(VIEW);
			setState(2572); ((Create_view_statementContext)_localctx).name = schema_qualified_name();
			setState(2579);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0)) {
				{
				{
				setState(2573); ((Create_view_statementContext)_localctx).column_name = identifier();
				setState(2575);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2574); match(COMMA);
					}
				}

				}
				}
				setState(2581);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2595);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2582); match(WITH);
				setState(2583); match(LEFT_PAREN);
				setState(2589); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2584); ((Create_view_statementContext)_localctx).view_option_name = identifier();
					setState(2587);
					_la = _input.LA(1);
					if (_la==EQUAL) {
						{
						setState(2585); match(EQUAL);
						setState(2586); ((Create_view_statementContext)_localctx).view_option_value = identifier();
						}
					}

					}
					}
					setState(2591); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(2593); match(RIGHT_PAREN);
				}
			}

			setState(2597); match(AS);
			setState(2598); query_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_table_statementContext extends ParserRuleContext {
		public Schema_qualified_nameContext n;
		public Table_constraintContext tabl_constraint;
		public IdentifierContext parent_table;
		public Like_optionContext like_opt;
		public Schema_qualified_nameContext paret_table;
		public IdentifierContext type_name;
		public IdentifierContext column_name;
		public Column_constraintContext col_constraint;
		public On_commitContext on_commit() {
			return getRuleContext(On_commitContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public Table_spaceContext table_space() {
			return getRuleContext(Table_spaceContext.class,0);
		}
		public Like_optionContext like_option(int i) {
			return getRuleContext(Like_optionContext.class,i);
		}
		public TerminalNode WITH(int i) {
			return getToken(SQLParser.WITH, i);
		}
		public TerminalNode INHERITS() { return getToken(SQLParser.INHERITS, 0); }
		public TerminalNode LIKE(int i) {
			return getToken(SQLParser.LIKE, i);
		}
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> OPTIONS() { return getTokens(SQLParser.OPTIONS); }
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode GLOBAL() { return getToken(SQLParser.GLOBAL, 0); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public Table_column_definitionContext table_column_definition(int i) {
			return getRuleContext(Table_column_definitionContext.class,i);
		}
		public Table_constraintContext table_constraint(int i) {
			return getRuleContext(Table_constraintContext.class,i);
		}
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LIKE() { return getTokens(SQLParser.LIKE); }
		public List<Table_column_definitionContext> table_column_definition() {
			return getRuleContexts(Table_column_definitionContext.class);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public List<Like_optionContext> like_option() {
			return getRuleContexts(Like_optionContext.class);
		}
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public Storage_parameter_oidContext storage_parameter_oid() {
			return getRuleContext(Storage_parameter_oidContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public List<TerminalNode> WITH() { return getTokens(SQLParser.WITH); }
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public List<Table_constraintContext> table_constraint() {
			return getRuleContexts(Table_constraintContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode UNLOGGED() { return getToken(SQLParser.UNLOGGED, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Schema_qualified_nameContext schema_qualified_name(int i) {
			return getRuleContext(Schema_qualified_nameContext.class,i);
		}
		public TerminalNode LOCAL() { return getToken(SQLParser.LOCAL, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode OPTIONS(int i) {
			return getToken(SQLParser.OPTIONS, i);
		}
		public List<Schema_qualified_nameContext> schema_qualified_name() {
			return getRuleContexts(Schema_qualified_nameContext.class);
		}
		public Create_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreate_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreate_table_statement(this);
		}
	}

	public final Create_table_statementContext create_table_statement() throws RecognitionException {
		Create_table_statementContext _localctx = new Create_table_statementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_create_table_statement);
		int _la;
		try {
			int _alt;
			setState(2701);
			switch ( getInterpreter().adaptivePredict(_input,383,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2600); match(CREATE);
				setState(2606);
				switch (_input.LA(1)) {
				case GLOBAL:
				case LOCAL:
				case TEMP:
				case TEMPORARY:
					{
					setState(2602);
					_la = _input.LA(1);
					if (_la==GLOBAL || _la==LOCAL) {
						{
						setState(2601);
						_la = _input.LA(1);
						if ( !(_la==GLOBAL || _la==LOCAL) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
					}

					setState(2604);
					_la = _input.LA(1);
					if ( !(_la==TEMP || _la==TEMPORARY) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				case UNLOGGED:
					{
					setState(2605); match(UNLOGGED);
					}
					break;
				case TABLE:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2608); match(TABLE);
				setState(2612);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2609); match(IF);
					setState(2610); match(NOT);
					setState(2611); match(EXISTS);
					}
				}

				setState(2614); ((Create_table_statementContext)_localctx).n = schema_qualified_name();
				setState(2615); match(LEFT_PAREN);
				setState(2635);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSTRAINT) | (1L << EXCLUDE) | (1L << FOREIGN))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (LIKE - 74)) | (1L << (PRIMARY - 74)) | (1L << (UNIQUE - 74)) | (1L << (ADMIN - 74)) | (1L << (ALWAYS - 74)) | (1L << (AVG - 74)))) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (BETWEEN - 138)) | (1L << (BY - 138)) | (1L << (CACHE - 138)) | (1L << (CALLED - 138)) | (1L << (CLASS - 138)) | (1L << (CENTURY - 138)) | (1L << (CHARACTER - 138)) | (1L << (CHECK - 138)) | (1L << (CLUSTER - 138)) | (1L << (COLLECT - 138)) | (1L << (COALESCE - 138)) | (1L << (COLUMN - 138)) | (1L << (COMMENT - 138)) | (1L << (COMMENTS - 138)) | (1L << (COMMIT - 138)) | (1L << (CONCURRENTLY - 138)) | (1L << (CONFIGURATION - 138)) | (1L << (COST - 138)) | (1L << (COUNT - 138)) | (1L << (CUBE - 138)) | (1L << (CURRENT - 138)) | (1L << (CYCLE - 138)) | (1L << (DATA - 138)) | (1L << (DAY - 138)) | (1L << (DEC - 138)) | (1L << (DECADE - 138)) | (1L << (DEFINER - 138)) | (1L << (DICTIONARY - 138)) | (1L << (DISABLE - 138)) | (1L << (DOW - 138)) | (1L << (DOY - 138)) | (1L << (DROP - 138)) | (1L << (ENABLE - 138)) | (1L << (EPOCH - 138)) | (1L << (EVENT - 138)) | (1L << (EVERY - 138)) | (1L << (EXISTS - 138)) | (1L << (EXTENDED - 138)) | (1L << (EXTERNAL - 138)) | (1L << (EXTRACT - 138)) | (1L << (FAMILY - 138)) | (1L << (FILTER - 138)) | (1L << (FIRST - 138)) | (1L << (FORMAT - 138)) | (1L << (FUSION - 138)) | (1L << (GROUPING - 138)) | (1L << (HASH - 138)) | (1L << (INHERIT - 138)) | (1L << (INDEX - 138)) | (1L << (INCREMENT - 138)) | (1L << (INPUT - 138)) | (1L << (INSERT - 138)) | (1L << (INTERSECTION - 138)) | (1L << (ISCACHABLE - 138)) | (1L << (ISODOW - 138)) | (1L << (ISOYEAR - 138)) | (1L << (ISSTRICT - 138)) | (1L << (LANGUAGE - 138)) | (1L << (LARGE - 138)) | (1L << (LAST - 138)) | (1L << (LESS - 138)) | (1L << (LIST - 138)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (LOCATION - 202)) | (1L << (MAIN - 202)) | (1L << (MATCH - 202)) | (1L << (MAX - 202)) | (1L << (MAXVALUE - 202)) | (1L << (MICROSECONDS - 202)) | (1L << (MILLENNIUM - 202)) | (1L << (MILLISECONDS - 202)) | (1L << (MIN - 202)) | (1L << (MINVALUE - 202)) | (1L << (MINUTE - 202)) | (1L << (MONTH - 202)) | (1L << (NATIONAL - 202)) | (1L << (NO - 202)) | (1L << (NONE - 202)) | (1L << (NULLIF - 202)) | (1L << (OBJECT - 202)) | (1L << (ON - 202)) | (1L << (ONLY - 202)) | (1L << (OPTION - 202)) | (1L << (OPTIONS - 202)) | (1L << (OVERWRITE - 202)) | (1L << (PARSER - 202)) | (1L << (PARTIAL - 202)) | (1L << (PARTITION - 202)) | (1L << (PARTITIONS - 202)) | (1L << (PLAIN - 202)) | (1L << (PRECISION - 202)) | (1L << (PUBLIC - 202)) | (1L << (PURGE - 202)) | (1L << (QUARTER - 202)) | (1L << (RANGE - 202)) | (1L << (REGCONFIG - 202)) | (1L << (REGEXP - 202)) | (1L << (RENAME - 202)) | (1L << (REPLICA - 202)) | (1L << (RESET - 202)) | (1L << (RESTART - 202)) | (1L << (RLIKE - 202)) | (1L << (ROLLUP - 202)) | (1L << (SEARCH - 202)) | (1L << (SECOND - 202)) | (1L << (SECURITY - 202)) | (1L << (SERVER - 202)) | (1L << (SET - 202)) | (1L << (SIMILAR - 202)) | (1L << (SIMPLE - 202)) | (1L << (STABLE - 202)) | (1L << (START - 202)) | (1L << (STATISTICS - 202)) | (1L << (STORAGE - 202)) | (1L << (STDDEV_POP - 202)) | (1L << (STDDEV_SAMP - 202)) | (1L << (SUBPARTITION - 202)) | (1L << (SUM - 202)) | (1L << (TABLESPACE - 202)) | (1L << (TEMPLATE - 202)) | (1L << (THAN - 202)) | (1L << (TIMEZONE - 202)) | (1L << (TIMEZONE_HOUR - 202)) | (1L << (TIMEZONE_MINUTE - 202)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (TRIM - 266)) | (1L << (TO - 266)) | (1L << (TYPE - 266)) | (1L << (TYPES - 266)) | (1L << (UNKNOWN - 266)) | (1L << (UNLOGGED - 266)) | (1L << (USER - 266)) | (1L << (VALID - 266)) | (1L << (VALIDATE - 266)) | (1L << (VALUES - 266)) | (1L << (VAR_SAMP - 266)) | (1L << (VAR_POP - 266)) | (1L << (VARYING - 266)) | (1L << (VERSION - 266)) | (1L << (VOLATILE - 266)) | (1L << (WEEK - 266)) | (1L << (WINDOW - 266)) | (1L << (WRAPPER - 266)) | (1L << (YEAR - 266)) | (1L << (ZONE - 266)) | (1L << (BOOLEAN - 266)) | (1L << (BOOL - 266)) | (1L << (BIT - 266)) | (1L << (VARBIT - 266)) | (1L << (INT1 - 266)) | (1L << (INT2 - 266)) | (1L << (INT4 - 266)) | (1L << (INT8 - 266)) | (1L << (TINYINT - 266)) | (1L << (SMALLINT - 266)) | (1L << (INT - 266)) | (1L << (INTEGER - 266)) | (1L << (BIGINT - 266)) | (1L << (FLOAT4 - 266)) | (1L << (FLOAT8 - 266)) | (1L << (REAL - 266)) | (1L << (FLOAT - 266)) | (1L << (DOUBLE - 266)) | (1L << (NUMERIC - 266)) | (1L << (DECIMAL - 266)) | (1L << (CHAR - 266)) | (1L << (VARCHAR - 266)) | (1L << (NCHAR - 266)) | (1L << (NVARCHAR - 266)) | (1L << (DATE - 266)) | (1L << (TIME - 266)) | (1L << (TIMETZ - 266)) | (1L << (TIMESTAMP - 266)) | (1L << (TIMESTAMPTZ - 266)) | (1L << (TEXT - 266)) | (1L << (UUID - 266)) | (1L << (VARBINARY - 266)) | (1L << (BLOB - 266)) | (1L << (BYTEA - 266)) | (1L << (INET4 - 266)) | (1L << (INET - 266)) | (1L << (INTERVAL - 266)) | (1L << (VOID - 266)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0)) {
					{
					setState(2631); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2626);
						switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
						case 1:
							{
							{
							setState(2616); table_column_definition();
							}
							}
							break;
						case 2:
							{
							setState(2617); ((Create_table_statementContext)_localctx).tabl_constraint = table_constraint();
							}
							break;
						case 3:
							{
							{
							setState(2618); match(LIKE);
							setState(2619); ((Create_table_statementContext)_localctx).parent_table = identifier();
							setState(2623);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==EXCLUDING || _la==INCLUDING) {
								{
								{
								setState(2620); ((Create_table_statementContext)_localctx).like_opt = like_option();
								}
								}
								setState(2625);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							}
							break;
						}
						setState(2629);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2628); match(COMMA);
							}
						}

						}
						}
						setState(2633); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSTRAINT) | (1L << EXCLUDE) | (1L << FOREIGN))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (LIKE - 74)) | (1L << (PRIMARY - 74)) | (1L << (UNIQUE - 74)) | (1L << (ADMIN - 74)) | (1L << (ALWAYS - 74)) | (1L << (AVG - 74)))) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (BETWEEN - 138)) | (1L << (BY - 138)) | (1L << (CACHE - 138)) | (1L << (CALLED - 138)) | (1L << (CLASS - 138)) | (1L << (CENTURY - 138)) | (1L << (CHARACTER - 138)) | (1L << (CHECK - 138)) | (1L << (CLUSTER - 138)) | (1L << (COLLECT - 138)) | (1L << (COALESCE - 138)) | (1L << (COLUMN - 138)) | (1L << (COMMENT - 138)) | (1L << (COMMENTS - 138)) | (1L << (COMMIT - 138)) | (1L << (CONCURRENTLY - 138)) | (1L << (CONFIGURATION - 138)) | (1L << (COST - 138)) | (1L << (COUNT - 138)) | (1L << (CUBE - 138)) | (1L << (CURRENT - 138)) | (1L << (CYCLE - 138)) | (1L << (DATA - 138)) | (1L << (DAY - 138)) | (1L << (DEC - 138)) | (1L << (DECADE - 138)) | (1L << (DEFINER - 138)) | (1L << (DICTIONARY - 138)) | (1L << (DISABLE - 138)) | (1L << (DOW - 138)) | (1L << (DOY - 138)) | (1L << (DROP - 138)) | (1L << (ENABLE - 138)) | (1L << (EPOCH - 138)) | (1L << (EVENT - 138)) | (1L << (EVERY - 138)) | (1L << (EXISTS - 138)) | (1L << (EXTENDED - 138)) | (1L << (EXTERNAL - 138)) | (1L << (EXTRACT - 138)) | (1L << (FAMILY - 138)) | (1L << (FILTER - 138)) | (1L << (FIRST - 138)) | (1L << (FORMAT - 138)) | (1L << (FUSION - 138)) | (1L << (GROUPING - 138)) | (1L << (HASH - 138)) | (1L << (INHERIT - 138)) | (1L << (INDEX - 138)) | (1L << (INCREMENT - 138)) | (1L << (INPUT - 138)) | (1L << (INSERT - 138)) | (1L << (INTERSECTION - 138)) | (1L << (ISCACHABLE - 138)) | (1L << (ISODOW - 138)) | (1L << (ISOYEAR - 138)) | (1L << (ISSTRICT - 138)) | (1L << (LANGUAGE - 138)) | (1L << (LARGE - 138)) | (1L << (LAST - 138)) | (1L << (LESS - 138)) | (1L << (LIST - 138)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (LOCATION - 202)) | (1L << (MAIN - 202)) | (1L << (MATCH - 202)) | (1L << (MAX - 202)) | (1L << (MAXVALUE - 202)) | (1L << (MICROSECONDS - 202)) | (1L << (MILLENNIUM - 202)) | (1L << (MILLISECONDS - 202)) | (1L << (MIN - 202)) | (1L << (MINVALUE - 202)) | (1L << (MINUTE - 202)) | (1L << (MONTH - 202)) | (1L << (NATIONAL - 202)) | (1L << (NO - 202)) | (1L << (NONE - 202)) | (1L << (NULLIF - 202)) | (1L << (OBJECT - 202)) | (1L << (ON - 202)) | (1L << (ONLY - 202)) | (1L << (OPTION - 202)) | (1L << (OPTIONS - 202)) | (1L << (OVERWRITE - 202)) | (1L << (PARSER - 202)) | (1L << (PARTIAL - 202)) | (1L << (PARTITION - 202)) | (1L << (PARTITIONS - 202)) | (1L << (PLAIN - 202)) | (1L << (PRECISION - 202)) | (1L << (PUBLIC - 202)) | (1L << (PURGE - 202)) | (1L << (QUARTER - 202)) | (1L << (RANGE - 202)) | (1L << (REGCONFIG - 202)) | (1L << (REGEXP - 202)) | (1L << (RENAME - 202)) | (1L << (REPLICA - 202)) | (1L << (RESET - 202)) | (1L << (RESTART - 202)) | (1L << (RLIKE - 202)) | (1L << (ROLLUP - 202)) | (1L << (SEARCH - 202)) | (1L << (SECOND - 202)) | (1L << (SECURITY - 202)) | (1L << (SERVER - 202)) | (1L << (SET - 202)) | (1L << (SIMILAR - 202)) | (1L << (SIMPLE - 202)) | (1L << (STABLE - 202)) | (1L << (START - 202)) | (1L << (STATISTICS - 202)) | (1L << (STORAGE - 202)) | (1L << (STDDEV_POP - 202)) | (1L << (STDDEV_SAMP - 202)) | (1L << (SUBPARTITION - 202)) | (1L << (SUM - 202)) | (1L << (TABLESPACE - 202)) | (1L << (TEMPLATE - 202)) | (1L << (THAN - 202)) | (1L << (TIMEZONE - 202)) | (1L << (TIMEZONE_HOUR - 202)) | (1L << (TIMEZONE_MINUTE - 202)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (TRIM - 266)) | (1L << (TO - 266)) | (1L << (TYPE - 266)) | (1L << (TYPES - 266)) | (1L << (UNKNOWN - 266)) | (1L << (UNLOGGED - 266)) | (1L << (USER - 266)) | (1L << (VALID - 266)) | (1L << (VALIDATE - 266)) | (1L << (VALUES - 266)) | (1L << (VAR_SAMP - 266)) | (1L << (VAR_POP - 266)) | (1L << (VARYING - 266)) | (1L << (VERSION - 266)) | (1L << (VOLATILE - 266)) | (1L << (WEEK - 266)) | (1L << (WINDOW - 266)) | (1L << (WRAPPER - 266)) | (1L << (YEAR - 266)) | (1L << (ZONE - 266)) | (1L << (BOOLEAN - 266)) | (1L << (BOOL - 266)) | (1L << (BIT - 266)) | (1L << (VARBIT - 266)) | (1L << (INT1 - 266)) | (1L << (INT2 - 266)) | (1L << (INT4 - 266)) | (1L << (INT8 - 266)) | (1L << (TINYINT - 266)) | (1L << (SMALLINT - 266)) | (1L << (INT - 266)) | (1L << (INTEGER - 266)) | (1L << (BIGINT - 266)) | (1L << (FLOAT4 - 266)) | (1L << (FLOAT8 - 266)) | (1L << (REAL - 266)) | (1L << (FLOAT - 266)) | (1L << (DOUBLE - 266)) | (1L << (NUMERIC - 266)) | (1L << (DECIMAL - 266)) | (1L << (CHAR - 266)) | (1L << (VARCHAR - 266)) | (1L << (NCHAR - 266)) | (1L << (NVARCHAR - 266)) | (1L << (DATE - 266)) | (1L << (TIME - 266)) | (1L << (TIMETZ - 266)) | (1L << (TIMESTAMP - 266)) | (1L << (TIMESTAMPTZ - 266)) | (1L << (TEXT - 266)) | (1L << (UUID - 266)) | (1L << (VARBINARY - 266)) | (1L << (BLOB - 266)) | (1L << (BYTEA - 266)) | (1L << (INET4 - 266)) | (1L << (INET - 266)) | (1L << (INTERVAL - 266)) | (1L << (VOID - 266)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
					}
				}

				setState(2637); match(RIGHT_PAREN);
				setState(2650);
				_la = _input.LA(1);
				if (_la==INHERITS) {
					{
					setState(2638); match(INHERITS);
					setState(2639); match(LEFT_PAREN);
					setState(2644); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2640); ((Create_table_statementContext)_localctx).paret_table = schema_qualified_name();
						setState(2642);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2641); match(COMMA);
							}
						}

						}
						}
						setState(2646); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
					setState(2648); match(RIGHT_PAREN);
					}
				}

				setState(2652); storage_parameter_oid();
				setState(2653); on_commit();
				setState(2654); table_space();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2656); match(CREATE);
				setState(2662);
				switch (_input.LA(1)) {
				case GLOBAL:
				case LOCAL:
				case TEMP:
				case TEMPORARY:
					{
					setState(2658);
					_la = _input.LA(1);
					if (_la==GLOBAL || _la==LOCAL) {
						{
						setState(2657);
						_la = _input.LA(1);
						if ( !(_la==GLOBAL || _la==LOCAL) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
					}

					setState(2660);
					_la = _input.LA(1);
					if ( !(_la==TEMP || _la==TEMPORARY) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
					break;
				case UNLOGGED:
					{
					setState(2661); match(UNLOGGED);
					}
					break;
				case TABLE:
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2664); match(TABLE);
				setState(2668);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2665); match(IF);
					setState(2666); match(NOT);
					setState(2667); match(EXISTS);
					}
				}

				setState(2670); ((Create_table_statementContext)_localctx).n = schema_qualified_name();
				setState(2671); match(OF);
				setState(2672); ((Create_table_statementContext)_localctx).type_name = identifier();
				setState(2695);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2673); match(LEFT_PAREN);
					setState(2689); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2684);
						switch ( getInterpreter().adaptivePredict(_input,379,_ctx) ) {
						case 1:
							{
							{
							setState(2674); ((Create_table_statementContext)_localctx).column_name = identifier();
							setState(2675); match(WITH);
							setState(2676); match(OPTIONS);
							setState(2680);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,378,_ctx);
							while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
								if ( _alt==1 ) {
									{
									{
									setState(2677); ((Create_table_statementContext)_localctx).col_constraint = column_constraint();
									}
									} 
								}
								setState(2682);
								_errHandler.sync(this);
								_alt = getInterpreter().adaptivePredict(_input,378,_ctx);
							}
							}
							}
							break;
						case 2:
							{
							setState(2683); table_constraint();
							}
							break;
						}
						setState(2687);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2686); match(COMMA);
							}
						}

						}
						}
						setState(2691); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CONSTRAINT) | (1L << EXCLUDE) | (1L << FOREIGN))) != 0) || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (PRIMARY - 90)) | (1L << (UNIQUE - 90)) | (1L << (ADMIN - 90)) | (1L << (ALWAYS - 90)) | (1L << (AVG - 90)) | (1L << (BETWEEN - 90)) | (1L << (BY - 90)) | (1L << (CACHE - 90)) | (1L << (CALLED - 90)) | (1L << (CLASS - 90)) | (1L << (CENTURY - 90)) | (1L << (CHARACTER - 90)) | (1L << (CHECK - 90)) | (1L << (CLUSTER - 90)) | (1L << (COLLECT - 90)) | (1L << (COALESCE - 90)) | (1L << (COLUMN - 90)) | (1L << (COMMENT - 90)) | (1L << (COMMENTS - 90)) | (1L << (COMMIT - 90)) | (1L << (CONCURRENTLY - 90)))) != 0) || ((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (CONFIGURATION - 154)) | (1L << (COST - 154)) | (1L << (COUNT - 154)) | (1L << (CUBE - 154)) | (1L << (CURRENT - 154)) | (1L << (CYCLE - 154)) | (1L << (DATA - 154)) | (1L << (DAY - 154)) | (1L << (DEC - 154)) | (1L << (DECADE - 154)) | (1L << (DEFINER - 154)) | (1L << (DICTIONARY - 154)) | (1L << (DISABLE - 154)) | (1L << (DOW - 154)) | (1L << (DOY - 154)) | (1L << (DROP - 154)) | (1L << (ENABLE - 154)) | (1L << (EPOCH - 154)) | (1L << (EVENT - 154)) | (1L << (EVERY - 154)) | (1L << (EXISTS - 154)) | (1L << (EXTENDED - 154)) | (1L << (EXTERNAL - 154)) | (1L << (EXTRACT - 154)) | (1L << (FAMILY - 154)) | (1L << (FILTER - 154)) | (1L << (FIRST - 154)) | (1L << (FORMAT - 154)) | (1L << (FUSION - 154)) | (1L << (GROUPING - 154)) | (1L << (HASH - 154)) | (1L << (INHERIT - 154)) | (1L << (INDEX - 154)) | (1L << (INCREMENT - 154)) | (1L << (INPUT - 154)) | (1L << (INSERT - 154)) | (1L << (INTERSECTION - 154)) | (1L << (ISCACHABLE - 154)) | (1L << (ISODOW - 154)) | (1L << (ISOYEAR - 154)) | (1L << (ISSTRICT - 154)) | (1L << (LANGUAGE - 154)) | (1L << (LARGE - 154)) | (1L << (LAST - 154)) | (1L << (LESS - 154)) | (1L << (LIST - 154)) | (1L << (LOCATION - 154)) | (1L << (MAIN - 154)) | (1L << (MATCH - 154)) | (1L << (MAX - 154)) | (1L << (MAXVALUE - 154)) | (1L << (MICROSECONDS - 154)) | (1L << (MILLENNIUM - 154)) | (1L << (MILLISECONDS - 154)) | (1L << (MIN - 154)) | (1L << (MINVALUE - 154)) | (1L << (MINUTE - 154)) | (1L << (MONTH - 154)) | (1L << (NATIONAL - 154)) | (1L << (NO - 154)) | (1L << (NONE - 154)) | (1L << (NULLIF - 154)))) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & ((1L << (OBJECT - 220)) | (1L << (ON - 220)) | (1L << (ONLY - 220)) | (1L << (OPTION - 220)) | (1L << (OPTIONS - 220)) | (1L << (OVERWRITE - 220)) | (1L << (PARSER - 220)) | (1L << (PARTIAL - 220)) | (1L << (PARTITION - 220)) | (1L << (PARTITIONS - 220)) | (1L << (PLAIN - 220)) | (1L << (PRECISION - 220)) | (1L << (PUBLIC - 220)) | (1L << (PURGE - 220)) | (1L << (QUARTER - 220)) | (1L << (RANGE - 220)) | (1L << (REGCONFIG - 220)) | (1L << (REGEXP - 220)) | (1L << (RENAME - 220)) | (1L << (REPLICA - 220)) | (1L << (RESET - 220)) | (1L << (RESTART - 220)) | (1L << (RLIKE - 220)) | (1L << (ROLLUP - 220)) | (1L << (SEARCH - 220)) | (1L << (SECOND - 220)) | (1L << (SECURITY - 220)) | (1L << (SERVER - 220)) | (1L << (SET - 220)) | (1L << (SIMILAR - 220)) | (1L << (SIMPLE - 220)) | (1L << (STABLE - 220)) | (1L << (START - 220)) | (1L << (STATISTICS - 220)) | (1L << (STORAGE - 220)) | (1L << (STDDEV_POP - 220)) | (1L << (STDDEV_SAMP - 220)) | (1L << (SUBPARTITION - 220)) | (1L << (SUM - 220)) | (1L << (TABLESPACE - 220)) | (1L << (TEMPLATE - 220)) | (1L << (THAN - 220)) | (1L << (TIMEZONE - 220)) | (1L << (TIMEZONE_HOUR - 220)) | (1L << (TIMEZONE_MINUTE - 220)) | (1L << (TRIM - 220)) | (1L << (TO - 220)) | (1L << (TYPE - 220)) | (1L << (TYPES - 220)) | (1L << (UNKNOWN - 220)) | (1L << (UNLOGGED - 220)) | (1L << (USER - 220)) | (1L << (VALID - 220)) | (1L << (VALIDATE - 220)) | (1L << (VALUES - 220)) | (1L << (VAR_SAMP - 220)) | (1L << (VAR_POP - 220)) | (1L << (VARYING - 220)) | (1L << (VERSION - 220)) | (1L << (VOLATILE - 220)) | (1L << (WEEK - 220)) | (1L << (WINDOW - 220)) | (1L << (WRAPPER - 220)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (YEAR - 284)) | (1L << (ZONE - 284)) | (1L << (BOOLEAN - 284)) | (1L << (BOOL - 284)) | (1L << (BIT - 284)) | (1L << (VARBIT - 284)) | (1L << (INT1 - 284)) | (1L << (INT2 - 284)) | (1L << (INT4 - 284)) | (1L << (INT8 - 284)) | (1L << (TINYINT - 284)) | (1L << (SMALLINT - 284)) | (1L << (INT - 284)) | (1L << (INTEGER - 284)) | (1L << (BIGINT - 284)) | (1L << (FLOAT4 - 284)) | (1L << (FLOAT8 - 284)) | (1L << (REAL - 284)) | (1L << (FLOAT - 284)) | (1L << (DOUBLE - 284)) | (1L << (NUMERIC - 284)) | (1L << (DECIMAL - 284)) | (1L << (CHAR - 284)) | (1L << (VARCHAR - 284)) | (1L << (NCHAR - 284)) | (1L << (NVARCHAR - 284)) | (1L << (DATE - 284)) | (1L << (TIME - 284)) | (1L << (TIMETZ - 284)) | (1L << (TIMESTAMP - 284)) | (1L << (TIMESTAMPTZ - 284)) | (1L << (TEXT - 284)) | (1L << (UUID - 284)) | (1L << (VARBINARY - 284)) | (1L << (BLOB - 284)) | (1L << (BYTEA - 284)) | (1L << (INET4 - 284)) | (1L << (INET - 284)) | (1L << (INTERVAL - 284)) | (1L << (VOID - 284)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
					setState(2693); match(RIGHT_PAREN);
					}
				}

				setState(2697); storage_parameter_oid();
				setState(2698); on_commit();
				setState(2699); table_space();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_column_definitionContext extends ParserRuleContext {
		public IdentifierContext column_name;
		public Data_typeContext datatype;
		public IdentifierContext collation;
		public Column_constraintContext colmn_constraint;
		public TerminalNode COLLATE() { return getToken(SQLParser.COLLATE, 0); }
		public List<Column_constraintContext> column_constraint() {
			return getRuleContexts(Column_constraintContext.class);
		}
		public Column_constraintContext column_constraint(int i) {
			return getRuleContext(Column_constraintContext.class,i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Table_column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_column_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_column_definition(this);
		}
	}

	public final Table_column_definitionContext table_column_definition() throws RecognitionException {
		Table_column_definitionContext _localctx = new Table_column_definitionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_table_column_definition);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2703); ((Table_column_definitionContext)_localctx).column_name = identifier();
			setState(2704); ((Table_column_definitionContext)_localctx).datatype = data_type();
			setState(2707);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(2705); match(COLLATE);
				setState(2706); ((Table_column_definitionContext)_localctx).collation = identifier();
				}
			}

			setState(2712);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2709); ((Table_column_definitionContext)_localctx).colmn_constraint = column_constraint();
					}
					} 
				}
				setState(2714);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,385,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_optionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode INDEXES() { return getToken(SQLParser.INDEXES, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(SQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(SQLParser.DEFAULTS, 0); }
		public TerminalNode COMMENTS() { return getToken(SQLParser.COMMENTS, 0); }
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public TerminalNode EXCLUDING() { return getToken(SQLParser.EXCLUDING, 0); }
		public TerminalNode INCLUDING() { return getToken(SQLParser.INCLUDING, 0); }
		public Like_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLike_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLike_option(this);
		}
	}

	public final Like_optionContext like_option() throws RecognitionException {
		Like_optionContext _localctx = new Like_optionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_like_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2715);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			setState(2716);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << CONSTRAINTS) | (1L << DEFAULTS))) != 0) || _la==COMMENTS || _la==INDEXES || _la==STORAGE) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public IdentifierContext constraint_name;
		public IdentifierContext column_name_unique;
		public Index_parametersContext index_parameters_unique;
		public IdentifierContext column_name_pr_key;
		public Index_parametersContext index_parameters_pr_key;
		public IdentifierContext index_method;
		public IdentifierContext exclude_element;
		public IdentifierContext operator;
		public IdentifierContext predicat;
		public IdentifierContext column_name_for_key;
		public Schema_qualified_nameContext reftable;
		public IdentifierContext refcolumn;
		public ActionContext action_on_delete;
		public ActionContext action_on_update;
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public List<TerminalNode> FULL() { return getTokens(SQLParser.FULL); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public Check_boolean_expressionContext check_boolean_expression() {
			return getRuleContext(Check_boolean_expressionContext.class,0);
		}
		public Index_parametersContext index_parameters() {
			return getRuleContext(Index_parametersContext.class,0);
		}
		public TerminalNode KEY() { return getToken(SQLParser.KEY, 0); }
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public List<TerminalNode> PARTIAL() { return getTokens(SQLParser.PARTIAL); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode SIMPLE(int i) {
			return getToken(SQLParser.SIMPLE, i);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode PARTIAL(int i) {
			return getToken(SQLParser.PARTIAL, i);
		}
		public List<TerminalNode> SIMPLE() { return getTokens(SQLParser.SIMPLE); }
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode EXCLUDE() { return getToken(SQLParser.EXCLUDE, 0); }
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode FULL(int i) {
			return getToken(SQLParser.FULL, i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public TerminalNode REFERENCES() { return getToken(SQLParser.REFERENCES, 0); }
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public List<TerminalNode> MATCH() { return getTokens(SQLParser.MATCH); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode PRIMARY() { return getToken(SQLParser.PRIMARY, 0); }
		public TerminalNode MATCH(int i) {
			return getToken(SQLParser.MATCH, i);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_constraint(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_table_constraint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2720);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2718); match(CONSTRAINT);
				setState(2719); ((Table_constraintContext)_localctx).constraint_name = identifier();
				}
			}

			setState(2821);
			switch (_input.LA(1)) {
			case CHECK:
				{
				setState(2722); check_boolean_expression();
				}
				break;
			case UNIQUE:
				{
				{
				setState(2723); match(UNIQUE);
				setState(2724); match(LEFT_PAREN);
				setState(2729); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2725); ((Table_constraintContext)_localctx).column_name_unique = identifier();
					setState(2727);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2726); match(COMMA);
						}
					}

					}
					}
					setState(2731); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(2733); match(RIGHT_PAREN);
				setState(2734); ((Table_constraintContext)_localctx).index_parameters_unique = index_parameters();
				}
				}
				break;
			case PRIMARY:
				{
				{
				setState(2736); match(PRIMARY);
				setState(2737); match(KEY);
				setState(2738); match(LEFT_PAREN);
				setState(2743); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2739); ((Table_constraintContext)_localctx).column_name_pr_key = identifier();
					setState(2741);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2740); match(COMMA);
						}
					}

					}
					}
					setState(2745); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(2747); match(RIGHT_PAREN);
				setState(2748); ((Table_constraintContext)_localctx).index_parameters_pr_key = index_parameters();
				}
				}
				break;
			case EXCLUDE:
				{
				{
				setState(2750); match(EXCLUDE);
				setState(2753);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2751); match(USING);
					setState(2752); ((Table_constraintContext)_localctx).index_method = identifier();
					}
				}

				setState(2755); match(LEFT_PAREN);
				setState(2756); ((Table_constraintContext)_localctx).exclude_element = identifier();
				setState(2757); match(WITH);
				setState(2762); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2758); ((Table_constraintContext)_localctx).operator = identifier();
					setState(2760);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2759); match(COMMA);
						}
					}

					}
					}
					setState(2764); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(2766); match(RIGHT_PAREN);
				setState(2767); index_parameters();
				setState(2773);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(2768); match(WHERE);
					setState(2769); match(LEFT_PAREN);
					setState(2770); ((Table_constraintContext)_localctx).predicat = identifier();
					setState(2771); match(RIGHT_PAREN);
					}
				}

				}
				}
				break;
			case FOREIGN:
				{
				{
				setState(2775); match(FOREIGN);
				setState(2776); match(KEY);
				setState(2777); match(LEFT_PAREN);
				setState(2782); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2778); ((Table_constraintContext)_localctx).column_name_for_key = identifier();
					setState(2780);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2779); match(COMMA);
						}
					}

					}
					}
					setState(2784); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
				setState(2786); match(RIGHT_PAREN);
				setState(2787); match(REFERENCES);
				setState(2788); ((Table_constraintContext)_localctx).reftable = schema_qualified_name();
				setState(2800);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(2789); match(LEFT_PAREN);
					setState(2794); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(2790); ((Table_constraintContext)_localctx).refcolumn = identifier();
						setState(2792);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2791); match(COMMA);
							}
						}

						}
						}
						setState(2796); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
					setState(2798); match(RIGHT_PAREN);
					}
				}

				setState(2818);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,402,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						setState(2816);
						switch ( getInterpreter().adaptivePredict(_input,401,_ctx) ) {
						case 1:
							{
							setState(2808);
							switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
							case 1:
								{
								{
								setState(2802); match(MATCH);
								setState(2803); match(FULL);
								}
								}
								break;
							case 2:
								{
								{
								setState(2804); match(MATCH);
								setState(2805); match(PARTIAL);
								}
								}
								break;
							case 3:
								{
								{
								setState(2806); match(MATCH);
								setState(2807); match(SIMPLE);
								}
								}
								break;
							}
							}
							break;
						case 2:
							{
							{
							setState(2810); match(ON);
							setState(2811); match(DELETE);
							setState(2812); ((Table_constraintContext)_localctx).action_on_delete = action();
							}
							}
							break;
						case 3:
							{
							{
							setState(2813); match(ON);
							setState(2814); match(UPDATE);
							setState(2815); ((Table_constraintContext)_localctx).action_on_update = action();
							}
							}
							break;
						}
						} 
					}
					setState(2820);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,402,_ctx);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2826);
			switch ( getInterpreter().adaptivePredict(_input,404,_ctx) ) {
			case 1:
				{
				setState(2823); match(DEFERRABLE);
				}
				break;
			case 2:
				{
				{
				setState(2824); match(NOT);
				setState(2825); match(DEFERRABLE);
				}
				}
				break;
			}
			setState(2832);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				{
				setState(2828); match(INITIALLY);
				setState(2829); match(DEFERRED);
				}
				}
				break;
			case 2:
				{
				{
				setState(2830); match(INITIALLY);
				setState(2831); match(IMMEDIATE);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraintContext extends ParserRuleContext {
		public IdentifierContext constraint_name;
		public Data_typeContext default_expr_data;
		public Value_expressionContext default_expr;
		public Index_parametersContext index_params_unique;
		public Index_parametersContext index_params_pr_key;
		public Schema_qualified_nameContext reftable;
		public IdentifierContext refcolumn;
		public ActionContext action_on_delete;
		public ActionContext action_on_update;
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public TerminalNode FULL() { return getToken(SQLParser.FULL, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public Check_boolean_expressionContext check_boolean_expression() {
			return getRuleContext(Check_boolean_expressionContext.class,0);
		}
		public Index_parametersContext index_parameters() {
			return getRuleContext(Index_parametersContext.class,0);
		}
		public TerminalNode KEY() { return getToken(SQLParser.KEY, 0); }
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public TerminalNode PARTIAL() { return getToken(SQLParser.PARTIAL, 0); }
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode NOT(int i) {
			return getToken(SQLParser.NOT, i);
		}
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode SIMPLE() { return getToken(SQLParser.SIMPLE, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public TerminalNode REFERENCES() { return getToken(SQLParser.REFERENCES, 0); }
		public TerminalNode MATCH() { return getToken(SQLParser.MATCH, 0); }
		public List<TerminalNode> NOT() { return getTokens(SQLParser.NOT); }
		public TerminalNode PRIMARY() { return getToken(SQLParser.PRIMARY, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Column_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_constraint(this);
		}
	}

	public final Column_constraintContext column_constraint() throws RecognitionException {
		Column_constraintContext _localctx = new Column_constraintContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_column_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2836);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(2834); match(CONSTRAINT);
				setState(2835); ((Column_constraintContext)_localctx).constraint_name = identifier();
				}
			}

			setState(2873);
			switch (_input.LA(1)) {
			case NOT:
				{
				setState(2838); match(NOT);
				setState(2839); match(NULL);
				}
				break;
			case NULL:
				{
				setState(2840); match(NULL);
				}
				break;
			case CHECK:
				{
				setState(2841); check_boolean_expression();
				}
				break;
			case DEFAULT:
				{
				setState(2842); match(DEFAULT);
				setState(2845);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(2843); ((Column_constraintContext)_localctx).default_expr_data = data_type();
					}
					break;
				case 2:
					{
					setState(2844); ((Column_constraintContext)_localctx).default_expr = value_expression();
					}
					break;
				}
				}
				break;
			case UNIQUE:
				{
				{
				setState(2847); match(UNIQUE);
				setState(2848); ((Column_constraintContext)_localctx).index_params_unique = index_parameters();
				}
				}
				break;
			case PRIMARY:
				{
				{
				setState(2849); match(PRIMARY);
				setState(2850); match(KEY);
				setState(2851); ((Column_constraintContext)_localctx).index_params_pr_key = index_parameters();
				}
				}
				break;
			case REFERENCES:
				{
				{
				setState(2852); match(REFERENCES);
				setState(2853); ((Column_constraintContext)_localctx).reftable = schema_qualified_name();
				{
				{
				setState(2854); ((Column_constraintContext)_localctx).refcolumn = identifier();
				}
				}
				setState(2861);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(2855); match(MATCH);
					setState(2856); match(FULL);
					}
					break;
				case 2:
					{
					setState(2857); match(MATCH);
					setState(2858); match(PARTIAL);
					}
					break;
				case 3:
					{
					setState(2859); match(MATCH);
					setState(2860); match(SIMPLE);
					}
					break;
				}
				setState(2866);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(2863); match(ON);
					setState(2864); match(DELETE);
					setState(2865); ((Column_constraintContext)_localctx).action_on_delete = action();
					}
					break;
				}
				setState(2871);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(2868); match(ON);
					setState(2869); match(UPDATE);
					setState(2870); ((Column_constraintContext)_localctx).action_on_update = action();
					}
					break;
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2878);
			switch ( getInterpreter().adaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				setState(2875); match(DEFERRABLE);
				}
				break;
			case 2:
				{
				{
				setState(2876); match(NOT);
				setState(2877); match(DEFERRABLE);
				}
				}
				break;
			}
			setState(2884);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				{
				setState(2880); match(INITIALLY);
				setState(2881); match(DEFERRED);
				}
				}
				break;
			case 2:
				{
				{
				setState(2882); match(INITIALLY);
				setState(2883); match(IMMEDIATE);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Check_boolean_expressionContext extends ParserRuleContext {
		public Boolean_value_expressionContext expression;
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Check_boolean_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_check_boolean_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCheck_boolean_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCheck_boolean_expression(this);
		}
	}

	public final Check_boolean_expressionContext check_boolean_expression() throws RecognitionException {
		Check_boolean_expressionContext _localctx = new Check_boolean_expressionContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_check_boolean_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2886); match(CHECK);
			setState(2887); match(LEFT_PAREN);
			setState(2888); ((Check_boolean_expressionContext)_localctx).expression = boolean_value_expression();
			setState(2889); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_parameterContext extends ParserRuleContext {
		public IdentifierContext storage_param;
		public IdentifierContext value;
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Storage_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStorage_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStorage_parameter(this);
		}
	}

	public final Storage_parameterContext storage_parameter() throws RecognitionException {
		Storage_parameterContext _localctx = new Storage_parameterContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_storage_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2891); match(LEFT_PAREN);
			setState(2900); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2892); ((Storage_parameterContext)_localctx).storage_param = identifier();
				setState(2895);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(2893); match(EQUAL);
					setState(2894); ((Storage_parameterContext)_localctx).value = identifier();
					}
				}

				setState(2898);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2897); match(COMMA);
					}
				}

				}
				}
				setState(2902); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (DOUBLE_QUOTE - 353)) | (1L << (Identifier - 353)) | (1L << (QuotedIdentifier - 353)))) != 0) );
			setState(2904); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_storage_parameterContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public Storage_parameterContext storage_parameter() {
			return getRuleContext(Storage_parameterContext.class,0);
		}
		public With_storage_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_storage_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWith_storage_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWith_storage_parameter(this);
		}
	}

	public final With_storage_parameterContext with_storage_parameter() throws RecognitionException {
		With_storage_parameterContext _localctx = new With_storage_parameterContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_with_storage_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2906); match(WITH);
			setState(2907); storage_parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Storage_parameter_oidContext extends ParserRuleContext {
		public TerminalNode OIDS() { return getToken(SQLParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public Storage_parameter_oidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storage_parameter_oid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStorage_parameter_oid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStorage_parameter_oid(this);
		}
	}

	public final Storage_parameter_oidContext storage_parameter_oid() throws RecognitionException {
		Storage_parameter_oidContext _localctx = new Storage_parameter_oidContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_storage_parameter_oid);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2914);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(2909); with_storage_parameter();
				}
				break;
			case 2:
				{
				{
				setState(2910); match(WITH);
				setState(2911); match(OIDS);
				}
				}
				break;
			case 3:
				{
				{
				setState(2912); match(WITHOUT);
				setState(2913); match(OIDS);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_commitContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode PRESERVE() { return getToken(SQLParser.PRESERVE, 0); }
		public TerminalNode COMMIT() { return getToken(SQLParser.COMMIT, 0); }
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public On_commitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_commit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOn_commit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOn_commit(this);
		}
	}

	public final On_commitContext on_commit() throws RecognitionException {
		On_commitContext _localctx = new On_commitContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_on_commit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2925);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2916); match(ON);
				setState(2917); match(COMMIT);
				setState(2923);
				switch (_input.LA(1)) {
				case PRESERVE:
					{
					{
					setState(2918); match(PRESERVE);
					setState(2919); match(ROWS);
					}
					}
					break;
				case DELETE:
					{
					{
					setState(2920); match(DELETE);
					setState(2921); match(ROWS);
					}
					}
					break;
				case DROP:
					{
					setState(2922); match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_spaceContext extends ParserRuleContext {
		public IdentifierContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_spaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_space; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_space(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_space(this);
		}
	}

	public final Table_spaceContext table_space() throws RecognitionException {
		Table_spaceContext _localctx = new Table_spaceContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_table_space);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2929);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2927); match(TABLESPACE);
				setState(2928); ((Table_spaceContext)_localctx).tablespace = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAction(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_action);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2937);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(2931); match(RESTRICT);
				}
				break;
			case 2:
				{
				setState(2932); match(CASCADE);
				}
				break;
			case 3:
				{
				setState(2933); match(SET);
				setState(2934); match(NULL);
				}
				break;
			case 4:
				{
				setState(2935); match(SET);
				setState(2936); match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_parametersContext extends ParserRuleContext {
		public IdentifierContext tablespace;
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public With_storage_parameterContext with_storage_parameter() {
			return getRuleContext(With_storage_parameterContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public Index_parametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_parameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndex_parameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndex_parameters(this);
		}
	}

	public final Index_parametersContext index_parameters() throws RecognitionException {
		Index_parametersContext _localctx = new Index_parametersContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_index_parameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2940);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2939); with_storage_parameter();
				}
			}

			setState(2946);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2942); match(USING);
				setState(2943); match(INDEX);
				setState(2944); match(TABLESPACE);
				setState(2945); ((Index_parametersContext)_localctx).tablespace = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementsContext extends ParserRuleContext {
		public Field_elementContext field_element(int i) {
			return getRuleContext(Field_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Field_elementContext> field_element() {
			return getRuleContexts(Field_elementContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Table_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_elements(this);
		}
	}

	public final Table_elementsContext table_elements() throws RecognitionException {
		Table_elementsContext _localctx = new Table_elementsContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_table_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2948); match(LEFT_PAREN);
			setState(2949); field_element();
			setState(2954);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2950); match(COMMA);
				setState(2951); field_element();
				}
				}
				setState(2956);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2957); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_elementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Field_typeContext field_type() {
			return getRuleContext(Field_typeContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Field_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterField_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitField_element(this);
		}
	}

	public final Field_elementContext field_element() throws RecognitionException {
		Field_elementContext _localctx = new Field_elementContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_field_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2959); ((Field_elementContext)_localctx).name = identifier();
			setState(2960); field_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_typeContext extends ParserRuleContext {
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Field_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterField_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitField_type(this);
		}
	}

	public final Field_typeContext field_type() throws RecognitionException {
		Field_typeContext _localctx = new Field_typeContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_field_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2962); data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_clauseContext extends ParserRuleContext {
		public List<ParamContext> param() {
			return getRuleContexts(ParamContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public ParamContext param(int i) {
			return getRuleContext(ParamContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Param_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterParam_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitParam_clause(this);
		}
	}

	public final Param_clauseContext param_clause() throws RecognitionException {
		Param_clauseContext _localctx = new Param_clauseContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_param_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2964); match(WITH);
			setState(2965); match(LEFT_PAREN);
			setState(2966); param();
			setState(2971);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2967); match(COMMA);
				setState(2968); param();
				}
				}
				setState(2973);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2974); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParamContext extends ParserRuleContext {
		public IdentifierContext key;
		public Numeric_value_expressionContext value;
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitParam(this);
		}
	}

	public final ParamContext param() throws RecognitionException {
		ParamContext _localctx = new ParamContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2976); ((ParamContext)_localctx).key = identifier();
			setState(2977); match(EQUAL);
			setState(2978); ((ParamContext)_localctx).value = numeric_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Method_specifierContext extends ParserRuleContext {
		public IdentifierContext m;
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Method_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_method_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterMethod_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitMethod_specifier(this);
		}
	}

	public final Method_specifierContext method_specifier() throws RecognitionException {
		Method_specifierContext _localctx = new Method_specifierContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_method_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2980); match(USING);
			setState(2981); ((Method_specifierContext)_localctx).m = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_space_specifierContext extends ParserRuleContext {
		public Table_space_nameContext table_space_name() {
			return getRuleContext(Table_space_nameContext.class,0);
		}
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public Table_space_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_space_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_space_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_space_specifier(this);
		}
	}

	public final Table_space_specifierContext table_space_specifier() throws RecognitionException {
		Table_space_specifierContext _localctx = new Table_space_specifierContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_table_space_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2983); match(TABLESPACE);
			setState(2984); table_space_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_space_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_space_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_space_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_space_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_space_name(this);
		}
	}

	public final Table_space_nameContext table_space_name() throws RecognitionException {
		Table_space_nameContext _localctx = new Table_space_nameContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_table_space_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2986); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_partitioning_clausesContext extends ParserRuleContext {
		public Column_partitionsContext column_partitions() {
			return getRuleContext(Column_partitionsContext.class,0);
		}
		public Hash_partitionsContext hash_partitions() {
			return getRuleContext(Hash_partitionsContext.class,0);
		}
		public List_partitionsContext list_partitions() {
			return getRuleContext(List_partitionsContext.class,0);
		}
		public Range_partitionsContext range_partitions() {
			return getRuleContext(Range_partitionsContext.class,0);
		}
		public Table_partitioning_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_partitioning_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_partitioning_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_partitioning_clauses(this);
		}
	}

	public final Table_partitioning_clausesContext table_partitioning_clauses() throws RecognitionException {
		Table_partitioning_clausesContext _localctx = new Table_partitioning_clausesContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_table_partitioning_clauses);
		try {
			setState(2992);
			switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2988); range_partitions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2989); hash_partitions();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2990); list_partitions();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2991); column_partitions();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_partitionsContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(SQLParser.RANGE, 0); }
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Range_value_clause_listContext range_value_clause_list() {
			return getRuleContext(Range_value_clause_listContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public Range_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRange_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRange_partitions(this);
		}
	}

	public final Range_partitionsContext range_partitions() throws RecognitionException {
		Range_partitionsContext _localctx = new Range_partitionsContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_range_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2994); match(PARTITION);
			setState(2995); match(BY);
			setState(2996); match(RANGE);
			setState(2997); match(LEFT_PAREN);
			setState(2998); column_reference_list();
			setState(2999); match(RIGHT_PAREN);
			setState(3000); match(LEFT_PAREN);
			setState(3001); range_value_clause_list();
			setState(3002); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_value_clause_listContext extends ParserRuleContext {
		public Range_value_clauseContext range_value_clause(int i) {
			return getRuleContext(Range_value_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Range_value_clauseContext> range_value_clause() {
			return getRuleContexts(Range_value_clauseContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Range_value_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_value_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRange_value_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRange_value_clause_list(this);
		}
	}

	public final Range_value_clause_listContext range_value_clause_list() throws RecognitionException {
		Range_value_clause_listContext _localctx = new Range_value_clause_listContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_range_value_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3004); range_value_clause();
			setState(3009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3005); match(COMMA);
				setState(3006); range_value_clause();
				}
				}
				setState(3011);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_value_clauseContext extends ParserRuleContext {
		public TerminalNode THAN() { return getToken(SQLParser.THAN, 0); }
		public TerminalNode LESS() { return getToken(SQLParser.LESS, 0); }
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode MAXVALUE() { return getToken(SQLParser.MAXVALUE, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public Range_value_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_value_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRange_value_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRange_value_clause(this);
		}
	}

	public final Range_value_clauseContext range_value_clause() throws RecognitionException {
		Range_value_clauseContext _localctx = new Range_value_clauseContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_range_value_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3012); match(PARTITION);
			setState(3013); partition_name();
			setState(3014); match(VALUES);
			setState(3015); match(LESS);
			setState(3016); match(THAN);
			setState(3028);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(3017); match(LEFT_PAREN);
				setState(3018); value_expression();
				setState(3019); match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3022);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(3021); match(LEFT_PAREN);
					}
				}

				setState(3024); match(MAXVALUE);
				setState(3026);
				switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					setState(3025); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partitionsContext extends ParserRuleContext {
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public Hash_partitions_by_quantityContext hash_partitions_by_quantity() {
			return getRuleContext(Hash_partitions_by_quantityContext.class,0);
		}
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Individual_hash_partitionsContext individual_hash_partitions() {
			return getRuleContext(Individual_hash_partitionsContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode HASH() { return getToken(SQLParser.HASH, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public Hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterHash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitHash_partitions(this);
		}
	}

	public final Hash_partitionsContext hash_partitions() throws RecognitionException {
		Hash_partitionsContext _localctx = new Hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_hash_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3030); match(PARTITION);
			setState(3031); match(BY);
			setState(3032); match(HASH);
			setState(3033); match(LEFT_PAREN);
			setState(3034); column_reference_list();
			setState(3035); match(RIGHT_PAREN);
			setState(3041);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(3036); match(LEFT_PAREN);
				setState(3037); individual_hash_partitions();
				setState(3038); match(RIGHT_PAREN);
				}
				break;
			case PARTITIONS:
				{
				setState(3040); hash_partitions_by_quantity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Individual_hash_partitionsContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Individual_hash_partitionContext> individual_hash_partition() {
			return getRuleContexts(Individual_hash_partitionContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Individual_hash_partitionContext individual_hash_partition(int i) {
			return getRuleContext(Individual_hash_partitionContext.class,i);
		}
		public Individual_hash_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndividual_hash_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndividual_hash_partitions(this);
		}
	}

	public final Individual_hash_partitionsContext individual_hash_partitions() throws RecognitionException {
		Individual_hash_partitionsContext _localctx = new Individual_hash_partitionsContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_individual_hash_partitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3043); individual_hash_partition();
			setState(3048);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3044); match(COMMA);
				setState(3045); individual_hash_partition();
				}
				}
				setState(3050);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Individual_hash_partitionContext extends ParserRuleContext {
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public Individual_hash_partitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_individual_hash_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndividual_hash_partition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndividual_hash_partition(this);
		}
	}

	public final Individual_hash_partitionContext individual_hash_partition() throws RecognitionException {
		Individual_hash_partitionContext _localctx = new Individual_hash_partitionContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_individual_hash_partition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3051); match(PARTITION);
			setState(3052); partition_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hash_partitions_by_quantityContext extends ParserRuleContext {
		public Numeric_value_expressionContext quantity;
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode PARTITIONS() { return getToken(SQLParser.PARTITIONS, 0); }
		public Hash_partitions_by_quantityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hash_partitions_by_quantity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterHash_partitions_by_quantity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitHash_partitions_by_quantity(this);
		}
	}

	public final Hash_partitions_by_quantityContext hash_partitions_by_quantity() throws RecognitionException {
		Hash_partitions_by_quantityContext _localctx = new Hash_partitions_by_quantityContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_hash_partitions_by_quantity);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3054); match(PARTITIONS);
			setState(3055); ((Hash_partitions_by_quantityContext)_localctx).quantity = numeric_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_partitionsContext extends ParserRuleContext {
		public List_value_clause_listContext list_value_clause_list() {
			return getRuleContext(List_value_clause_listContext.class,0);
		}
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode LIST() { return getToken(SQLParser.LIST, 0); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterList_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitList_partitions(this);
		}
	}

	public final List_partitionsContext list_partitions() throws RecognitionException {
		List_partitionsContext _localctx = new List_partitionsContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_list_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3057); match(PARTITION);
			setState(3058); match(BY);
			setState(3059); match(LIST);
			setState(3060); match(LEFT_PAREN);
			setState(3061); column_reference_list();
			setState(3062); match(RIGHT_PAREN);
			setState(3063); match(LEFT_PAREN);
			setState(3064); list_value_clause_list();
			setState(3065); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_value_clause_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<List_value_partitionContext> list_value_partition() {
			return getRuleContexts(List_value_partitionContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List_value_partitionContext list_value_partition(int i) {
			return getRuleContext(List_value_partitionContext.class,i);
		}
		public List_value_clause_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_value_clause_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterList_value_clause_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitList_value_clause_list(this);
		}
	}

	public final List_value_clause_listContext list_value_clause_list() throws RecognitionException {
		List_value_clause_listContext _localctx = new List_value_clause_listContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_list_value_clause_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3067); list_value_partition();
			setState(3072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3068); match(COMMA);
				setState(3069); list_value_partition();
				}
				}
				setState(3074);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class List_value_partitionContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public In_value_listContext in_value_list() {
			return getRuleContext(In_value_listContext.class,0);
		}
		public Partition_nameContext partition_name() {
			return getRuleContext(Partition_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public List_value_partitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_list_value_partition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterList_value_partition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitList_value_partition(this);
		}
	}

	public final List_value_partitionContext list_value_partition() throws RecognitionException {
		List_value_partitionContext _localctx = new List_value_partitionContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_list_value_partition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3075); match(PARTITION);
			setState(3076); partition_name();
			setState(3077); match(VALUES);
			setState(3079);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(3078); match(IN);
				}
			}

			setState(3081); match(LEFT_PAREN);
			setState(3082); in_value_list();
			setState(3083); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_partitionsContext extends ParserRuleContext {
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public Table_elementsContext table_elements() {
			return getRuleContext(Table_elementsContext.class,0);
		}
		public Column_partitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_partitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_partitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_partitions(this);
		}
	}

	public final Column_partitionsContext column_partitions() throws RecognitionException {
		Column_partitionsContext _localctx = new Column_partitionsContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_column_partitions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3085); match(PARTITION);
			setState(3086); match(BY);
			setState(3087); match(COLUMN);
			setState(3088); table_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Partition_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPartition_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPartition_name(this);
		}
	}

	public final Partition_nameContext partition_name() throws RecognitionException {
		Partition_nameContext _localctx = new Partition_nameContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_partition_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3090); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_table_statementContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode PURGE() { return getToken(SQLParser.PURGE, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Drop_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDrop_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDrop_table_statement(this);
		}
	}

	public final Drop_table_statementContext drop_table_statement() throws RecognitionException {
		Drop_table_statementContext _localctx = new Drop_table_statementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_drop_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3092); match(DROP);
			setState(3093); match(TABLE);
			setState(3094); schema_qualified_name();
			setState(3096);
			_la = _input.LA(1);
			if (_la==PURGE) {
				{
				setState(3095); match(PURGE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode QuotedIdentifier() { return getToken(SQLParser.QuotedIdentifier, 0); }
		public Nonreserved_keywordsContext nonreserved_keywords() {
			return getRuleContext(Nonreserved_keywordsContext.class,0);
		}
		public TerminalNode Identifier() { return getToken(SQLParser.Identifier, 0); }
		public TerminalNode DOUBLE_QUOTE(int i) {
			return getToken(SQLParser.DOUBLE_QUOTE, i);
		}
		public List<TerminalNode> DOUBLE_QUOTE() { return getTokens(SQLParser.DOUBLE_QUOTE); }
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_identifier);
		int _la;
		try {
			setState(3107);
			switch (_input.LA(1)) {
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(3098); match(Identifier);
				}
				break;
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(3099); match(QuotedIdentifier);
				}
				break;
			case ADMIN:
			case ALWAYS:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case DOUBLE_QUOTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3101);
				_la = _input.LA(1);
				if (_la==DOUBLE_QUOTE) {
					{
					setState(3100); match(DOUBLE_QUOTE);
					}
				}

				setState(3103); nonreserved_keywords();
				setState(3105);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(3104); match(DOUBLE_QUOTE);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nonreserved_keywordsContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(SQLParser.TIMESTAMP, 0); }
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode BIT() { return getToken(SQLParser.BIT, 0); }
		public TerminalNode VAR_SAMP() { return getToken(SQLParser.VAR_SAMP, 0); }
		public TerminalNode STDDEV_POP() { return getToken(SQLParser.STDDEV_POP, 0); }
		public TerminalNode COALESCE() { return getToken(SQLParser.COALESCE, 0); }
		public TerminalNode SUM() { return getToken(SQLParser.SUM, 0); }
		public TerminalNode INT() { return getToken(SQLParser.INT, 0); }
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public TerminalNode QUARTER() { return getToken(SQLParser.QUARTER, 0); }
		public TerminalNode EVERY() { return getToken(SQLParser.EVERY, 0); }
		public TerminalNode NVARCHAR() { return getToken(SQLParser.NVARCHAR, 0); }
		public TerminalNode INT1() { return getToken(SQLParser.INT1, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode SECOND() { return getToken(SQLParser.SECOND, 0); }
		public TerminalNode ROLLUP() { return getToken(SQLParser.ROLLUP, 0); }
		public TerminalNode MAX() { return getToken(SQLParser.MAX, 0); }
		public TerminalNode OPTIONS() { return getToken(SQLParser.OPTIONS, 0); }
		public TerminalNode COUNT() { return getToken(SQLParser.COUNT, 0); }
		public TerminalNode YEAR() { return getToken(SQLParser.YEAR, 0); }
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TerminalNode SIMILAR() { return getToken(SQLParser.SIMILAR, 0); }
		public TerminalNode COST() { return getToken(SQLParser.COST, 0); }
		public TerminalNode RLIKE() { return getToken(SQLParser.RLIKE, 0); }
		public TerminalNode BYTEA() { return getToken(SQLParser.BYTEA, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode PURGE() { return getToken(SQLParser.PURGE, 0); }
		public TerminalNode INTERVAL() { return getToken(SQLParser.INTERVAL, 0); }
		public TerminalNode CHAR() { return getToken(SQLParser.CHAR, 0); }
		public TerminalNode VARBINARY() { return getToken(SQLParser.VARBINARY, 0); }
		public TerminalNode EXTENDED() { return getToken(SQLParser.EXTENDED, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode VARCHAR() { return getToken(SQLParser.VARCHAR, 0); }
		public TerminalNode AVG() { return getToken(SQLParser.AVG, 0); }
		public TerminalNode INET4() { return getToken(SQLParser.INET4, 0); }
		public TerminalNode FLOAT8() { return getToken(SQLParser.FLOAT8, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode VAR_POP() { return getToken(SQLParser.VAR_POP, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode ISOYEAR() { return getToken(SQLParser.ISOYEAR, 0); }
		public TerminalNode MINUTE() { return getToken(SQLParser.MINUTE, 0); }
		public TerminalNode LAST() { return getToken(SQLParser.LAST, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode PUBLIC() { return getToken(SQLParser.PUBLIC, 0); }
		public TerminalNode VALIDATE() { return getToken(SQLParser.VALIDATE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SQLParser.CONCURRENTLY, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode OVERWRITE() { return getToken(SQLParser.OVERWRITE, 0); }
		public TerminalNode INET() { return getToken(SQLParser.INET, 0); }
		public TerminalNode NCHAR() { return getToken(SQLParser.NCHAR, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(SQLParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMETZ() { return getToken(SQLParser.TIMETZ, 0); }
		public TerminalNode INHERIT() { return getToken(SQLParser.INHERIT, 0); }
		public TerminalNode CACHE() { return getToken(SQLParser.CACHE, 0); }
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode INPUT() { return getToken(SQLParser.INPUT, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode MONTH() { return getToken(SQLParser.MONTH, 0); }
		public TerminalNode BLOB() { return getToken(SQLParser.BLOB, 0); }
		public TerminalNode DEC() { return getToken(SQLParser.DEC, 0); }
		public TerminalNode RESTART() { return getToken(SQLParser.RESTART, 0); }
		public TerminalNode INTERSECTION() { return getToken(SQLParser.INTERSECTION, 0); }
		public TerminalNode VOLATILE() { return getToken(SQLParser.VOLATILE, 0); }
		public TerminalNode REGCONFIG() { return getToken(SQLParser.REGCONFIG, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public TerminalNode LESS() { return getToken(SQLParser.LESS, 0); }
		public TerminalNode MILLENNIUM() { return getToken(SQLParser.MILLENNIUM, 0); }
		public TerminalNode SIMPLE() { return getToken(SQLParser.SIMPLE, 0); }
		public TerminalNode CALLED() { return getToken(SQLParser.CALLED, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode ISSTRICT() { return getToken(SQLParser.ISSTRICT, 0); }
		public TerminalNode TINYINT() { return getToken(SQLParser.TINYINT, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public TerminalNode GROUPING() { return getToken(SQLParser.GROUPING, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public TerminalNode TIMESTAMPTZ() { return getToken(SQLParser.TIMESTAMPTZ, 0); }
		public TerminalNode NATIONAL() { return getToken(SQLParser.NATIONAL, 0); }
		public TerminalNode BETWEEN() { return getToken(SQLParser.BETWEEN, 0); }
		public TerminalNode DATE() { return getToken(SQLParser.DATE, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public TerminalNode UNLOGGED() { return getToken(SQLParser.UNLOGGED, 0); }
		public TerminalNode FUSION() { return getToken(SQLParser.FUSION, 0); }
		public TerminalNode INCREMENT() { return getToken(SQLParser.INCREMENT, 0); }
		public TerminalNode SECURITY() { return getToken(SQLParser.SECURITY, 0); }
		public TerminalNode COMMIT() { return getToken(SQLParser.COMMIT, 0); }
		public TerminalNode INT2() { return getToken(SQLParser.INT2, 0); }
		public TerminalNode VARBIT() { return getToken(SQLParser.VARBIT, 0); }
		public TerminalNode REPLICA() { return getToken(SQLParser.REPLICA, 0); }
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode WEEK() { return getToken(SQLParser.WEEK, 0); }
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public TerminalNode FIRST() { return getToken(SQLParser.FIRST, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode NULLIF() { return getToken(SQLParser.NULLIF, 0); }
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public TerminalNode TRIM() { return getToken(SQLParser.TRIM, 0); }
		public TerminalNode VOID() { return getToken(SQLParser.VOID, 0); }
		public TerminalNode DOUBLE() { return getToken(SQLParser.DOUBLE, 0); }
		public TerminalNode INSERT() { return getToken(SQLParser.INSERT, 0); }
		public TerminalNode LOCATION() { return getToken(SQLParser.LOCATION, 0); }
		public TerminalNode CENTURY() { return getToken(SQLParser.CENTURY, 0); }
		public TerminalNode LIST() { return getToken(SQLParser.LIST, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public TerminalNode CYCLE() { return getToken(SQLParser.CYCLE, 0); }
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode ISCACHABLE() { return getToken(SQLParser.ISCACHABLE, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode SMALLINT() { return getToken(SQLParser.SMALLINT, 0); }
		public TerminalNode ISODOW() { return getToken(SQLParser.ISODOW, 0); }
		public TerminalNode UUID() { return getToken(SQLParser.UUID, 0); }
		public TerminalNode FORMAT() { return getToken(SQLParser.FORMAT, 0); }
		public TerminalNode WINDOW() { return getToken(SQLParser.WINDOW, 0); }
		public TerminalNode DOY() { return getToken(SQLParser.DOY, 0); }
		public TerminalNode COMMENTS() { return getToken(SQLParser.COMMENTS, 0); }
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode MIN() { return getToken(SQLParser.MIN, 0); }
		public TerminalNode FILTER() { return getToken(SQLParser.FILTER, 0); }
		public TerminalNode PRECISION() { return getToken(SQLParser.PRECISION, 0); }
		public TerminalNode SUBPARTITION() { return getToken(SQLParser.SUBPARTITION, 0); }
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public TerminalNode DOW() { return getToken(SQLParser.DOW, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLParser.EXTERNAL, 0); }
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode MINVALUE() { return getToken(SQLParser.MINVALUE, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SQLParser.MICROSECONDS, 0); }
		public TerminalNode DISABLE() { return getToken(SQLParser.DISABLE, 0); }
		public TerminalNode CLUSTER() { return getToken(SQLParser.CLUSTER, 0); }
		public TerminalNode HASH() { return getToken(SQLParser.HASH, 0); }
		public TerminalNode DECIMAL() { return getToken(SQLParser.DECIMAL, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode ENABLE() { return getToken(SQLParser.ENABLE, 0); }
		public TerminalNode THAN() { return getToken(SQLParser.THAN, 0); }
		public TerminalNode REGEXP() { return getToken(SQLParser.REGEXP, 0); }
		public TerminalNode EPOCH() { return getToken(SQLParser.EPOCH, 0); }
		public TerminalNode ADMIN() { return getToken(SQLParser.ADMIN, 0); }
		public TerminalNode TIMEZONE() { return getToken(SQLParser.TIMEZONE, 0); }
		public TerminalNode FLOAT4() { return getToken(SQLParser.FLOAT4, 0); }
		public TerminalNode CUBE() { return getToken(SQLParser.CUBE, 0); }
		public TerminalNode PARTIAL() { return getToken(SQLParser.PARTIAL, 0); }
		public TerminalNode UNKNOWN() { return getToken(SQLParser.UNKNOWN, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(SQLParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode BOOLEAN() { return getToken(SQLParser.BOOLEAN, 0); }
		public TerminalNode CHARACTER() { return getToken(SQLParser.CHARACTER, 0); }
		public TerminalNode VALID() { return getToken(SQLParser.VALID, 0); }
		public TerminalNode STABLE() { return getToken(SQLParser.STABLE, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public TerminalNode REAL() { return getToken(SQLParser.REAL, 0); }
		public TerminalNode DAY() { return getToken(SQLParser.DAY, 0); }
		public TerminalNode COMMENT() { return getToken(SQLParser.COMMENT, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode PLAIN() { return getToken(SQLParser.PLAIN, 0); }
		public TerminalNode COLLECT() { return getToken(SQLParser.COLLECT, 0); }
		public TerminalNode BIGINT() { return getToken(SQLParser.BIGINT, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(SQLParser.STDDEV_SAMP, 0); }
		public TerminalNode DEFINER() { return getToken(SQLParser.DEFINER, 0); }
		public TerminalNode RANGE() { return getToken(SQLParser.RANGE, 0); }
		public TerminalNode FLOAT() { return getToken(SQLParser.FLOAT, 0); }
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public TerminalNode EXTRACT() { return getToken(SQLParser.EXTRACT, 0); }
		public TerminalNode TYPES() { return getToken(SQLParser.TYPES, 0); }
		public TerminalNode INT4() { return getToken(SQLParser.INT4, 0); }
		public TerminalNode MAXVALUE() { return getToken(SQLParser.MAXVALUE, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SQLParser.MILLISECONDS, 0); }
		public TerminalNode MAIN() { return getToken(SQLParser.MAIN, 0); }
		public TerminalNode NUMERIC() { return getToken(SQLParser.NUMERIC, 0); }
		public TerminalNode BOOL() { return getToken(SQLParser.BOOL, 0); }
		public TerminalNode MATCH() { return getToken(SQLParser.MATCH, 0); }
		public TerminalNode START() { return getToken(SQLParser.START, 0); }
		public TerminalNode NONE() { return getToken(SQLParser.NONE, 0); }
		public TerminalNode INT8() { return getToken(SQLParser.INT8, 0); }
		public TerminalNode DECADE() { return getToken(SQLParser.DECADE, 0); }
		public TerminalNode INTEGER() { return getToken(SQLParser.INTEGER, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TerminalNode PARTITIONS() { return getToken(SQLParser.PARTITIONS, 0); }
		public Nonreserved_keywordsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonreserved_keywords; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNonreserved_keywords(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNonreserved_keywords(this);
		}
	}

	public final Nonreserved_keywordsContext nonreserved_keywords() throws RecognitionException {
		Nonreserved_keywordsContext _localctx = new Nonreserved_keywordsContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_nonreserved_keywords);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3109);
			_la = _input.LA(1);
			if ( !(((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (ADMIN - 135)) | (1L << (ALWAYS - 135)) | (1L << (AVG - 135)) | (1L << (BETWEEN - 135)) | (1L << (BY - 135)) | (1L << (CACHE - 135)) | (1L << (CALLED - 135)) | (1L << (CLASS - 135)) | (1L << (CENTURY - 135)) | (1L << (CHARACTER - 135)) | (1L << (CHECK - 135)) | (1L << (CLUSTER - 135)) | (1L << (COLLECT - 135)) | (1L << (COALESCE - 135)) | (1L << (COLUMN - 135)) | (1L << (COMMENT - 135)) | (1L << (COMMENTS - 135)) | (1L << (COMMIT - 135)) | (1L << (CONCURRENTLY - 135)) | (1L << (CONFIGURATION - 135)) | (1L << (COST - 135)) | (1L << (COUNT - 135)) | (1L << (CUBE - 135)) | (1L << (CURRENT - 135)) | (1L << (CYCLE - 135)) | (1L << (DATA - 135)) | (1L << (DAY - 135)) | (1L << (DEC - 135)) | (1L << (DECADE - 135)) | (1L << (DEFINER - 135)) | (1L << (DICTIONARY - 135)) | (1L << (DISABLE - 135)) | (1L << (DOW - 135)) | (1L << (DOY - 135)) | (1L << (DROP - 135)) | (1L << (ENABLE - 135)) | (1L << (EPOCH - 135)) | (1L << (EVENT - 135)) | (1L << (EVERY - 135)) | (1L << (EXISTS - 135)) | (1L << (EXTENDED - 135)) | (1L << (EXTERNAL - 135)) | (1L << (EXTRACT - 135)) | (1L << (FAMILY - 135)) | (1L << (FILTER - 135)) | (1L << (FIRST - 135)) | (1L << (FORMAT - 135)) | (1L << (FUSION - 135)) | (1L << (GROUPING - 135)) | (1L << (HASH - 135)) | (1L << (INHERIT - 135)) | (1L << (INDEX - 135)) | (1L << (INCREMENT - 135)) | (1L << (INPUT - 135)) | (1L << (INSERT - 135)) | (1L << (INTERSECTION - 135)) | (1L << (ISCACHABLE - 135)) | (1L << (ISODOW - 135)) | (1L << (ISOYEAR - 135)) | (1L << (ISSTRICT - 135)) | (1L << (LANGUAGE - 135)) | (1L << (LARGE - 135)))) != 0) || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & ((1L << (LAST - 199)) | (1L << (LESS - 199)) | (1L << (LIST - 199)) | (1L << (LOCATION - 199)) | (1L << (MAIN - 199)) | (1L << (MATCH - 199)) | (1L << (MAX - 199)) | (1L << (MAXVALUE - 199)) | (1L << (MICROSECONDS - 199)) | (1L << (MILLENNIUM - 199)) | (1L << (MILLISECONDS - 199)) | (1L << (MIN - 199)) | (1L << (MINVALUE - 199)) | (1L << (MINUTE - 199)) | (1L << (MONTH - 199)) | (1L << (NATIONAL - 199)) | (1L << (NO - 199)) | (1L << (NONE - 199)) | (1L << (NULLIF - 199)) | (1L << (OBJECT - 199)) | (1L << (ON - 199)) | (1L << (ONLY - 199)) | (1L << (OPTION - 199)) | (1L << (OPTIONS - 199)) | (1L << (OVERWRITE - 199)) | (1L << (PARSER - 199)) | (1L << (PARTIAL - 199)) | (1L << (PARTITION - 199)) | (1L << (PARTITIONS - 199)) | (1L << (PLAIN - 199)) | (1L << (PRECISION - 199)) | (1L << (PUBLIC - 199)) | (1L << (PURGE - 199)) | (1L << (QUARTER - 199)) | (1L << (RANGE - 199)) | (1L << (REGCONFIG - 199)) | (1L << (REGEXP - 199)) | (1L << (RENAME - 199)) | (1L << (REPLICA - 199)) | (1L << (RESET - 199)) | (1L << (RESTART - 199)) | (1L << (RLIKE - 199)) | (1L << (ROLLUP - 199)) | (1L << (SEARCH - 199)) | (1L << (SECOND - 199)) | (1L << (SECURITY - 199)) | (1L << (SERVER - 199)) | (1L << (SET - 199)) | (1L << (SIMILAR - 199)) | (1L << (SIMPLE - 199)) | (1L << (STABLE - 199)) | (1L << (START - 199)) | (1L << (STATISTICS - 199)) | (1L << (STORAGE - 199)) | (1L << (STDDEV_POP - 199)) | (1L << (STDDEV_SAMP - 199)) | (1L << (SUBPARTITION - 199)) | (1L << (SUM - 199)) | (1L << (TABLESPACE - 199)) | (1L << (TEMPLATE - 199)) | (1L << (THAN - 199)))) != 0) || ((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)) | (1L << (TRIM - 263)) | (1L << (TO - 263)) | (1L << (TYPE - 263)) | (1L << (TYPES - 263)) | (1L << (UNKNOWN - 263)) | (1L << (UNLOGGED - 263)) | (1L << (USER - 263)) | (1L << (VALID - 263)) | (1L << (VALIDATE - 263)) | (1L << (VALUES - 263)) | (1L << (VAR_SAMP - 263)) | (1L << (VAR_POP - 263)) | (1L << (VARYING - 263)) | (1L << (VERSION - 263)) | (1L << (VOLATILE - 263)) | (1L << (WEEK - 263)) | (1L << (WINDOW - 263)) | (1L << (WRAPPER - 263)) | (1L << (YEAR - 263)) | (1L << (ZONE - 263)) | (1L << (BOOLEAN - 263)) | (1L << (BOOL - 263)) | (1L << (BIT - 263)) | (1L << (VARBIT - 263)) | (1L << (INT1 - 263)) | (1L << (INT2 - 263)) | (1L << (INT4 - 263)) | (1L << (INT8 - 263)) | (1L << (TINYINT - 263)) | (1L << (SMALLINT - 263)) | (1L << (INT - 263)) | (1L << (INTEGER - 263)) | (1L << (BIGINT - 263)) | (1L << (FLOAT4 - 263)) | (1L << (FLOAT8 - 263)) | (1L << (REAL - 263)) | (1L << (FLOAT - 263)) | (1L << (DOUBLE - 263)) | (1L << (NUMERIC - 263)) | (1L << (DECIMAL - 263)) | (1L << (CHAR - 263)) | (1L << (VARCHAR - 263)) | (1L << (NCHAR - 263)) | (1L << (NVARCHAR - 263)) | (1L << (DATE - 263)) | (1L << (TIME - 263)) | (1L << (TIMETZ - 263)) | (1L << (TIMESTAMP - 263)) | (1L << (TIMESTAMPTZ - 263)) | (1L << (TEXT - 263)) | (1L << (UUID - 263)) | (1L << (VARBINARY - 263)) | (1L << (BLOB - 263)) | (1L << (BYTEA - 263)) | (1L << (INET4 - 263)) | (1L << (INET - 263)) | (1L << (INTERVAL - 263)) | (1L << (VOID - 263)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_literalContext extends ParserRuleContext {
		public General_literalContext general_literal() {
			return getRuleContext(General_literalContext.class,0);
		}
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public Unsigned_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnsigned_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnsigned_literal(this);
		}
	}

	public final Unsigned_literalContext unsigned_literal() throws RecognitionException {
		Unsigned_literalContext _localctx = new Unsigned_literalContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_unsigned_literal);
		try {
			setState(3113);
			switch (_input.LA(1)) {
			case NUMBER:
			case REAL_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3111); unsigned_numeric_literal();
				}
				break;
			case FALSE:
			case TRUE:
			case UNKNOWN:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case Character_String_Literal:
				enterOuterAlt(_localctx, 2);
				{
				setState(3112); general_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_literalContext extends ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return getRuleContext(Boolean_literalContext.class,0);
		}
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Datetime_literalContext datetime_literal() {
			return getRuleContext(Datetime_literalContext.class,0);
		}
		public General_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGeneral_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGeneral_literal(this);
		}
	}

	public final General_literalContext general_literal() throws RecognitionException {
		General_literalContext _localctx = new General_literalContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_general_literal);
		try {
			setState(3118);
			switch (_input.LA(1)) {
			case Character_String_Literal:
				enterOuterAlt(_localctx, 1);
				{
				setState(3115); match(Character_String_Literal);
				}
				break;
			case DATE:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3116); datetime_literal();
				}
				break;
			case FALSE:
			case TRUE:
			case UNKNOWN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3117); boolean_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_literalContext extends ParserRuleContext {
		public Timestamp_literalContext timestamp_literal() {
			return getRuleContext(Timestamp_literalContext.class,0);
		}
		public Date_literalContext date_literal() {
			return getRuleContext(Date_literalContext.class,0);
		}
		public Time_literalContext time_literal() {
			return getRuleContext(Time_literalContext.class,0);
		}
		public Datetime_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDatetime_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDatetime_literal(this);
		}
	}

	public final Datetime_literalContext datetime_literal() throws RecognitionException {
		Datetime_literalContext _localctx = new Datetime_literalContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_datetime_literal);
		try {
			setState(3123);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3120); timestamp_literal();
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3121); time_literal();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3122); date_literal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_literalContext extends ParserRuleContext {
		public Token time_string;
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Time_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTime_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTime_literal(this);
		}
	}

	public final Time_literalContext time_literal() throws RecognitionException {
		Time_literalContext _localctx = new Time_literalContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_time_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3125); match(TIME);
			setState(3126); ((Time_literalContext)_localctx).time_string = match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Timestamp_literalContext extends ParserRuleContext {
		public Token timestamp_string;
		public TerminalNode TIMESTAMP() { return getToken(SQLParser.TIMESTAMP, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Timestamp_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestamp_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTimestamp_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTimestamp_literal(this);
		}
	}

	public final Timestamp_literalContext timestamp_literal() throws RecognitionException {
		Timestamp_literalContext _localctx = new Timestamp_literalContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_timestamp_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3128); match(TIMESTAMP);
			setState(3129); ((Timestamp_literalContext)_localctx).timestamp_string = match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_literalContext extends ParserRuleContext {
		public Token date_string;
		public TerminalNode DATE() { return getToken(SQLParser.DATE, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Date_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDate_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDate_literal(this);
		}
	}

	public final Date_literalContext date_literal() throws RecognitionException {
		Date_literalContext _localctx = new Date_literalContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_date_literal);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3131); match(DATE);
			setState(3132); ((Date_literalContext)_localctx).date_string = match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_literalContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SQLParser.TRUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SQLParser.UNKNOWN, 0); }
		public TerminalNode FALSE() { return getToken(SQLParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_literal(this);
		}
	}

	public final Boolean_literalContext boolean_literal() throws RecognitionException {
		Boolean_literalContext _localctx = new Boolean_literalContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_boolean_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3134);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public IdentifierContext value;
		public Predefined_typeContext predefined_type() {
			return getRuleContext(Predefined_typeContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(SQLParser.SETOF, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitData_type(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_data_type);
		try {
			setState(3139);
			switch (_input.LA(1)) {
			case TRIGGER:
			case CHARACTER:
			case DEC:
			case NATIONAL:
			case REGCONFIG:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case REGCLASS:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case BINARY:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3136); predefined_type();
				}
				break;
			case SETOF:
				enterOuterAlt(_localctx, 2);
				{
				setState(3137); match(SETOF);
				setState(3138); ((Data_typeContext)_localctx).value = identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Predefined_typeContext extends ParserRuleContext {
		public TerminalNode UUID() { return getToken(SQLParser.UUID, 0); }
		public Character_string_typeContext character_string_type() {
			return getRuleContext(Character_string_typeContext.class,0);
		}
		public Network_typeContext network_type() {
			return getRuleContext(Network_typeContext.class,0);
		}
		public Boolean_typeContext boolean_type() {
			return getRuleContext(Boolean_typeContext.class,0);
		}
		public TerminalNode VOID() { return getToken(SQLParser.VOID, 0); }
		public TerminalNode REGCONFIG() { return getToken(SQLParser.REGCONFIG, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public Bit_typeContext bit_type() {
			return getRuleContext(Bit_typeContext.class,0);
		}
		public Binary_large_object_string_typeContext binary_large_object_string_type() {
			return getRuleContext(Binary_large_object_string_typeContext.class,0);
		}
		public National_character_string_typeContext national_character_string_type() {
			return getRuleContext(National_character_string_typeContext.class,0);
		}
		public TerminalNode INET() { return getToken(SQLParser.INET, 0); }
		public Numeric_typeContext numeric_type() {
			return getRuleContext(Numeric_typeContext.class,0);
		}
		public Datetime_typeContext datetime_type() {
			return getRuleContext(Datetime_typeContext.class,0);
		}
		public Binary_typeContext binary_type() {
			return getRuleContext(Binary_typeContext.class,0);
		}
		public RegclassContext regclass() {
			return getRuleContext(RegclassContext.class,0);
		}
		public Predefined_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefined_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPredefined_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPredefined_type(this);
		}
	}

	public final Predefined_typeContext predefined_type() throws RecognitionException {
		Predefined_typeContext _localctx = new Predefined_typeContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_predefined_type);
		try {
			setState(3156);
			switch (_input.LA(1)) {
			case CHARACTER:
			case CHAR:
			case VARCHAR:
			case TEXT:
			case INTERVAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3141); character_string_type();
				}
				break;
			case NATIONAL:
			case NCHAR:
			case NVARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3142); national_character_string_type();
				}
				break;
			case BLOB:
			case BYTEA:
				enterOuterAlt(_localctx, 3);
				{
				setState(3143); binary_large_object_string_type();
				}
				break;
			case DEC:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
				enterOuterAlt(_localctx, 4);
				{
				setState(3144); numeric_type();
				}
				break;
			case BOOLEAN:
			case BOOL:
				enterOuterAlt(_localctx, 5);
				{
				setState(3145); boolean_type();
				}
				break;
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
				enterOuterAlt(_localctx, 6);
				{
				setState(3146); datetime_type();
				}
				break;
			case BIT:
			case VARBIT:
				enterOuterAlt(_localctx, 7);
				{
				setState(3147); bit_type();
				}
				break;
			case BINARY:
			case VARBINARY:
				enterOuterAlt(_localctx, 8);
				{
				setState(3148); binary_type();
				}
				break;
			case INET4:
				enterOuterAlt(_localctx, 9);
				{
				setState(3149); network_type();
				}
				break;
			case REGCLASS:
				enterOuterAlt(_localctx, 10);
				{
				setState(3150); regclass();
				}
				break;
			case REGCONFIG:
				enterOuterAlt(_localctx, 11);
				{
				setState(3151); match(REGCONFIG);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 12);
				{
				setState(3152); match(TRIGGER);
				}
				break;
			case UUID:
				enterOuterAlt(_localctx, 13);
				{
				setState(3153); match(UUID);
				}
				break;
			case VOID:
				enterOuterAlt(_localctx, 14);
				{
				setState(3154); match(VOID);
				}
				break;
			case INET:
				enterOuterAlt(_localctx, 15);
				{
				setState(3155); match(INET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RegclassContext extends ParserRuleContext {
		public TerminalNode REGCLASS() { return getToken(SQLParser.REGCLASS, 0); }
		public RegclassContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regclass; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRegclass(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRegclass(this);
		}
	}

	public final RegclassContext regclass() throws RecognitionException {
		RegclassContext _localctx = new RegclassContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_regclass);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3158); match(REGCLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Network_typeContext extends ParserRuleContext {
		public TerminalNode INET4() { return getToken(SQLParser.INET4, 0); }
		public Network_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_network_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNetwork_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNetwork_type(this);
		}
	}

	public final Network_typeContext network_type() throws RecognitionException {
		Network_typeContext _localctx = new Network_typeContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_network_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3160); match(INET4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_string_typeContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TerminalNode CHARACTER() { return getToken(SQLParser.CHARACTER, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode VARCHAR() { return getToken(SQLParser.VARCHAR, 0); }
		public TerminalNode INTERVAL() { return getToken(SQLParser.INTERVAL, 0); }
		public TerminalNode CHAR() { return getToken(SQLParser.CHAR, 0); }
		public Character_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCharacter_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCharacter_string_type(this);
		}
	}

	public final Character_string_typeContext character_string_type() throws RecognitionException {
		Character_string_typeContext _localctx = new Character_string_typeContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_character_string_type);
		try {
			setState(3186);
			switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3162); match(CHARACTER);
				setState(3164);
				switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
				case 1:
					{
					setState(3163); type_length();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3166); match(CHAR);
				setState(3168);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(3167); type_length();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3170); match(CHARACTER);
				setState(3171); match(VARYING);
				setState(3173);
				switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					setState(3172); type_length();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3175); match(CHAR);
				setState(3176); match(VARYING);
				setState(3178);
				switch ( getInterpreter().adaptivePredict(_input,447,_ctx) ) {
				case 1:
					{
					setState(3177); type_length();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3180); match(VARCHAR);
				setState(3182);
				switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
				case 1:
					{
					setState(3181); type_length();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3184); match(TEXT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3185); match(INTERVAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_lengthContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NUMBER() { return getToken(SQLParser.NUMBER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Type_lengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_length; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterType_length(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitType_length(this);
		}
	}

	public final Type_lengthContext type_length() throws RecognitionException {
		Type_lengthContext _localctx = new Type_lengthContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_type_length);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3188); match(LEFT_PAREN);
			setState(3189); match(NUMBER);
			setState(3190); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class National_character_string_typeContext extends ParserRuleContext {
		public TerminalNode NATIONAL() { return getToken(SQLParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TerminalNode CHARACTER() { return getToken(SQLParser.CHARACTER, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode NVARCHAR() { return getToken(SQLParser.NVARCHAR, 0); }
		public TerminalNode NCHAR() { return getToken(SQLParser.NCHAR, 0); }
		public TerminalNode CHAR() { return getToken(SQLParser.CHAR, 0); }
		public National_character_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_national_character_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNational_character_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNational_character_string_type(this);
		}
	}

	public final National_character_string_typeContext national_character_string_type() throws RecognitionException {
		National_character_string_typeContext _localctx = new National_character_string_typeContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_national_character_string_type);
		try {
			setState(3227);
			switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3192); match(NATIONAL);
				setState(3193); match(CHARACTER);
				setState(3195);
				switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					setState(3194); type_length();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3197); match(NATIONAL);
				setState(3198); match(CHAR);
				setState(3200);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(3199); type_length();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3202); match(NCHAR);
				setState(3204);
				switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
				case 1:
					{
					setState(3203); type_length();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3206); match(NATIONAL);
				setState(3207); match(CHARACTER);
				setState(3208); match(VARYING);
				setState(3210);
				switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
				case 1:
					{
					setState(3209); type_length();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3212); match(NATIONAL);
				setState(3213); match(CHAR);
				setState(3214); match(VARYING);
				setState(3216);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(3215); type_length();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3218); match(NCHAR);
				setState(3219); match(VARYING);
				setState(3221);
				switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
				case 1:
					{
					setState(3220); type_length();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3223); match(NVARCHAR);
				setState(3225);
				switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					setState(3224); type_length();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_large_object_string_typeContext extends ParserRuleContext {
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode BLOB() { return getToken(SQLParser.BLOB, 0); }
		public TerminalNode BYTEA() { return getToken(SQLParser.BYTEA, 0); }
		public Binary_large_object_string_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_large_object_string_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBinary_large_object_string_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBinary_large_object_string_type(this);
		}
	}

	public final Binary_large_object_string_typeContext binary_large_object_string_type() throws RecognitionException {
		Binary_large_object_string_typeContext _localctx = new Binary_large_object_string_typeContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_binary_large_object_string_type);
		try {
			setState(3237);
			switch (_input.LA(1)) {
			case BLOB:
				enterOuterAlt(_localctx, 1);
				{
				setState(3229); match(BLOB);
				setState(3231);
				switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
				case 1:
					{
					setState(3230); type_length();
					}
					break;
				}
				}
				break;
			case BYTEA:
				enterOuterAlt(_localctx, 2);
				{
				setState(3233); match(BYTEA);
				setState(3235);
				switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					setState(3234); type_length();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_typeContext extends ParserRuleContext {
		public Exact_numeric_typeContext exact_numeric_type() {
			return getRuleContext(Exact_numeric_typeContext.class,0);
		}
		public Approximate_numeric_typeContext approximate_numeric_type() {
			return getRuleContext(Approximate_numeric_typeContext.class,0);
		}
		public Numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNumeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNumeric_type(this);
		}
	}

	public final Numeric_typeContext numeric_type() throws RecognitionException {
		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_numeric_type);
		try {
			setState(3241);
			switch (_input.LA(1)) {
			case DEC:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case NUMERIC:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3239); exact_numeric_type();
				}
				break;
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3240); approximate_numeric_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exact_numeric_typeContext extends ParserRuleContext {
		public TerminalNode TINYINT() { return getToken(SQLParser.TINYINT, 0); }
		public TerminalNode INT() { return getToken(SQLParser.INT, 0); }
		public TerminalNode DEC() { return getToken(SQLParser.DEC, 0); }
		public TerminalNode INT1() { return getToken(SQLParser.INT1, 0); }
		public TerminalNode INT4() { return getToken(SQLParser.INT4, 0); }
		public TerminalNode NUMERIC() { return getToken(SQLParser.NUMERIC, 0); }
		public Precision_paramContext precision_param() {
			return getRuleContext(Precision_paramContext.class,0);
		}
		public TerminalNode INT8() { return getToken(SQLParser.INT8, 0); }
		public TerminalNode INT2() { return getToken(SQLParser.INT2, 0); }
		public TerminalNode INTEGER() { return getToken(SQLParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(SQLParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(SQLParser.DECIMAL, 0); }
		public TerminalNode SMALLINT() { return getToken(SQLParser.SMALLINT, 0); }
		public Exact_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exact_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExact_numeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExact_numeric_type(this);
		}
	}

	public final Exact_numeric_typeContext exact_numeric_type() throws RecognitionException {
		Exact_numeric_typeContext _localctx = new Exact_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_exact_numeric_type);
		try {
			setState(3264);
			switch (_input.LA(1)) {
			case NUMERIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(3243); match(NUMERIC);
				setState(3245);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(3244); precision_param();
					}
					break;
				}
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3247); match(DECIMAL);
				setState(3249);
				switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
				case 1:
					{
					setState(3248); precision_param();
					}
					break;
				}
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 3);
				{
				setState(3251); match(DEC);
				setState(3253);
				switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
				case 1:
					{
					setState(3252); precision_param();
					}
					break;
				}
				}
				break;
			case INT1:
				enterOuterAlt(_localctx, 4);
				{
				setState(3255); match(INT1);
				}
				break;
			case TINYINT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3256); match(TINYINT);
				}
				break;
			case INT2:
				enterOuterAlt(_localctx, 6);
				{
				setState(3257); match(INT2);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 7);
				{
				setState(3258); match(SMALLINT);
				}
				break;
			case INT4:
				enterOuterAlt(_localctx, 8);
				{
				setState(3259); match(INT4);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 9);
				{
				setState(3260); match(INT);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 10);
				{
				setState(3261); match(INTEGER);
				}
				break;
			case INT8:
				enterOuterAlt(_localctx, 11);
				{
				setState(3262); match(INT8);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 12);
				{
				setState(3263); match(BIGINT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Approximate_numeric_typeContext extends ParserRuleContext {
		public TerminalNode FLOAT() { return getToken(SQLParser.FLOAT, 0); }
		public Precision_paramContext precision_param() {
			return getRuleContext(Precision_paramContext.class,0);
		}
		public TerminalNode FLOAT4() { return getToken(SQLParser.FLOAT4, 0); }
		public TerminalNode DOUBLE() { return getToken(SQLParser.DOUBLE, 0); }
		public TerminalNode REAL() { return getToken(SQLParser.REAL, 0); }
		public TerminalNode PRECISION() { return getToken(SQLParser.PRECISION, 0); }
		public TerminalNode FLOAT8() { return getToken(SQLParser.FLOAT8, 0); }
		public Approximate_numeric_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approximate_numeric_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterApproximate_numeric_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitApproximate_numeric_type(this);
		}
	}

	public final Approximate_numeric_typeContext approximate_numeric_type() throws RecognitionException {
		Approximate_numeric_typeContext _localctx = new Approximate_numeric_typeContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_approximate_numeric_type);
		try {
			setState(3276);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3266); match(FLOAT);
				setState(3268);
				switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					setState(3267); precision_param();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3270); match(FLOAT4);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3271); match(REAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3272); match(FLOAT8);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3273); match(DOUBLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3274); match(DOUBLE);
				setState(3275); match(PRECISION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_paramContext extends ParserRuleContext {
		public Token precision;
		public Token scale;
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public TerminalNode NUMBER(int i) {
			return getToken(SQLParser.NUMBER, i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(SQLParser.NUMBER); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Precision_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPrecision_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPrecision_param(this);
		}
	}

	public final Precision_paramContext precision_param() throws RecognitionException {
		Precision_paramContext _localctx = new Precision_paramContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_precision_param);
		try {
			setState(3286);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3278); match(LEFT_PAREN);
				setState(3279); ((Precision_paramContext)_localctx).precision = match(NUMBER);
				setState(3280); match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3281); match(LEFT_PAREN);
				setState(3282); ((Precision_paramContext)_localctx).precision = match(NUMBER);
				setState(3283); match(COMMA);
				setState(3284); ((Precision_paramContext)_localctx).scale = match(NUMBER);
				setState(3285); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_typeContext extends ParserRuleContext {
		public TerminalNode BOOL() { return getToken(SQLParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(SQLParser.BOOLEAN, 0); }
		public Boolean_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_type(this);
		}
	}

	public final Boolean_typeContext boolean_type() throws RecognitionException {
		Boolean_typeContext _localctx = new Boolean_typeContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_boolean_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3288);
			_la = _input.LA(1);
			if ( !(_la==BOOLEAN || _la==BOOL) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_typeContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(SQLParser.TIMESTAMP, 0); }
		public TerminalNode DATE() { return getToken(SQLParser.DATE, 0); }
		public List<TerminalNode> TIME() { return getTokens(SQLParser.TIME); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode TIME(int i) {
			return getToken(SQLParser.TIME, i);
		}
		public TerminalNode TIMETZ() { return getToken(SQLParser.TIMETZ, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode TIMESTAMPTZ() { return getToken(SQLParser.TIMESTAMPTZ, 0); }
		public Datetime_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDatetime_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDatetime_type(this);
		}
	}

	public final Datetime_typeContext datetime_type() throws RecognitionException {
		Datetime_typeContext _localctx = new Datetime_typeContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_datetime_type);
		try {
			setState(3307);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3290); match(DATE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3291); match(TIME);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3292); match(TIME);
				setState(3293); match(WITH);
				setState(3294); match(TIME);
				setState(3295); match(ZONE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3296); match(TIMETZ);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3297); match(TIMESTAMP);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3298); match(TIMESTAMP);
				setState(3299); match(WITH);
				setState(3300); match(TIME);
				setState(3301); match(ZONE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3302); match(TIMESTAMP);
				setState(3303); match(WITHOUT);
				setState(3304); match(TIME);
				setState(3305); match(ZONE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3306); match(TIMESTAMPTZ);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bit_typeContext extends ParserRuleContext {
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TerminalNode BIT() { return getToken(SQLParser.BIT, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode VARBIT() { return getToken(SQLParser.VARBIT, 0); }
		public Bit_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bit_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBit_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBit_type(this);
		}
	}

	public final Bit_typeContext bit_type() throws RecognitionException {
		Bit_typeContext _localctx = new Bit_typeContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_bit_type);
		try {
			setState(3322);
			switch ( getInterpreter().adaptivePredict(_input,473,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3309); match(BIT);
				setState(3311);
				switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
				case 1:
					{
					setState(3310); type_length();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3313); match(VARBIT);
				setState(3315);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(3314); type_length();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3317); match(BIT);
				setState(3318); match(VARYING);
				setState(3320);
				switch ( getInterpreter().adaptivePredict(_input,472,_ctx) ) {
				case 1:
					{
					setState(3319); type_length();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Binary_typeContext extends ParserRuleContext {
		public TerminalNode VARBINARY() { return getToken(SQLParser.VARBINARY, 0); }
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public Type_lengthContext type_length() {
			return getRuleContext(Type_lengthContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(SQLParser.BINARY, 0); }
		public Binary_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binary_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBinary_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBinary_type(this);
		}
	}

	public final Binary_typeContext binary_type() throws RecognitionException {
		Binary_typeContext _localctx = new Binary_typeContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_binary_type);
		try {
			setState(3337);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3324); match(BINARY);
				setState(3326);
				switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
				case 1:
					{
					setState(3325); type_length();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3328); match(BINARY);
				setState(3329); match(VARYING);
				setState(3331);
				switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
				case 1:
					{
					setState(3330); type_length();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3333); match(VARBINARY);
				setState(3335);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(3334); type_length();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expression_primaryContext extends ParserRuleContext {
		public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
			return getRuleContext(Nonparenthesized_value_expression_primaryContext.class,0);
		}
		public Parenthesized_value_expressionContext parenthesized_value_expression() {
			return getRuleContext(Parenthesized_value_expressionContext.class,0);
		}
		public Value_expression_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterValue_expression_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitValue_expression_primary(this);
		}
	}

	public final Value_expression_primaryContext value_expression_primary() throws RecognitionException {
		Value_expression_primaryContext _localctx = new Value_expression_primaryContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_value_expression_primary);
		try {
			setState(3341);
			switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3339); parenthesized_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3340); nonparenthesized_value_expression_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parenthesized_value_expressionContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Parenthesized_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesized_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterParenthesized_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitParenthesized_value_expression(this);
		}
	}

	public final Parenthesized_value_expressionContext parenthesized_value_expression() throws RecognitionException {
		Parenthesized_value_expressionContext _localctx = new Parenthesized_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_parenthesized_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3343); match(LEFT_PAREN);
			setState(3344); value_expression();
			setState(3345); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nonparenthesized_value_expression_primaryContext extends ParserRuleContext {
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Unsigned_value_specificationContext unsigned_value_specification() {
			return getRuleContext(Unsigned_value_specificationContext.class,0);
		}
		public Scalar_subqueryContext scalar_subquery() {
			return getRuleContext(Scalar_subqueryContext.class,0);
		}
		public Cast_specificationContext cast_specification() {
			return getRuleContext(Cast_specificationContext.class,0);
		}
		public Set_function_specificationContext set_function_specification() {
			return getRuleContext(Set_function_specificationContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Routine_invocationContext routine_invocation() {
			return getRuleContext(Routine_invocationContext.class,0);
		}
		public Nonparenthesized_value_expression_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonparenthesized_value_expression_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNonparenthesized_value_expression_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNonparenthesized_value_expression_primary(this);
		}
	}

	public final Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() throws RecognitionException {
		Nonparenthesized_value_expression_primaryContext _localctx = new Nonparenthesized_value_expression_primaryContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_nonparenthesized_value_expression_primary);
		try {
			setState(3355);
			switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3347); unsigned_value_specification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3348); column_reference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3349); set_function_specification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3350); scalar_subquery();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3351); case_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3352); cast_specification();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3353); routine_invocation();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3354); match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_value_specificationContext extends ParserRuleContext {
		public Unsigned_literalContext unsigned_literal() {
			return getRuleContext(Unsigned_literalContext.class,0);
		}
		public Unsigned_value_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_value_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnsigned_value_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnsigned_value_specification(this);
		}
	}

	public final Unsigned_value_specificationContext unsigned_value_specification() throws RecognitionException {
		Unsigned_value_specificationContext _localctx = new Unsigned_value_specificationContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_unsigned_value_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3357); unsigned_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unsigned_numeric_literalContext extends ParserRuleContext {
		public TerminalNode REAL_NUMBER() { return getToken(SQLParser.REAL_NUMBER, 0); }
		public TerminalNode NUMBER() { return getToken(SQLParser.NUMBER, 0); }
		public Unsigned_numeric_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsigned_numeric_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnsigned_numeric_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnsigned_numeric_literal(this);
		}
	}

	public final Unsigned_numeric_literalContext unsigned_numeric_literal() throws RecognitionException {
		Unsigned_numeric_literalContext _localctx = new Unsigned_numeric_literalContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_unsigned_numeric_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3359);
			_la = _input.LA(1);
			if ( !(_la==NUMBER || _la==REAL_NUMBER) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signed_numerical_literalContext extends ParserRuleContext {
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Unsigned_numeric_literalContext unsigned_numeric_literal() {
			return getRuleContext(Unsigned_numeric_literalContext.class,0);
		}
		public Signed_numerical_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signed_numerical_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSigned_numerical_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSigned_numerical_literal(this);
		}
	}

	public final Signed_numerical_literalContext signed_numerical_literal() throws RecognitionException {
		Signed_numerical_literalContext _localctx = new Signed_numerical_literalContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_signed_numerical_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3362);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(3361); sign();
				}
			}

			setState(3364); unsigned_numeric_literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_specificationContext extends ParserRuleContext {
		public Aggregate_functionContext aggregate_function() {
			return getRuleContext(Aggregate_functionContext.class,0);
		}
		public Set_function_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSet_function_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSet_function_specification(this);
		}
	}

	public final Set_function_specificationContext set_function_specification() throws RecognitionException {
		Set_function_specificationContext _localctx = new Set_function_specificationContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_set_function_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3366); aggregate_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_functionContext extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(SQLParser.COUNT, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public General_set_functionContext general_set_function() {
			return getRuleContext(General_set_functionContext.class,0);
		}
		public Filter_clauseContext filter_clause() {
			return getRuleContext(Filter_clauseContext.class,0);
		}
		public Aggregate_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAggregate_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAggregate_function(this);
		}
	}

	public final Aggregate_functionContext aggregate_function() throws RecognitionException {
		Aggregate_functionContext _localctx = new Aggregate_functionContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_aggregate_function);
		try {
			setState(3376);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3368); match(COUNT);
				setState(3369); match(LEFT_PAREN);
				setState(3370); match(MULTIPLY);
				setState(3371); match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3372); general_set_function();
				setState(3374);
				switch ( getInterpreter().adaptivePredict(_input,481,_ctx) ) {
				case 1:
					{
					setState(3373); filter_clause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_set_functionContext extends ParserRuleContext {
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Set_function_typeContext set_function_type() {
			return getRuleContext(Set_function_typeContext.class,0);
		}
		public General_set_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_set_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGeneral_set_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGeneral_set_function(this);
		}
	}

	public final General_set_functionContext general_set_function() throws RecognitionException {
		General_set_functionContext _localctx = new General_set_functionContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_general_set_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3378); set_function_type();
			setState(3379); match(LEFT_PAREN);
			setState(3381);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3380); set_qualifier();
				}
			}

			setState(3383); value_expression();
			setState(3384); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_function_typeContext extends ParserRuleContext {
		public TerminalNode STDDEV_SAMP() { return getToken(SQLParser.STDDEV_SAMP, 0); }
		public TerminalNode STDDEV_POP() { return getToken(SQLParser.STDDEV_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(SQLParser.VAR_SAMP, 0); }
		public TerminalNode SUM() { return getToken(SQLParser.SUM, 0); }
		public TerminalNode EVERY() { return getToken(SQLParser.EVERY, 0); }
		public TerminalNode ANY() { return getToken(SQLParser.ANY, 0); }
		public TerminalNode AVG() { return getToken(SQLParser.AVG, 0); }
		public TerminalNode INTERSECTION() { return getToken(SQLParser.INTERSECTION, 0); }
		public TerminalNode MIN() { return getToken(SQLParser.MIN, 0); }
		public TerminalNode MAX() { return getToken(SQLParser.MAX, 0); }
		public TerminalNode VAR_POP() { return getToken(SQLParser.VAR_POP, 0); }
		public TerminalNode SOME() { return getToken(SQLParser.SOME, 0); }
		public TerminalNode COUNT() { return getToken(SQLParser.COUNT, 0); }
		public TerminalNode FUSION() { return getToken(SQLParser.FUSION, 0); }
		public TerminalNode COLLECT() { return getToken(SQLParser.COLLECT, 0); }
		public Set_function_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_function_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSet_function_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSet_function_type(this);
		}
	}

	public final Set_function_typeContext set_function_type() throws RecognitionException {
		Set_function_typeContext _localctx = new Set_function_typeContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_set_function_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3386);
			_la = _input.LA(1);
			if ( !(_la==ANY || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (SOME - 110)) | (1L << (AVG - 110)) | (1L << (COLLECT - 110)) | (1L << (COUNT - 110)) | (1L << (EVERY - 110)))) != 0) || ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (FUSION - 182)) | (1L << (INTERSECTION - 182)) | (1L << (MAX - 182)) | (1L << (MIN - 182)))) != 0) || ((((_la - 255)) & ~0x3f) == 0 && ((1L << (_la - 255)) & ((1L << (STDDEV_POP - 255)) | (1L << (STDDEV_SAMP - 255)) | (1L << (SUM - 255)) | (1L << (VAR_SAMP - 255)) | (1L << (VAR_POP - 255)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filter_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode FILTER() { return getToken(SQLParser.FILTER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Filter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filter_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFilter_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFilter_clause(this);
		}
	}

	public final Filter_clauseContext filter_clause() throws RecognitionException {
		Filter_clauseContext _localctx = new Filter_clauseContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_filter_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3388); match(FILTER);
			setState(3389); match(LEFT_PAREN);
			setState(3390); match(WHERE);
			setState(3391); search_condition();
			setState(3392); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_operationContext extends ParserRuleContext {
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode GROUPING() { return getToken(SQLParser.GROUPING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Grouping_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrouping_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrouping_operation(this);
		}
	}

	public final Grouping_operationContext grouping_operation() throws RecognitionException {
		Grouping_operationContext _localctx = new Grouping_operationContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_grouping_operation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3394); match(GROUPING);
			setState(3395); match(LEFT_PAREN);
			setState(3396); column_reference_list();
			setState(3397); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public Case_specificationContext case_specification() {
			return getRuleContext(Case_specificationContext.class,0);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCase_expression(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_case_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3399); case_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_abbreviationContext extends ParserRuleContext {
		public TerminalNode COALESCE() { return getToken(SQLParser.COALESCE, 0); }
		public Boolean_value_expressionContext boolean_value_expression(int i) {
			return getRuleContext(Boolean_value_expressionContext.class,i);
		}
		public TerminalNode NULLIF() { return getToken(SQLParser.NULLIF, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Boolean_value_expressionContext> boolean_value_expression() {
			return getRuleContexts(Boolean_value_expressionContext.class);
		}
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Case_abbreviationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_abbreviation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCase_abbreviation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCase_abbreviation(this);
		}
	}

	public final Case_abbreviationContext case_abbreviation() throws RecognitionException {
		Case_abbreviationContext _localctx = new Case_abbreviationContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_case_abbreviation);
		int _la;
		try {
			setState(3419);
			switch (_input.LA(1)) {
			case NULLIF:
				enterOuterAlt(_localctx, 1);
				{
				setState(3401); match(NULLIF);
				setState(3402); match(LEFT_PAREN);
				setState(3403); numeric_value_expression();
				setState(3404); match(COMMA);
				setState(3405); boolean_value_expression();
				setState(3406); match(RIGHT_PAREN);
				}
				break;
			case COALESCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3408); match(COALESCE);
				setState(3409); match(LEFT_PAREN);
				setState(3410); numeric_value_expression();
				setState(3413); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3411); match(COMMA);
					setState(3412); boolean_value_expression();
					}
					}
					setState(3415); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3417); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_specificationContext extends ParserRuleContext {
		public Searched_caseContext searched_case() {
			return getRuleContext(Searched_caseContext.class,0);
		}
		public Simple_caseContext simple_case() {
			return getRuleContext(Simple_caseContext.class,0);
		}
		public Case_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCase_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCase_specification(this);
		}
	}

	public final Case_specificationContext case_specification() throws RecognitionException {
		Case_specificationContext _localctx = new Case_specificationContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_case_specification);
		try {
			setState(3423);
			switch ( getInterpreter().adaptivePredict(_input,486,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3421); simple_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3422); searched_case();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_caseContext extends ParserRuleContext {
		public List<Simple_when_clauseContext> simple_when_clause() {
			return getRuleContexts(Simple_when_clauseContext.class);
		}
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public TerminalNode CASE() { return getToken(SQLParser.CASE, 0); }
		public Simple_when_clauseContext simple_when_clause(int i) {
			return getRuleContext(Simple_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public Simple_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSimple_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSimple_case(this);
		}
	}

	public final Simple_caseContext simple_case() throws RecognitionException {
		Simple_caseContext _localctx = new Simple_caseContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_simple_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3425); match(CASE);
			setState(3426); boolean_value_expression();
			setState(3428); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3427); simple_when_clause();
				}
				}
				setState(3430); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3433);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3432); else_clause();
				}
			}

			setState(3435); match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_caseContext extends ParserRuleContext {
		public List<Searched_when_clauseContext> searched_when_clause() {
			return getRuleContexts(Searched_when_clauseContext.class);
		}
		public TerminalNode CASE() { return getToken(SQLParser.CASE, 0); }
		public Searched_when_clauseContext searched_when_clause(int i) {
			return getRuleContext(Searched_when_clauseContext.class,i);
		}
		public Else_clauseContext else_clause() {
			return getRuleContext(Else_clauseContext.class,0);
		}
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public Searched_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSearched_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSearched_case(this);
		}
	}

	public final Searched_caseContext searched_case() throws RecognitionException {
		Searched_caseContext _localctx = new Searched_caseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_searched_case);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3437); match(CASE);
			setState(3439); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3438); searched_when_clause();
				}
				}
				setState(3441); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3444);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3443); else_clause();
				}
			}

			setState(3446); match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_when_clauseContext extends ParserRuleContext {
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public TerminalNode THEN() { return getToken(SQLParser.THEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public Simple_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSimple_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSimple_when_clause(this);
		}
	}

	public final Simple_when_clauseContext simple_when_clause() throws RecognitionException {
		Simple_when_clauseContext _localctx = new Simple_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_simple_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3448); match(WHEN);
			setState(3449); search_condition();
			setState(3450); match(THEN);
			setState(3451); result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_when_clauseContext extends ParserRuleContext {
		public Search_conditionContext c;
		public ResultContext r;
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public TerminalNode THEN() { return getToken(SQLParser.THEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public Searched_when_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_when_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSearched_when_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSearched_when_clause(this);
		}
	}

	public final Searched_when_clauseContext searched_when_clause() throws RecognitionException {
		Searched_when_clauseContext _localctx = new Searched_when_clauseContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_searched_when_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3453); match(WHEN);
			setState(3454); ((Searched_when_clauseContext)_localctx).c = search_condition();
			setState(3455); match(THEN);
			setState(3456); ((Searched_when_clauseContext)_localctx).r = result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_clauseContext extends ParserRuleContext {
		public ResultContext r;
		public ResultContext result() {
			return getRuleContext(ResultContext.class,0);
		}
		public TerminalNode ELSE() { return getToken(SQLParser.ELSE, 0); }
		public Else_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterElse_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitElse_clause(this);
		}
	}

	public final Else_clauseContext else_clause() throws RecognitionException {
		Else_clauseContext _localctx = new Else_clauseContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_else_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3458); match(ELSE);
			setState(3459); ((Else_clauseContext)_localctx).r = result();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResultContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public ResultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterResult(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitResult(this);
		}
	}

	public final ResultContext result() throws RecognitionException {
		ResultContext _localctx = new ResultContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_result);
		try {
			setState(3463);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3461); value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3462); match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_specificationContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public Cast_targetContext cast_target() {
			return getRuleContext(Cast_targetContext.class,0);
		}
		public Cast_operandContext cast_operand() {
			return getRuleContext(Cast_operandContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public Cast_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCast_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCast_specification(this);
		}
	}

	public final Cast_specificationContext cast_specification() throws RecognitionException {
		Cast_specificationContext _localctx = new Cast_specificationContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_cast_specification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3465); match(CAST);
			setState(3466); match(LEFT_PAREN);
			setState(3467); cast_operand();
			setState(3468); match(AS);
			setState(3469); cast_target();
			setState(3470); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_operandContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Cast_operandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_operand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCast_operand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCast_operand(this);
		}
	}

	public final Cast_operandContext cast_operand() throws RecognitionException {
		Cast_operandContext _localctx = new Cast_operandContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_cast_operand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3472); value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cast_targetContext extends ParserRuleContext {
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Cast_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cast_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCast_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCast_target(this);
		}
	}

	public final Cast_targetContext cast_target() throws RecognitionException {
		Cast_targetContext _localctx = new Cast_targetContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_cast_target);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3474); data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Value_expressionContext extends ParserRuleContext {
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public Common_value_expressionContext common_value_expression() {
			return getRuleContext(Common_value_expressionContext.class,0);
		}
		public Row_value_expressionContext row_value_expression() {
			return getRuleContext(Row_value_expressionContext.class,0);
		}
		public Value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterValue_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitValue_expression(this);
		}
	}

	public final Value_expressionContext value_expression() throws RecognitionException {
		Value_expressionContext _localctx = new Value_expressionContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_value_expression);
		try {
			setState(3479);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3476); common_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3477); row_value_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3478); boolean_value_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_value_expressionContext extends ParserRuleContext {
		public String_value_expressionContext string_value_expression() {
			return getRuleContext(String_value_expressionContext.class,0);
		}
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Common_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCommon_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCommon_value_expression(this);
		}
	}

	public final Common_value_expressionContext common_value_expression() throws RecognitionException {
		Common_value_expressionContext _localctx = new Common_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_common_value_expression);
		try {
			setState(3484);
			switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3481); numeric_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3482); string_value_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3483); match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_expressionContext extends ParserRuleContext {
		public TermContext left;
		public TermContext right;
		public List<TermContext> term() {
			return getRuleContexts(TermContext.class);
		}
		public TerminalNode MINUS(int i) {
			return getToken(SQLParser.MINUS, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(SQLParser.MINUS); }
		public List<TerminalNode> PLUS() { return getTokens(SQLParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(SQLParser.PLUS, i);
		}
		public TermContext term(int i) {
			return getRuleContext(TermContext.class,i);
		}
		public Numeric_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNumeric_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNumeric_value_expression(this);
		}
	}

	public final Numeric_value_expressionContext numeric_value_expression() throws RecognitionException {
		Numeric_value_expressionContext _localctx = new Numeric_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_numeric_value_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3486); ((Numeric_value_expressionContext)_localctx).left = term();
			setState(3491);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,494,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3487);
					_la = _input.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3488); ((Numeric_value_expressionContext)_localctx).right = term();
					}
					} 
				}
				setState(3493);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,494,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TermContext extends ParserRuleContext {
		public FactorContext left;
		public FactorContext right;
		public List<TerminalNode> MODULAR() { return getTokens(SQLParser.MODULAR); }
		public FactorContext factor(int i) {
			return getRuleContext(FactorContext.class,i);
		}
		public TerminalNode MULTIPLY(int i) {
			return getToken(SQLParser.MULTIPLY, i);
		}
		public TerminalNode DIVIDE(int i) {
			return getToken(SQLParser.DIVIDE, i);
		}
		public List<TerminalNode> MULTIPLY() { return getTokens(SQLParser.MULTIPLY); }
		public List<FactorContext> factor() {
			return getRuleContexts(FactorContext.class);
		}
		public List<TerminalNode> DIVIDE() { return getTokens(SQLParser.DIVIDE); }
		public TerminalNode MODULAR(int i) {
			return getToken(SQLParser.MODULAR, i);
		}
		public TermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTerm(this);
		}
	}

	public final TermContext term() throws RecognitionException {
		TermContext _localctx = new TermContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_term);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3494); ((TermContext)_localctx).left = factor();
			setState(3499);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,495,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3495);
					_la = _input.LA(1);
					if ( !(((((_la - 346)) & ~0x3f) == 0 && ((1L << (_la - 346)) & ((1L << (MULTIPLY - 346)) | (1L << (DIVIDE - 346)) | (1L << (MODULAR - 346)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					setState(3496); ((TermContext)_localctx).right = factor();
					}
					} 
				}
				setState(3501);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,495,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FactorContext extends ParserRuleContext {
		public Numeric_primaryContext numeric_primary() {
			return getRuleContext(Numeric_primaryContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public FactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFactor(this);
		}
	}

	public final FactorContext factor() throws RecognitionException {
		FactorContext _localctx = new FactorContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_factor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3503);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(3502); sign();
				}
			}

			setState(3505); numeric_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Numeric_value_expressionContext> numeric_value_expression() {
			return getRuleContexts(Numeric_value_expressionContext.class);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public Numeric_value_expressionContext numeric_value_expression(int i) {
			return getRuleContext(Numeric_value_expressionContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArray(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArray(this);
		}
	}

	public final ArrayContext array() throws RecognitionException {
		ArrayContext _localctx = new ArrayContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_array);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3507); match(LEFT_PAREN);
			setState(3508); numeric_value_expression();
			setState(3513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3509); match(COMMA);
				setState(3510); numeric_value_expression();
				}
				}
				setState(3515);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3516); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_primaryContext extends ParserRuleContext {
		public Cast_targetContext cast_target(int i) {
			return getRuleContext(Cast_targetContext.class,i);
		}
		public List<Cast_targetContext> cast_target() {
			return getRuleContexts(Cast_targetContext.class);
		}
		public Numeric_value_functionContext numeric_value_function() {
			return getRuleContext(Numeric_value_functionContext.class,0);
		}
		public List<TerminalNode> CAST_EXPRESSION() { return getTokens(SQLParser.CAST_EXPRESSION); }
		public TerminalNode CAST_EXPRESSION(int i) {
			return getToken(SQLParser.CAST_EXPRESSION, i);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Numeric_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNumeric_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNumeric_primary(this);
		}
	}

	public final Numeric_primaryContext numeric_primary() throws RecognitionException {
		Numeric_primaryContext _localctx = new Numeric_primaryContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_numeric_primary);
		try {
			int _alt;
			setState(3527);
			switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3518); value_expression_primary();
				setState(3523);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,498,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3519); match(CAST_EXPRESSION);
						setState(3520); cast_target();
						}
						} 
					}
					setState(3525);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,498,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3526); numeric_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(SQLParser.MINUS, 0); }
		public TerminalNode PLUS() { return getToken(SQLParser.PLUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSign(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3529);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_value_functionContext extends ParserRuleContext {
		public Extract_expressionContext extract_expression() {
			return getRuleContext(Extract_expressionContext.class,0);
		}
		public Numeric_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNumeric_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNumeric_value_function(this);
		}
	}

	public final Numeric_value_functionContext numeric_value_function() throws RecognitionException {
		Numeric_value_functionContext _localctx = new Numeric_value_functionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_numeric_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3531); extract_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_expressionContext extends ParserRuleContext {
		public Extract_fieldContext extract_field_string;
		public Extract_fieldContext extract_field() {
			return getRuleContext(Extract_fieldContext.class,0);
		}
		public TerminalNode EXTRACT() { return getToken(SQLParser.EXTRACT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public Extract_sourceContext extract_source() {
			return getRuleContext(Extract_sourceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public Extract_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtract_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtract_expression(this);
		}
	}

	public final Extract_expressionContext extract_expression() throws RecognitionException {
		Extract_expressionContext _localctx = new Extract_expressionContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_extract_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3533); match(EXTRACT);
			setState(3534); match(LEFT_PAREN);
			setState(3535); ((Extract_expressionContext)_localctx).extract_field_string = extract_field();
			setState(3536); match(FROM);
			setState(3537); extract_source();
			setState(3538); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_fieldContext extends ParserRuleContext {
		public Extended_datetime_fieldContext extended_datetime_field() {
			return getRuleContext(Extended_datetime_fieldContext.class,0);
		}
		public Primary_datetime_fieldContext primary_datetime_field() {
			return getRuleContext(Primary_datetime_fieldContext.class,0);
		}
		public Time_zone_fieldContext time_zone_field() {
			return getRuleContext(Time_zone_fieldContext.class,0);
		}
		public Extract_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtract_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtract_field(this);
		}
	}

	public final Extract_fieldContext extract_field() throws RecognitionException {
		Extract_fieldContext _localctx = new Extract_fieldContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_extract_field);
		try {
			setState(3543);
			switch (_input.LA(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case SECOND:
			case YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(3540); primary_datetime_field();
				}
				break;
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3541); time_zone_field();
				}
				break;
			case CENTURY:
			case DECADE:
			case DOW:
			case DOY:
			case EPOCH:
			case ISODOW:
			case ISOYEAR:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case QUARTER:
			case WEEK:
				enterOuterAlt(_localctx, 3);
				{
				setState(3542); extended_datetime_field();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Time_zone_fieldContext extends ParserRuleContext {
		public TerminalNode TIMEZONE_MINUTE() { return getToken(SQLParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE() { return getToken(SQLParser.TIMEZONE, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(SQLParser.TIMEZONE_HOUR, 0); }
		public Time_zone_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time_zone_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTime_zone_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTime_zone_field(this);
		}
	}

	public final Time_zone_fieldContext time_zone_field() throws RecognitionException {
		Time_zone_fieldContext _localctx = new Time_zone_fieldContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_time_zone_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3545);
			_la = _input.LA(1);
			if ( !(((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (TIMEZONE - 263)) | (1L << (TIMEZONE_HOUR - 263)) | (1L << (TIMEZONE_MINUTE - 263)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extract_sourceContext extends ParserRuleContext {
		public Column_referenceContext column_reference() {
			return getRuleContext(Column_referenceContext.class,0);
		}
		public Datetime_literalContext datetime_literal() {
			return getRuleContext(Datetime_literalContext.class,0);
		}
		public Extract_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extract_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtract_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtract_source(this);
		}
	}

	public final Extract_sourceContext extract_source() throws RecognitionException {
		Extract_sourceContext _localctx = new Extract_sourceContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_extract_source);
		try {
			setState(3549);
			switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3547); column_reference();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3548); datetime_literal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_expressionContext extends ParserRuleContext {
		public Character_value_expressionContext character_value_expression() {
			return getRuleContext(Character_value_expressionContext.class,0);
		}
		public String_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterString_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitString_value_expression(this);
		}
	}

	public final String_value_expressionContext string_value_expression() throws RecognitionException {
		String_value_expressionContext _localctx = new String_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_string_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3551); character_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_value_expressionContext extends ParserRuleContext {
		public List<TerminalNode> CONCATENATION_OPERATOR() { return getTokens(SQLParser.CONCATENATION_OPERATOR); }
		public List<Character_factorContext> character_factor() {
			return getRuleContexts(Character_factorContext.class);
		}
		public TerminalNode CONCATENATION_OPERATOR(int i) {
			return getToken(SQLParser.CONCATENATION_OPERATOR, i);
		}
		public Character_factorContext character_factor(int i) {
			return getRuleContext(Character_factorContext.class,i);
		}
		public Character_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCharacter_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCharacter_value_expression(this);
		}
	}

	public final Character_value_expressionContext character_value_expression() throws RecognitionException {
		Character_value_expressionContext _localctx = new Character_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_character_value_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3553); character_factor();
			setState(3558);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3554); match(CONCATENATION_OPERATOR);
					setState(3555); character_factor();
					}
					} 
				}
				setState(3560);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,502,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_factorContext extends ParserRuleContext {
		public Character_primaryContext character_primary() {
			return getRuleContext(Character_primaryContext.class,0);
		}
		public Character_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCharacter_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCharacter_factor(this);
		}
	}

	public final Character_factorContext character_factor() throws RecognitionException {
		Character_factorContext _localctx = new Character_factorContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_character_factor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3561); character_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Character_primaryContext extends ParserRuleContext {
		public String_value_functionContext string_value_function() {
			return getRuleContext(String_value_functionContext.class,0);
		}
		public Value_expression_primaryContext value_expression_primary() {
			return getRuleContext(Value_expression_primaryContext.class,0);
		}
		public Character_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_character_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCharacter_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCharacter_primary(this);
		}
	}

	public final Character_primaryContext character_primary() throws RecognitionException {
		Character_primaryContext _localctx = new Character_primaryContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_character_primary);
		try {
			setState(3565);
			switch ( getInterpreter().adaptivePredict(_input,503,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3563); value_expression_primary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3564); string_value_function();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_value_functionContext extends ParserRuleContext {
		public Trim_functionContext trim_function() {
			return getRuleContext(Trim_functionContext.class,0);
		}
		public String_value_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_value_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterString_value_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitString_value_function(this);
		}
	}

	public final String_value_functionContext string_value_function() throws RecognitionException {
		String_value_functionContext _localctx = new String_value_functionContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_string_value_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3567); trim_function();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_functionContext extends ParserRuleContext {
		public TerminalNode TRIM() { return getToken(SQLParser.TRIM, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Trim_operandsContext trim_operands() {
			return getRuleContext(Trim_operandsContext.class,0);
		}
		public Trim_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTrim_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTrim_function(this);
		}
	}

	public final Trim_functionContext trim_function() throws RecognitionException {
		Trim_functionContext _localctx = new Trim_functionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_trim_function);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3569); match(TRIM);
			setState(3570); match(LEFT_PAREN);
			setState(3571); trim_operands();
			setState(3572); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_operandsContext extends ParserRuleContext {
		public Character_value_expressionContext trim_character;
		public Character_value_expressionContext trim_source;
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public Character_value_expressionContext character_value_expression(int i) {
			return getRuleContext(Character_value_expressionContext.class,i);
		}
		public Trim_specificationContext trim_specification() {
			return getRuleContext(Trim_specificationContext.class,0);
		}
		public List<Character_value_expressionContext> character_value_expression() {
			return getRuleContexts(Character_value_expressionContext.class);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public Trim_operandsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_operands; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTrim_operands(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTrim_operands(this);
		}
	}

	public final Trim_operandsContext trim_operands() throws RecognitionException {
		Trim_operandsContext _localctx = new Trim_operandsContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_trim_operands);
		int _la;
		try {
			setState(3588);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3581);
				switch ( getInterpreter().adaptivePredict(_input,506,_ctx) ) {
				case 1:
					{
					setState(3575);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(3574); trim_specification();
						}
					}

					setState(3578);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << CASE) | (1L << CAST) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (LEFT - 73)) | (1L << (NULL - 73)) | (1L << (RIGHT - 73)) | (1L << (SOME - 73)) | (1L << (TRUE - 73)) | (1L << (ADMIN - 73)) | (1L << (ALWAYS - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (AVG - 137)) | (1L << (BETWEEN - 137)) | (1L << (BY - 137)) | (1L << (CACHE - 137)) | (1L << (CALLED - 137)) | (1L << (CLASS - 137)) | (1L << (CENTURY - 137)) | (1L << (CHARACTER - 137)) | (1L << (CHECK - 137)) | (1L << (CLUSTER - 137)) | (1L << (COLLECT - 137)) | (1L << (COALESCE - 137)) | (1L << (COLUMN - 137)) | (1L << (COMMENT - 137)) | (1L << (COMMENTS - 137)) | (1L << (COMMIT - 137)) | (1L << (CONCURRENTLY - 137)) | (1L << (CONFIGURATION - 137)) | (1L << (COST - 137)) | (1L << (COUNT - 137)) | (1L << (CUBE - 137)) | (1L << (CURRENT - 137)) | (1L << (CYCLE - 137)) | (1L << (DATA - 137)) | (1L << (DAY - 137)) | (1L << (DEC - 137)) | (1L << (DECADE - 137)) | (1L << (DEFINER - 137)) | (1L << (DICTIONARY - 137)) | (1L << (DISABLE - 137)) | (1L << (DOW - 137)) | (1L << (DOY - 137)) | (1L << (DROP - 137)) | (1L << (ENABLE - 137)) | (1L << (EPOCH - 137)) | (1L << (EVENT - 137)) | (1L << (EVERY - 137)) | (1L << (EXISTS - 137)) | (1L << (EXTENDED - 137)) | (1L << (EXTERNAL - 137)) | (1L << (EXTRACT - 137)) | (1L << (FAMILY - 137)) | (1L << (FILTER - 137)) | (1L << (FIRST - 137)) | (1L << (FORMAT - 137)) | (1L << (FUSION - 137)) | (1L << (GROUPING - 137)) | (1L << (HASH - 137)) | (1L << (INHERIT - 137)) | (1L << (INDEX - 137)) | (1L << (INCREMENT - 137)) | (1L << (INPUT - 137)) | (1L << (INSERT - 137)) | (1L << (INTERSECTION - 137)) | (1L << (ISCACHABLE - 137)) | (1L << (ISODOW - 137)) | (1L << (ISOYEAR - 137)) | (1L << (ISSTRICT - 137)) | (1L << (LANGUAGE - 137)) | (1L << (LARGE - 137)) | (1L << (LAST - 137)) | (1L << (LESS - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (LIST - 201)) | (1L << (LOCATION - 201)) | (1L << (MAIN - 201)) | (1L << (MATCH - 201)) | (1L << (MAX - 201)) | (1L << (MAXVALUE - 201)) | (1L << (MICROSECONDS - 201)) | (1L << (MILLENNIUM - 201)) | (1L << (MILLISECONDS - 201)) | (1L << (MIN - 201)) | (1L << (MINVALUE - 201)) | (1L << (MINUTE - 201)) | (1L << (MONTH - 201)) | (1L << (NATIONAL - 201)) | (1L << (NO - 201)) | (1L << (NONE - 201)) | (1L << (NULLIF - 201)) | (1L << (OBJECT - 201)) | (1L << (ON - 201)) | (1L << (ONLY - 201)) | (1L << (OPTION - 201)) | (1L << (OPTIONS - 201)) | (1L << (OVERWRITE - 201)) | (1L << (PARSER - 201)) | (1L << (PARTIAL - 201)) | (1L << (PARTITION - 201)) | (1L << (PARTITIONS - 201)) | (1L << (PLAIN - 201)) | (1L << (PRECISION - 201)) | (1L << (PUBLIC - 201)) | (1L << (PURGE - 201)) | (1L << (QUARTER - 201)) | (1L << (RANGE - 201)) | (1L << (REGCONFIG - 201)) | (1L << (REGEXP - 201)) | (1L << (RENAME - 201)) | (1L << (REPLICA - 201)) | (1L << (RESET - 201)) | (1L << (RESTART - 201)) | (1L << (RLIKE - 201)) | (1L << (ROLLUP - 201)) | (1L << (SEARCH - 201)) | (1L << (SECOND - 201)) | (1L << (SECURITY - 201)) | (1L << (SERVER - 201)) | (1L << (SET - 201)) | (1L << (SIMILAR - 201)) | (1L << (SIMPLE - 201)) | (1L << (STABLE - 201)) | (1L << (START - 201)) | (1L << (STATISTICS - 201)) | (1L << (STORAGE - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUBPARTITION - 201)) | (1L << (SUM - 201)) | (1L << (TABLESPACE - 201)) | (1L << (TEMPLATE - 201)) | (1L << (THAN - 201)) | (1L << (TIMEZONE - 201)) | (1L << (TIMEZONE_HOUR - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (TIMEZONE_MINUTE - 265)) | (1L << (TRIM - 265)) | (1L << (TO - 265)) | (1L << (TYPE - 265)) | (1L << (TYPES - 265)) | (1L << (UNKNOWN - 265)) | (1L << (UNLOGGED - 265)) | (1L << (USER - 265)) | (1L << (VALID - 265)) | (1L << (VALIDATE - 265)) | (1L << (VALUES - 265)) | (1L << (VAR_SAMP - 265)) | (1L << (VAR_POP - 265)) | (1L << (VARYING - 265)) | (1L << (VERSION - 265)) | (1L << (VOLATILE - 265)) | (1L << (WEEK - 265)) | (1L << (WINDOW - 265)) | (1L << (WRAPPER - 265)) | (1L << (YEAR - 265)) | (1L << (ZONE - 265)) | (1L << (BOOLEAN - 265)) | (1L << (BOOL - 265)) | (1L << (BIT - 265)) | (1L << (VARBIT - 265)) | (1L << (INT1 - 265)) | (1L << (INT2 - 265)) | (1L << (INT4 - 265)) | (1L << (INT8 - 265)) | (1L << (TINYINT - 265)) | (1L << (SMALLINT - 265)) | (1L << (INT - 265)) | (1L << (INTEGER - 265)) | (1L << (BIGINT - 265)) | (1L << (FLOAT4 - 265)) | (1L << (FLOAT8 - 265)) | (1L << (REAL - 265)) | (1L << (FLOAT - 265)) | (1L << (DOUBLE - 265)) | (1L << (NUMERIC - 265)) | (1L << (DECIMAL - 265)) | (1L << (CHAR - 265)) | (1L << (VARCHAR - 265)) | (1L << (NCHAR - 265)) | (1L << (NVARCHAR - 265)) | (1L << (DATE - 265)) | (1L << (TIME - 265)) | (1L << (TIMETZ - 265)) | (1L << (TIMESTAMP - 265)) | (1L << (TIMESTAMPTZ - 265)) | (1L << (TEXT - 265)) | (1L << (UUID - 265)) | (1L << (VARBINARY - 265)) | (1L << (BLOB - 265)) | (1L << (BYTEA - 265)) | (1L << (INET4 - 265)) | (1L << (INET - 265)) | (1L << (INTERVAL - 265)) | (1L << (VOID - 265)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (LEFT_PAREN - 342)) | (1L << (DOUBLE_QUOTE - 342)) | (1L << (NUMBER - 342)) | (1L << (REAL_NUMBER - 342)) | (1L << (Identifier - 342)) | (1L << (QuotedIdentifier - 342)) | (1L << (Character_String_Literal - 342)))) != 0)) {
						{
						setState(3577); ((Trim_operandsContext)_localctx).trim_character = character_value_expression();
						}
					}

					setState(3580); match(FROM);
					}
					break;
				}
				setState(3583); ((Trim_operandsContext)_localctx).trim_source = character_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3584); ((Trim_operandsContext)_localctx).trim_source = character_value_expression();
				setState(3585); match(COMMA);
				setState(3586); ((Trim_operandsContext)_localctx).trim_character = character_value_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trim_specificationContext extends ParserRuleContext {
		public TerminalNode BOTH() { return getToken(SQLParser.BOTH, 0); }
		public TerminalNode TRAILING() { return getToken(SQLParser.TRAILING, 0); }
		public TerminalNode LEADING() { return getToken(SQLParser.LEADING, 0); }
		public Trim_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trim_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTrim_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTrim_specification(this);
		}
	}

	public final Trim_specificationContext trim_specification() throws RecognitionException {
		Trim_specificationContext _localctx = new Trim_specificationContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_trim_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3590);
			_la = _input.LA(1);
			if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_value_expressionContext extends ParserRuleContext {
		public Or_predicateContext or_predicate() {
			return getRuleContext(Or_predicateContext.class,0);
		}
		public Boolean_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_value_expression(this);
		}
	}

	public final Boolean_value_expressionContext boolean_value_expression() throws RecognitionException {
		Boolean_value_expressionContext _localctx = new Boolean_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_boolean_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3592); or_predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Or_predicateContext extends ParserRuleContext {
		public List<Or_predicateContext> or_predicate() {
			return getRuleContexts(Or_predicateContext.class);
		}
		public Or_predicateContext or_predicate(int i) {
			return getRuleContext(Or_predicateContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(SQLParser.OR); }
		public And_predicateContext and_predicate() {
			return getRuleContext(And_predicateContext.class,0);
		}
		public TerminalNode OR(int i) {
			return getToken(SQLParser.OR, i);
		}
		public Or_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_or_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOr_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOr_predicate(this);
		}
	}

	public final Or_predicateContext or_predicate() throws RecognitionException {
		Or_predicateContext _localctx = new Or_predicateContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_or_predicate);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3594); and_predicate();
			setState(3599);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,508,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3595); match(OR);
					setState(3596); or_predicate();
					}
					} 
				}
				setState(3601);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,508,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class And_predicateContext extends ParserRuleContext {
		public Boolean_factorContext boolean_factor() {
			return getRuleContext(Boolean_factorContext.class,0);
		}
		public List<TerminalNode> AND() { return getTokens(SQLParser.AND); }
		public List<And_predicateContext> and_predicate() {
			return getRuleContexts(And_predicateContext.class);
		}
		public TerminalNode AND(int i) {
			return getToken(SQLParser.AND, i);
		}
		public And_predicateContext and_predicate(int i) {
			return getRuleContext(And_predicateContext.class,i);
		}
		public And_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_and_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAnd_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAnd_predicate(this);
		}
	}

	public final And_predicateContext and_predicate() throws RecognitionException {
		And_predicateContext _localctx = new And_predicateContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_and_predicate);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3602); boolean_factor();
			setState(3607);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3603); match(AND);
					setState(3604); and_predicate();
					}
					} 
				}
				setState(3609);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,509,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_factorContext extends ParserRuleContext {
		public Boolean_testContext boolean_test() {
			return getRuleContext(Boolean_testContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Boolean_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_factor(this);
		}
	}

	public final Boolean_factorContext boolean_factor() throws RecognitionException {
		Boolean_factorContext _localctx = new Boolean_factorContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_boolean_factor);
		try {
			setState(3613);
			switch ( getInterpreter().adaptivePredict(_input,510,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3610); boolean_test();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3611); match(NOT);
				setState(3612); boolean_test();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_testContext extends ParserRuleContext {
		public Is_clauseContext is_clause() {
			return getRuleContext(Is_clauseContext.class,0);
		}
		public Boolean_primaryContext boolean_primary() {
			return getRuleContext(Boolean_primaryContext.class,0);
		}
		public Boolean_testContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_test; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_test(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_test(this);
		}
	}

	public final Boolean_testContext boolean_test() throws RecognitionException {
		Boolean_testContext _localctx = new Boolean_testContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_boolean_test);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3615); boolean_primary();
			setState(3617);
			switch ( getInterpreter().adaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				setState(3616); is_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Is_clauseContext extends ParserRuleContext {
		public Truth_valueContext t;
		public Truth_valueContext truth_value() {
			return getRuleContext(Truth_valueContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public Is_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_is_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIs_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIs_clause(this);
		}
	}

	public final Is_clauseContext is_clause() throws RecognitionException {
		Is_clauseContext _localctx = new Is_clauseContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_is_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3619); match(IS);
			setState(3621);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3620); match(NOT);
				}
			}

			setState(3623); ((Is_clauseContext)_localctx).t = truth_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truth_valueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SQLParser.TRUE, 0); }
		public TerminalNode UNKNOWN() { return getToken(SQLParser.UNKNOWN, 0); }
		public TerminalNode FALSE() { return getToken(SQLParser.FALSE, 0); }
		public Truth_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truth_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTruth_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTruth_value(this);
		}
	}

	public final Truth_valueContext truth_value() throws RecognitionException {
		Truth_valueContext _localctx = new Truth_valueContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_truth_value);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3625);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_primaryContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public Boolean_predicandContext boolean_predicand() {
			return getRuleContext(Boolean_predicandContext.class,0);
		}
		public Boolean_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_primary(this);
		}
	}

	public final Boolean_primaryContext boolean_primary() throws RecognitionException {
		Boolean_primaryContext _localctx = new Boolean_primaryContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_boolean_primary);
		try {
			setState(3629);
			switch ( getInterpreter().adaptivePredict(_input,513,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3627); predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3628); boolean_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Boolean_predicandContext extends ParserRuleContext {
		public Parenthesized_boolean_value_expressionContext parenthesized_boolean_value_expression() {
			return getRuleContext(Parenthesized_boolean_value_expressionContext.class,0);
		}
		public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
			return getRuleContext(Nonparenthesized_value_expression_primaryContext.class,0);
		}
		public Boolean_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolean_predicand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBoolean_predicand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBoolean_predicand(this);
		}
	}

	public final Boolean_predicandContext boolean_predicand() throws RecognitionException {
		Boolean_predicandContext _localctx = new Boolean_predicandContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_boolean_predicand);
		try {
			setState(3633);
			switch ( getInterpreter().adaptivePredict(_input,514,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3631); parenthesized_boolean_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3632); nonparenthesized_value_expression_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parenthesized_boolean_value_expressionContext extends ParserRuleContext {
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Parenthesized_boolean_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesized_boolean_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterParenthesized_boolean_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitParenthesized_boolean_value_expression(this);
		}
	}

	public final Parenthesized_boolean_value_expressionContext parenthesized_boolean_value_expression() throws RecognitionException {
		Parenthesized_boolean_value_expressionContext _localctx = new Parenthesized_boolean_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_parenthesized_boolean_value_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3635); match(LEFT_PAREN);
			setState(3636); boolean_value_expression();
			setState(3637); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_expressionContext extends ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return getRuleContext(Row_value_special_caseContext.class,0);
		}
		public Explicit_row_value_constructorContext explicit_row_value_constructor() {
			return getRuleContext(Explicit_row_value_constructorContext.class,0);
		}
		public Row_value_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_expression(this);
		}
	}

	public final Row_value_expressionContext row_value_expression() throws RecognitionException {
		Row_value_expressionContext _localctx = new Row_value_expressionContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_row_value_expression);
		try {
			setState(3641);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3639); row_value_special_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3640); explicit_row_value_constructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_special_caseContext extends ParserRuleContext {
		public Nonparenthesized_value_expression_primaryContext nonparenthesized_value_expression_primary() {
			return getRuleContext(Nonparenthesized_value_expression_primaryContext.class,0);
		}
		public Row_value_special_caseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_special_case; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_special_case(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_special_case(this);
		}
	}

	public final Row_value_special_caseContext row_value_special_case() throws RecognitionException {
		Row_value_special_caseContext _localctx = new Row_value_special_caseContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_row_value_special_case);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3643); nonparenthesized_value_expression_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_row_value_constructorContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Explicit_row_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_row_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExplicit_row_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExplicit_row_value_constructor(this);
		}
	}

	public final Explicit_row_value_constructorContext explicit_row_value_constructor() throws RecognitionException {
		Explicit_row_value_constructorContext _localctx = new Explicit_row_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_explicit_row_value_constructor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3645); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_predicandContext extends ParserRuleContext {
		public Row_value_special_caseContext row_value_special_case() {
			return getRuleContext(Row_value_special_caseContext.class,0);
		}
		public Row_value_constructor_predicandContext row_value_constructor_predicand() {
			return getRuleContext(Row_value_constructor_predicandContext.class,0);
		}
		public Row_value_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_predicand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_predicand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_predicand(this);
		}
	}

	public final Row_value_predicandContext row_value_predicand() throws RecognitionException {
		Row_value_predicandContext _localctx = new Row_value_predicandContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_row_value_predicand);
		try {
			setState(3649);
			switch ( getInterpreter().adaptivePredict(_input,516,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3647); row_value_special_case();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3648); row_value_constructor_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_constructor_predicandContext extends ParserRuleContext {
		public Boolean_predicandContext boolean_predicand() {
			return getRuleContext(Boolean_predicandContext.class,0);
		}
		public Common_value_expressionContext common_value_expression() {
			return getRuleContext(Common_value_expressionContext.class,0);
		}
		public Row_value_constructor_predicandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_constructor_predicand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_constructor_predicand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_constructor_predicand(this);
		}
	}

	public final Row_value_constructor_predicandContext row_value_constructor_predicand() throws RecognitionException {
		Row_value_constructor_predicandContext _localctx = new Row_value_constructor_predicandContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_row_value_constructor_predicand);
		try {
			setState(3653);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3651); common_value_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3652); boolean_predicand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_expressionContext extends ParserRuleContext {
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Groupby_clauseContext groupby_clause() {
			return getRuleContext(Groupby_clauseContext.class,0);
		}
		public Limit_clauseContext limit_clause() {
			return getRuleContext(Limit_clauseContext.class,0);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Orderby_clauseContext orderby_clause() {
			return getRuleContext(Orderby_clauseContext.class,0);
		}
		public Table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_expression(this);
		}
	}

	public final Table_expressionContext table_expression() throws RecognitionException {
		Table_expressionContext _localctx = new Table_expressionContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3655); from_clause();
			setState(3657);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3656); where_clause();
				}
			}

			setState(3660);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3659); groupby_clause();
				}
			}

			setState(3663);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(3662); having_clause();
				}
			}

			setState(3666);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3665); orderby_clause();
				}
			}

			setState(3669);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(3668); limit_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public Table_reference_list_parenContext table_reference_list_paren() {
			return getRuleContext(Table_reference_list_parenContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFrom_clause(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3671); match(FROM);
			setState(3672); table_reference_list_paren();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_reference_list_parenContext extends ParserRuleContext {
		public List<Table_reference_list_parenContext> table_reference_list_paren() {
			return getRuleContexts(Table_reference_list_parenContext.class);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public Table_reference_listContext table_reference_list() {
			return getRuleContext(Table_reference_listContext.class,0);
		}
		public Table_reference_list_parenContext table_reference_list_paren(int i) {
			return getRuleContext(Table_reference_list_parenContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public Table_reference_list_parenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference_list_paren; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_reference_list_paren(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_reference_list_paren(this);
		}
	}

	public final Table_reference_list_parenContext table_reference_list_paren() throws RecognitionException {
		Table_reference_list_parenContext _localctx = new Table_reference_list_parenContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_table_reference_list_paren);
		int _la;
		try {
			setState(3683);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3674); table_reference_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3675); match(LEFT_PAREN);
				setState(3678); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(3678);
					switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
					case 1:
						{
						setState(3676);
						_la = _input.LA(1);
						if ( _la <= 0 || (_la==LEFT_PAREN || _la==RIGHT_PAREN) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						break;
					case 2:
						{
						setState(3677); table_reference_list_paren();
						}
						break;
					}
					}
					setState(3680); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AGGREGATE) | (1L << AFTER) | (1L << AS) | (1L << ALL) | (1L << ALTER) | (1L << AND) | (1L << ANY) | (1L << ASYMMETRIC) | (1L << ASC) | (1L << AUTHORIZATION) | (1L << BEFORE) | (1L << BOTH) | (1L << CASE) | (1L << CASCADE) | (1L << CAST) | (1L << COLLATE) | (1L << COLLATION) | (1L << CONNECT) | (1L << CONSTRAINT) | (1L << CONSTRAINTS) | (1L << CONVERSION) | (1L << CREATE) | (1L << CROSS) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DEFAULTS) | (1L << DEFERRABLE) | (1L << DEFERRED) | (1L << DELETE) | (1L << DESC) | (1L << DISTINCT) | (1L << DOMAIN) | (1L << EACH) | (1L << END) | (1L << ELSE) | (1L << EXCEPT) | (1L << EXCLUDE) | (1L << EXCLUDING) | (1L << EXECUTE) | (1L << EXTENSION) | (1L << FALSE) | (1L << FOR) | (1L << FOREIGN) | (1L << FULL) | (1L << FUNCTION) | (1L << FUNCTIONS) | (1L << FROM) | (1L << GLOBAL) | (1L << GRANT) | (1L << GROUP) | (1L << HAVING) | (1L << HANDLER) | (1L << IF) | (1L << ILIKE) | (1L << IMMEDIATE) | (1L << IMMUTABLE) | (1L << IN) | (1L << INCLUDING) | (1L << INHERITS) | (1L << INITIALLY) | (1L << INLINE) | (1L << INNER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (INTO - 64)) | (1L << (INOUT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (IS - 64)) | (1L << (JOIN - 64)) | (1L << (KEY - 64)) | (1L << (LEADING - 64)) | (1L << (LEFT - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCAL - 64)) | (1L << (NATURAL - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (OF - 64)) | (1L << (OIDS - 64)) | (1L << (OUTER - 64)) | (1L << (OUT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (OWNED - 64)) | (1L << (OWNER - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRIMARY - 64)) | (1L << (PRIVILEGES - 64)) | (1L << (PROCEDURE - 64)) | (1L << (PROCEDURAL - 64)) | (1L << (ROLE - 64)) | (1L << (ROW - 64)) | (1L << (ROWS - 64)) | (1L << (REFERENCES - 64)) | (1L << (REPLACE - 64)) | (1L << (RESTRICT - 64)) | (1L << (RETURNS - 64)) | (1L << (REVOKE - 64)) | (1L << (RIGHT - 64)) | (1L << (RULE - 64)) | (1L << (SCHEMA - 64)) | (1L << (SEQUENCE - 64)) | (1L << (SEQUENCES - 64)) | (1L << (SELECT - 64)) | (1L << (SESSION - 64)) | (1L << (SETOF - 64)) | (1L << (SOME - 64)) | (1L << (STATEMENT - 64)) | (1L << (STRICT - 64)) | (1L << (SYMMETRIC - 64)) | (1L << (TABLE - 64)) | (1L << (TEMP - 64)) | (1L << (TEMPORARY - 64)) | (1L << (THEN - 64)) | (1L << (TRAILING - 64)) | (1L << (TRUSTED - 64)) | (1L << (TRIGGER - 64)) | (1L << (TRUE - 64)) | (1L << (TRUNCATE - 64)) | (1L << (UNION - 64)) | (1L << (UNIQUE - 64)) | (1L << (UPDATE - 64)) | (1L << (USAGE - 64)) | (1L << (USING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (VALIDATOR - 128)) | (1L << (VARIADIC - 128)) | (1L << (VIEW - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WITH - 128)) | (1L << (WITHOUT - 128)) | (1L << (ADMIN - 128)) | (1L << (ALWAYS - 128)) | (1L << (AVG - 128)) | (1L << (BETWEEN - 128)) | (1L << (BY - 128)) | (1L << (CACHE - 128)) | (1L << (CALLED - 128)) | (1L << (CLASS - 128)) | (1L << (CENTURY - 128)) | (1L << (CHARACTER - 128)) | (1L << (CHECK - 128)) | (1L << (CLUSTER - 128)) | (1L << (COLLECT - 128)) | (1L << (COALESCE - 128)) | (1L << (COLUMN - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMENTS - 128)) | (1L << (COMMIT - 128)) | (1L << (CONCURRENTLY - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (COST - 128)) | (1L << (COUNT - 128)) | (1L << (CUBE - 128)) | (1L << (CURRENT - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DAY - 128)) | (1L << (DEC - 128)) | (1L << (DECADE - 128)) | (1L << (DEFINER - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISABLE - 128)) | (1L << (DOW - 128)) | (1L << (DOY - 128)) | (1L << (DROP - 128)) | (1L << (ENABLE - 128)) | (1L << (EPOCH - 128)) | (1L << (EVENT - 128)) | (1L << (EVERY - 128)) | (1L << (EXISTS - 128)) | (1L << (EXTENDED - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAMILY - 128)) | (1L << (FILTER - 128)) | (1L << (FIRST - 128)) | (1L << (FORMAT - 128)) | (1L << (FUSION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HOUR - 128)) | (1L << (INHERIT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXES - 128)) | (1L << (INCREMENT - 128)) | (1L << (INPUT - 128)) | (1L << (INSERT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTERSECTION - 192)) | (1L << (ISCACHABLE - 192)) | (1L << (ISODOW - 192)) | (1L << (ISOYEAR - 192)) | (1L << (ISSTRICT - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LARGE - 192)) | (1L << (LAST - 192)) | (1L << (LESS - 192)) | (1L << (LIST - 192)) | (1L << (LOCATION - 192)) | (1L << (MAIN - 192)) | (1L << (MATCH - 192)) | (1L << (MAX - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MICROSECONDS - 192)) | (1L << (MILLENNIUM - 192)) | (1L << (MILLISECONDS - 192)) | (1L << (MIN - 192)) | (1L << (MINVALUE - 192)) | (1L << (MINUTE - 192)) | (1L << (MONTH - 192)) | (1L << (NATIONAL - 192)) | (1L << (NO - 192)) | (1L << (NONE - 192)) | (1L << (NULLIF - 192)) | (1L << (N_DISTINCT - 192)) | (1L << (N_DISTINCT_INHERITED - 192)) | (1L << (OBJECT - 192)) | (1L << (ON - 192)) | (1L << (ONLY - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIONS - 192)) | (1L << (OVERWRITE - 192)) | (1L << (PARSER - 192)) | (1L << (PARTIAL - 192)) | (1L << (PARTITION - 192)) | (1L << (PARTITIONS - 192)) | (1L << (PLAIN - 192)) | (1L << (PRECISION - 192)) | (1L << (PUBLIC - 192)) | (1L << (PURGE - 192)) | (1L << (QUARTER - 192)) | (1L << (RANGE - 192)) | (1L << (REGCONFIG - 192)) | (1L << (REGEXP - 192)) | (1L << (RENAME - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RLIKE - 192)) | (1L << (ROLLUP - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SERVER - 192)) | (1L << (SET - 192)) | (1L << (SIMILAR - 192)) | (1L << (SIMPLE - 192)) | (1L << (STABLE - 192)) | (1L << (START - 192)) | (1L << (STATISTICS - 192)) | (1L << (STORAGE - 192)) | (1L << (STDDEV_POP - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (STDDEV_SAMP - 256)) | (1L << (SUBPARTITION - 256)) | (1L << (SUM - 256)) | (1L << (TABLESPACE - 256)) | (1L << (TABLES - 256)) | (1L << (TEMPLATE - 256)) | (1L << (THAN - 256)) | (1L << (TIMEZONE - 256)) | (1L << (TIMEZONE_HOUR - 256)) | (1L << (TIMEZONE_MINUTE - 256)) | (1L << (TRIM - 256)) | (1L << (TO - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (USER - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUES - 256)) | (1L << (VAR_SAMP - 256)) | (1L << (VAR_POP - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VOLATILE - 256)) | (1L << (WEEK - 256)) | (1L << (WINDOW - 256)) | (1L << (WRAPPER - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (BOOLEAN - 256)) | (1L << (BOOL - 256)) | (1L << (BIT - 256)) | (1L << (VARBIT - 256)) | (1L << (INT1 - 256)) | (1L << (INT2 - 256)) | (1L << (INT4 - 256)) | (1L << (INT8 - 256)) | (1L << (TINYINT - 256)) | (1L << (SMALLINT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (BIGINT - 256)) | (1L << (FLOAT4 - 256)) | (1L << (FLOAT8 - 256)) | (1L << (REAL - 256)) | (1L << (REGCLASS - 256)) | (1L << (FLOAT - 256)) | (1L << (DOUBLE - 256)) | (1L << (NUMERIC - 256)) | (1L << (DECIMAL - 256)) | (1L << (CHAR - 256)) | (1L << (VARCHAR - 256)) | (1L << (NCHAR - 256)) | (1L << (NVARCHAR - 256)) | (1L << (DATE - 256)) | (1L << (TIME - 256)) | (1L << (TIMETZ - 256)) | (1L << (TIMESTAMP - 256)) | (1L << (TIMESTAMPTZ - 256)) | (1L << (TEXT - 256)) | (1L << (UUID - 256)) | (1L << (BINARY - 256)) | (1L << (VARBINARY - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (BLOB - 320)) | (1L << (BYTEA - 320)) | (1L << (INET4 - 320)) | (1L << (INET - 320)) | (1L << (INTERVAL - 320)) | (1L << (VOID - 320)) | (1L << (Similar_To - 320)) | (1L << (Not_Similar_To - 320)) | (1L << (Similar_To_Case_Insensitive - 320)) | (1L << (Not_Similar_To_Case_Insensitive - 320)) | (1L << (CAST_EXPRESSION - 320)) | (1L << (ASSIGN - 320)) | (1L << (EQUAL - 320)) | (1L << (COLON - 320)) | (1L << (SEMI_COLON - 320)) | (1L << (COMMA - 320)) | (1L << (CONCATENATION_OPERATOR - 320)) | (1L << (NOT_EQUAL - 320)) | (1L << (LTH - 320)) | (1L << (LEQ - 320)) | (1L << (GTH - 320)) | (1L << (GEQ - 320)) | (1L << (LEFT_PAREN - 320)) | (1L << (PLUS - 320)) | (1L << (MINUS - 320)) | (1L << (MULTIPLY - 320)) | (1L << (DIVIDE - 320)) | (1L << (MODULAR - 320)) | (1L << (DOT - 320)) | (1L << (UNDERLINE - 320)) | (1L << (VERTICAL_BAR - 320)) | (1L << (QUOTE - 320)) | (1L << (DOUBLE_QUOTE - 320)) | (1L << (DOLLAR - 320)) | (1L << (DOUBLE_DOLLAR - 320)) | (1L << (NUMBER - 320)) | (1L << (REAL_NUMBER - 320)) | (1L << (BlockComment - 320)) | (1L << (LineComment - 320)) | (1L << (Identifier - 320)) | (1L << (QuotedIdentifier - 320)) | (1L << (UnterminatedQuotedIdentifier - 320)) | (1L << (Character_String_Literal - 320)) | (1L << (ESC_SEQUENCES - 320)) | (1L << (DOLLAR_FIELD - 320)) | (1L << (BeginDollarStringConstant - 320)) | (1L << (Space - 320)) | (1L << (White_Space - 320)) | (1L << (BAD - 320)) | (1L << (Text_between_Dollar - 320)) | (1L << (EndDollarStringConstant - 320)))) != 0) );
				setState(3682); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_reference_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Table_referenceContext table_reference(int i) {
			return getRuleContext(Table_referenceContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<Table_referenceContext> table_reference() {
			return getRuleContexts(Table_referenceContext.class);
		}
		public Table_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_reference_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_reference_list(this);
		}
	}

	public final Table_reference_listContext table_reference_list() throws RecognitionException {
		Table_reference_listContext _localctx = new Table_reference_listContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_table_reference_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3685); table_reference();
			setState(3690);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,526,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3686); match(COMMA);
					setState(3687); table_reference();
					}
					} 
				}
				setState(3692);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,526,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_referenceContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Table_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_reference(this);
		}
	}

	public final Table_referenceContext table_reference() throws RecognitionException {
		Table_referenceContext _localctx = new Table_referenceContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_table_reference);
		try {
			setState(3695);
			switch ( getInterpreter().adaptivePredict(_input,527,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3693); joined_table();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3694); table_primary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_tableContext extends ParserRuleContext {
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public List<Joined_table_primaryContext> joined_table_primary() {
			return getRuleContexts(Joined_table_primaryContext.class);
		}
		public Joined_table_primaryContext joined_table_primary(int i) {
			return getRuleContext(Joined_table_primaryContext.class,i);
		}
		public Joined_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoined_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoined_table(this);
		}
	}

	public final Joined_tableContext joined_table() throws RecognitionException {
		Joined_tableContext _localctx = new Joined_tableContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_joined_table);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3697); table_primary();
			setState(3699); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3698); joined_table_primary();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3701); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,528,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Joined_table_primaryContext extends ParserRuleContext {
		public Table_primaryContext right;
		public Join_typeContext t;
		public Join_specificationContext s;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public TerminalNode UNION() { return getToken(SQLParser.UNION, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(SQLParser.NATURAL, 0); }
		public TerminalNode CROSS() { return getToken(SQLParser.CROSS, 0); }
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Join_specificationContext join_specification() {
			return getRuleContext(Join_specificationContext.class,0);
		}
		public Joined_table_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joined_table_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoined_table_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoined_table_primary(this);
		}
	}

	public final Joined_table_primaryContext joined_table_primary() throws RecognitionException {
		Joined_table_primaryContext _localctx = new Joined_table_primaryContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_joined_table_primary);
		int _la;
		try {
			setState(3722);
			switch (_input.LA(1)) {
			case CROSS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3703); match(CROSS);
				setState(3704); match(JOIN);
				setState(3705); ((Joined_table_primaryContext)_localctx).right = table_primary();
				}
				break;
			case FULL:
			case INNER:
			case JOIN:
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3707);
				_la = _input.LA(1);
				if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & ((1L << (FULL - 45)) | (1L << (INNER - 45)) | (1L << (LEFT - 45)) | (1L << (RIGHT - 45)))) != 0)) {
					{
					setState(3706); ((Joined_table_primaryContext)_localctx).t = join_type();
					}
				}

				setState(3709); match(JOIN);
				setState(3710); ((Joined_table_primaryContext)_localctx).right = table_primary();
				setState(3711); ((Joined_table_primaryContext)_localctx).s = join_specification();
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(3713); match(NATURAL);
				setState(3715);
				_la = _input.LA(1);
				if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & ((1L << (FULL - 45)) | (1L << (INNER - 45)) | (1L << (LEFT - 45)) | (1L << (RIGHT - 45)))) != 0)) {
					{
					setState(3714); ((Joined_table_primaryContext)_localctx).t = join_type();
					}
				}

				setState(3717); match(JOIN);
				setState(3718); ((Joined_table_primaryContext)_localctx).right = table_primary();
				}
				break;
			case UNION:
				enterOuterAlt(_localctx, 4);
				{
				setState(3719); match(UNION);
				setState(3720); match(JOIN);
				setState(3721); ((Joined_table_primaryContext)_localctx).right = table_primary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cross_joinContext extends ParserRuleContext {
		public Table_primaryContext r;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public TerminalNode CROSS() { return getToken(SQLParser.CROSS, 0); }
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Cross_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cross_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCross_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCross_join(this);
		}
	}

	public final Cross_joinContext cross_join() throws RecognitionException {
		Cross_joinContext _localctx = new Cross_joinContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_cross_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3724); match(CROSS);
			setState(3725); match(JOIN);
			setState(3726); ((Cross_joinContext)_localctx).r = table_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_joinContext extends ParserRuleContext {
		public Join_typeContext t;
		public Table_primaryContext r;
		public Join_specificationContext s;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Join_specificationContext join_specification() {
			return getRuleContext(Join_specificationContext.class,0);
		}
		public Qualified_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQualified_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQualified_join(this);
		}
	}

	public final Qualified_joinContext qualified_join() throws RecognitionException {
		Qualified_joinContext _localctx = new Qualified_joinContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_qualified_join);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3729);
			_la = _input.LA(1);
			if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & ((1L << (FULL - 45)) | (1L << (INNER - 45)) | (1L << (LEFT - 45)) | (1L << (RIGHT - 45)))) != 0)) {
				{
				setState(3728); ((Qualified_joinContext)_localctx).t = join_type();
				}
			}

			setState(3731); match(JOIN);
			setState(3732); ((Qualified_joinContext)_localctx).r = table_primary();
			setState(3733); ((Qualified_joinContext)_localctx).s = join_specification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Natural_joinContext extends ParserRuleContext {
		public Join_typeContext t;
		public Table_primaryContext r;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public Join_typeContext join_type() {
			return getRuleContext(Join_typeContext.class,0);
		}
		public TerminalNode NATURAL() { return getToken(SQLParser.NATURAL, 0); }
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Natural_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_natural_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNatural_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNatural_join(this);
		}
	}

	public final Natural_joinContext natural_join() throws RecognitionException {
		Natural_joinContext _localctx = new Natural_joinContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_natural_join);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3735); match(NATURAL);
			setState(3737);
			_la = _input.LA(1);
			if (((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & ((1L << (FULL - 45)) | (1L << (INNER - 45)) | (1L << (LEFT - 45)) | (1L << (RIGHT - 45)))) != 0)) {
				{
				setState(3736); ((Natural_joinContext)_localctx).t = join_type();
				}
			}

			setState(3739); match(JOIN);
			setState(3740); ((Natural_joinContext)_localctx).r = table_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Union_joinContext extends ParserRuleContext {
		public Table_primaryContext r;
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public TerminalNode UNION() { return getToken(SQLParser.UNION, 0); }
		public Table_primaryContext table_primary() {
			return getRuleContext(Table_primaryContext.class,0);
		}
		public Union_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_union_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnion_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnion_join(this);
		}
	}

	public final Union_joinContext union_join() throws RecognitionException {
		Union_joinContext _localctx = new Union_joinContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_union_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3742); match(UNION);
			setState(3743); match(JOIN);
			setState(3744); ((Union_joinContext)_localctx).r = table_primary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_typeContext extends ParserRuleContext {
		public Outer_join_typeContext t;
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public TerminalNode INNER() { return getToken(SQLParser.INNER, 0); }
		public Join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoin_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoin_type(this);
		}
	}

	public final Join_typeContext join_type() throws RecognitionException {
		Join_typeContext _localctx = new Join_typeContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_join_type);
		try {
			setState(3748);
			switch (_input.LA(1)) {
			case INNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3746); match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3747); ((Join_typeContext)_localctx).t = outer_join_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode OUTER() { return getToken(SQLParser.OUTER, 0); }
		public Outer_join_type_part2Context outer_join_type_part2() {
			return getRuleContext(Outer_join_type_part2Context.class,0);
		}
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOuter_join_type(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3750); outer_join_type_part2();
			setState(3752);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(3751); match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_type_part2Context extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(SQLParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(SQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SQLParser.RIGHT, 0); }
		public Outer_join_type_part2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type_part2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOuter_join_type_part2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOuter_join_type_part2(this);
		}
	}

	public final Outer_join_type_part2Context outer_join_type_part2() throws RecognitionException {
		Outer_join_type_part2Context _localctx = new Outer_join_type_part2Context(_ctx, getState());
		enterRule(_localctx, 346, RULE_outer_join_type_part2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3754);
			_la = _input.LA(1);
			if ( !(((((_la - 45)) & ~0x3f) == 0 && ((1L << (_la - 45)) & ((1L << (FULL - 45)) | (1L << (LEFT - 45)) | (1L << (RIGHT - 45)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_specificationContext extends ParserRuleContext {
		public Named_columns_joinContext named_columns_join() {
			return getRuleContext(Named_columns_joinContext.class,0);
		}
		public Join_conditionContext join_condition() {
			return getRuleContext(Join_conditionContext.class,0);
		}
		public Join_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoin_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoin_specification(this);
		}
	}

	public final Join_specificationContext join_specification() throws RecognitionException {
		Join_specificationContext _localctx = new Join_specificationContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_join_specification);
		try {
			setState(3758);
			switch (_input.LA(1)) {
			case ON:
				enterOuterAlt(_localctx, 1);
				{
				setState(3756); join_condition();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3757); named_columns_join();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_conditionContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Join_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterJoin_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitJoin_condition(this);
		}
	}

	public final Join_conditionContext join_condition() throws RecognitionException {
		Join_conditionContext _localctx = new Join_conditionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_join_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3760); match(ON);
			setState(3761); search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_columns_joinContext extends ParserRuleContext {
		public Column_reference_listContext f;
		public Column_reference_listContext column_reference_list() {
			return getRuleContext(Column_reference_listContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Named_columns_joinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_columns_join; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNamed_columns_join(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNamed_columns_join(this);
		}
	}

	public final Named_columns_joinContext named_columns_join() throws RecognitionException {
		Named_columns_joinContext _localctx = new Named_columns_joinContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_named_columns_join);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3763); match(USING);
			setState(3764); match(LEFT_PAREN);
			setState(3765); ((Named_columns_joinContext)_localctx).f = column_reference_list();
			setState(3766); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_primaryContext extends ParserRuleContext {
		public IdentifierContext alias;
		public IdentifierContext name;
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Table_or_query_nameContext table_or_query_name() {
			return getRuleContext(Table_or_query_nameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Table_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_primary(this);
		}
	}

	public final Table_primaryContext table_primary() throws RecognitionException {
		Table_primaryContext _localctx = new Table_primaryContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_table_primary);
		int _la;
		try {
			setState(3792);
			switch (_input.LA(1)) {
			case ADMIN:
			case ALWAYS:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case DOUBLE_QUOTE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(3768); table_or_query_name();
				setState(3773);
				switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
				case 1:
					{
					setState(3770);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(3769); match(AS);
						}
					}

					setState(3772); ((Table_primaryContext)_localctx).alias = identifier();
					}
					break;
				}
				setState(3779);
				switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
				case 1:
					{
					setState(3775); match(LEFT_PAREN);
					setState(3776); column_name_list();
					setState(3777); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3781); derived_table();
				setState(3783);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(3782); match(AS);
					}
				}

				setState(3785); ((Table_primaryContext)_localctx).name = identifier();
				setState(3790);
				switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
				case 1:
					{
					setState(3786); match(LEFT_PAREN);
					setState(3787); column_name_list();
					setState(3788); match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_name_list(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3794); identifier();
			setState(3799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3795); match(COMMA);
				setState(3796); identifier();
				}
				}
				setState(3801);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDerived_table(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_derived_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3802); table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWhere_clause(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3804); match(WHERE);
			setState(3805); search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSearch_condition(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_search_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3807); value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Groupby_clauseContext extends ParserRuleContext {
		public Grouping_element_listContext g;
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Grouping_element_listContext grouping_element_list() {
			return getRuleContext(Grouping_element_listContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public Groupby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupby_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGroupby_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGroupby_clause(this);
		}
	}

	public final Groupby_clauseContext groupby_clause() throws RecognitionException {
		Groupby_clauseContext _localctx = new Groupby_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_groupby_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3809); match(GROUP);
			setState(3810); match(BY);
			setState(3811); ((Groupby_clauseContext)_localctx).g = grouping_element_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_element_listContext extends ParserRuleContext {
		public Grouping_elementContext grouping_element(int i) {
			return getRuleContext(Grouping_elementContext.class,i);
		}
		public List<Grouping_elementContext> grouping_element() {
			return getRuleContexts(Grouping_elementContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Grouping_element_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_element_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrouping_element_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrouping_element_list(this);
		}
	}

	public final Grouping_element_listContext grouping_element_list() throws RecognitionException {
		Grouping_element_listContext _localctx = new Grouping_element_listContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_grouping_element_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3813); grouping_element();
			setState(3818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3814); match(COMMA);
				setState(3815); grouping_element();
				}
				}
				setState(3820);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_elementContext extends ParserRuleContext {
		public Cube_listContext cube_list() {
			return getRuleContext(Cube_listContext.class,0);
		}
		public Empty_grouping_setContext empty_grouping_set() {
			return getRuleContext(Empty_grouping_setContext.class,0);
		}
		public Ordinary_grouping_setContext ordinary_grouping_set() {
			return getRuleContext(Ordinary_grouping_setContext.class,0);
		}
		public Rollup_listContext rollup_list() {
			return getRuleContext(Rollup_listContext.class,0);
		}
		public Grouping_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrouping_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrouping_element(this);
		}
	}

	public final Grouping_elementContext grouping_element() throws RecognitionException {
		Grouping_elementContext _localctx = new Grouping_elementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_grouping_element);
		try {
			setState(3825);
			switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3821); rollup_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3822); cube_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3823); empty_grouping_set();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3824); ordinary_grouping_set();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordinary_grouping_setContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Row_value_predicand_listContext row_value_predicand_list() {
			return getRuleContext(Row_value_predicand_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Ordinary_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinary_grouping_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrdinary_grouping_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrdinary_grouping_set(this);
		}
	}

	public final Ordinary_grouping_setContext ordinary_grouping_set() throws RecognitionException {
		Ordinary_grouping_setContext _localctx = new Ordinary_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_ordinary_grouping_set);
		try {
			setState(3832);
			switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3827); row_value_predicand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3828); match(LEFT_PAREN);
				setState(3829); row_value_predicand_list();
				setState(3830); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ordinary_grouping_set_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Ordinary_grouping_setContext> ordinary_grouping_set() {
			return getRuleContexts(Ordinary_grouping_setContext.class);
		}
		public Ordinary_grouping_setContext ordinary_grouping_set(int i) {
			return getRuleContext(Ordinary_grouping_setContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Ordinary_grouping_set_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ordinary_grouping_set_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrdinary_grouping_set_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrdinary_grouping_set_list(this);
		}
	}

	public final Ordinary_grouping_set_listContext ordinary_grouping_set_list() throws RecognitionException {
		Ordinary_grouping_set_listContext _localctx = new Ordinary_grouping_set_listContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_ordinary_grouping_set_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3834); ordinary_grouping_set();
			setState(3839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3835); match(COMMA);
				setState(3836); ordinary_grouping_set();
				}
				}
				setState(3841);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_listContext extends ParserRuleContext {
		public Ordinary_grouping_set_listContext c;
		public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return getRuleContext(Ordinary_grouping_set_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(SQLParser.ROLLUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Rollup_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRollup_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRollup_list(this);
		}
	}

	public final Rollup_listContext rollup_list() throws RecognitionException {
		Rollup_listContext _localctx = new Rollup_listContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_rollup_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3842); match(ROLLUP);
			setState(3843); match(LEFT_PAREN);
			setState(3844); ((Rollup_listContext)_localctx).c = ordinary_grouping_set_list();
			setState(3845); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cube_listContext extends ParserRuleContext {
		public Ordinary_grouping_set_listContext c;
		public Ordinary_grouping_set_listContext ordinary_grouping_set_list() {
			return getRuleContext(Ordinary_grouping_set_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode CUBE() { return getToken(SQLParser.CUBE, 0); }
		public Cube_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cube_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCube_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCube_list(this);
		}
	}

	public final Cube_listContext cube_list() throws RecognitionException {
		Cube_listContext _localctx = new Cube_listContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_cube_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3847); match(CUBE);
			setState(3848); match(LEFT_PAREN);
			setState(3849); ((Cube_listContext)_localctx).c = ordinary_grouping_set_list();
			setState(3850); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Empty_grouping_setContext extends ParserRuleContext {
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Empty_grouping_setContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_empty_grouping_set; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterEmpty_grouping_set(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitEmpty_grouping_set(this);
		}
	}

	public final Empty_grouping_setContext empty_grouping_set() throws RecognitionException {
		Empty_grouping_setContext _localctx = new Empty_grouping_setContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_empty_grouping_set);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3852); match(LEFT_PAREN);
			setState(3853); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(SQLParser.HAVING, 0); }
		public Boolean_value_expressionContext boolean_value_expression() {
			return getRuleContext(Boolean_value_expressionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitHaving_clause(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3855); match(HAVING);
			setState(3856); boolean_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_value_predicand_listContext extends ParserRuleContext {
		public Row_value_predicandContext row_value_predicand(int i) {
			return getRuleContext(Row_value_predicandContext.class,i);
		}
		public List<Row_value_predicandContext> row_value_predicand() {
			return getRuleContexts(Row_value_predicandContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Row_value_predicand_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_value_predicand_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_value_predicand_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_value_predicand_list(this);
		}
	}

	public final Row_value_predicand_listContext row_value_predicand_list() throws RecognitionException {
		Row_value_predicand_listContext _localctx = new Row_value_predicand_listContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_row_value_predicand_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3858); row_value_predicand();
			setState(3863);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3859); match(COMMA);
				setState(3860); row_value_predicand();
				}
				}
				setState(3865);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expressionContext extends ParserRuleContext {
		public Query_expression_bodyContext query_expression_body() {
			return getRuleContext(Query_expression_bodyContext.class,0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_expression(this);
		}
	}

	public final Query_expressionContext query_expression() throws RecognitionException {
		Query_expressionContext _localctx = new Query_expressionContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_query_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3866); query_expression_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_expression_bodyContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public Query_expression_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_expression_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_expression_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_expression_body(this);
		}
	}

	public final Query_expression_bodyContext query_expression_body() throws RecognitionException {
		Query_expression_bodyContext _localctx = new Query_expression_bodyContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_query_expression_body);
		try {
			setState(3870);
			switch ( getInterpreter().adaptivePredict(_input,549,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3868); non_join_query_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3869); joined_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_join_query_expressionContext extends ParserRuleContext {
		public List<TerminalNode> EXCEPT() { return getTokens(SQLParser.EXCEPT); }
		public List<TerminalNode> UNION() { return getTokens(SQLParser.UNION); }
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public TerminalNode EXCEPT(int i) {
			return getToken(SQLParser.EXCEPT, i);
		}
		public Query_termContext query_term(int i) {
			return getRuleContext(Query_termContext.class,i);
		}
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_termContext non_join_query_term() {
			return getRuleContext(Non_join_query_termContext.class,0);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(SQLParser.DISTINCT); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public TerminalNode DISTINCT(int i) {
			return getToken(SQLParser.DISTINCT, i);
		}
		public List<Query_termContext> query_term() {
			return getRuleContexts(Query_termContext.class);
		}
		public TerminalNode UNION(int i) {
			return getToken(SQLParser.UNION, i);
		}
		public Non_join_query_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_join_query_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNon_join_query_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNon_join_query_expression(this);
		}
	}

	public final Non_join_query_expressionContext non_join_query_expression() throws RecognitionException {
		Non_join_query_expressionContext _localctx = new Non_join_query_expressionContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_non_join_query_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3880);
			switch ( getInterpreter().adaptivePredict(_input,551,_ctx) ) {
			case 1:
				{
				setState(3872); non_join_query_term();
				}
				break;
			case 2:
				{
				setState(3873); joined_table();
				setState(3874);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3876);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(3875);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(3878); query_term();
				}
				break;
			}
			setState(3889);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCEPT || _la==UNION) {
				{
				{
				setState(3882);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(3884);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(3883);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(3886); query_term();
				}
				}
				setState(3891);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_termContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_termContext non_join_query_term() {
			return getRuleContext(Non_join_query_termContext.class,0);
		}
		public Query_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_term(this);
		}
	}

	public final Query_termContext query_term() throws RecognitionException {
		Query_termContext _localctx = new Query_termContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_query_term);
		try {
			setState(3894);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3892); non_join_query_term();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3893); joined_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_join_query_termContext extends ParserRuleContext {
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public List<TerminalNode> DISTINCT() { return getTokens(SQLParser.DISTINCT); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public List<Query_primaryContext> query_primary() {
			return getRuleContexts(Query_primaryContext.class);
		}
		public List<TerminalNode> INTERSECT() { return getTokens(SQLParser.INTERSECT); }
		public TerminalNode DISTINCT(int i) {
			return getToken(SQLParser.DISTINCT, i);
		}
		public Query_primaryContext query_primary(int i) {
			return getRuleContext(Query_primaryContext.class,i);
		}
		public Non_join_query_primaryContext non_join_query_primary() {
			return getRuleContext(Non_join_query_primaryContext.class,0);
		}
		public TerminalNode INTERSECT(int i) {
			return getToken(SQLParser.INTERSECT, i);
		}
		public Non_join_query_termContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_join_query_term; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNon_join_query_term(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNon_join_query_term(this);
		}
	}

	public final Non_join_query_termContext non_join_query_term() throws RecognitionException {
		Non_join_query_termContext _localctx = new Non_join_query_termContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_non_join_query_term);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3904);
			switch ( getInterpreter().adaptivePredict(_input,556,_ctx) ) {
			case 1:
				{
				setState(3896); non_join_query_primary();
				}
				break;
			case 2:
				{
				setState(3897); joined_table();
				setState(3898); match(INTERSECT);
				setState(3900);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(3899);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(3902); query_primary();
				}
				break;
			}
			setState(3913);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INTERSECT) {
				{
				{
				setState(3906); match(INTERSECT);
				setState(3908);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(3907);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					consume();
					}
				}

				setState(3910); query_primary();
				}
				}
				setState(3915);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_primaryContext extends ParserRuleContext {
		public Joined_tableContext joined_table() {
			return getRuleContext(Joined_tableContext.class,0);
		}
		public Non_join_query_primaryContext non_join_query_primary() {
			return getRuleContext(Non_join_query_primaryContext.class,0);
		}
		public Query_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_primary(this);
		}
	}

	public final Query_primaryContext query_primary() throws RecognitionException {
		Query_primaryContext _localctx = new Query_primaryContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_query_primary);
		try {
			setState(3918);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3916); non_join_query_primary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3917); joined_table();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_join_query_primaryContext extends ParserRuleContext {
		public Simple_tableContext simple_table() {
			return getRuleContext(Simple_tableContext.class,0);
		}
		public Non_join_query_expressionContext non_join_query_expression() {
			return getRuleContext(Non_join_query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Non_join_query_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_join_query_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNon_join_query_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNon_join_query_primary(this);
		}
	}

	public final Non_join_query_primaryContext non_join_query_primary() throws RecognitionException {
		Non_join_query_primaryContext _localctx = new Non_join_query_primaryContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_non_join_query_primary);
		try {
			setState(3925);
			switch (_input.LA(1)) {
			case SELECT:
			case TABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3920); simple_table();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3921); match(LEFT_PAREN);
				setState(3922); non_join_query_expression();
				setState(3923); match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_tableContext extends ParserRuleContext {
		public Explicit_tableContext explicit_table() {
			return getRuleContext(Explicit_tableContext.class,0);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Simple_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSimple_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSimple_table(this);
		}
	}

	public final Simple_tableContext simple_table() throws RecognitionException {
		Simple_tableContext _localctx = new Simple_tableContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_simple_table);
		try {
			setState(3929);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3927); query_specification();
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3928); explicit_table();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explicit_tableContext extends ParserRuleContext {
		public Table_or_query_nameContext table_or_query_name() {
			return getRuleContext(Table_or_query_nameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public Explicit_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explicit_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExplicit_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExplicit_table(this);
		}
	}

	public final Explicit_tableContext explicit_table() throws RecognitionException {
		Explicit_tableContext _localctx = new Explicit_tableContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_explicit_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3931); match(TABLE);
			setState(3932); table_or_query_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_or_query_nameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Table_or_query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_or_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_or_query_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_or_query_name(this);
		}
	}

	public final Table_or_query_nameContext table_or_query_name() throws RecognitionException {
		Table_or_query_nameContext _localctx = new Table_or_query_nameContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_table_or_query_name);
		try {
			setState(3936);
			switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3934); schema_qualified_name();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3935); identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_qualified_nameContext extends ParserRuleContext {
		public List<TerminalNode> DOT() { return getTokens(SQLParser.DOT); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DOT(int i) {
			return getToken(SQLParser.DOT, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Schema_qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchema_qualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchema_qualified_name(this);
		}
	}

	public final Schema_qualified_nameContext schema_qualified_name() throws RecognitionException {
		Schema_qualified_nameContext _localctx = new Schema_qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_schema_qualified_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3938); identifier();
			setState(3945);
			switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
			case 1:
				{
				setState(3939); match(DOT);
				setState(3940); identifier();
				setState(3943);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(3941); match(DOT);
					setState(3942); identifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Table_expressionContext table_expression() {
			return getRuleContext(Table_expressionContext.class,0);
		}
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(SQLParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuery_specification(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_query_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3947); match(SELECT);
			setState(3949);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(3948); set_qualifier();
				}
			}

			setState(3951); select_list();
			setState(3953);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3952); table_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public Select_sublistContext select_sublist(int i) {
			return getRuleContext(Select_sublistContext.class,i);
		}
		public List<Select_sublistContext> select_sublist() {
			return getRuleContexts(Select_sublistContext.class);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelect_list(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_select_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3955); select_sublist();
			setState(3960);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3956); match(COMMA);
				setState(3957); select_sublist();
				}
				}
				setState(3962);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_sublistContext extends ParserRuleContext {
		public Derived_columnContext derived_column() {
			return getRuleContext(Derived_columnContext.class,0);
		}
		public Qualified_asteriskContext qualified_asterisk() {
			return getRuleContext(Qualified_asteriskContext.class,0);
		}
		public Select_sublistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_sublist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelect_sublist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelect_sublist(this);
		}
	}

	public final Select_sublistContext select_sublist() throws RecognitionException {
		Select_sublistContext _localctx = new Select_sublistContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_select_sublist);
		try {
			setState(3965);
			switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3963); derived_column();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3964); qualified_asterisk();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_columnContext extends ParserRuleContext {
		public Value_expressionContext value_expression() {
			return getRuleContext(Value_expressionContext.class,0);
		}
		public As_clauseContext as_clause() {
			return getRuleContext(As_clauseContext.class,0);
		}
		public Derived_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDerived_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDerived_column(this);
		}
	}

	public final Derived_columnContext derived_column() throws RecognitionException {
		Derived_columnContext _localctx = new Derived_columnContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_derived_column);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967); value_expression();
			setState(3969);
			switch ( getInterpreter().adaptivePredict(_input,569,_ctx) ) {
			case 1:
				{
				setState(3968); as_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_asteriskContext extends ParserRuleContext {
		public Token tb_name;
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public TerminalNode Identifier() { return getToken(SQLParser.Identifier, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public Qualified_asteriskContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_asterisk; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQualified_asterisk(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQualified_asterisk(this);
		}
	}

	public final Qualified_asteriskContext qualified_asterisk() throws RecognitionException {
		Qualified_asteriskContext _localctx = new Qualified_asteriskContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_qualified_asterisk);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3973);
			_la = _input.LA(1);
			if (_la==Identifier) {
				{
				setState(3971); ((Qualified_asteriskContext)_localctx).tb_name = match(Identifier);
				setState(3972); match(DOT);
				}
			}

			setState(3975); match(MULTIPLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_qualifierContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(SQLParser.DISTINCT, 0); }
		public Set_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_qualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSet_qualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSet_qualifier(this);
		}
	}

	public final Set_qualifierContext set_qualifier() throws RecognitionException {
		Set_qualifierContext _localctx = new Set_qualifierContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_set_qualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3977);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_referenceContext extends ParserRuleContext {
		public IdentifierContext tb_name;
		public IdentifierContext name;
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public Column_referenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_reference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_reference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_reference(this);
		}
	}

	public final Column_referenceContext column_reference() throws RecognitionException {
		Column_referenceContext _localctx = new Column_referenceContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_column_reference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3982);
			switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
			case 1:
				{
				setState(3979); ((Column_referenceContext)_localctx).tb_name = identifier();
				setState(3980); match(DOT);
				}
				break;
			}
			setState(3984); ((Column_referenceContext)_localctx).name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_clauseContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public As_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAs_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAs_clause(this);
		}
	}

	public final As_clauseContext as_clause() throws RecognitionException {
		As_clauseContext _localctx = new As_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_as_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3987);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3986); match(AS);
				}
			}

			setState(3989); identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_reference_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Column_referenceContext column_reference(int i) {
			return getRuleContext(Column_referenceContext.class,i);
		}
		public List<Column_referenceContext> column_reference() {
			return getRuleContexts(Column_referenceContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Column_reference_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_reference_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumn_reference_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumn_reference_list(this);
		}
	}

	public final Column_reference_listContext column_reference_list() throws RecognitionException {
		Column_reference_listContext _localctx = new Column_reference_listContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_column_reference_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3991); column_reference();
			setState(3996);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3992); match(COMMA);
				setState(3993); column_reference();
				}
				}
				setState(3998);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Scalar_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterScalar_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitScalar_subquery(this);
		}
	}

	public final Scalar_subqueryContext scalar_subquery() throws RecognitionException {
		Scalar_subqueryContext _localctx = new Scalar_subqueryContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_scalar_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3999); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Row_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRow_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRow_subquery(this);
		}
	}

	public final Row_subqueryContext row_subquery() throws RecognitionException {
		Row_subqueryContext _localctx = new Row_subqueryContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_row_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4001); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_subqueryContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Table_subqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTable_subquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTable_subquery(this);
		}
	}

	public final Table_subqueryContext table_subquery() throws RecognitionException {
		Table_subqueryContext _localctx = new Table_subqueryContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_table_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4003); subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSubquery(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_subquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4005); match(LEFT_PAREN);
			setState(4006); query_expression();
			setState(4007); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public Pattern_matching_predicateContext pattern_matching_predicate() {
			return getRuleContext(Pattern_matching_predicateContext.class,0);
		}
		public Exists_predicateContext exists_predicate() {
			return getRuleContext(Exists_predicateContext.class,0);
		}
		public In_predicateContext in_predicate() {
			return getRuleContext(In_predicateContext.class,0);
		}
		public Null_predicateContext null_predicate() {
			return getRuleContext(Null_predicateContext.class,0);
		}
		public Between_predicateContext between_predicate() {
			return getRuleContext(Between_predicateContext.class,0);
		}
		public Comparison_predicateContext comparison_predicate() {
			return getRuleContext(Comparison_predicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPredicate(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_predicate);
		try {
			setState(4015);
			switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4009); comparison_predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4010); between_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4011); in_predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4012); pattern_matching_predicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4013); null_predicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4014); exists_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext left;
		public Comp_opContext c;
		public Row_value_predicandContext right;
		public Row_value_predicandContext row_value_predicand(int i) {
			return getRuleContext(Row_value_predicandContext.class,i);
		}
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public List<Row_value_predicandContext> row_value_predicand() {
			return getRuleContexts(Row_value_predicandContext.class);
		}
		public Comparison_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterComparison_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitComparison_predicate(this);
		}
	}

	public final Comparison_predicateContext comparison_predicate() throws RecognitionException {
		Comparison_predicateContext _localctx = new Comparison_predicateContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_comparison_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017); ((Comparison_predicateContext)_localctx).left = row_value_predicand();
			setState(4018); ((Comparison_predicateContext)_localctx).c = comp_op();
			setState(4019); ((Comparison_predicateContext)_localctx).right = row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comp_opContext extends ParserRuleContext {
		public TerminalNode GEQ() { return getToken(SQLParser.GEQ, 0); }
		public TerminalNode GTH() { return getToken(SQLParser.GTH, 0); }
		public TerminalNode LEQ() { return getToken(SQLParser.LEQ, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(SQLParser.NOT_EQUAL, 0); }
		public TerminalNode LTH() { return getToken(SQLParser.LTH, 0); }
		public Comp_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comp_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterComp_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitComp_op(this);
		}
	}

	public final Comp_opContext comp_op() throws RecognitionException {
		Comp_opContext _localctx = new Comp_opContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_comp_op);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4021);
			_la = _input.LA(1);
			if ( !(((((_la - 332)) & ~0x3f) == 0 && ((1L << (_la - 332)) & ((1L << (EQUAL - 332)) | (1L << (NOT_EQUAL - 332)) | (1L << (LTH - 332)) | (1L << (LEQ - 332)) | (1L << (GTH - 332)) | (1L << (GEQ - 332)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext predicand;
		public Between_predicate_part_2Context between_predicate_part_2() {
			return getRuleContext(Between_predicate_part_2Context.class,0);
		}
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Between_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBetween_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBetween_predicate(this);
		}
	}

	public final Between_predicateContext between_predicate() throws RecognitionException {
		Between_predicateContext _localctx = new Between_predicateContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_between_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4023); ((Between_predicateContext)_localctx).predicand = row_value_predicand();
			setState(4024); between_predicate_part_2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_predicate_part_2Context extends ParserRuleContext {
		public Row_value_predicandContext begin;
		public Row_value_predicandContext end;
		public TerminalNode ASYMMETRIC() { return getToken(SQLParser.ASYMMETRIC, 0); }
		public TerminalNode BETWEEN() { return getToken(SQLParser.BETWEEN, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SQLParser.SYMMETRIC, 0); }
		public Row_value_predicandContext row_value_predicand(int i) {
			return getRuleContext(Row_value_predicandContext.class,i);
		}
		public List<Row_value_predicandContext> row_value_predicand() {
			return getRuleContexts(Row_value_predicandContext.class);
		}
		public TerminalNode AND() { return getToken(SQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Between_predicate_part_2Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_predicate_part_2; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBetween_predicate_part_2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBetween_predicate_part_2(this);
		}
	}

	public final Between_predicate_part_2Context between_predicate_part_2() throws RecognitionException {
		Between_predicate_part_2Context _localctx = new Between_predicate_part_2Context(_ctx, getState());
		enterRule(_localctx, 440, RULE_between_predicate_part_2);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4027);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4026); match(NOT);
				}
			}

			setState(4029); match(BETWEEN);
			setState(4031);
			_la = _input.LA(1);
			if (_la==ASYMMETRIC || _la==SYMMETRIC) {
				{
				setState(4030);
				_la = _input.LA(1);
				if ( !(_la==ASYMMETRIC || _la==SYMMETRIC) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				}
			}

			setState(4033); ((Between_predicate_part_2Context)_localctx).begin = row_value_predicand();
			setState(4034); match(AND);
			setState(4035); ((Between_predicate_part_2Context)_localctx).end = row_value_predicand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicateContext extends ParserRuleContext {
		public Numeric_value_expressionContext predicand;
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public In_predicate_valueContext in_predicate_value() {
			return getRuleContext(In_predicate_valueContext.class,0);
		}
		public In_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIn_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIn_predicate(this);
		}
	}

	public final In_predicateContext in_predicate() throws RecognitionException {
		In_predicateContext _localctx = new In_predicateContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_in_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4037); ((In_predicateContext)_localctx).predicand = numeric_value_expression();
			setState(4039);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4038); match(NOT);
				}
			}

			setState(4041); match(IN);
			setState(4042); in_predicate_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicate_valueContext extends ParserRuleContext {
		public In_value_listContext in_value_list() {
			return getRuleContext(In_value_listContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public In_predicate_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIn_predicate_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIn_predicate_value(this);
		}
	}

	public final In_predicate_valueContext in_predicate_value() throws RecognitionException {
		In_predicate_valueContext _localctx = new In_predicate_valueContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_in_predicate_value);
		try {
			setState(4049);
			switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4044); table_subquery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4045); match(LEFT_PAREN);
				setState(4046); in_value_list();
				setState(4047); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_value_listContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public Row_value_expressionContext row_value_expression(int i) {
			return getRuleContext(Row_value_expressionContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<Row_value_expressionContext> row_value_expression() {
			return getRuleContexts(Row_value_expressionContext.class);
		}
		public In_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_value_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIn_value_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIn_value_list(this);
		}
	}

	public final In_value_listContext in_value_list() throws RecognitionException {
		In_value_listContext _localctx = new In_value_listContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_in_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4051); row_value_expression();
			setState(4056);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4052); match(COMMA);
				setState(4053); row_value_expression();
				}
				}
				setState(4058);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pattern_matching_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext f;
		public Token s;
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Pattern_matcherContext pattern_matcher() {
			return getRuleContext(Pattern_matcherContext.class,0);
		}
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public Pattern_matching_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern_matching_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPattern_matching_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPattern_matching_predicate(this);
		}
	}

	public final Pattern_matching_predicateContext pattern_matching_predicate() throws RecognitionException {
		Pattern_matching_predicateContext _localctx = new Pattern_matching_predicateContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_pattern_matching_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4059); ((Pattern_matching_predicateContext)_localctx).f = row_value_predicand();
			setState(4060); pattern_matcher();
			setState(4061); ((Pattern_matching_predicateContext)_localctx).s = match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pattern_matcherContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Negativable_matcherContext negativable_matcher() {
			return getRuleContext(Negativable_matcherContext.class,0);
		}
		public Regex_matcherContext regex_matcher() {
			return getRuleContext(Regex_matcherContext.class,0);
		}
		public Pattern_matcherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pattern_matcher; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPattern_matcher(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPattern_matcher(this);
		}
	}

	public final Pattern_matcherContext pattern_matcher() throws RecognitionException {
		Pattern_matcherContext _localctx = new Pattern_matcherContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_pattern_matcher);
		int _la;
		try {
			setState(4068);
			switch (_input.LA(1)) {
			case ILIKE:
			case LIKE:
			case NOT:
			case REGEXP:
			case RLIKE:
			case SIMILAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4064);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4063); match(NOT);
					}
				}

				setState(4066); negativable_matcher();
				}
				break;
			case Similar_To:
			case Not_Similar_To:
			case Similar_To_Case_Insensitive:
			case Not_Similar_To_Case_Insensitive:
				enterOuterAlt(_localctx, 2);
				{
				setState(4067); regex_matcher();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Negativable_matcherContext extends ParserRuleContext {
		public TerminalNode SIMILAR() { return getToken(SQLParser.SIMILAR, 0); }
		public TerminalNode REGEXP() { return getToken(SQLParser.REGEXP, 0); }
		public TerminalNode ILIKE() { return getToken(SQLParser.ILIKE, 0); }
		public TerminalNode RLIKE() { return getToken(SQLParser.RLIKE, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode LIKE() { return getToken(SQLParser.LIKE, 0); }
		public Negativable_matcherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negativable_matcher; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNegativable_matcher(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNegativable_matcher(this);
		}
	}

	public final Negativable_matcherContext negativable_matcher() throws RecognitionException {
		Negativable_matcherContext _localctx = new Negativable_matcherContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_negativable_matcher);
		try {
			setState(4076);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4070); match(LIKE);
				}
				break;
			case ILIKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4071); match(ILIKE);
				}
				break;
			case SIMILAR:
				enterOuterAlt(_localctx, 3);
				{
				setState(4072); match(SIMILAR);
				setState(4073); match(TO);
				}
				break;
			case REGEXP:
				enterOuterAlt(_localctx, 4);
				{
				setState(4074); match(REGEXP);
				}
				break;
			case RLIKE:
				enterOuterAlt(_localctx, 5);
				{
				setState(4075); match(RLIKE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regex_matcherContext extends ParserRuleContext {
		public TerminalNode Not_Similar_To() { return getToken(SQLParser.Not_Similar_To, 0); }
		public TerminalNode Similar_To() { return getToken(SQLParser.Similar_To, 0); }
		public TerminalNode Not_Similar_To_Case_Insensitive() { return getToken(SQLParser.Not_Similar_To_Case_Insensitive, 0); }
		public TerminalNode Similar_To_Case_Insensitive() { return getToken(SQLParser.Similar_To_Case_Insensitive, 0); }
		public Regex_matcherContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regex_matcher; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRegex_matcher(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRegex_matcher(this);
		}
	}

	public final Regex_matcherContext regex_matcher() throws RecognitionException {
		Regex_matcherContext _localctx = new Regex_matcherContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_regex_matcher);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4078);
			_la = _input.LA(1);
			if ( !(((((_la - 326)) & ~0x3f) == 0 && ((1L << (_la - 326)) & ((1L << (Similar_To - 326)) | (1L << (Not_Similar_To - 326)) | (1L << (Similar_To_Case_Insensitive - 326)) | (1L << (Not_Similar_To_Case_Insensitive - 326)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_predicateContext extends ParserRuleContext {
		public Row_value_predicandContext predicand;
		public Token n;
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public Null_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNull_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNull_predicate(this);
		}
	}

	public final Null_predicateContext null_predicate() throws RecognitionException {
		Null_predicateContext _localctx = new Null_predicateContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_null_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4080); ((Null_predicateContext)_localctx).predicand = row_value_predicand();
			setState(4081); match(IS);
			setState(4083);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4082); ((Null_predicateContext)_localctx).n = match(NOT);
				}
			}

			setState(4085); match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_comparison_predicateContext extends ParserRuleContext {
		public Numeric_value_expressionContext l;
		public Comp_opContext c;
		public QuantifierContext q;
		public Table_subqueryContext s;
		public Comp_opContext comp_op() {
			return getRuleContext(Comp_opContext.class,0);
		}
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public QuantifierContext quantifier() {
			return getRuleContext(QuantifierContext.class,0);
		}
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Quantified_comparison_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_comparison_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuantified_comparison_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuantified_comparison_predicate(this);
		}
	}

	public final Quantified_comparison_predicateContext quantified_comparison_predicate() throws RecognitionException {
		Quantified_comparison_predicateContext _localctx = new Quantified_comparison_predicateContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_quantified_comparison_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4087); ((Quantified_comparison_predicateContext)_localctx).l = numeric_value_expression();
			setState(4088); ((Quantified_comparison_predicateContext)_localctx).c = comp_op();
			setState(4089); ((Quantified_comparison_predicateContext)_localctx).q = quantifier();
			setState(4090); ((Quantified_comparison_predicateContext)_localctx).s = table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuantifierContext extends ParserRuleContext {
		public AllContext all() {
			return getRuleContext(AllContext.class,0);
		}
		public SomeContext some() {
			return getRuleContext(SomeContext.class,0);
		}
		public QuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQuantifier(this);
		}
	}

	public final QuantifierContext quantifier() throws RecognitionException {
		QuantifierContext _localctx = new QuantifierContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_quantifier);
		try {
			setState(4094);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4092); all();
				}
				break;
			case ANY:
			case SOME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4093); some();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public AllContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAll(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAll(this);
		}
	}

	public final AllContext all() throws RecognitionException {
		AllContext _localctx = new AllContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_all);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4096); match(ALL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SomeContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(SQLParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(SQLParser.ANY, 0); }
		public SomeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_some; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSome(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSome(this);
		}
	}

	public final SomeContext some() throws RecognitionException {
		SomeContext _localctx = new SomeContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_some);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4098);
			_la = _input.LA(1);
			if ( !(_la==ANY || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exists_predicateContext extends ParserRuleContext {
		public Table_subqueryContext s;
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public Exists_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exists_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExists_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExists_predicate(this);
		}
	}

	public final Exists_predicateContext exists_predicate() throws RecognitionException {
		Exists_predicateContext _localctx = new Exists_predicateContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_exists_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4101);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(4100); match(NOT);
				}
			}

			setState(4103); match(EXISTS);
			setState(4104); ((Exists_predicateContext)_localctx).s = table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unique_predicateContext extends ParserRuleContext {
		public Table_subqueryContext s;
		public Table_subqueryContext table_subquery() {
			return getRuleContext(Table_subqueryContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public Unique_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unique_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnique_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnique_predicate(this);
		}
	}

	public final Unique_predicateContext unique_predicate() throws RecognitionException {
		Unique_predicateContext _localctx = new Unique_predicateContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_unique_predicate);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4106); match(UNIQUE);
			setState(4107); ((Unique_predicateContext)_localctx).s = table_subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_datetime_fieldContext extends ParserRuleContext {
		public TerminalNode SECOND() { return getToken(SQLParser.SECOND, 0); }
		public Non_second_primary_datetime_fieldContext non_second_primary_datetime_field() {
			return getRuleContext(Non_second_primary_datetime_fieldContext.class,0);
		}
		public Primary_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPrimary_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPrimary_datetime_field(this);
		}
	}

	public final Primary_datetime_fieldContext primary_datetime_field() throws RecognitionException {
		Primary_datetime_fieldContext _localctx = new Primary_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_primary_datetime_field);
		try {
			setState(4111);
			switch (_input.LA(1)) {
			case DAY:
			case HOUR:
			case MINUTE:
			case MONTH:
			case YEAR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4109); non_second_primary_datetime_field();
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 2);
				{
				setState(4110); match(SECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Non_second_primary_datetime_fieldContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(SQLParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(SQLParser.MONTH, 0); }
		public TerminalNode HOUR() { return getToken(SQLParser.HOUR, 0); }
		public TerminalNode DAY() { return getToken(SQLParser.DAY, 0); }
		public TerminalNode MINUTE() { return getToken(SQLParser.MINUTE, 0); }
		public Non_second_primary_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_non_second_primary_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNon_second_primary_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNon_second_primary_datetime_field(this);
		}
	}

	public final Non_second_primary_datetime_fieldContext non_second_primary_datetime_field() throws RecognitionException {
		Non_second_primary_datetime_fieldContext _localctx = new Non_second_primary_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_non_second_primary_datetime_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4113);
			_la = _input.LA(1);
			if ( !(((((_la - 161)) & ~0x3f) == 0 && ((1L << (_la - 161)) & ((1L << (DAY - 161)) | (1L << (HOUR - 161)) | (1L << (MINUTE - 161)) | (1L << (MONTH - 161)))) != 0) || _la==YEAR) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Extended_datetime_fieldContext extends ParserRuleContext {
		public TerminalNode ISODOW() { return getToken(SQLParser.ISODOW, 0); }
		public TerminalNode EPOCH() { return getToken(SQLParser.EPOCH, 0); }
		public TerminalNode QUARTER() { return getToken(SQLParser.QUARTER, 0); }
		public TerminalNode DOY() { return getToken(SQLParser.DOY, 0); }
		public TerminalNode MILLENNIUM() { return getToken(SQLParser.MILLENNIUM, 0); }
		public TerminalNode DECADE() { return getToken(SQLParser.DECADE, 0); }
		public TerminalNode MICROSECONDS() { return getToken(SQLParser.MICROSECONDS, 0); }
		public TerminalNode WEEK() { return getToken(SQLParser.WEEK, 0); }
		public TerminalNode CENTURY() { return getToken(SQLParser.CENTURY, 0); }
		public TerminalNode MILLISECONDS() { return getToken(SQLParser.MILLISECONDS, 0); }
		public TerminalNode ISOYEAR() { return getToken(SQLParser.ISOYEAR, 0); }
		public TerminalNode DOW() { return getToken(SQLParser.DOW, 0); }
		public Extended_datetime_fieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extended_datetime_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtended_datetime_field(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtended_datetime_field(this);
		}
	}

	public final Extended_datetime_fieldContext extended_datetime_field() throws RecognitionException {
		Extended_datetime_fieldContext _localctx = new Extended_datetime_fieldContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_extended_datetime_field);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4115);
			_la = _input.LA(1);
			if ( !(((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (CENTURY - 143)) | (1L << (DECADE - 143)) | (1L << (DOW - 143)) | (1L << (DOY - 143)) | (1L << (EPOCH - 143)) | (1L << (ISODOW - 143)) | (1L << (ISOYEAR - 143)))) != 0) || ((((_la - 207)) & ~0x3f) == 0 && ((1L << (_la - 207)) & ((1L << (MICROSECONDS - 207)) | (1L << (MILLENNIUM - 207)) | (1L << (MILLISECONDS - 207)) | (1L << (QUARTER - 207)))) != 0) || _la==WEEK) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_invocationContext extends ParserRuleContext {
		public Sql_argument_listContext sql_argument_list() {
			return getRuleContext(Sql_argument_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public Routine_invocationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_invocation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRoutine_invocation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRoutine_invocation(this);
		}
	}

	public final Routine_invocationContext routine_invocation() throws RecognitionException {
		Routine_invocationContext _localctx = new Routine_invocationContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_routine_invocation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4117); function_name();
			setState(4118); match(LEFT_PAREN);
			setState(4120);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ANY) | (1L << CASE) | (1L << CAST) | (1L << FALSE))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (LEFT - 73)) | (1L << (NOT - 73)) | (1L << (NULL - 73)) | (1L << (RIGHT - 73)) | (1L << (SOME - 73)) | (1L << (TRUE - 73)) | (1L << (ADMIN - 73)) | (1L << (ALWAYS - 73)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (AVG - 137)) | (1L << (BETWEEN - 137)) | (1L << (BY - 137)) | (1L << (CACHE - 137)) | (1L << (CALLED - 137)) | (1L << (CLASS - 137)) | (1L << (CENTURY - 137)) | (1L << (CHARACTER - 137)) | (1L << (CHECK - 137)) | (1L << (CLUSTER - 137)) | (1L << (COLLECT - 137)) | (1L << (COALESCE - 137)) | (1L << (COLUMN - 137)) | (1L << (COMMENT - 137)) | (1L << (COMMENTS - 137)) | (1L << (COMMIT - 137)) | (1L << (CONCURRENTLY - 137)) | (1L << (CONFIGURATION - 137)) | (1L << (COST - 137)) | (1L << (COUNT - 137)) | (1L << (CUBE - 137)) | (1L << (CURRENT - 137)) | (1L << (CYCLE - 137)) | (1L << (DATA - 137)) | (1L << (DAY - 137)) | (1L << (DEC - 137)) | (1L << (DECADE - 137)) | (1L << (DEFINER - 137)) | (1L << (DICTIONARY - 137)) | (1L << (DISABLE - 137)) | (1L << (DOW - 137)) | (1L << (DOY - 137)) | (1L << (DROP - 137)) | (1L << (ENABLE - 137)) | (1L << (EPOCH - 137)) | (1L << (EVENT - 137)) | (1L << (EVERY - 137)) | (1L << (EXISTS - 137)) | (1L << (EXTENDED - 137)) | (1L << (EXTERNAL - 137)) | (1L << (EXTRACT - 137)) | (1L << (FAMILY - 137)) | (1L << (FILTER - 137)) | (1L << (FIRST - 137)) | (1L << (FORMAT - 137)) | (1L << (FUSION - 137)) | (1L << (GROUPING - 137)) | (1L << (HASH - 137)) | (1L << (INHERIT - 137)) | (1L << (INDEX - 137)) | (1L << (INCREMENT - 137)) | (1L << (INPUT - 137)) | (1L << (INSERT - 137)) | (1L << (INTERSECTION - 137)) | (1L << (ISCACHABLE - 137)) | (1L << (ISODOW - 137)) | (1L << (ISOYEAR - 137)) | (1L << (ISSTRICT - 137)) | (1L << (LANGUAGE - 137)) | (1L << (LARGE - 137)) | (1L << (LAST - 137)) | (1L << (LESS - 137)))) != 0) || ((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (LIST - 201)) | (1L << (LOCATION - 201)) | (1L << (MAIN - 201)) | (1L << (MATCH - 201)) | (1L << (MAX - 201)) | (1L << (MAXVALUE - 201)) | (1L << (MICROSECONDS - 201)) | (1L << (MILLENNIUM - 201)) | (1L << (MILLISECONDS - 201)) | (1L << (MIN - 201)) | (1L << (MINVALUE - 201)) | (1L << (MINUTE - 201)) | (1L << (MONTH - 201)) | (1L << (NATIONAL - 201)) | (1L << (NO - 201)) | (1L << (NONE - 201)) | (1L << (NULLIF - 201)) | (1L << (OBJECT - 201)) | (1L << (ON - 201)) | (1L << (ONLY - 201)) | (1L << (OPTION - 201)) | (1L << (OPTIONS - 201)) | (1L << (OVERWRITE - 201)) | (1L << (PARSER - 201)) | (1L << (PARTIAL - 201)) | (1L << (PARTITION - 201)) | (1L << (PARTITIONS - 201)) | (1L << (PLAIN - 201)) | (1L << (PRECISION - 201)) | (1L << (PUBLIC - 201)) | (1L << (PURGE - 201)) | (1L << (QUARTER - 201)) | (1L << (RANGE - 201)) | (1L << (REGCONFIG - 201)) | (1L << (REGEXP - 201)) | (1L << (RENAME - 201)) | (1L << (REPLICA - 201)) | (1L << (RESET - 201)) | (1L << (RESTART - 201)) | (1L << (RLIKE - 201)) | (1L << (ROLLUP - 201)) | (1L << (SEARCH - 201)) | (1L << (SECOND - 201)) | (1L << (SECURITY - 201)) | (1L << (SERVER - 201)) | (1L << (SET - 201)) | (1L << (SIMILAR - 201)) | (1L << (SIMPLE - 201)) | (1L << (STABLE - 201)) | (1L << (START - 201)) | (1L << (STATISTICS - 201)) | (1L << (STORAGE - 201)) | (1L << (STDDEV_POP - 201)) | (1L << (STDDEV_SAMP - 201)) | (1L << (SUBPARTITION - 201)) | (1L << (SUM - 201)) | (1L << (TABLESPACE - 201)) | (1L << (TEMPLATE - 201)) | (1L << (THAN - 201)) | (1L << (TIMEZONE - 201)) | (1L << (TIMEZONE_HOUR - 201)))) != 0) || ((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (TIMEZONE_MINUTE - 265)) | (1L << (TRIM - 265)) | (1L << (TO - 265)) | (1L << (TYPE - 265)) | (1L << (TYPES - 265)) | (1L << (UNKNOWN - 265)) | (1L << (UNLOGGED - 265)) | (1L << (USER - 265)) | (1L << (VALID - 265)) | (1L << (VALIDATE - 265)) | (1L << (VALUES - 265)) | (1L << (VAR_SAMP - 265)) | (1L << (VAR_POP - 265)) | (1L << (VARYING - 265)) | (1L << (VERSION - 265)) | (1L << (VOLATILE - 265)) | (1L << (WEEK - 265)) | (1L << (WINDOW - 265)) | (1L << (WRAPPER - 265)) | (1L << (YEAR - 265)) | (1L << (ZONE - 265)) | (1L << (BOOLEAN - 265)) | (1L << (BOOL - 265)) | (1L << (BIT - 265)) | (1L << (VARBIT - 265)) | (1L << (INT1 - 265)) | (1L << (INT2 - 265)) | (1L << (INT4 - 265)) | (1L << (INT8 - 265)) | (1L << (TINYINT - 265)) | (1L << (SMALLINT - 265)) | (1L << (INT - 265)) | (1L << (INTEGER - 265)) | (1L << (BIGINT - 265)) | (1L << (FLOAT4 - 265)) | (1L << (FLOAT8 - 265)) | (1L << (REAL - 265)) | (1L << (FLOAT - 265)) | (1L << (DOUBLE - 265)) | (1L << (NUMERIC - 265)) | (1L << (DECIMAL - 265)) | (1L << (CHAR - 265)) | (1L << (VARCHAR - 265)) | (1L << (NCHAR - 265)) | (1L << (NVARCHAR - 265)) | (1L << (DATE - 265)) | (1L << (TIME - 265)) | (1L << (TIMETZ - 265)) | (1L << (TIMESTAMP - 265)) | (1L << (TIMESTAMPTZ - 265)) | (1L << (TEXT - 265)) | (1L << (UUID - 265)) | (1L << (VARBINARY - 265)) | (1L << (BLOB - 265)) | (1L << (BYTEA - 265)) | (1L << (INET4 - 265)) | (1L << (INET - 265)) | (1L << (INTERVAL - 265)) | (1L << (VOID - 265)))) != 0) || ((((_la - 342)) & ~0x3f) == 0 && ((1L << (_la - 342)) & ((1L << (LEFT_PAREN - 342)) | (1L << (PLUS - 342)) | (1L << (MINUS - 342)) | (1L << (DOUBLE_QUOTE - 342)) | (1L << (NUMBER - 342)) | (1L << (REAL_NUMBER - 342)) | (1L << (Identifier - 342)) | (1L << (QuotedIdentifier - 342)) | (1L << (Character_String_Literal - 342)))) != 0)) {
				{
				setState(4119); sql_argument_list();
				}
			}

			setState(4122); match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_names_for_reserved_wordsContext extends ParserRuleContext {
		public TerminalNode LEFT() { return getToken(SQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SQLParser.RIGHT, 0); }
		public Function_names_for_reserved_wordsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_names_for_reserved_words; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_names_for_reserved_words(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_names_for_reserved_words(this);
		}
	}

	public final Function_names_for_reserved_wordsContext function_names_for_reserved_words() throws RecognitionException {
		Function_names_for_reserved_wordsContext _localctx = new Function_names_for_reserved_wordsContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_function_names_for_reserved_words);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4124);
			_la = _input.LA(1);
			if ( !(_la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public Function_names_for_reserved_wordsContext function_names_for_reserved_words() {
			return getRuleContext(Function_names_for_reserved_wordsContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunction_name(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_function_name);
		try {
			setState(4128);
			switch (_input.LA(1)) {
			case ADMIN:
			case ALWAYS:
			case AVG:
			case BETWEEN:
			case BY:
			case CACHE:
			case CALLED:
			case CLASS:
			case CENTURY:
			case CHARACTER:
			case CHECK:
			case CLUSTER:
			case COLLECT:
			case COALESCE:
			case COLUMN:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case CONCURRENTLY:
			case CONFIGURATION:
			case COST:
			case COUNT:
			case CUBE:
			case CURRENT:
			case CYCLE:
			case DATA:
			case DAY:
			case DEC:
			case DECADE:
			case DEFINER:
			case DICTIONARY:
			case DISABLE:
			case DOW:
			case DOY:
			case DROP:
			case ENABLE:
			case EPOCH:
			case EVENT:
			case EVERY:
			case EXISTS:
			case EXTENDED:
			case EXTERNAL:
			case EXTRACT:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FORMAT:
			case FUSION:
			case GROUPING:
			case HASH:
			case INHERIT:
			case INDEX:
			case INCREMENT:
			case INPUT:
			case INSERT:
			case INTERSECTION:
			case ISCACHABLE:
			case ISODOW:
			case ISOYEAR:
			case ISSTRICT:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LESS:
			case LIST:
			case LOCATION:
			case MAIN:
			case MATCH:
			case MAX:
			case MAXVALUE:
			case MICROSECONDS:
			case MILLENNIUM:
			case MILLISECONDS:
			case MIN:
			case MINVALUE:
			case MINUTE:
			case MONTH:
			case NATIONAL:
			case NO:
			case NONE:
			case NULLIF:
			case OBJECT:
			case ON:
			case ONLY:
			case OPTION:
			case OPTIONS:
			case OVERWRITE:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PLAIN:
			case PRECISION:
			case PUBLIC:
			case PURGE:
			case QUARTER:
			case RANGE:
			case REGCONFIG:
			case REGEXP:
			case RENAME:
			case REPLICA:
			case RESET:
			case RESTART:
			case RLIKE:
			case ROLLUP:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SERVER:
			case SET:
			case SIMILAR:
			case SIMPLE:
			case STABLE:
			case START:
			case STATISTICS:
			case STORAGE:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUBPARTITION:
			case SUM:
			case TABLESPACE:
			case TEMPLATE:
			case THAN:
			case TIMEZONE:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TRIM:
			case TO:
			case TYPE:
			case TYPES:
			case UNKNOWN:
			case UNLOGGED:
			case USER:
			case VALID:
			case VALIDATE:
			case VALUES:
			case VAR_SAMP:
			case VAR_POP:
			case VARYING:
			case VERSION:
			case VOLATILE:
			case WEEK:
			case WINDOW:
			case WRAPPER:
			case YEAR:
			case ZONE:
			case BOOLEAN:
			case BOOL:
			case BIT:
			case VARBIT:
			case INT1:
			case INT2:
			case INT4:
			case INT8:
			case TINYINT:
			case SMALLINT:
			case INT:
			case INTEGER:
			case BIGINT:
			case FLOAT4:
			case FLOAT8:
			case REAL:
			case FLOAT:
			case DOUBLE:
			case NUMERIC:
			case DECIMAL:
			case CHAR:
			case VARCHAR:
			case NCHAR:
			case NVARCHAR:
			case DATE:
			case TIME:
			case TIMETZ:
			case TIMESTAMP:
			case TIMESTAMPTZ:
			case TEXT:
			case UUID:
			case VARBINARY:
			case BLOB:
			case BYTEA:
			case INET4:
			case INET:
			case INTERVAL:
			case VOID:
			case DOUBLE_QUOTE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(4126); schema_qualified_name();
				}
				break;
			case LEFT:
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4127); function_names_for_reserved_words();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_argument_listContext extends ParserRuleContext {
		public Value_expressionContext value_expression(int i) {
			return getRuleContext(Value_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public List<Value_expressionContext> value_expression() {
			return getRuleContexts(Value_expressionContext.class);
		}
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Sql_argument_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_argument_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSql_argument_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSql_argument_list(this);
		}
	}

	public final Sql_argument_listContext sql_argument_list() throws RecognitionException {
		Sql_argument_listContext _localctx = new Sql_argument_listContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_sql_argument_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4130); value_expression();
			setState(4135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4131); match(COMMA);
				setState(4132); value_expression();
				}
				}
				setState(4137);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Orderby_clauseContext extends ParserRuleContext {
		public Sort_specifier_listContext sort_specifier_list() {
			return getRuleContext(Sort_specifier_listContext.class,0);
		}
		public TerminalNode ORDER() { return getToken(SQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderby_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrderby_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrderby_clause(this);
		}
	}

	public final Orderby_clauseContext orderby_clause() throws RecognitionException {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_orderby_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4138); match(ORDER);
			setState(4139); match(BY);
			setState(4140); sort_specifier_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specifier_parenContext extends ParserRuleContext {
		public Sort_specifier_parenContext sort_specifier_paren(int i) {
			return getRuleContext(Sort_specifier_parenContext.class,i);
		}
		public List<Sort_specifier_parenContext> sort_specifier_paren() {
			return getRuleContexts(Sort_specifier_parenContext.class);
		}
		public Sort_specifier_listContext sort_specifier_list() {
			return getRuleContext(Sort_specifier_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public Sort_specifier_parenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specifier_paren; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSort_specifier_paren(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSort_specifier_paren(this);
		}
	}

	public final Sort_specifier_parenContext sort_specifier_paren() throws RecognitionException {
		Sort_specifier_parenContext _localctx = new Sort_specifier_parenContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_sort_specifier_paren);
		int _la;
		try {
			setState(4151);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4142); sort_specifier_list();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4143); match(LEFT_PAREN);
				setState(4146); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(4146);
					switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
					case 1:
						{
						setState(4144);
						_la = _input.LA(1);
						if ( _la <= 0 || (_la==LEFT_PAREN || _la==RIGHT_PAREN) ) {
						_errHandler.recoverInline(this);
						}
						consume();
						}
						break;
					case 2:
						{
						setState(4145); sort_specifier_paren();
						}
						break;
					}
					}
					setState(4148); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AGGREGATE) | (1L << AFTER) | (1L << AS) | (1L << ALL) | (1L << ALTER) | (1L << AND) | (1L << ANY) | (1L << ASYMMETRIC) | (1L << ASC) | (1L << AUTHORIZATION) | (1L << BEFORE) | (1L << BOTH) | (1L << CASE) | (1L << CASCADE) | (1L << CAST) | (1L << COLLATE) | (1L << COLLATION) | (1L << CONNECT) | (1L << CONSTRAINT) | (1L << CONSTRAINTS) | (1L << CONVERSION) | (1L << CREATE) | (1L << CROSS) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DEFAULTS) | (1L << DEFERRABLE) | (1L << DEFERRED) | (1L << DELETE) | (1L << DESC) | (1L << DISTINCT) | (1L << DOMAIN) | (1L << EACH) | (1L << END) | (1L << ELSE) | (1L << EXCEPT) | (1L << EXCLUDE) | (1L << EXCLUDING) | (1L << EXECUTE) | (1L << EXTENSION) | (1L << FALSE) | (1L << FOR) | (1L << FOREIGN) | (1L << FULL) | (1L << FUNCTION) | (1L << FUNCTIONS) | (1L << FROM) | (1L << GLOBAL) | (1L << GRANT) | (1L << GROUP) | (1L << HAVING) | (1L << HANDLER) | (1L << IF) | (1L << ILIKE) | (1L << IMMEDIATE) | (1L << IMMUTABLE) | (1L << IN) | (1L << INCLUDING) | (1L << INHERITS) | (1L << INITIALLY) | (1L << INLINE) | (1L << INNER))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (INTERSECT - 64)) | (1L << (INTO - 64)) | (1L << (INOUT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (IS - 64)) | (1L << (JOIN - 64)) | (1L << (KEY - 64)) | (1L << (LEADING - 64)) | (1L << (LEFT - 64)) | (1L << (LIKE - 64)) | (1L << (LIMIT - 64)) | (1L << (LOCAL - 64)) | (1L << (NATURAL - 64)) | (1L << (NOT - 64)) | (1L << (NULL - 64)) | (1L << (OF - 64)) | (1L << (OIDS - 64)) | (1L << (OUTER - 64)) | (1L << (OUT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OR - 64)) | (1L << (ORDER - 64)) | (1L << (OWNED - 64)) | (1L << (OWNER - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRIMARY - 64)) | (1L << (PRIVILEGES - 64)) | (1L << (PROCEDURE - 64)) | (1L << (PROCEDURAL - 64)) | (1L << (ROLE - 64)) | (1L << (ROW - 64)) | (1L << (ROWS - 64)) | (1L << (REFERENCES - 64)) | (1L << (REPLACE - 64)) | (1L << (RESTRICT - 64)) | (1L << (RETURNS - 64)) | (1L << (REVOKE - 64)) | (1L << (RIGHT - 64)) | (1L << (RULE - 64)) | (1L << (SCHEMA - 64)) | (1L << (SEQUENCE - 64)) | (1L << (SEQUENCES - 64)) | (1L << (SELECT - 64)) | (1L << (SESSION - 64)) | (1L << (SETOF - 64)) | (1L << (SOME - 64)) | (1L << (STATEMENT - 64)) | (1L << (STRICT - 64)) | (1L << (SYMMETRIC - 64)) | (1L << (TABLE - 64)) | (1L << (TEMP - 64)) | (1L << (TEMPORARY - 64)) | (1L << (THEN - 64)) | (1L << (TRAILING - 64)) | (1L << (TRUSTED - 64)) | (1L << (TRIGGER - 64)) | (1L << (TRUE - 64)) | (1L << (TRUNCATE - 64)) | (1L << (UNION - 64)) | (1L << (UNIQUE - 64)) | (1L << (UPDATE - 64)) | (1L << (USAGE - 64)) | (1L << (USING - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (VALIDATOR - 128)) | (1L << (VARIADIC - 128)) | (1L << (VIEW - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (WITH - 128)) | (1L << (WITHOUT - 128)) | (1L << (ADMIN - 128)) | (1L << (ALWAYS - 128)) | (1L << (AVG - 128)) | (1L << (BETWEEN - 128)) | (1L << (BY - 128)) | (1L << (CACHE - 128)) | (1L << (CALLED - 128)) | (1L << (CLASS - 128)) | (1L << (CENTURY - 128)) | (1L << (CHARACTER - 128)) | (1L << (CHECK - 128)) | (1L << (CLUSTER - 128)) | (1L << (COLLECT - 128)) | (1L << (COALESCE - 128)) | (1L << (COLUMN - 128)) | (1L << (COMMENT - 128)) | (1L << (COMMENTS - 128)) | (1L << (COMMIT - 128)) | (1L << (CONCURRENTLY - 128)) | (1L << (CONFIGURATION - 128)) | (1L << (COST - 128)) | (1L << (COUNT - 128)) | (1L << (CUBE - 128)) | (1L << (CURRENT - 128)) | (1L << (CYCLE - 128)) | (1L << (DATA - 128)) | (1L << (DAY - 128)) | (1L << (DEC - 128)) | (1L << (DECADE - 128)) | (1L << (DEFINER - 128)) | (1L << (DICTIONARY - 128)) | (1L << (DISABLE - 128)) | (1L << (DOW - 128)) | (1L << (DOY - 128)) | (1L << (DROP - 128)) | (1L << (ENABLE - 128)) | (1L << (EPOCH - 128)) | (1L << (EVENT - 128)) | (1L << (EVERY - 128)) | (1L << (EXISTS - 128)) | (1L << (EXTENDED - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAMILY - 128)) | (1L << (FILTER - 128)) | (1L << (FIRST - 128)) | (1L << (FORMAT - 128)) | (1L << (FUSION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HOUR - 128)) | (1L << (INHERIT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXES - 128)) | (1L << (INCREMENT - 128)) | (1L << (INPUT - 128)) | (1L << (INSERT - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTERSECTION - 192)) | (1L << (ISCACHABLE - 192)) | (1L << (ISODOW - 192)) | (1L << (ISOYEAR - 192)) | (1L << (ISSTRICT - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LARGE - 192)) | (1L << (LAST - 192)) | (1L << (LESS - 192)) | (1L << (LIST - 192)) | (1L << (LOCATION - 192)) | (1L << (MAIN - 192)) | (1L << (MATCH - 192)) | (1L << (MAX - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MICROSECONDS - 192)) | (1L << (MILLENNIUM - 192)) | (1L << (MILLISECONDS - 192)) | (1L << (MIN - 192)) | (1L << (MINVALUE - 192)) | (1L << (MINUTE - 192)) | (1L << (MONTH - 192)) | (1L << (NATIONAL - 192)) | (1L << (NO - 192)) | (1L << (NONE - 192)) | (1L << (NULLIF - 192)) | (1L << (N_DISTINCT - 192)) | (1L << (N_DISTINCT_INHERITED - 192)) | (1L << (OBJECT - 192)) | (1L << (ON - 192)) | (1L << (ONLY - 192)) | (1L << (OPTION - 192)) | (1L << (OPTIONS - 192)) | (1L << (OVERWRITE - 192)) | (1L << (PARSER - 192)) | (1L << (PARTIAL - 192)) | (1L << (PARTITION - 192)) | (1L << (PARTITIONS - 192)) | (1L << (PLAIN - 192)) | (1L << (PRECISION - 192)) | (1L << (PUBLIC - 192)) | (1L << (PURGE - 192)) | (1L << (QUARTER - 192)) | (1L << (RANGE - 192)) | (1L << (REGCONFIG - 192)) | (1L << (REGEXP - 192)) | (1L << (RENAME - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RLIKE - 192)) | (1L << (ROLLUP - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SERVER - 192)) | (1L << (SET - 192)) | (1L << (SIMILAR - 192)) | (1L << (SIMPLE - 192)) | (1L << (STABLE - 192)) | (1L << (START - 192)) | (1L << (STATISTICS - 192)) | (1L << (STORAGE - 192)) | (1L << (STDDEV_POP - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (STDDEV_SAMP - 256)) | (1L << (SUBPARTITION - 256)) | (1L << (SUM - 256)) | (1L << (TABLESPACE - 256)) | (1L << (TABLES - 256)) | (1L << (TEMPLATE - 256)) | (1L << (THAN - 256)) | (1L << (TIMEZONE - 256)) | (1L << (TIMEZONE_HOUR - 256)) | (1L << (TIMEZONE_MINUTE - 256)) | (1L << (TRIM - 256)) | (1L << (TO - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (USER - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALUES - 256)) | (1L << (VAR_SAMP - 256)) | (1L << (VAR_POP - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VOLATILE - 256)) | (1L << (WEEK - 256)) | (1L << (WINDOW - 256)) | (1L << (WRAPPER - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)) | (1L << (BOOLEAN - 256)) | (1L << (BOOL - 256)) | (1L << (BIT - 256)) | (1L << (VARBIT - 256)) | (1L << (INT1 - 256)) | (1L << (INT2 - 256)) | (1L << (INT4 - 256)) | (1L << (INT8 - 256)) | (1L << (TINYINT - 256)) | (1L << (SMALLINT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (BIGINT - 256)) | (1L << (FLOAT4 - 256)) | (1L << (FLOAT8 - 256)) | (1L << (REAL - 256)) | (1L << (REGCLASS - 256)) | (1L << (FLOAT - 256)) | (1L << (DOUBLE - 256)) | (1L << (NUMERIC - 256)) | (1L << (DECIMAL - 256)) | (1L << (CHAR - 256)) | (1L << (VARCHAR - 256)) | (1L << (NCHAR - 256)) | (1L << (NVARCHAR - 256)) | (1L << (DATE - 256)) | (1L << (TIME - 256)) | (1L << (TIMETZ - 256)) | (1L << (TIMESTAMP - 256)) | (1L << (TIMESTAMPTZ - 256)) | (1L << (TEXT - 256)) | (1L << (UUID - 256)) | (1L << (BINARY - 256)) | (1L << (VARBINARY - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (BLOB - 320)) | (1L << (BYTEA - 320)) | (1L << (INET4 - 320)) | (1L << (INET - 320)) | (1L << (INTERVAL - 320)) | (1L << (VOID - 320)) | (1L << (Similar_To - 320)) | (1L << (Not_Similar_To - 320)) | (1L << (Similar_To_Case_Insensitive - 320)) | (1L << (Not_Similar_To_Case_Insensitive - 320)) | (1L << (CAST_EXPRESSION - 320)) | (1L << (ASSIGN - 320)) | (1L << (EQUAL - 320)) | (1L << (COLON - 320)) | (1L << (SEMI_COLON - 320)) | (1L << (COMMA - 320)) | (1L << (CONCATENATION_OPERATOR - 320)) | (1L << (NOT_EQUAL - 320)) | (1L << (LTH - 320)) | (1L << (LEQ - 320)) | (1L << (GTH - 320)) | (1L << (GEQ - 320)) | (1L << (LEFT_PAREN - 320)) | (1L << (PLUS - 320)) | (1L << (MINUS - 320)) | (1L << (MULTIPLY - 320)) | (1L << (DIVIDE - 320)) | (1L << (MODULAR - 320)) | (1L << (DOT - 320)) | (1L << (UNDERLINE - 320)) | (1L << (VERTICAL_BAR - 320)) | (1L << (QUOTE - 320)) | (1L << (DOUBLE_QUOTE - 320)) | (1L << (DOLLAR - 320)) | (1L << (DOUBLE_DOLLAR - 320)) | (1L << (NUMBER - 320)) | (1L << (REAL_NUMBER - 320)) | (1L << (BlockComment - 320)) | (1L << (LineComment - 320)) | (1L << (Identifier - 320)) | (1L << (QuotedIdentifier - 320)) | (1L << (UnterminatedQuotedIdentifier - 320)) | (1L << (Character_String_Literal - 320)) | (1L << (ESC_SEQUENCES - 320)) | (1L << (DOLLAR_FIELD - 320)) | (1L << (BeginDollarStringConstant - 320)) | (1L << (Space - 320)) | (1L << (White_Space - 320)) | (1L << (BAD - 320)) | (1L << (Text_between_Dollar - 320)) | (1L << (EndDollarStringConstant - 320)))) != 0) );
				setState(4150); match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specifier_listContext extends ParserRuleContext {
		public List<Sort_specifierContext> sort_specifier() {
			return getRuleContexts(Sort_specifierContext.class);
		}
		public Sort_specifierContext sort_specifier(int i) {
			return getRuleContext(Sort_specifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public Sort_specifier_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specifier_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSort_specifier_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSort_specifier_list(this);
		}
	}

	public final Sort_specifier_listContext sort_specifier_list() throws RecognitionException {
		Sort_specifier_listContext _localctx = new Sort_specifier_listContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_sort_specifier_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4153); sort_specifier();
			setState(4158);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,593,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4154); match(COMMA);
					setState(4155); sort_specifier();
					}
					} 
				}
				setState(4160);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,593,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sort_specifierContext extends ParserRuleContext {
		public Row_value_predicandContext key;
		public Order_specificationContext order;
		public Null_orderingContext null_order;
		public Order_specificationContext order_specification() {
			return getRuleContext(Order_specificationContext.class,0);
		}
		public Row_value_predicandContext row_value_predicand() {
			return getRuleContext(Row_value_predicandContext.class,0);
		}
		public Null_orderingContext null_ordering() {
			return getRuleContext(Null_orderingContext.class,0);
		}
		public Sort_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sort_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSort_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSort_specifier(this);
		}
	}

	public final Sort_specifierContext sort_specifier() throws RecognitionException {
		Sort_specifierContext _localctx = new Sort_specifierContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_sort_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4161); ((Sort_specifierContext)_localctx).key = row_value_predicand();
			setState(4163);
			switch ( getInterpreter().adaptivePredict(_input,594,_ctx) ) {
			case 1:
				{
				setState(4162); ((Sort_specifierContext)_localctx).order = order_specification();
				}
				break;
			}
			setState(4166);
			switch ( getInterpreter().adaptivePredict(_input,595,_ctx) ) {
			case 1:
				{
				setState(4165); ((Sort_specifierContext)_localctx).null_order = null_ordering();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_specificationContext extends ParserRuleContext {
		public TerminalNode DESC() { return getToken(SQLParser.DESC, 0); }
		public TerminalNode ASC() { return getToken(SQLParser.ASC, 0); }
		public Order_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrder_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrder_specification(this);
		}
	}

	public final Order_specificationContext order_specification() throws RecognitionException {
		Order_specificationContext _localctx = new Order_specificationContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_order_specification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4168);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			consume();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Limit_clauseContext extends ParserRuleContext {
		public Numeric_value_expressionContext e;
		public TerminalNode LIMIT() { return getToken(SQLParser.LIMIT, 0); }
		public Numeric_value_expressionContext numeric_value_expression() {
			return getRuleContext(Numeric_value_expressionContext.class,0);
		}
		public Limit_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limit_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLimit_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLimit_clause(this);
		}
	}

	public final Limit_clauseContext limit_clause() throws RecognitionException {
		Limit_clauseContext _localctx = new Limit_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_limit_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4170); match(LIMIT);
			setState(4171); ((Limit_clauseContext)_localctx).e = numeric_value_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_orderingContext extends ParserRuleContext {
		public TerminalNode FIRST() { return getToken(SQLParser.FIRST, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode LAST() { return getToken(SQLParser.LAST, 0); }
		public Null_orderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_ordering; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNull_ordering(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNull_ordering(this);
		}
	}

	public final Null_orderingContext null_ordering() throws RecognitionException {
		Null_orderingContext _localctx = new Null_orderingContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_null_ordering);
		try {
			setState(4177);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4173); match(NULL);
				setState(4174); match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4175); match(NULL);
				setState(4176); match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public Token path;
		public IdentifierContext file_type;
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode OVERWRITE() { return getToken(SQLParser.OVERWRITE, 0); }
		public Param_clauseContext param_clause() {
			return getRuleContext(Param_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(SQLParser.INTO, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public Query_expressionContext query_expression() {
			return getRuleContext(Query_expressionContext.class,0);
		}
		public TerminalNode INSERT() { return getToken(SQLParser.INSERT, 0); }
		public TerminalNode LOCATION() { return getToken(SQLParser.LOCATION, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public Schema_qualified_nameContext schema_qualified_name() {
			return getRuleContext(Schema_qualified_nameContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitInsert_statement(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_insert_statement);
		int _la;
		try {
			setState(4208);
			switch ( getInterpreter().adaptivePredict(_input,602,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4179); match(INSERT);
				setState(4181);
				_la = _input.LA(1);
				if (_la==OVERWRITE) {
					{
					setState(4180); match(OVERWRITE);
					}
				}

				setState(4183); match(INTO);
				setState(4184); schema_qualified_name();
				setState(4189);
				switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
				case 1:
					{
					setState(4185); match(LEFT_PAREN);
					setState(4186); column_name_list();
					setState(4187); match(RIGHT_PAREN);
					}
					break;
				}
				setState(4191); query_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4193); match(INSERT);
				setState(4195);
				_la = _input.LA(1);
				if (_la==OVERWRITE) {
					{
					setState(4194); match(OVERWRITE);
					}
				}

				setState(4197); match(INTO);
				setState(4198); match(LOCATION);
				setState(4199); ((Insert_statementContext)_localctx).path = match(Character_String_Literal);
				setState(4205);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4200); match(USING);
					setState(4201); ((Insert_statementContext)_localctx).file_type = identifier();
					setState(4203);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(4202); param_clause();
						}
					}

					}
				}

				setState(4207); query_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	private static final int _serializedATNSegments = 2;
	private static final String _serializedATNSegment0 =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3\u0175\u1075\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\3\2\3\2\5\2\u01f9\n\2\7\2\u01fb\n\2\f\2\16\2"+
		"\u01fe\13\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\5\6\u020b\n\6"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u021b\n\7"+
		"\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u0223\n\b\3\t\3\t\3\t\3\t\3\t\6\t\u022a\n"+
		"\t\r\t\16\t\u022b\3\t\5\t\u022f\n\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3"+
		"\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u0249"+
		"\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u0259"+
		"\n\n\3\13\3\13\5\13\u025d\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\5\13\u0267\n\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u026f\n\13\3\f\3\f"+
		"\3\f\5\f\u0274\n\f\3\f\6\f\u0277\n\f\r\f\16\f\u0278\3\f\3\f\5\f\u027d"+
		"\n\f\6\f\u027f\n\f\r\f\16\f\u0280\3\f\3\f\3\f\5\f\u0286\n\f\3\f\6\f\u0289"+
		"\n\f\r\f\16\f\u028a\3\f\3\f\5\f\u028f\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u02a3\n\f\3\r\3\r\5\r"+
		"\u02a7\n\r\3\r\3\r\3\r\5\r\u02ac\n\r\3\r\3\r\5\r\u02b0\n\r\3\r\3\r\5\r"+
		"\u02b4\n\r\3\r\3\r\5\r\u02b8\n\r\3\r\3\r\3\r\5\r\u02bd\n\r\3\r\3\r\3\r"+
		"\3\r\5\r\u02c3\n\r\3\r\3\r\5\r\u02c7\n\r\3\r\3\r\5\r\u02cb\n\r\3\r\3\r"+
		"\3\r\3\r\3\r\3\r\3\r\5\r\u02d4\n\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u02dc\n"+
		"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u02e6\n\r\3\r\3\r\3\r\3\r\3\r\3"+
		"\r\3\r\5\r\u02ef\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u02f8\n\r\6\r\u02fa"+
		"\n\r\r\r\16\r\u02fb\3\r\3\r\3\r\3\r\5\r\u0302\n\r\3\r\3\r\3\r\3\r\3\r"+
		"\5\r\u0309\n\r\6\r\u030b\n\r\r\r\16\r\u030c\3\r\3\r\3\r\3\r\5\r\u0313"+
		"\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0321\n\r\3\r"+
		"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u032c\n\r\3\r\3\r\3\r\3\r\3\r\3\r"+
		"\3\r\3\r\5\r\u0336\n\r\3\r\3\r\3\r\3\r\3\r\5\r\u033d\n\r\3\r\3\r\3\r\3"+
		"\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r"+
		"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3"+
		"\r\3\r\5\r\u0367\n\r\6\r\u0369\n\r\r\r\16\r\u036a\3\r\3\r\3\r\3\r\3\r"+
		"\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u037e\n\r\3\16\3"+
		"\16\5\16\u0382\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16"+
		"\u038d\n\16\3\16\3\16\3\16\3\16\5\16\u0393\n\16\5\16\u0395\n\16\3\17\3"+
		"\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3"+
		"\20\5\20\u03a7\n\20\3\20\3\20\3\20\5\20\u03ac\n\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u03bb\n\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u03c6\n\20\3\21\3\21\3\21\3\21"+
		"\3\21\3\21\3\21\5\21\u03cf\n\21\6\21\u03d1\n\21\r\21\16\21\u03d2\5\21"+
		"\u03d5\n\21\3\21\3\21\3\21\3\21\5\21\u03db\n\21\6\21\u03dd\n\21\r\21\16"+
		"\21\u03de\5\21\u03e1\n\21\3\21\3\21\3\22\3\22\3\22\5\22\u03e8\n\22\6\22"+
		"\u03ea\n\22\r\22\16\22\u03eb\3\22\3\22\5\22\u03f0\n\22\5\22\u03f2\n\22"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u03fa\n\22\6\22\u03fc\n\22\r\22\16"+
		"\22\u03fd\3\22\3\22\5\22\u0402\n\22\5\22\u0404\n\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\3\22\5\22\u040d\n\22\5\22\u040f\n\22\3\22\3\22\3\22\3\22\3"+
		"\22\3\22\3\22\5\22\u0418\n\22\5\22\u041a\n\22\3\22\3\22\3\22\3\22\3\22"+
		"\3\22\3\22\5\22\u0423\n\22\3\22\3\22\5\22\u0427\n\22\6\22\u0429\n\22\r"+
		"\22\16\22\u042a\3\22\3\22\5\22\u042f\n\22\5\22\u0431\n\22\3\22\3\22\3"+
		"\22\3\22\3\22\3\22\3\22\5\22\u043a\n\22\3\22\3\22\5\22\u043e\n\22\6\22"+
		"\u0440\n\22\r\22\16\22\u0441\3\22\3\22\5\22\u0446\n\22\5\22\u0448\n\22"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0451\n\22\3\22\3\22\3\22\5\22"+
		"\u0456\n\22\5\22\u0458\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0461"+
		"\n\22\3\22\3\22\3\22\5\22\u0466\n\22\5\22\u0468\n\22\3\22\3\22\3\22\5"+
		"\22\u046d\n\22\3\23\3\23\3\23\3\23\5\23\u0473\n\23\3\23\3\23\3\23\3\23"+
		"\5\23\u0479\n\23\3\23\5\23\u047c\n\23\7\23\u047e\n\23\f\23\16\23\u0481"+
		"\13\23\3\23\3\23\3\23\3\23\5\23\u0487\n\23\3\23\3\23\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\23\5\23\u0492\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23"+
		"\3\23\3\23\5\23\u049d\n\23\3\23\3\23\3\23\3\23\3\23\5\23\u04a4\n\23\3"+
		"\24\3\24\5\24\u04a8\n\24\3\24\3\24\5\24\u04ac\n\24\3\24\5\24\u04af\n\24"+
		"\3\24\3\24\3\24\3\24\5\24\u04b5\n\24\3\24\3\24\5\24\u04b9\n\24\3\24\3"+
		"\24\5\24\u04bd\n\24\3\24\3\24\5\24\u04c1\n\24\3\25\3\25\3\25\3\25\3\25"+
		"\5\25\u04c8\n\25\3\25\3\25\5\25\u04cc\n\25\3\25\3\25\5\25\u04d0\n\25\3"+
		"\25\3\25\5\25\u04d4\n\25\3\25\3\25\5\25\u04d8\n\25\3\26\3\26\3\26\5\26"+
		"\u04dd\n\26\3\26\5\26\u04e0\n\26\3\26\3\26\3\26\3\26\3\26\5\26\u04e7\n"+
		"\26\3\26\5\26\u04ea\n\26\3\26\5\26\u04ed\n\26\3\26\3\26\3\26\3\26\3\26"+
		"\3\26\5\26\u04f5\n\26\3\26\3\26\5\26\u04f9\n\26\5\26\u04fb\n\26\3\27\3"+
		"\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0509\n\27"+
		"\6\27\u050b\n\27\r\27\16\27\u050c\3\27\3\27\5\27\u0511\n\27\6\27\u0513"+
		"\n\27\r\27\16\27\u0514\5\27\u0517\n\27\3\27\3\27\3\27\3\27\3\30\3\30\5"+
		"\30\u051f\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0529\n\30"+
		"\3\30\5\30\u052c\n\30\6\30\u052e\n\30\r\30\16\30\u052f\3\30\3\30\5\30"+
		"\u0534\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u053b\n\30\3\30\5\30\u053e\n"+
		"\30\6\30\u0540\n\30\r\30\16\30\u0541\5\30\u0544\n\30\3\31\3\31\5\31\u0548"+
		"\n\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0550\n\31\3\31\3\31\3\31\3\31"+
		"\3\31\3\31\3\31\5\31\u0559\n\31\6\31\u055b\n\31\r\31\16\31\u055c\5\31"+
		"\u055f\n\31\5\31\u0561\n\31\3\31\5\31\u0564\n\31\6\31\u0566\n\31\r\31"+
		"\16\31\u0567\3\31\3\31\3\31\3\31\5\31\u056e\n\31\3\31\3\31\3\31\5\31\u0573"+
		"\n\31\3\31\3\31\3\31\3\31\5\31\u0579\n\31\3\31\3\31\5\31\u057d\n\31\3"+
		"\31\3\31\5\31\u0581\n\31\3\31\3\31\5\31\u0585\n\31\3\31\3\31\3\31\3\31"+
		"\3\31\3\31\5\31\u058d\n\31\7\31\u058f\n\31\f\31\16\31\u0592\13\31\3\31"+
		"\3\31\3\32\3\32\3\32\3\32\5\32\u059a\n\32\3\32\6\32\u059d\n\32\r\32\16"+
		"\32\u059e\3\32\3\32\5\32\u05a3\n\32\5\32\u05a5\n\32\3\32\3\32\5\32\u05a9"+
		"\n\32\3\32\6\32\u05ac\n\32\r\32\16\32\u05ad\3\32\3\32\3\32\3\32\3\32\6"+
		"\32\u05b5\n\32\r\32\16\32\u05b6\5\32\u05b9\n\32\3\32\3\32\3\32\3\32\3"+
		"\32\3\32\5\32\u05c1\n\32\3\32\3\32\3\32\3\32\5\32\u05c7\n\32\6\32\u05c9"+
		"\n\32\r\32\16\32\u05ca\3\32\3\32\6\32\u05cf\n\32\r\32\16\32\u05d0\3\32"+
		"\3\32\5\32\u05d5\n\32\3\32\3\32\3\32\5\32\u05da\n\32\6\32\u05dc\n\32\r"+
		"\32\16\32\u05dd\3\32\3\32\5\32\u05e2\n\32\3\32\3\32\5\32\u05e6\n\32\3"+
		"\32\3\32\5\32\u05ea\n\32\6\32\u05ec\n\32\r\32\16\32\u05ed\3\32\3\32\3"+
		"\32\3\32\3\32\3\32\5\32\u05f6\n\32\3\32\6\32\u05f9\n\32\r\32\16\32\u05fa"+
		"\3\32\3\32\5\32\u05ff\n\32\5\32\u0601\n\32\3\32\3\32\3\32\3\32\5\32\u0607"+
		"\n\32\6\32\u0609\n\32\r\32\16\32\u060a\3\32\3\32\3\32\3\32\3\32\3\32\5"+
		"\32\u0613\n\32\6\32\u0615\n\32\r\32\16\32\u0616\5\32\u0619\n\32\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\5\32\u0621\n\32\3\32\6\32\u0624\n\32\r\32\16\32"+
		"\u0625\3\32\3\32\5\32\u062a\n\32\5\32\u062c\n\32\3\32\3\32\3\32\3\32\5"+
		"\32\u0632\n\32\6\32\u0634\n\32\r\32\16\32\u0635\3\32\3\32\3\32\3\32\3"+
		"\32\3\32\5\32\u063e\n\32\3\32\3\32\3\32\5\32\u0643\n\32\5\32\u0645\n\32"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u064d\n\32\6\32\u064f\n\32\r\32\16"+
		"\32\u0650\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0659\n\32\3\32\3\32\3\32"+
		"\5\32\u065e\n\32\5\32\u0660\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u0667\n"+
		"\32\6\32\u0669\n\32\r\32\16\32\u066a\3\32\3\32\3\32\3\32\3\32\3\32\5\32"+
		"\u0673\n\32\3\32\3\32\3\32\5\32\u0678\n\32\5\32\u067a\n\32\3\32\3\32\3"+
		"\32\5\32\u067f\n\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0687\n\32\3\32"+
		"\3\32\3\32\5\32\u068c\n\32\5\32\u068e\n\32\3\32\3\32\3\32\3\32\5\32\u0694"+
		"\n\32\6\32\u0696\n\32\r\32\16\32\u0697\3\32\3\32\3\32\3\32\3\32\3\32\5"+
		"\32\u06a0\n\32\3\32\3\32\3\32\5\32\u06a5\n\32\6\32\u06a7\n\32\r\32\16"+
		"\32\u06a8\3\32\3\32\5\32\u06ad\n\32\5\32\u06af\n\32\3\32\3\32\3\32\3\32"+
		"\3\32\5\32\u06b6\n\32\6\32\u06b8\n\32\r\32\16\32\u06b9\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\5\32\u06c2\n\32\3\32\3\32\5\32\u06c6\n\32\6\32\u06c8\n"+
		"\32\r\32\16\32\u06c9\3\32\3\32\5\32\u06ce\n\32\5\32\u06d0\n\32\3\32\3"+
		"\32\3\32\3\32\5\32\u06d6\n\32\6\32\u06d8\n\32\r\32\16\32\u06d9\3\32\3"+
		"\32\3\32\3\32\3\32\3\32\5\32\u06e2\n\32\3\32\3\32\3\32\5\32\u06e7\n\32"+
		"\5\32\u06e9\n\32\3\32\3\32\3\32\3\32\5\32\u06ef\n\32\6\32\u06f1\n\32\r"+
		"\32\16\32\u06f2\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u06fb\n\32\3\32\3\32"+
		"\5\32\u06ff\n\32\6\32\u0701\n\32\r\32\16\32\u0702\3\32\3\32\3\32\5\32"+
		"\u0708\n\32\6\32\u070a\n\32\r\32\16\32\u070b\3\32\5\32\u070f\n\32\5\32"+
		"\u0711\n\32\3\33\3\33\5\33\u0715\n\33\3\33\3\33\3\33\5\33\u071a\n\33\6"+
		"\33\u071c\n\33\r\33\16\33\u071d\3\33\5\33\u0721\n\33\3\34\3\34\3\34\5"+
		"\34\u0726\n\34\6\34\u0728\n\34\r\34\16\34\u0729\3\34\3\34\5\34\u072e\n"+
		"\34\5\34\u0730\n\34\3\34\3\34\5\34\u0734\n\34\3\34\3\34\5\34\u0738\n\34"+
		"\6\34\u073a\n\34\r\34\16\34\u073b\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0744"+
		"\n\34\6\34\u0746\n\34\r\34\16\34\u0747\5\34\u074a\n\34\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\5\34\u0752\n\34\6\34\u0754\n\34\r\34\16\34\u0755\6\34"+
		"\u0758\n\34\r\34\16\34\u0759\3\34\3\34\5\34\u075e\n\34\3\34\3\34\5\34"+
		"\u0762\n\34\6\34\u0764\n\34\r\34\16\34\u0765\5\34\u0768\n\34\3\34\3\34"+
		"\5\34\u076c\n\34\3\34\3\34\5\34\u0770\n\34\6\34\u0772\n\34\r\34\16\34"+
		"\u0773\3\34\3\34\3\34\3\34\3\34\5\34\u077b\n\34\6\34\u077d\n\34\r\34\16"+
		"\34\u077e\3\34\3\34\5\34\u0783\n\34\5\34\u0785\n\34\3\34\3\34\3\34\3\34"+
		"\5\34\u078b\n\34\6\34\u078d\n\34\r\34\16\34\u078e\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\5\34\u0797\n\34\6\34\u0799\n\34\r\34\16\34\u079a\5\34\u079d"+
		"\n\34\3\34\3\34\3\34\3\34\3\34\5\34\u07a4\n\34\6\34\u07a6\n\34\r\34\16"+
		"\34\u07a7\3\34\3\34\5\34\u07ac\n\34\5\34\u07ae\n\34\3\34\3\34\3\34\3\34"+
		"\5\34\u07b4\n\34\6\34\u07b6\n\34\r\34\16\34\u07b7\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\5\34\u07c0\n\34\5\34\u07c2\n\34\3\34\3\34\3\34\3\34\3\34\3"+
		"\34\5\34\u07ca\n\34\6\34\u07cc\n\34\r\34\16\34\u07cd\3\34\3\34\3\34\3"+
		"\34\3\34\3\34\5\34\u07d6\n\34\5\34\u07d8\n\34\3\34\3\34\3\34\3\34\3\34"+
		"\5\34\u07df\n\34\6\34\u07e1\n\34\r\34\16\34\u07e2\3\34\3\34\3\34\3\34"+
		"\3\34\3\34\5\34\u07eb\n\34\5\34\u07ed\n\34\3\34\3\34\3\34\5\34\u07f2\n"+
		"\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u07fa\n\34\5\34\u07fc\n\34\3\34"+
		"\3\34\3\34\3\34\5\34\u0802\n\34\6\34\u0804\n\34\r\34\16\34\u0805\3\34"+
		"\3\34\3\34\3\34\3\34\5\34\u080d\n\34\6\34\u080f\n\34\r\34\16\34\u0810"+
		"\3\34\3\34\5\34\u0815\n\34\5\34\u0817\n\34\3\34\3\34\3\34\3\34\3\34\5"+
		"\34\u081e\n\34\6\34\u0820\n\34\r\34\16\34\u0821\3\34\3\34\3\34\3\34\3"+
		"\34\5\34\u0829\n\34\6\34\u082b\n\34\r\34\16\34\u082c\3\34\3\34\5\34\u0831"+
		"\n\34\5\34\u0833\n\34\3\34\3\34\3\34\3\34\5\34\u0839\n\34\6\34\u083b\n"+
		"\34\r\34\16\34\u083c\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u0845\n\34\5\34"+
		"\u0847\n\34\3\34\3\34\3\34\3\34\5\34\u084d\n\34\6\34\u084f\n\34\r\34\16"+
		"\34\u0850\3\34\3\34\3\34\3\34\5\34\u0857\n\34\6\34\u0859\n\34\r\34\16"+
		"\34\u085a\3\34\3\34\3\34\5\34\u0860\n\34\6\34\u0862\n\34\r\34\16\34\u0863"+
		"\3\34\3\34\3\34\5\34\u0869\n\34\5\34\u086b\n\34\3\35\3\35\5\35\u086f\n"+
		"\35\3\35\3\35\5\35\u0873\n\35\3\35\5\35\u0876\n\35\6\35\u0878\n\35\r\35"+
		"\16\35\u0879\3\35\3\35\3\35\5\35\u087f\n\35\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\5\36\u0888\n\36\7\36\u088a\n\36\f\36\16\36\u088d\13\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3"+
		"\36\3\36\3\36\5\36\u08cb\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u08f9\n\36\3\36\3\36\3\36"+
		"\3\37\3\37\3\37\5\37\u0901\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0909"+
		"\n\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0911\n\37\6\37\u0913\n\37\r"+
		"\37\16\37\u0914\3\37\3\37\5\37\u0919\n\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u092c\n\37"+
		"\3\37\3\37\3\37\5\37\u0931\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37"+
		"\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0941\n\37\3\37\3\37\7\37\u0945\n"+
		"\37\f\37\16\37\u0948\13\37\3\37\3\37\3\37\3\37\3\37\3\37\6\37\u0950\n"+
		"\37\r\37\16\37\u0951\3\37\3\37\3\37\3\37\5\37\u0958\n\37\6\37\u095a\n"+
		"\37\r\37\16\37\u095b\3\37\3\37\5\37\u0960\n\37\3 \3 \5 \u0964\n \3 \5"+
		" \u0967\n \3 \3 \5 \u096b\n \3 \3 \5 \u096f\n \3 \3 \5 \u0973\n \5 \u0975"+
		"\n \3 \5 \u0978\n \7 \u097a\n \f \16 \u097d\13 \3 \3 \3!\3!\3!\3!\3\""+
		"\3\"\3#\3#\3$\3$\3$\3$\5$\u098d\n$\3$\5$\u0990\n$\3$\3$\5$\u0994\n$\3"+
		"$\5$\u0997\n$\7$\u0999\n$\f$\16$\u099c\13$\3$\3$\3%\3%\3%\3%\3%\3%\5%"+
		"\u09a6\n%\6%\u09a8\n%\r%\16%\u09a9\3&\3&\5&\u09ae\n&\3&\3&\3&\7&\u09b3"+
		"\n&\f&\16&\u09b6\13&\3\'\3\'\5\'\u09ba\n\'\3\'\3\'\3\'\3\'\3\'\5\'\u09c1"+
		"\n\'\3\'\3\'\3\'\3\'\5\'\u09c7\n\'\3\'\3\'\5\'\u09cb\n\'\3\'\3\'\3\'\3"+
		"\'\5\'\u09d1\n\'\3\'\3\'\3\'\3\'\3\'\5\'\u09d8\n\'\5\'\u09da\n\'\3(\3"+
		"(\3(\3(\3(\5(\u09e1\n(\3(\7(\u09e4\n(\f(\16(\u09e7\13(\3(\3(\3(\3(\3("+
		"\7(\u09ee\n(\f(\16(\u09f1\13(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u09fb\n(\3(\3"+
		"(\3(\3(\3(\3(\3(\5(\u0a04\n(\3)\3)\3)\5)\u0a09\n)\3)\5)\u0a0c\n)\3)\3"+
		")\3)\3)\5)\u0a12\n)\7)\u0a14\n)\f)\16)\u0a17\13)\3)\3)\3)\3)\3)\5)\u0a1e"+
		"\n)\6)\u0a20\n)\r)\16)\u0a21\3)\3)\5)\u0a26\n)\3)\3)\3)\3*\3*\5*\u0a2d"+
		"\n*\3*\3*\5*\u0a31\n*\3*\3*\3*\3*\5*\u0a37\n*\3*\3*\3*\3*\3*\3*\3*\7*"+
		"\u0a40\n*\f*\16*\u0a43\13*\5*\u0a45\n*\3*\5*\u0a48\n*\6*\u0a4a\n*\r*\16"+
		"*\u0a4b\5*\u0a4e\n*\3*\3*\3*\3*\3*\5*\u0a55\n*\6*\u0a57\n*\r*\16*\u0a58"+
		"\3*\3*\5*\u0a5d\n*\3*\3*\3*\3*\3*\3*\5*\u0a65\n*\3*\3*\5*\u0a69\n*\3*"+
		"\3*\3*\3*\5*\u0a6f\n*\3*\3*\3*\3*\3*\3*\3*\3*\7*\u0a79\n*\f*\16*\u0a7c"+
		"\13*\3*\5*\u0a7f\n*\3*\5*\u0a82\n*\6*\u0a84\n*\r*\16*\u0a85\3*\3*\5*\u0a8a"+
		"\n*\3*\3*\3*\3*\5*\u0a90\n*\3+\3+\3+\3+\5+\u0a96\n+\3+\7+\u0a99\n+\f+"+
		"\16+\u0a9c\13+\3,\3,\3,\3-\3-\5-\u0aa3\n-\3-\3-\3-\3-\3-\5-\u0aaa\n-\6"+
		"-\u0aac\n-\r-\16-\u0aad\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0ab8\n-\6-\u0aba\n"+
		"-\r-\16-\u0abb\3-\3-\3-\3-\3-\3-\5-\u0ac4\n-\3-\3-\3-\3-\3-\5-\u0acb\n"+
		"-\6-\u0acd\n-\r-\16-\u0ace\3-\3-\3-\3-\3-\3-\3-\5-\u0ad8\n-\3-\3-\3-\3"+
		"-\3-\5-\u0adf\n-\6-\u0ae1\n-\r-\16-\u0ae2\3-\3-\3-\3-\3-\3-\5-\u0aeb\n"+
		"-\6-\u0aed\n-\r-\16-\u0aee\3-\3-\5-\u0af3\n-\3-\3-\3-\3-\3-\3-\5-\u0afb"+
		"\n-\3-\3-\3-\3-\3-\3-\7-\u0b03\n-\f-\16-\u0b06\13-\5-\u0b08\n-\3-\3-\3"+
		"-\5-\u0b0d\n-\3-\3-\3-\3-\5-\u0b13\n-\3.\3.\5.\u0b17\n.\3.\3.\3.\3.\3"+
		".\3.\3.\5.\u0b20\n.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0b30"+
		"\n.\3.\3.\3.\5.\u0b35\n.\3.\3.\3.\5.\u0b3a\n.\5.\u0b3c\n.\3.\3.\3.\5."+
		"\u0b41\n.\3.\3.\3.\3.\5.\u0b47\n.\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\5"+
		"\60\u0b52\n\60\3\60\5\60\u0b55\n\60\6\60\u0b57\n\60\r\60\16\60\u0b58\3"+
		"\60\3\60\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\5\62\u0b65\n\62\3\63"+
		"\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0b6e\n\63\5\63\u0b70\n\63\3\64\3"+
		"\64\5\64\u0b74\n\64\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u0b7c\n\65\3\66"+
		"\5\66\u0b7f\n\66\3\66\3\66\3\66\3\66\5\66\u0b85\n\66\3\67\3\67\3\67\3"+
		"\67\7\67\u0b8b\n\67\f\67\16\67\u0b8e\13\67\3\67\3\67\38\38\38\39\39\3"+
		":\3:\3:\3:\3:\7:\u0b9c\n:\f:\16:\u0b9f\13:\3:\3:\3;\3;\3;\3;\3<\3<\3<"+
		"\3=\3=\3=\3>\3>\3?\3?\3?\3?\5?\u0bb3\n?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@"+
		"\3A\3A\3A\7A\u0bc2\nA\fA\16A\u0bc5\13A\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5"+
		"B\u0bd1\nB\3B\3B\5B\u0bd5\nB\5B\u0bd7\nB\3C\3C\3C\3C\3C\3C\3C\3C\3C\3"+
		"C\3C\5C\u0be4\nC\3D\3D\3D\7D\u0be9\nD\fD\16D\u0bec\13D\3E\3E\3E\3F\3F"+
		"\3F\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3H\3H\3H\7H\u0c01\nH\fH\16H\u0c04\13"+
		"H\3I\3I\3I\3I\5I\u0c0a\nI\3I\3I\3I\3I\3J\3J\3J\3J\3J\3K\3K\3L\3L\3L\3"+
		"L\5L\u0c1b\nL\3M\3M\3M\5M\u0c20\nM\3M\3M\5M\u0c24\nM\5M\u0c26\nM\3N\3"+
		"N\3O\3O\5O\u0c2c\nO\3P\3P\3P\5P\u0c31\nP\3Q\3Q\3Q\5Q\u0c36\nQ\3R\3R\3"+
		"R\3S\3S\3S\3T\3T\3T\3U\3U\3V\3V\3V\5V\u0c46\nV\3W\3W\3W\3W\3W\3W\3W\3"+
		"W\3W\3W\3W\3W\3W\3W\3W\5W\u0c57\nW\3X\3X\3Y\3Y\3Z\3Z\5Z\u0c5f\nZ\3Z\3"+
		"Z\5Z\u0c63\nZ\3Z\3Z\3Z\5Z\u0c68\nZ\3Z\3Z\3Z\5Z\u0c6d\nZ\3Z\3Z\5Z\u0c71"+
		"\nZ\3Z\3Z\5Z\u0c75\nZ\3[\3[\3[\3[\3\\\3\\\3\\\5\\\u0c7e\n\\\3\\\3\\\3"+
		"\\\5\\\u0c83\n\\\3\\\3\\\5\\\u0c87\n\\\3\\\3\\\3\\\3\\\5\\\u0c8d\n\\\3"+
		"\\\3\\\3\\\3\\\5\\\u0c93\n\\\3\\\3\\\3\\\5\\\u0c98\n\\\3\\\3\\\5\\\u0c9c"+
		"\n\\\5\\\u0c9e\n\\\3]\3]\5]\u0ca2\n]\3]\3]\5]\u0ca6\n]\5]\u0ca8\n]\3^"+
		"\3^\5^\u0cac\n^\3_\3_\5_\u0cb0\n_\3_\3_\5_\u0cb4\n_\3_\3_\5_\u0cb8\n_"+
		"\3_\3_\3_\3_\3_\3_\3_\3_\3_\5_\u0cc3\n_\3`\3`\5`\u0cc7\n`\3`\3`\3`\3`"+
		"\3`\3`\5`\u0ccf\n`\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0cd9\na\3b\3b\3c\3c\3c"+
		"\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u0cee\nc\3d\3d\5d\u0cf2"+
		"\nd\3d\3d\5d\u0cf6\nd\3d\3d\3d\5d\u0cfb\nd\5d\u0cfd\nd\3e\3e\5e\u0d01"+
		"\ne\3e\3e\3e\5e\u0d06\ne\3e\3e\5e\u0d0a\ne\5e\u0d0c\ne\3f\3f\5f\u0d10"+
		"\nf\3g\3g\3g\3g\3h\3h\3h\3h\3h\3h\3h\3h\5h\u0d1e\nh\3i\3i\3j\3j\3k\5k"+
		"\u0d25\nk\3k\3k\3l\3l\3m\3m\3m\3m\3m\3m\5m\u0d31\nm\5m\u0d33\nm\3n\3n"+
		"\3n\5n\u0d38\nn\3n\3n\3n\3o\3o\3p\3p\3p\3p\3p\3p\3q\3q\3q\3q\3q\3r\3r"+
		"\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\6s\u0d58\ns\rs\16s\u0d59\3s\3s\5"+
		"s\u0d5e\ns\3t\3t\5t\u0d62\nt\3u\3u\3u\6u\u0d67\nu\ru\16u\u0d68\3u\5u\u0d6c"+
		"\nu\3u\3u\3v\3v\6v\u0d72\nv\rv\16v\u0d73\3v\5v\u0d77\nv\3v\3v\3w\3w\3"+
		"w\3w\3w\3x\3x\3x\3x\3x\3y\3y\3y\3z\3z\5z\u0d8a\nz\3{\3{\3{\3{\3{\3{\3"+
		"{\3|\3|\3}\3}\3~\3~\3~\5~\u0d9a\n~\3\177\3\177\3\177\5\177\u0d9f\n\177"+
		"\3\u0080\3\u0080\3\u0080\7\u0080\u0da4\n\u0080\f\u0080\16\u0080\u0da7"+
		"\13\u0080\3\u0081\3\u0081\3\u0081\7\u0081\u0dac\n\u0081\f\u0081\16\u0081"+
		"\u0daf\13\u0081\3\u0082\5\u0082\u0db2\n\u0082\3\u0082\3\u0082\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\7\u0083\u0dba\n\u0083\f\u0083\16\u0083\u0dbd"+
		"\13\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084\7\u0084\u0dc4\n\u0084"+
		"\f\u0084\16\u0084\u0dc7\13\u0084\3\u0084\5\u0084\u0dca\n\u0084\3\u0085"+
		"\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0088\3\u0088\3\u0088\5\u0088\u0dda\n\u0088\3\u0089\3\u0089"+
		"\3\u008a\3\u008a\5\u008a\u0de0\n\u008a\3\u008b\3\u008b\3\u008c\3\u008c"+
		"\3\u008c\7\u008c\u0de7\n\u008c\f\u008c\16\u008c\u0dea\13\u008c\3\u008d"+
		"\3\u008d\3\u008e\3\u008e\5\u008e\u0df0\n\u008e\3\u008f\3\u008f\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0091\5\u0091\u0dfa\n\u0091\3\u0091"+
		"\5\u0091\u0dfd\n\u0091\3\u0091\5\u0091\u0e00\n\u0091\3\u0091\3\u0091\3"+
		"\u0091\3\u0091\3\u0091\5\u0091\u0e07\n\u0091\3\u0092\3\u0092\3\u0093\3"+
		"\u0093\3\u0094\3\u0094\3\u0094\7\u0094\u0e10\n\u0094\f\u0094\16\u0094"+
		"\u0e13\13\u0094\3\u0095\3\u0095\3\u0095\7\u0095\u0e18\n\u0095\f\u0095"+
		"\16\u0095\u0e1b\13\u0095\3\u0096\3\u0096\3\u0096\5\u0096\u0e20\n\u0096"+
		"\3\u0097\3\u0097\5\u0097\u0e24\n\u0097\3\u0098\3\u0098\5\u0098\u0e28\n"+
		"\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u009a\3\u009a\5\u009a\u0e30\n"+
		"\u009a\3\u009b\3\u009b\5\u009b\u0e34\n\u009b\3\u009c\3\u009c\3\u009c\3"+
		"\u009c\3\u009d\3\u009d\5\u009d\u0e3c\n\u009d\3\u009e\3\u009e\3\u009f\3"+
		"\u009f\3\u00a0\3\u00a0\5\u00a0\u0e44\n\u00a0\3\u00a1\3\u00a1\5\u00a1\u0e48"+
		"\n\u00a1\3\u00a2\3\u00a2\5\u00a2\u0e4c\n\u00a2\3\u00a2\5\u00a2\u0e4f\n"+
		"\u00a2\3\u00a2\5\u00a2\u0e52\n\u00a2\3\u00a2\5\u00a2\u0e55\n\u00a2\3\u00a2"+
		"\5\u00a2\u0e58\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\6\u00a4\u0e61\n\u00a4\r\u00a4\16\u00a4\u0e62\3\u00a4\5\u00a4"+
		"\u0e66\n\u00a4\3\u00a5\3\u00a5\3\u00a5\7\u00a5\u0e6b\n\u00a5\f\u00a5\16"+
		"\u00a5\u0e6e\13\u00a5\3\u00a6\3\u00a6\5\u00a6\u0e72\n\u00a6\3\u00a7\3"+
		"\u00a7\6\u00a7\u0e76\n\u00a7\r\u00a7\16\u00a7\u0e77\3\u00a8\3\u00a8\3"+
		"\u00a8\3\u00a8\5\u00a8\u0e7e\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3"+
		"\u00a8\3\u00a8\5\u00a8\u0e86\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3"+
		"\u00a8\5\u00a8\u0e8d\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\5"+
		"\u00aa\u0e94\n\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\5"+
		"\u00ab\u0e9c\n\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3"+
		"\u00ac\3\u00ad\3\u00ad\5\u00ad\u0ea7\n\u00ad\3\u00ae\3\u00ae\5\u00ae\u0eab"+
		"\n\u00ae\3\u00af\3\u00af\3\u00b0\3\u00b0\5\u00b0\u0eb1\n\u00b0\3\u00b1"+
		"\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3"+
		"\5\u00b3\u0ebd\n\u00b3\3\u00b3\5\u00b3\u0ec0\n\u00b3\3\u00b3\3\u00b3\3"+
		"\u00b3\3\u00b3\5\u00b3\u0ec6\n\u00b3\3\u00b3\3\u00b3\5\u00b3\u0eca\n\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u0ed1\n\u00b3\5\u00b3"+
		"\u0ed3\n\u00b3\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u0ed8\n\u00b4\f\u00b4\16"+
		"\u00b4\u0edb\13\u00b4\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b7"+
		"\3\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b9\3\u00b9\3\u00b9\7\u00b9"+
		"\u0eeb\n\u00b9\f\u00b9\16\u00b9\u0eee\13\u00b9\3\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\5\u00ba\u0ef4\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\5\u00bb\u0efb\n\u00bb\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u0f00\n\u00bc\f"+
		"\u00bc\16\u00bc\u0f03\13\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00be\3\u00be\3\u00be\3\u00be\3\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u0f18\n\u00c1\f\u00c1"+
		"\16\u00c1\u0f1b\13\u00c1\3\u00c2\3\u00c2\3\u00c3\3\u00c3\5\u00c3\u0f21"+
		"\n\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u0f27\n\u00c4\3\u00c4"+
		"\3\u00c4\5\u00c4\u0f2b\n\u00c4\3\u00c4\3\u00c4\5\u00c4\u0f2f\n\u00c4\3"+
		"\u00c4\7\u00c4\u0f32\n\u00c4\f\u00c4\16\u00c4\u0f35\13\u00c4\3\u00c5\3"+
		"\u00c5\5\u00c5\u0f39\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0f3f"+
		"\n\u00c6\3\u00c6\3\u00c6\5\u00c6\u0f43\n\u00c6\3\u00c6\3\u00c6\5\u00c6"+
		"\u0f47\n\u00c6\3\u00c6\7\u00c6\u0f4a\n\u00c6\f\u00c6\16\u00c6\u0f4d\13"+
		"\u00c6\3\u00c7\3\u00c7\5\u00c7\u0f51\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\3\u00c8\5\u00c8\u0f58\n\u00c8\3\u00c9\3\u00c9\5\u00c9\u0f5c\n\u00c9"+
		"\3\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb\5\u00cb\u0f63\n\u00cb\3\u00cc"+
		"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u0f6a\n\u00cc\5\u00cc\u0f6c\n"+
		"\u00cc\3\u00cd\3\u00cd\5\u00cd\u0f70\n\u00cd\3\u00cd\3\u00cd\5\u00cd\u0f74"+
		"\n\u00cd\3\u00ce\3\u00ce\3\u00ce\7\u00ce\u0f79\n\u00ce\f\u00ce\16\u00ce"+
		"\u0f7c\13\u00ce\3\u00cf\3\u00cf\5\u00cf\u0f80\n\u00cf\3\u00d0\3\u00d0"+
		"\5\u00d0\u0f84\n\u00d0\3\u00d1\3\u00d1\5\u00d1\u0f88\n\u00d1\3\u00d1\3"+
		"\u00d1\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u0f91\n\u00d3\3"+
		"\u00d3\3\u00d3\3\u00d4\5\u00d4\u0f96\n\u00d4\3\u00d4\3\u00d4\3\u00d5\3"+
		"\u00d5\3\u00d5\7\u00d5\u0f9d\n\u00d5\f\u00d5\16\u00d5\u0fa0\13\u00d5\3"+
		"\u00d6\3\u00d6\3\u00d7\3\u00d7\3\u00d8\3\u00d8\3\u00d9\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da\u0fb2"+
		"\n\u00da\3\u00db\3\u00db\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dd\3\u00dd"+
		"\3\u00dd\3\u00de\5\u00de\u0fbe\n\u00de\3\u00de\3\u00de\5\u00de\u0fc2\n"+
		"\u00de\3\u00de\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df\5\u00df\u0fca\n"+
		"\u00df\3\u00df\3\u00df\3\u00df\3\u00e0\3\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\5\u00e0\u0fd4\n\u00e0\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u0fd9\n\u00e1\f"+
		"\u00e1\16\u00e1\u0fdc\13\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e3"+
		"\5\u00e3\u0fe3\n\u00e3\3\u00e3\3\u00e3\5\u00e3\u0fe7\n\u00e3\3\u00e4\3"+
		"\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u0fef\n\u00e4\3\u00e5\3"+
		"\u00e5\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u0ff6\n\u00e6\3\u00e6\3\u00e6\3"+
		"\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e8\3\u00e8\5\u00e8\u1001\n"+
		"\u00e8\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00eb\5\u00eb\u1008\n\u00eb\3"+
		"\u00eb\3\u00eb\3\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ed\3\u00ed\5\u00ed"+
		"\u1012\n\u00ed\3\u00ee\3\u00ee\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u101b\n\u00f0\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f2\3\u00f2"+
		"\5\u00f2\u1023\n\u00f2\3\u00f3\3\u00f3\3\u00f3\7\u00f3\u1028\n\u00f3\f"+
		"\u00f3\16\u00f3\u102b\13\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\6\u00f5\u1035\n\u00f5\r\u00f5\16\u00f5\u1036"+
		"\3\u00f5\5\u00f5\u103a\n\u00f5\3\u00f6\3\u00f6\3\u00f6\7\u00f6\u103f\n"+
		"\u00f6\f\u00f6\16\u00f6\u1042\13\u00f6\3\u00f7\3\u00f7\5\u00f7\u1046\n"+
		"\u00f7\3\u00f7\5\u00f7\u1049\n\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3"+
		"\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u1054\n\u00fa\3\u00fb\3"+
		"\u00fb\5\u00fb\u1058\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3"+
		"\u00fb\5\u00fb\u1060\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u1066"+
		"\n\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u106e"+
		"\n\u00fb\5\u00fb\u1070\n\u00fb\3\u00fb\5\u00fb\u1073\n\u00fb\3\u00fb\2"+
		"\2\u00fc\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668"+
		":<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a"+
		"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2"+
		"\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba"+
		"\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2"+
		"\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea"+
		"\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102"+
		"\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a"+
		"\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132"+
		"\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a"+
		"\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162"+
		"\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a"+
		"\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192"+
		"\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa"+
		"\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2"+
		"\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da"+
		"\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2"+
		"\u01f4\2)\4\2\21\21ee\3\2\u00dc\u00dd\4\2``\u0112\u0112\t\2  ccmmzz||"+
		"\177\177\u00c1\u00c1\4\2mm\177\u0080\4\2NNnn\4\2\u010d\u010d\u014e\u014e"+
		"\6\2ccmm\177\177\u00c1\u00c1\5\2\25\25\31\31uv\4\2\31\31\u0080\u0080\4"+
		"\2mm\177\177\4\2\34\34\u014e\u014e\4\2\u00c3\u00c3\u00c6\u00c6\6\2<<D"+
		"DUU\u0083\u0083\3\2uv\4\2\63\63NN\4\2))==\b\2\7\7\27\27\35\35\u0099\u0099"+
		"\u00be\u00be\u0100\u0100\t\2\u0089\u00ba\u00bc\u00bd\u00bf\u00db\u00de"+
		"\u0105\u0107\u012f\u0131\u013f\u0141\u0147\5\2,,{{\u0110\u0110\3\2\u0120"+
		"\u0121\3\2\u0166\u0167\17\2\n\npp\u008b\u008b\u0095\u0095\u009e\u009e"+
		"\u00af\u00af\u00b8\u00b8\u00c2\u00c2\u00cf\u00cf\u00d4\u00d4\u0101\u0102"+
		"\u0104\u0104\u0116\u0117\3\2\u015a\u015b\3\2\u015c\u015e\3\2\u0109\u010b"+
		"\5\2\17\17JJxx\3\2\u0158\u0159\5\2//KKhh\4\2\'\'}}\4\2\7\7\"\"\4\2\u014e"+
		"\u014e\u0153\u0157\4\2\13\13ss\3\2\u0148\u014b\4\2\n\npp\6\2\u00a3\u00a3"+
		"\u00bb\u00bb\u00d6\u00d7\u011e\u011e\n\2\u0091\u0091\u00a5\u00a5\u00a9"+
		"\u00aa\u00ad\u00ad\u00c4\u00c5\u00d1\u00d3\u00ec\u00ec\u011b\u011b\4\2"+
		"KKhh\4\2\f\f!!\u12ce\2\u01fc\3\2\2\2\4\u0201\3\2\2\2\6\u0203\3\2\2\2\b"+
		"\u0205\3\2\2\2\n\u020a\3\2\2\2\f\u021a\3\2\2\2\16\u0222\3\2\2\2\20\u0248"+
		"\3\2\2\2\22\u0258\3\2\2\2\24\u026e\3\2\2\2\26\u02a2\3\2\2\2\30\u037d\3"+
		"\2\2\2\32\u0394\3\2\2\2\34\u0396\3\2\2\2\36\u03c5\3\2\2\2 \u03c7\3\2\2"+
		"\2\"\u046c\3\2\2\2$\u04a3\3\2\2\2&\u04a5\3\2\2\2(\u04c2\3\2\2\2*\u04fa"+
		"\3\2\2\2,\u04fc\3\2\2\2.\u0543\3\2\2\2\60\u0545\3\2\2\2\62\u0710\3\2\2"+
		"\2\64\u0712\3\2\2\2\66\u086a\3\2\2\28\u086c\3\2\2\2:\u0880\3\2\2\2<\u08fd"+
		"\3\2\2\2>\u0961\3\2\2\2@\u0980\3\2\2\2B\u0984\3\2\2\2D\u0986\3\2\2\2F"+
		"\u0988\3\2\2\2H\u099f\3\2\2\2J\u09ab\3\2\2\2L\u09d9\3\2\2\2N\u0a03\3\2"+
		"\2\2P\u0a05\3\2\2\2R\u0a8f\3\2\2\2T\u0a91\3\2\2\2V\u0a9d\3\2\2\2X\u0aa2"+
		"\3\2\2\2Z\u0b16\3\2\2\2\\\u0b48\3\2\2\2^\u0b4d\3\2\2\2`\u0b5c\3\2\2\2"+
		"b\u0b64\3\2\2\2d\u0b6f\3\2\2\2f\u0b73\3\2\2\2h\u0b7b\3\2\2\2j\u0b7e\3"+
		"\2\2\2l\u0b86\3\2\2\2n\u0b91\3\2\2\2p\u0b94\3\2\2\2r\u0b96\3\2\2\2t\u0ba2"+
		"\3\2\2\2v\u0ba6\3\2\2\2x\u0ba9\3\2\2\2z\u0bac\3\2\2\2|\u0bb2\3\2\2\2~"+
		"\u0bb4\3\2\2\2\u0080\u0bbe\3\2\2\2\u0082\u0bc6\3\2\2\2\u0084\u0bd8\3\2"+
		"\2\2\u0086\u0be5\3\2\2\2\u0088\u0bed\3\2\2\2\u008a\u0bf0\3\2\2\2\u008c"+
		"\u0bf3\3\2\2\2\u008e\u0bfd\3\2\2\2\u0090\u0c05\3\2\2\2\u0092\u0c0f\3\2"+
		"\2\2\u0094\u0c14\3\2\2\2\u0096\u0c16\3\2\2\2\u0098\u0c25\3\2\2\2\u009a"+
		"\u0c27\3\2\2\2\u009c\u0c2b\3\2\2\2\u009e\u0c30\3\2\2\2\u00a0\u0c35\3\2"+
		"\2\2\u00a2\u0c37\3\2\2\2\u00a4\u0c3a\3\2\2\2\u00a6\u0c3d\3\2\2\2\u00a8"+
		"\u0c40\3\2\2\2\u00aa\u0c45\3\2\2\2\u00ac\u0c56\3\2\2\2\u00ae\u0c58\3\2"+
		"\2\2\u00b0\u0c5a\3\2\2\2\u00b2\u0c74\3\2\2\2\u00b4\u0c76\3\2\2\2\u00b6"+
		"\u0c9d\3\2\2\2\u00b8\u0ca7\3\2\2\2\u00ba\u0cab\3\2\2\2\u00bc\u0cc2\3\2"+
		"\2\2\u00be\u0cce\3\2\2\2\u00c0\u0cd8\3\2\2\2\u00c2\u0cda\3\2\2\2\u00c4"+
		"\u0ced\3\2\2\2\u00c6\u0cfc\3\2\2\2\u00c8\u0d0b\3\2\2\2\u00ca\u0d0f\3\2"+
		"\2\2\u00cc\u0d11\3\2\2\2\u00ce\u0d1d\3\2\2\2\u00d0\u0d1f\3\2\2\2\u00d2"+
		"\u0d21\3\2\2\2\u00d4\u0d24\3\2\2\2\u00d6\u0d28\3\2\2\2\u00d8\u0d32\3\2"+
		"\2\2\u00da\u0d34\3\2\2\2\u00dc\u0d3c\3\2\2\2\u00de\u0d3e\3\2\2\2\u00e0"+
		"\u0d44\3\2\2\2\u00e2\u0d49\3\2\2\2\u00e4\u0d5d\3\2\2\2\u00e6\u0d61\3\2"+
		"\2\2\u00e8\u0d63\3\2\2\2\u00ea\u0d6f\3\2\2\2\u00ec\u0d7a\3\2\2\2\u00ee"+
		"\u0d7f\3\2\2\2\u00f0\u0d84\3\2\2\2\u00f2\u0d89\3\2\2\2\u00f4\u0d8b\3\2"+
		"\2\2\u00f6\u0d92\3\2\2\2\u00f8\u0d94\3\2\2\2\u00fa\u0d99\3\2\2\2\u00fc"+
		"\u0d9e\3\2\2\2\u00fe\u0da0\3\2\2\2\u0100\u0da8\3\2\2\2\u0102\u0db1\3\2"+
		"\2\2\u0104\u0db5\3\2\2\2\u0106\u0dc9\3\2\2\2\u0108\u0dcb\3\2\2\2\u010a"+
		"\u0dcd\3\2\2\2\u010c\u0dcf\3\2\2\2\u010e\u0dd9\3\2\2\2\u0110\u0ddb\3\2"+
		"\2\2\u0112\u0ddf\3\2\2\2\u0114\u0de1\3\2\2\2\u0116\u0de3\3\2\2\2\u0118"+
		"\u0deb\3\2\2\2\u011a\u0def\3\2\2\2\u011c\u0df1\3\2\2\2\u011e\u0df3\3\2"+
		"\2\2\u0120\u0e06\3\2\2\2\u0122\u0e08\3\2\2\2\u0124\u0e0a\3\2\2\2\u0126"+
		"\u0e0c\3\2\2\2\u0128\u0e14\3\2\2\2\u012a\u0e1f\3\2\2\2\u012c\u0e21\3\2"+
		"\2\2\u012e\u0e25\3\2\2\2\u0130\u0e2b\3\2\2\2\u0132\u0e2f\3\2\2\2\u0134"+
		"\u0e33\3\2\2\2\u0136\u0e35\3\2\2\2\u0138\u0e3b\3\2\2\2\u013a\u0e3d\3\2"+
		"\2\2\u013c\u0e3f\3\2\2\2\u013e\u0e43\3\2\2\2\u0140\u0e47\3\2\2\2\u0142"+
		"\u0e49\3\2\2\2\u0144\u0e59\3\2\2\2\u0146\u0e65\3\2\2\2\u0148\u0e67\3\2"+
		"\2\2\u014a\u0e71\3\2\2\2\u014c\u0e73\3\2\2\2\u014e\u0e8c\3\2\2\2\u0150"+
		"\u0e8e\3\2\2\2\u0152\u0e93\3\2\2\2\u0154\u0e99\3\2\2\2\u0156\u0ea0\3\2"+
		"\2\2\u0158\u0ea6\3\2\2\2\u015a\u0ea8\3\2\2\2\u015c\u0eac\3\2\2\2\u015e"+
		"\u0eb0\3\2\2\2\u0160\u0eb2\3\2\2\2\u0162\u0eb5\3\2\2\2\u0164\u0ed2\3\2"+
		"\2\2\u0166\u0ed4\3\2\2\2\u0168\u0edc\3\2\2\2\u016a\u0ede\3\2\2\2\u016c"+
		"\u0ee1\3\2\2\2\u016e\u0ee3\3\2\2\2\u0170\u0ee7\3\2\2\2\u0172\u0ef3\3\2"+
		"\2\2\u0174\u0efa\3\2\2\2\u0176\u0efc\3\2\2\2\u0178\u0f04\3\2\2\2\u017a"+
		"\u0f09\3\2\2\2\u017c\u0f0e\3\2\2\2\u017e\u0f11\3\2\2\2\u0180\u0f14\3\2"+
		"\2\2\u0182\u0f1c\3\2\2\2\u0184\u0f20\3\2\2\2\u0186\u0f2a\3\2\2\2\u0188"+
		"\u0f38\3\2\2\2\u018a\u0f42\3\2\2\2\u018c\u0f50\3\2\2\2\u018e\u0f57\3\2"+
		"\2\2\u0190\u0f5b\3\2\2\2\u0192\u0f5d\3\2\2\2\u0194\u0f62\3\2\2\2\u0196"+
		"\u0f64\3\2\2\2\u0198\u0f6d\3\2\2\2\u019a\u0f75\3\2\2\2\u019c\u0f7f\3\2"+
		"\2\2\u019e\u0f81\3\2\2\2\u01a0\u0f87\3\2\2\2\u01a2\u0f8b\3\2\2\2\u01a4"+
		"\u0f90\3\2\2\2\u01a6\u0f95\3\2\2\2\u01a8\u0f99\3\2\2\2\u01aa\u0fa1\3\2"+
		"\2\2\u01ac\u0fa3\3\2\2\2\u01ae\u0fa5\3\2\2\2\u01b0\u0fa7\3\2\2\2\u01b2"+
		"\u0fb1\3\2\2\2\u01b4\u0fb3\3\2\2\2\u01b6\u0fb7\3\2\2\2\u01b8\u0fb9\3\2"+
		"\2\2\u01ba\u0fbd\3\2\2\2\u01bc\u0fc7\3\2\2\2\u01be\u0fd3\3\2\2\2\u01c0"+
		"\u0fd5\3\2\2\2\u01c2\u0fdd\3\2\2\2\u01c4\u0fe6\3\2\2\2\u01c6\u0fee\3\2"+
		"\2\2\u01c8\u0ff0\3\2\2\2\u01ca\u0ff2\3\2\2\2\u01cc\u0ff9\3\2\2\2\u01ce"+
		"\u1000\3\2\2\2\u01d0\u1002\3\2\2\2\u01d2\u1004\3\2\2\2\u01d4\u1007\3\2"+
		"\2\2\u01d6\u100c\3\2\2\2\u01d8\u1011\3\2\2\2\u01da\u1013\3\2\2\2\u01dc"+
		"\u1015\3\2\2\2\u01de\u1017\3\2\2\2\u01e0\u101e\3\2\2\2\u01e2\u1022\3\2"+
		"\2\2\u01e4\u1024\3\2\2\2\u01e6\u102c\3\2\2\2\u01e8\u1039\3\2\2\2\u01ea"+
		"\u103b\3\2\2\2\u01ec\u1043\3\2\2\2\u01ee\u104a\3\2\2\2\u01f0\u104c\3\2"+
		"\2\2\u01f2\u1053\3\2\2\2\u01f4\u1072\3\2\2\2\u01f6\u01f8\5\4\3\2\u01f7"+
		"\u01f9\7\u0150\2\2\u01f8\u01f7\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\u01fb"+
		"\3\2\2\2\u01fa\u01f6\3\2\2\2\u01fb\u01fe\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fc"+
		"\u01fd\3\2\2\2\u01fd\u01ff\3\2\2\2\u01fe\u01fc\3\2\2\2\u01ff\u0200\7\2"+
		"\2\3\u0200\3\3\2\2\2\u0201\u0202\5\n\6\2\u0202\5\3\2\2\2\u0203\u0204\5"+
		"\u0182\u00c2\2\u0204\7\3\2\2\2\u0205\u0206\5\u01f4\u00fb\2\u0206\t\3\2"+
		"\2\2\u0207\u020b\5\f\7\2\u0208\u020b\5\16\b\2\u0209\u020b\5\u0096L\2\u020a"+
		"\u0207\3\2\2\2\u020a\u0208\3\2\2\2\u020a\u0209\3\2\2\2\u020b\13\3\2\2"+
		"\2\u020c\u021b\5R*\2\u020d\u021b\5&\24\2\u020e\u021b\5(\25\2\u020f\u021b"+
		"\5\60\31\2\u0210\u021b\5<\37\2\u0211\u021b\5J&\2\u0212\u021b\5N(\2\u0213"+
		"\u021b\5P)\2\u0214\u021b\5:\36\2\u0215\u021b\5\62\32\2\u0216\u021b\5."+
		"\30\2\u0217\u021b\5\66\34\2\u0218\u021b\5*\26\2\u0219\u021b\5,\27\2\u021a"+
		"\u020c\3\2\2\2\u021a\u020d\3\2\2\2\u021a\u020e\3\2\2\2\u021a\u020f\3\2"+
		"\2\2\u021a\u0210\3\2\2\2\u021a\u0211\3\2\2\2\u021a\u0212\3\2\2\2\u021a"+
		"\u0213\3\2\2\2\u021a\u0214\3\2\2\2\u021a\u0215\3\2\2\2\u021a\u0216\3\2"+
		"\2\2\u021a\u0217\3\2\2\2\u021a\u0218\3\2\2\2\u021a\u0219\3\2\2\2\u021b"+
		"\r\3\2\2\2\u021c\u0223\5\20\t\2\u021d\u0223\5\22\n\2\u021e\u0223\5\24"+
		"\13\2\u021f\u0223\5\26\f\2\u0220\u0223\5 \21\2\u0221\u0223\5$\23\2\u0222"+
		"\u021c\3\2\2\2\u0222\u021d\3\2\2\2\u0222\u021e\3\2\2\2\u0222\u021f\3\2"+
		"\2\2\u0222\u0220\3\2\2\2\u0222\u0221\3\2\2\2\u0223\17\3\2\2\2\u0224\u0225"+
		"\7\b\2\2\u0225\u0226\7\60\2\2\u0226\u0227\5\u0196\u00cc\2\u0227\u0229"+
		"\5> \2\u0228\u022a\5\36\20\2\u0229\u0228\3\2\2\2\u022a\u022b\3\2\2\2\u022b"+
		"\u0229\3\2\2\2\u022b\u022c\3\2\2\2\u022c\u022e\3\2\2\2\u022d\u022f\7e"+
		"\2\2\u022e\u022d\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u0249\3\2\2\2\u0230"+
		"\u0231\7\b\2\2\u0231\u0232\7\60\2\2\u0232\u0233\5\u0196\u00cc\2\u0233"+
		"\u0234\5> \2\u0234\u0235\7\u00f0\2\2\u0235\u0236\7\u010d\2\2\u0236\u0237"+
		"\5\u0196\u00cc\2\u0237\u0249\3\2\2\2\u0238\u0239\7\b\2\2\u0239\u023a\7"+
		"\60\2\2\u023a\u023b\5\u0196\u00cc\2\u023b\u023c\5> \2\u023c\u023d\7Z\2"+
		"\2\u023d\u023e\7\u010d\2\2\u023e\u023f\5\u0098M\2\u023f\u0249\3\2\2\2"+
		"\u0240\u0241\7\b\2\2\u0241\u0242\7\60\2\2\u0242\u0243\5\u0196\u00cc\2"+
		"\u0243\u0244\5> \2\u0244\u0245\7\u00fa\2\2\u0245\u0246\7j\2\2\u0246\u0247"+
		"\5\u0196\u00cc\2\u0247\u0249\3\2\2\2\u0248\u0224\3\2\2\2\u0248\u0230\3"+
		"\2\2\2\u0248\u0238\3\2\2\2\u0248\u0240\3\2\2\2\u0249\21\3\2\2\2\u024a"+
		"\u024b\7\b\2\2\u024b\u024c\7j\2\2\u024c\u024d\5\u0098M\2\u024d\u024e\7"+
		"\u00f0\2\2\u024e\u024f\7\u010d\2\2\u024f\u0250\5\u0098M\2\u0250\u0259"+
		"\3\2\2\2\u0251\u0252\7\b\2\2\u0252\u0253\7j\2\2\u0253\u0254\5\u0098M\2"+
		"\u0254\u0255\7Z\2\2\u0255\u0256\7\u010d\2\2\u0256\u0257\5\u0098M\2\u0257"+
		"\u0259\3\2\2\2\u0258\u024a\3\2\2\2\u0258\u0251\3\2\2\2\u0259\23\3\2\2"+
		"\2\u025a\u025c\7\b\2\2\u025b\u025d\7_\2\2\u025c\u025b\3\2\2\2\u025c\u025d"+
		"\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u025f\7\u00c7\2\2\u025f\u0260\5\u0098"+
		"M\2\u0260\u0261\7\u00f0\2\2\u0261\u0262\7\u010d\2\2\u0262\u0263\5\u0098"+
		"M\2\u0263\u026f\3\2\2\2\u0264\u0266\7\b\2\2\u0265\u0267\7_\2\2\u0266\u0265"+
		"\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0268\3\2\2\2\u0268\u0269\7\u00c7\2"+
		"\2\u0269\u026a\5\u0098M\2\u026a\u026b\7Z\2\2\u026b\u026c\7\u010d\2\2\u026c"+
		"\u026d\5\u0098M\2\u026d\u026f\3\2\2\2\u026e\u025a\3\2\2\2\u026e\u0264"+
		"\3\2\2\2\u026f\25\3\2\2\2\u0270\u0271\7\b\2\2\u0271\u0273\7t\2\2\u0272"+
		"\u0274\7\u00e0\2\2\u0273\u0272\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0276"+
		"\3\2\2\2\u0275\u0277\5\u0196\u00cc\2\u0276\u0275\3\2\2\2\u0277\u0278\3"+
		"\2\2\2\u0278\u0276\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027e\3\2\2\2\u027a"+
		"\u027c\5\30\r\2\u027b\u027d\7\u0151\2\2\u027c\u027b\3\2\2\2\u027c\u027d"+
		"\3\2\2\2\u027d\u027f\3\2\2\2\u027e\u027a\3\2\2\2\u027f\u0280\3\2\2\2\u0280"+
		"\u027e\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u02a3\3\2\2\2\u0282\u0283\7\b"+
		"\2\2\u0283\u0285\7t\2\2\u0284\u0286\7\u00e0\2\2\u0285\u0284\3\2\2\2\u0285"+
		"\u0286\3\2\2\2\u0286\u0288\3\2\2\2\u0287\u0289\5\u0196\u00cc\2\u0288\u0287"+
		"\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b"+
		"\u028c\3\2\2\2\u028c\u028e\7\u00f0\2\2\u028d\u028f\7\u0097\2\2\u028e\u028d"+
		"\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u0291\5\u0196\u00cc"+
		"\2\u0291\u0292\7\u010d\2\2\u0292\u0293\5\u0196\u00cc\2\u0293\u02a3\3\2"+
		"\2\2\u0294\u0295\7\b\2\2\u0295\u0296\7t\2\2\u0296\u0297\5\u0196\u00cc"+
		"\2\u0297\u0298\7\u00f0\2\2\u0298\u0299\7\u010d\2\2\u0299\u029a\5\u0196"+
		"\u00cc\2\u029a\u02a3\3\2\2\2\u029b\u029c\7\b\2\2\u029c\u029d\7t\2\2\u029d"+
		"\u029e\5\u0196\u00cc\2\u029e\u029f\7\u00fa\2\2\u029f\u02a0\7j\2\2\u02a0"+
		"\u02a1\5\u0196\u00cc\2\u02a1\u02a3\3\2\2\2\u02a2\u0270\3\2\2\2\u02a2\u0282"+
		"\3\2\2\2\u02a2\u0294\3\2\2\2\u02a2\u029b\3\2\2\2\u02a3\27\3\2\2\2\u02a4"+
		"\u02a6\7\3\2\2\u02a5\u02a7\7\u0097\2\2\u02a6\u02a5\3\2\2\2\u02a6\u02a7"+
		"\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8\u037e\5T+\2\u02a9\u02ab\7\u00ab\2\2"+
		"\u02aa\u02ac\7\u0097\2\2\u02ab\u02aa\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac"+
		"\u02af\3\2\2\2\u02ad\u02ae\78\2\2\u02ae\u02b0\7\u00b0\2\2\u02af\u02ad"+
		"\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b1\3\2\2\2\u02b1\u02b3\5\u0196\u00cc"+
		"\2\u02b2\u02b4\t\2\2\2\u02b3\u02b2\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u037e"+
		"\3\2\2\2\u02b5\u02b7\7\b\2\2\u02b6\u02b8\7\u0097\2\2\u02b7\u02b6\3\2\2"+
		"\2\u02b7\u02b8\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02bc\5\u0196\u00cc\2"+
		"\u02ba\u02bb\7\u00fa\2\2\u02bb\u02bd\7\u00a2\2\2\u02bc\u02ba\3\2\2\2\u02bc"+
		"\u02bd\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bf\7\u010e\2\2\u02bf\u02c2"+
		"\5\u00aaV\2\u02c0\u02c1\7\23\2\2\u02c1\u02c3\5\u0098M\2\u02c2\u02c0\3"+
		"\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c6\3\2\2\2\u02c4\u02c5\7\u0081\2\2"+
		"\u02c5\u02c7\5\u00fa~\2\u02c6\u02c4\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7"+
		"\u037e\3\2\2\2\u02c8\u02ca\7\b\2\2\u02c9\u02cb\7\u0097\2\2\u02ca\u02c9"+
		"\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\5\u0196\u00cc"+
		"\2\u02cd\u02ce\7\u00fa\2\2\u02ce\u02cf\7\34\2\2\u02cf\u02d0\5\u00fa~\2"+
		"\u02d0\u037e\3\2\2\2\u02d1\u02d3\7\b\2\2\u02d2\u02d4\7\u0097\2\2\u02d3"+
		"\u02d2\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5\u02d6\5\u0196"+
		"\u00cc\2\u02d6\u02d7\7\u00ab\2\2\u02d7\u02d8\7\34\2\2\u02d8\u037e\3\2"+
		"\2\2\u02d9\u02db\7\b\2\2\u02da\u02dc\7\u0097\2\2\u02db\u02da\3\2\2\2\u02db"+
		"\u02dc\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02de\5\u0196\u00cc\2\u02de\u02df"+
		"\7\u00fa\2\2\u02df\u037e\3\2\2\2\u02e0\u02e1\7\u00ab\2\2\u02e1\u02e2\7"+
		"P\2\2\u02e2\u037e\7Q\2\2\u02e3\u02e5\7\b\2\2\u02e4\u02e6\7\u0097\2\2\u02e5"+
		"\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e8\5\u0196"+
		"\u00cc\2\u02e8\u02e9\7\u00fa\2\2\u02e9\u02ea\7\u00ff\2\2\u02ea\u02eb\7"+
		"\u0166\2\2\u02eb\u037e\3\2\2\2\u02ec\u02ee\7\b\2\2\u02ed\u02ef\7\u0097"+
		"\2\2\u02ee\u02ed\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0"+
		"\u02f1\5\u0196\u00cc\2\u02f1\u02f2\7\u00fa\2\2\u02f2\u02f9\7\u0158\2\2"+
		"\u02f3\u02f4\5\34\17\2\u02f4\u02f5\7\u014e\2\2\u02f5\u02f7\5\u00d4k\2"+
		"\u02f6\u02f8\7\u0151\2\2\u02f7\u02f6\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8"+
		"\u02fa\3\2\2\2\u02f9\u02f3\3\2\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02f9\3\2"+
		"\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\7\u0159\2\2\u02fe"+
		"\u037e\3\2\2\2\u02ff\u0301\7\b\2\2\u0300\u0302\7\u0097\2\2\u0301\u0300"+
		"\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0304\5\u0196\u00cc"+
		"\2\u0304\u0305\7\u00f2\2\2\u0305\u030a\7\u0158\2\2\u0306\u0308\5\34\17"+
		"\2\u0307\u0309\7\u0151\2\2\u0308\u0307\3\2\2\2\u0308\u0309\3\2\2\2\u0309"+
		"\u030b\3\2\2\2\u030a\u0306\3\2\2\2\u030b\u030c\3\2\2\2\u030c\u030a\3\2"+
		"\2\2\u030c\u030d\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030f\7\u0159\2\2\u030f"+
		"\u037e\3\2\2\2\u0310\u0312\7\b\2\2\u0311\u0313\7\u0097\2\2\u0312\u0311"+
		"\3\2\2\2\u0312\u0313\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0315\5\u0196\u00cc"+
		"\2\u0315\u0316\7\u00fa\2\2\u0316\u0317\7\u0100\2\2\u0317\u0318\7\u00e8"+
		"\2\2\u0318\u037e\3\2\2\2\u0319\u037e\7\u00b2\2\2\u031a\u037e\7\u00b1\2"+
		"\2\u031b\u037e\7\u00cd\2\2\u031c\u031d\7\3\2\2\u031d\u0320\5X-\2\u031e"+
		"\u031f\7P\2\2\u031f\u0321\7\u0113\2\2\u0320\u031e\3\2\2\2\u0320\u0321"+
		"\3\2\2\2\u0321\u037e\3\2\2\2\u0322\u0323\7\3\2\2\u0323\u037e\5\32\16\2"+
		"\u0324\u0325\7\u0114\2\2\u0325\u0326\7\26\2\2\u0326\u037e\5\u0196\u00cc"+
		"\2\u0327\u0328\7\u00ab\2\2\u0328\u032b\7\26\2\2\u0329\u032a\78\2\2\u032a"+
		"\u032c\7\u00b0\2\2\u032b\u0329\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032d"+
		"\3\2\2\2\u032d\u032e\5\u0196\u00cc\2\u032e\u032f\t\2\2\2\u032f\u037e\3"+
		"\2\2\2\u0330\u0331\7\u00a8\2\2\u0331\u0335\7z\2\2\u0332\u0336\5\u0196"+
		"\u00cc\2\u0333\u0336\7\7\2\2\u0334\u0336\7\u0112\2\2\u0335\u0332\3\2\2"+
		"\2\u0335\u0333\3\2\2\2\u0335\u0334\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u037e"+
		"\3\2\2\2\u0337\u0338\7\u00ac\2\2\u0338\u033c\7z\2\2\u0339\u033d\5\u0196"+
		"\u00cc\2\u033a\u033d\7\7\2\2\u033b\u033d\7\u0112\2\2\u033c\u0339\3\2\2"+
		"\2\u033c\u033a\3\2\2\2\u033c\u033b\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u037e"+
		"\3\2\2\2\u033e\u033f\7\u00ac\2\2\u033f\u0340\7\u00f1\2\2\u0340\u0341\7"+
		"z\2\2\u0341\u037e\5\u0196\u00cc\2\u0342\u0343\7\u00ac\2\2\u0343\u0344"+
		"\7\u008a\2\2\u0344\u0345\7z\2\2\u0345\u037e\5\u0196\u00cc\2\u0346\u0347"+
		"\7\u00a8\2\2\u0347\u0348\7i\2\2\u0348\u037e\5\u0196\u00cc\2\u0349\u034a"+
		"\7\u00ac\2\2\u034a\u034b\7i\2\2\u034b\u037e\5\u0196\u00cc\2\u034c\u034d"+
		"\7\u00ac\2\2\u034d\u034e\7\u00f1\2\2\u034e\u034f\7i\2\2\u034f\u037e\5"+
		"\u0196\u00cc\2\u0350\u0351\7\u00ac\2\2\u0351\u0352\7\u008a\2\2\u0352\u0353"+
		"\7i\2\2\u0353\u037e\5\u0196\u00cc\2\u0354\u0355\7\u0094\2\2\u0355\u0356"+
		"\7\u00df\2\2\u0356\u037e\5\u0196\u00cc\2\u0357\u0358\7\u00fa\2\2\u0358"+
		"\u0359\7\u0088\2\2\u0359\u037e\7\u0094\2\2\u035a\u035b\7\u00fa\2\2\u035b"+
		"\u035c\7\u0087\2\2\u035c\u037e\7S\2\2\u035d\u035e\7\u00fa\2\2\u035e\u035f"+
		"\7\u0088\2\2\u035f\u037e\7S\2\2\u0360\u0361\7\u00fa\2\2\u0361\u037e\5"+
		"^\60\2\u0362\u0363\7\u00f2\2\2\u0363\u0368\7\u0158\2\2\u0364\u0366\5`"+
		"\61\2\u0365\u0367\7\u0151\2\2\u0366\u0365\3\2\2\2\u0366\u0367\3\2\2\2"+
		"\u0367\u0369\3\2\2\2\u0368\u0364\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0368"+
		"\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036c\3\2\2\2\u036c\u036d\7\u0159\2"+
		"\2\u036d\u037e\3\2\2\2\u036e\u036f\7\u00bc\2\2\u036f\u037e\5\u0196\u00cc"+
		"\2\u0370\u0371\7\u00d9\2\2\u0371\u0372\7\u00bc\2\2\u0372\u037e\5\u0196"+
		"\u00cc\2\u0373\u0374\7R\2\2\u0374\u037e\5\u0196\u00cc\2\u0375\u0376\7"+
		"P\2\2\u0376\u037e\7R\2\2\u0377\u0378\7Z\2\2\u0378\u0379\7\u010d\2\2\u0379"+
		"\u037e\5\u0196\u00cc\2\u037a\u037b\7\u00fa\2\2\u037b\u037c\7\u0105\2\2"+
		"\u037c\u037e\5\u0196\u00cc\2\u037d\u02a4\3\2\2\2\u037d\u02a9\3\2\2\2\u037d"+
		"\u02b5\3\2\2\2\u037d\u02c8\3\2\2\2\u037d\u02d1\3\2\2\2\u037d\u02d9\3\2"+
		"\2\2\u037d\u02e0\3\2\2\2\u037d\u02e3\3\2\2\2\u037d\u02ec\3\2\2\2\u037d"+
		"\u02ff\3\2\2\2\u037d\u0310\3\2\2\2\u037d\u0319\3\2\2\2\u037d\u031a\3\2"+
		"\2\2\u037d\u031b\3\2\2\2\u037d\u031c\3\2\2\2\u037d\u0322\3\2\2\2\u037d"+
		"\u0324\3\2\2\2\u037d\u0327\3\2\2\2\u037d\u0330\3\2\2\2\u037d\u0337\3\2"+
		"\2\2\u037d\u033e\3\2\2\2\u037d\u0342\3\2\2\2\u037d\u0346\3\2\2\2\u037d"+
		"\u0349\3\2\2\2\u037d\u034c\3\2\2\2\u037d\u0350\3\2\2\2\u037d\u0354\3\2"+
		"\2\2\u037d\u0357\3\2\2\2\u037d\u035a\3\2\2\2\u037d\u035d\3\2\2\2\u037d"+
		"\u0360\3\2\2\2\u037d\u0362\3\2\2\2\u037d\u036e\3\2\2\2\u037d\u0370\3\2"+
		"\2\2\u037d\u0373\3\2\2\2\u037d\u0375\3\2\2\2\u037d\u0377\3\2\2\2\u037d"+
		"\u037a\3\2\2\2\u037e\31\3\2\2\2\u037f\u0380\7\26\2\2\u0380\u0382\5\u0196"+
		"\u00cc\2\u0381\u037f\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0383\3\2\2\2\u0383"+
		"\u0395\7~\2\2\u0384\u0385\7\\\2\2\u0385\u0386\7I\2\2\u0386\u0387\7\u0081"+
		"\2\2\u0387\u0388\7\u00bd\2\2\u0388\u038c\5\u0196\u00cc\2\u0389\u038d\7"+
		"\36\2\2\u038a\u038b\7P\2\2\u038b\u038d\7\36\2\2\u038c\u0389\3\2\2\2\u038c"+
		"\u038a\3\2\2\2\u038c\u038d\3\2\2\2\u038d\u0392\3\2\2\2\u038e\u038f\7?"+
		"\2\2\u038f\u0393\7\37\2\2\u0390\u0391\7?\2\2\u0391\u0393\7:\2\2\u0392"+
		"\u038e\3\2\2\2\u0392\u0390\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0395\3\2"+
		"\2\2\u0394\u0381\3\2\2\2\u0394\u0384\3\2\2\2\u0395\33\3\2\2\2\u0396\u0397"+
		"\t\3\2\2\u0397\35\3\2\2\2\u0398\u0399\7\u008f\2\2\u0399\u039a\7\u00df"+
		"\2\2\u039a\u039b\7Q\2\2\u039b\u03c6\7\u00c0\2\2\u039c\u039d\7f\2\2\u039d"+
		"\u039e\7Q\2\2\u039e\u039f\7\u00df\2\2\u039f\u03a0\7Q\2\2\u03a0\u03c6\7"+
		"\u00c0\2\2\u03a1\u03a2\7r\2\2\u03a2\u03c6\7;\2\2\u03a3\u03c6\7\u00fd\2"+
		"\2\u03a4\u03a6\7\u011a\2\2\u03a5\u03a7\7\u00b2\2\2\u03a6\u03a5\3\2\2\2"+
		"\u03a6\u03a7\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03a9\7\u00f8\2\2\u03a9"+
		"\u03c6\7F\2\2\u03aa\u03ac\7\u00b2\2\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac"+
		"\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\7\u00f8\2\2\u03ae\u03af\7\u00a6"+
		"\2\2\u03af\u03b0\7\u009d\2\2\u03b0\u03b1\7\u0166\2\2\u03b1\u03b2\7b\2"+
		"\2\u03b2\u03b3\7\u0166\2\2\u03b3\u03b4\7\u00fa\2\2\u03b4\u03ba\5\u0098"+
		"M\2\u03b5\u03b6\7\u010d\2\2\u03b6\u03bb\5\u0098M\2\u03b7\u03b8\7\u014e"+
		"\2\2\u03b8\u03bb\5\u0098M\2\u03b9\u03bb\7\34\2\2\u03ba\u03b5\3\2\2\2\u03ba"+
		"\u03b7\3\2\2\2\u03ba\u03b9\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd\7\u00fa"+
		"\2\2\u03bd\u03be\5\u0098M\2\u03be\u03bf\7\62\2\2\u03bf\u03c0\7\u00a0\2"+
		"\2\u03c0\u03c1\7\u00f2\2\2\u03c1\u03c2\5\u0098M\2\u03c2\u03c3\7\u00f2"+
		"\2\2\u03c3\u03c4\7\7\2\2\u03c4\u03c6\3\2\2\2\u03c5\u0398\3\2\2\2\u03c5"+
		"\u039c\3\2\2\2\u03c5\u03a1\3\2\2\2\u03c5\u03a3\3\2\2\2\u03c5\u03a4\3\2"+
		"\2\2\u03c5\u03ab\3\2\2\2\u03c6\37\3\2\2\2\u03c7\u03c8\7\b\2\2\u03c8\u03c9"+
		"\7\34\2\2\u03c9\u03d4\7]\2\2\u03ca\u03cb\7-\2\2\u03cb\u03d0\t\4\2\2\u03cc"+
		"\u03ce\5\u0098M\2\u03cd\u03cf\7\u0151\2\2\u03ce\u03cd\3\2\2\2\u03ce\u03cf"+
		"\3\2\2\2\u03cf\u03d1\3\2\2\2\u03d0\u03cc\3\2\2\2\u03d1\u03d2\3\2\2\2\u03d2"+
		"\u03d0\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d5\3\2\2\2\u03d4\u03ca\3\2"+
		"\2\2\u03d4\u03d5\3\2\2\2\u03d5\u03e0\3\2\2\2\u03d6\u03d7\7<\2\2\u03d7"+
		"\u03dc\7j\2\2\u03d8\u03da\5\u0098M\2\u03d9\u03db\7\u0151\2\2\u03da\u03d9"+
		"\3\2\2\2\u03da\u03db\3\2\2\2\u03db\u03dd\3\2\2\2\u03dc\u03d8\3\2\2\2\u03dd"+
		"\u03de\3\2\2\2\u03de\u03dc\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e1\3\2"+
		"\2\2\u03e0\u03d6\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e2\3\2\2\2\u03e2"+
		"\u03e3\5\"\22\2\u03e3!\3\2\2\2\u03e4\u03f1\7\64\2\2\u03e5\u03e7\t\5\2"+
		"\2\u03e6\u03e8\7\u0151\2\2\u03e7\u03e6\3\2\2\2\u03e7\u03e8\3\2\2\2\u03e8"+
		"\u03ea\3\2\2\2\u03e9\u03e5\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03e9\3\2"+
		"\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03f2\3\2\2\2\u03ed\u03ef\7\7\2\2\u03ee"+
		"\u03f0\7]\2\2\u03ef\u03ee\3\2\2\2\u03ef\u03f0\3\2\2\2\u03f0\u03f2\3\2"+
		"\2\2\u03f1\u03e9\3\2\2\2\u03f1\u03ed\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3"+
		"\u03f4\7\u00df\2\2\u03f4\u03f5\7\u0106\2\2\u03f5\u046d\58\35\2\u03f6\u0403"+
		"\7\64\2\2\u03f7\u03f9\t\6\2\2\u03f8\u03fa\7\u0151\2\2\u03f9\u03f8\3\2"+
		"\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fc\3\2\2\2\u03fb\u03f7\3\2\2\2\u03fc"+
		"\u03fd\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u0404\3\2"+
		"\2\2\u03ff\u0401\7\7\2\2\u0400\u0402\7]\2\2\u0401\u0400\3\2\2\2\u0401"+
		"\u0402\3\2\2\2\u0402\u0404\3\2\2\2\u0403\u03fb\3\2\2\2\u0403\u03ff\3\2"+
		"\2\2\u0404\u0405\3\2\2\2\u0405\u0406\7\u00df\2\2\u0406\u0407\7l\2\2\u0407"+
		"\u046d\58\35\2\u0408\u040e\7\64\2\2\u0409\u040f\7*\2\2\u040a\u040c\7\7"+
		"\2\2\u040b\u040d\7]\2\2\u040c\u040b\3\2\2\2\u040c\u040d\3\2\2\2\u040d"+
		"\u040f\3\2\2\2\u040e\u0409\3\2\2\2\u040e\u040a\3\2\2\2\u040f\u0410\3\2"+
		"\2\2\u0410\u0411\7\u00df\2\2\u0411\u0412\7\61\2\2\u0412\u046d\58\35\2"+
		"\u0413\u0419\7\64\2\2\u0414\u041a\7\u0080\2\2\u0415\u0417\7\7\2\2\u0416"+
		"\u0418\7]\2\2\u0417\u0416\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a\3\2"+
		"\2\2\u0419\u0414\3\2\2\2\u0419\u0415\3\2\2\2\u041a\u041b\3\2\2\2\u041b"+
		"\u041c\7\u00df\2\2\u041c\u041d\7\u010f\2\2\u041d\u046d\58\35\2\u041e\u0422"+
		"\7g\2\2\u041f\u0420\7\64\2\2\u0420\u0421\7\u00e1\2\2\u0421\u0423\7-\2"+
		"\2\u0422\u041f\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u0430\3\2\2\2\u0424\u0426"+
		"\t\5\2\2\u0425\u0427\7\u0151\2\2\u0426\u0425\3\2\2\2\u0426\u0427\3\2\2"+
		"\2\u0427\u0429\3\2\2\2\u0428\u0424\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u0428"+
		"\3\2\2\2\u042a\u042b\3\2\2\2\u042b\u0431\3\2\2\2\u042c\u042e\7\7\2\2\u042d"+
		"\u042f\7]\2\2\u042e\u042d\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0431\3\2"+
		"\2\2\u0430\u0428\3\2\2\2\u0430\u042c\3\2\2\2\u0431\u0432\3\2\2\2\u0432"+
		"\u0433\7\u00df\2\2\u0433\u0434\7\u0106\2\2\u0434\u046d\5\64\33\2\u0435"+
		"\u0439\7g\2\2\u0436\u0437\7\64\2\2\u0437\u0438\7\u00e1\2\2\u0438\u043a"+
		"\7-\2\2\u0439\u0436\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u0447\3\2\2\2\u043b"+
		"\u043d\t\6\2\2\u043c\u043e\7\u0151\2\2\u043d\u043c\3\2\2\2\u043d\u043e"+
		"\3\2\2\2\u043e\u0440\3\2\2\2\u043f\u043b\3\2\2\2\u0440\u0441\3\2\2\2\u0441"+
		"\u043f\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0448\3\2\2\2\u0443\u0445\7\7"+
		"\2\2\u0444\u0446\7]\2\2\u0445\u0444\3\2\2\2\u0445\u0446\3\2\2\2\u0446"+
		"\u0448\3\2\2\2\u0447\u043f\3\2\2\2\u0447\u0443\3\2\2\2\u0448\u0449\3\2"+
		"\2\2\u0449\u044a\7\u00df\2\2\u044a\u044b\7l\2\2\u044b\u046d\5\64\33\2"+
		"\u044c\u0450\7g\2\2\u044d\u044e\7\64\2\2\u044e\u044f\7\u00e1\2\2\u044f"+
		"\u0451\7-\2\2\u0450\u044d\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0457\3\2"+
		"\2\2\u0452\u0458\7*\2\2\u0453\u0455\7\7\2\2\u0454\u0456\7]\2\2\u0455\u0454"+
		"\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0458\3\2\2\2\u0457\u0452\3\2\2\2\u0457"+
		"\u0453\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045a\7\u00df\2\2\u045a\u045b"+
		"\7\61\2\2\u045b\u046d\5\64\33\2\u045c\u0460\7g\2\2\u045d\u045e\7\64\2"+
		"\2\u045e\u045f\7\u00e1\2\2\u045f\u0461\7-\2\2\u0460\u045d\3\2\2\2\u0460"+
		"\u0461\3\2\2\2\u0461\u0467\3\2\2\2\u0462\u0468\7\u0080\2\2\u0463\u0465"+
		"\7\7\2\2\u0464\u0466\7]\2\2\u0465\u0464\3\2\2\2\u0465\u0466\3\2\2\2\u0466"+
		"\u0468\3\2\2\2\u0467\u0462\3\2\2\2\u0467\u0463\3\2\2\2\u0468\u0469\3\2"+
		"\2\2\u0469\u046a\7\u00df\2\2\u046a\u046b\7\u010f\2\2\u046b\u046d\5\64"+
		"\33\2\u046c\u03e4\3\2\2\2\u046c\u03f6\3\2\2\2\u046c\u0408\3\2\2\2\u046c"+
		"\u0413\3\2\2\2\u046c\u041e\3\2\2\2\u046c\u0435\3\2\2\2\u046c\u044c\3\2"+
		"\2\2\u046c\u045c\3\2\2\2\u046d#\3\2\2\2\u046e\u046f\7\b\2\2\u046f\u0472"+
		"\7k\2\2\u0470\u0471\78\2\2\u0471\u0473\7\u00b0\2\2\u0472\u0470\3\2\2\2"+
		"\u0472\u0473\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u047f\5\u0196\u00cc\2\u0475"+
		"\u047e\5L\'\2\u0476\u047b\7\u00f3\2\2\u0477\u0479\7\u0087\2\2\u0478\u0477"+
		"\3\2\2\2\u0478\u0479\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047c\5\u0098M"+
		"\2\u047b\u0478\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047e\3\2\2\2\u047d\u0475"+
		"\3\2\2\2\u047d\u0476\3\2\2\2\u047e\u0481\3\2\2\2\u047f\u047d\3\2\2\2\u047f"+
		"\u0480\3\2\2\2\u0480\u04a4\3\2\2\2\u0481\u047f\3\2\2\2\u0482\u0483\7\b"+
		"\2\2\u0483\u0486\7k\2\2\u0484\u0485\78\2\2\u0485\u0487\7\u00b0\2\2\u0486"+
		"\u0484\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u0489\5\u0196"+
		"\u00cc\2\u0489\u048a\7Z\2\2\u048a\u048b\7\u010d\2\2\u048b\u048c\5\u0196"+
		"\u00cc\2\u048c\u04a4\3\2\2\2\u048d\u048e\7\b\2\2\u048e\u0491\7k\2\2\u048f"+
		"\u0490\78\2\2\u0490\u0492\7\u00b0\2\2\u0491\u048f\3\2\2\2\u0491\u0492"+
		"\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\5\u0196\u00cc\2\u0494\u0495\7"+
		"\u00f0\2\2\u0495\u0496\7\u010d\2\2\u0496\u0497\5\u0196\u00cc\2\u0497\u04a4"+
		"\3\2\2\2\u0498\u0499\7\b\2\2\u0499\u049c\7k\2\2\u049a\u049b\78\2\2\u049b"+
		"\u049d\7\u00b0\2\2\u049c\u049a\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049e"+
		"\3\2\2\2\u049e\u049f\5\u0196\u00cc\2\u049f\u04a0\7\u00fa\2\2\u04a0\u04a1"+
		"\7j\2\2\u04a1\u04a2\5\u0196\u00cc\2\u04a2\u04a4\3\2\2\2\u04a3\u046e\3"+
		"\2\2\2\u04a3\u0482\3\2\2\2\u04a3\u048d\3\2\2\2\u04a3\u0498\3\2\2\2\u04a4"+
		"%\3\2\2\2\u04a5\u04a7\7\31\2\2\u04a6\u04a8\7~\2\2\u04a7\u04a6\3\2\2\2"+
		"\u04a7\u04a8\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04ab\7\u00bd\2\2\u04aa"+
		"\u04ac\7\u009b\2\2\u04ab\u04aa\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ae"+
		"\3\2\2\2\u04ad\u04af\5\u0196\u00cc\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3"+
		"\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b1\7\u00df\2\2\u04b1\u04b4\5\u0196"+
		"\u00cc\2\u04b2\u04b3\7\u0081\2\2\u04b3\u04b5\5\u0196\u00cc\2\u04b4\u04b2"+
		"\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b8\5\u01e8\u00f5"+
		"\2\u04b7\u04b9\5r:\2\u04b8\u04b7\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04bc"+
		"\3\2\2\2\u04ba\u04bb\7\u0105\2\2\u04bb\u04bd\5\u0196\u00cc\2\u04bc\u04ba"+
		"\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04c0\3\2\2\2\u04be\u04bf\7\u0086\2"+
		"\2\u04bf\u04c1\5\u0124\u0093\2\u04c0\u04be\3\2\2\2\u04c0\u04c1\3\2\2\2"+
		"\u04c1\'\3\2\2\2\u04c2\u04c3\7\31\2\2\u04c3\u04c7\7+\2\2\u04c4\u04c5\7"+
		"8\2\2\u04c5\u04c6\7P\2\2\u04c6\u04c8\7\u00b0\2\2\u04c7\u04c4\3\2\2\2\u04c7"+
		"\u04c8\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04cb\5\u0098M\2\u04ca\u04cc"+
		"\7\u0087\2\2\u04cb\u04ca\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04cf\3\2\2"+
		"\2\u04cd\u04ce\7j\2\2\u04ce\u04d0\5\u0098M\2\u04cf\u04cd\3\2\2\2\u04cf"+
		"\u04d0\3\2\2\2\u04d0\u04d3\3\2\2\2\u04d1\u04d2\7\u0119\2\2\u04d2\u04d4"+
		"\5\u0098M\2\u04d3\u04d1\3\2\2\2\u04d3\u04d4\3\2\2\2\u04d4\u04d7\3\2\2"+
		"\2\u04d5\u04d6\7\62\2\2\u04d6\u04d8\5\u0098M\2\u04d7\u04d5\3\2\2\2\u04d7"+
		"\u04d8\3\2\2\2\u04d8)\3\2\2\2\u04d9\u04dc\7\31\2\2\u04da\u04db\7W\2\2"+
		"\u04db\u04dd\7d\2\2\u04dc\u04da\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04df"+
		"\3\2\2\2\u04de\u04e0\7_\2\2\u04df\u04de\3\2\2\2\u04df\u04e0\3\2\2\2\u04e0"+
		"\u04e1\3\2\2\2\u04e1\u04e2\7\u00c7\2\2\u04e2\u04fb\5\u0098M\2\u04e3\u04e6"+
		"\7\31\2\2\u04e4\u04e5\7W\2\2\u04e5\u04e7\7d\2\2\u04e6\u04e4\3\2\2\2\u04e6"+
		"\u04e7\3\2\2\2\u04e7\u04e9\3\2\2\2\u04e8\u04ea\7y\2\2\u04e9\u04e8\3\2"+
		"\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04ed\7_\2\2\u04ec"+
		"\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ee\3\2\2\2\u04ee\u04ef\7\u00c7"+
		"\2\2\u04ef\u04f0\5\u0098M\2\u04f0\u04f1\7\67\2\2\u04f1\u04f4\5\u0196\u00cc"+
		"\2\u04f2\u04f3\7@\2\2\u04f3\u04f5\5\u0196\u00cc\2\u04f4\u04f2\3\2\2\2"+
		"\u04f4\u04f5\3\2\2\2\u04f5\u04f8\3\2\2\2\u04f6\u04f7\7\u0082\2\2\u04f7"+
		"\u04f9\5\u0196\u00cc\2\u04f8\u04f6\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u04fb"+
		"\3\2\2\2\u04fa\u04d9\3\2\2\2\u04fa\u04e3\3\2\2\2\u04fb+\3\2\2\2\u04fc"+
		"\u04fd\7\31\2\2\u04fd\u04fe\7\u00ae\2\2\u04fe\u04ff\7z\2\2\u04ff\u0500"+
		"\5\u0196\u00cc\2\u0500\u0501\7\u00df\2\2\u0501\u0516\5\u0196\u00cc\2\u0502"+
		"\u0503\7\u0085\2\2\u0503\u0512\5\u0196\u00cc\2\u0504\u0505\7<\2\2\u0505"+
		"\u050a\7\u0158\2\2\u0506\u0508\7\u016d\2\2\u0507\u0509\7\u0151\2\2\u0508"+
		"\u0507\3\2\2\2\u0508\u0509\3\2\2\2\u0509\u050b\3\2\2\2\u050a\u0506\3\2"+
		"\2\2\u050b\u050c\3\2\2\2\u050c\u050a\3\2\2\2\u050c\u050d\3\2\2\2\u050d"+
		"\u050e\3\2\2\2\u050e\u0510\7\u0159\2\2\u050f\u0511\7\t\2\2\u0510\u050f"+
		"\3\2\2\2\u0510\u0511\3\2\2\2\u0511\u0513\3\2\2\2\u0512\u0504\3\2\2\2\u0513"+
		"\u0514\3\2\2\2\u0514\u0512\3\2\2\2\u0514\u0515\3\2\2\2\u0515\u0517\3\2"+
		"\2\2\u0516\u0502\3\2\2\2\u0516\u0517\3\2\2\2\u0517\u0518\3\2\2\2\u0518"+
		"\u0519\7*\2\2\u0519\u051a\7^\2\2\u051a\u051b\5\u00fa~\2\u051b-\3\2\2\2"+
		"\u051c\u051e\7\u00fa\2\2\u051d\u051f\t\7\2\2\u051e\u051d\3\2\2\2\u051e"+
		"\u051f\3\2\2\2\u051f\u0520\3\2\2\2\u0520\u0521\5\u0098M\2\u0521\u052d"+
		"\t\b\2\2\u0522\u0529\5\u00fa~\2\u0523\u0524\7\u0162\2\2\u0524\u0525\5"+
		"\u00fa~\2\u0525\u0526\7\u0162\2\2\u0526\u0529\3\2\2\2\u0527\u0529\7\34"+
		"\2\2\u0528\u0522\3\2\2\2\u0528\u0523\3\2\2\2\u0528\u0527\3\2\2\2\u0529"+
		"\u052b\3\2\2\2\u052a\u052c\7\u0151\2\2\u052b\u052a\3\2\2\2\u052b\u052c"+
		"\3\2\2\2\u052c\u052e\3\2\2\2\u052d\u0528\3\2\2\2\u052e\u052f\3\2\2\2\u052f"+
		"\u052d\3\2\2\2\u052f\u0530\3\2\2\2\u0530\u0544\3\2\2\2\u0531\u0533\7\u00fa"+
		"\2\2\u0532\u0534\t\7\2\2\u0533\u0532\3\2\2\2\u0533\u0534\3\2\2\2\u0534"+
		"\u0535\3\2\2\2\u0535\u0536\7\u013a\2\2\u0536\u053f\7\u011f\2\2\u0537\u053b"+
		"\5\u0098M\2\u0538\u053b\7N\2\2\u0539\u053b\7\34\2\2\u053a\u0537\3\2\2"+
		"\2\u053a\u0538\3\2\2\2\u053a\u0539\3\2\2\2\u053b\u053d\3\2\2\2\u053c\u053e"+
		"\7\u0151\2\2\u053d\u053c\3\2\2\2\u053d\u053e\3\2\2\2\u053e\u0540\3\2\2"+
		"\2\u053f\u053a\3\2\2\2\u0540\u0541\3\2\2\2\u0541\u053f\3\2\2\2\u0541\u0542"+
		"\3\2\2\2\u0542\u0544\3\2\2\2\u0543\u051c\3\2\2\2\u0543\u0531\3\2\2\2\u0544"+
		"/\3\2\2\2\u0545\u0547\7\31\2\2\u0546\u0548\7\26\2\2\u0547\u0546\3\2\2"+
		"\2\u0547\u0548\3\2\2\2\u0548\u0549\3\2\2\2\u0549\u054a\7z\2\2\u054a\u054f"+
		"\5\u0098M\2\u054b\u0550\7\16\2\2\u054c\u054d\7E\2\2\u054d\u0550\7R\2\2"+
		"\u054e\u0550\7\5\2\2\u054f\u054b\3\2\2\2\u054f\u054c\3\2\2\2\u054f\u054e"+
		"\3\2\2\2\u0550\u0565\3\2\2\2\u0551\u0561\7\u00c1\2\2\u0552\u0561\7 \2"+
		"\2\u0553\u0561\7|\2\2\u0554\u055e\7\177\2\2\u0555\u055a\7R\2\2\u0556\u0558"+
		"\5\u0098M\2\u0557\u0559\7\u0151\2\2\u0558\u0557\3\2\2\2\u0558\u0559\3"+
		"\2\2\2\u0559\u055b\3\2\2\2\u055a\u0556\3\2\2\2\u055b\u055c\3\2\2\2\u055c"+
		"\u055a\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055f\3\2\2\2\u055e\u0555\3\2"+
		"\2\2\u055e\u055f\3\2\2\2\u055f\u0561\3\2\2\2\u0560\u0551\3\2\2\2\u0560"+
		"\u0552\3\2\2\2\u0560\u0553\3\2\2\2\u0560\u0554\3\2\2\2\u0561\u0563\3\2"+
		"\2\2\u0562\u0564\7W\2\2\u0563\u0562\3\2\2\2\u0563\u0564\3\2\2\2\u0564"+
		"\u0566\3\2\2\2\u0565\u0560\3\2\2\2\u0566\u0567\3\2\2\2\u0567\u0565\3\2"+
		"\2\2\u0567\u0568\3\2\2\2\u0568\u0569\3\2\2\2\u0569\u056a\7\u00df\2\2\u056a"+
		"\u056d\5\u0196\u00cc\2\u056b\u056c\7\62\2\2\u056c\u056e\5\u0196\u00cc"+
		"\2\u056d\u056b\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u0578\3\2\2\2\u056f\u0570"+
		"\7P\2\2\u0570\u0579\7\36\2\2\u0571\u0573\7\36\2\2\u0572\u0571\3\2\2\2"+
		"\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0575\7?\2\2\u0575\u0579"+
		"\7:\2\2\u0576\u0577\7?\2\2\u0577\u0579\7\37\2\2\u0578\u056f\3\2\2\2\u0578"+
		"\u0572\3\2\2\2\u0578\u0576\3\2\2\2\u0578\u0579\3\2\2\2\u0579\u0580\3\2"+
		"\2\2\u057a\u057c\7-\2\2\u057b\u057d\7$\2\2\u057c\u057b\3\2\2\2\u057c\u057d"+
		"\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u0581\7a\2\2\u057f\u0581\7q\2\2\u0580"+
		"\u057a\3\2\2\2\u0580\u057f\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0584\3\2"+
		"\2\2\u0582\u0583\7\u0085\2\2\u0583\u0585\5\u0124\u0093\2\u0584\u0582\3"+
		"\2\2\2\u0584\u0585\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0587\7*\2\2\u0587"+
		"\u0588\7^\2\2\u0588\u0589\5\u0196\u00cc\2\u0589\u0590\7\u0158\2\2\u058a"+
		"\u058c\5\u0098M\2\u058b\u058d\7\u0151\2\2\u058c\u058b\3\2\2\2\u058c\u058d"+
		"\3\2\2\2\u058d\u058f\3\2\2\2\u058e\u058a\3\2\2\2\u058f\u0592\3\2\2\2\u0590"+
		"\u058e\3\2\2\2\u0590\u0591\3\2\2\2\u0591\u0593\3\2\2\2\u0592\u0590\3\2"+
		"\2\2\u0593\u0594\7\u0159\2\2\u0594\61\3\2\2\2\u0595\u0599\7g\2\2\u0596"+
		"\u0597\7\64\2\2\u0597\u0598\7\u00e1\2\2\u0598\u059a\7-\2\2\u0599\u0596"+
		"\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u05a4\3\2\2\2\u059b\u059d\t\5\2\2\u059c"+
		"\u059b\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u059c\3\2\2\2\u059e\u059f\3\2"+
		"\2\2\u059f\u05a5\3\2\2\2\u05a0\u05a2\7\7\2\2\u05a1\u05a3\7]\2\2\u05a2"+
		"\u05a1\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a5\3\2\2\2\u05a4\u059c\3\2"+
		"\2\2\u05a4\u05a0\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05b8\7\u00df\2\2\u05a7"+
		"\u05a9\7t\2\2\u05a8\u05a7\3\2\2\2\u05a8\u05a9\3\2\2\2\u05a9\u05aa\3\2"+
		"\2\2\u05aa\u05ac\5\u0196\u00cc\2\u05ab\u05a8\3\2\2\2\u05ac\u05ad\3\2\2"+
		"\2\u05ad\u05ab\3\2\2\2\u05ad\u05ae\3\2\2\2\u05ae\u05b9\3\2\2\2\u05af\u05b0"+
		"\7\7\2\2\u05b0\u05b1\7\u0106\2\2\u05b1\u05b2\7<\2\2\u05b2\u05b4\7j\2\2"+
		"\u05b3\u05b5\5\u0098M\2\u05b4\u05b3\3\2\2\2\u05b5\u05b6\3\2\2\2\u05b6"+
		"\u05b4\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u05b9\3\2\2\2\u05b8\u05ab\3\2"+
		"\2\2\u05b8\u05af\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05bb\5\64\33\2\u05bb"+
		"\u0711\3\2\2\2\u05bc\u05c0\7g\2\2\u05bd\u05be\7\64\2\2\u05be\u05bf\7\u00e1"+
		"\2\2\u05bf\u05c1\7-\2\2\u05c0\u05bd\3\2\2\2\u05c0\u05c1\3\2\2\2\u05c1"+
		"\u05e1\3\2\2\2\u05c2\u05c3\t\t\2\2\u05c3\u05c8\7\u0158\2\2\u05c4\u05c6"+
		"\5\u0098M\2\u05c5\u05c7\7\u0151\2\2\u05c6\u05c5\3\2\2\2\u05c6\u05c7\3"+
		"\2\2\2\u05c7\u05c9\3\2\2\2\u05c8\u05c4\3\2\2\2\u05c9\u05ca\3\2\2\2\u05ca"+
		"\u05c8\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05cd\7\u0159"+
		"\2\2\u05cd\u05cf\3\2\2\2\u05ce\u05c2\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0"+
		"\u05ce\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1\u05e2\3\2\2\2\u05d2\u05d4\7\7"+
		"\2\2\u05d3\u05d5\7]\2\2\u05d4\u05d3\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5"+
		"\u05d6\3\2\2\2\u05d6\u05db\7\u0158\2\2\u05d7\u05d9\5\u0098M\2\u05d8\u05da"+
		"\7\u0151\2\2\u05d9\u05d8\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05dc\3\2\2"+
		"\2\u05db\u05d7\3\2\2\2\u05dc\u05dd\3\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de"+
		"\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e0\7\u0159\2\2\u05e0\u05e2\3\2\2"+
		"\2\u05e1\u05ce\3\2\2\2\u05e1\u05d2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3\u05e5"+
		"\7\u00df\2\2\u05e4\u05e6\7t\2\2\u05e5\u05e4\3\2\2\2\u05e5\u05e6\3\2\2"+
		"\2\u05e6\u05eb\3\2\2\2\u05e7\u05e9\5\u0196\u00cc\2\u05e8\u05ea\7\u0151"+
		"\2\2\u05e9\u05e8\3\2\2\2\u05e9\u05ea\3\2\2\2\u05ea\u05ec\3\2\2\2\u05eb"+
		"\u05e7\3\2\2\2\u05ec\u05ed\3\2\2\2\u05ed\u05eb\3\2\2\2\u05ed\u05ee\3\2"+
		"\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f0\5\64\33\2\u05f0\u0711\3\2\2\2\u05f1"+
		"\u05f5\7g\2\2\u05f2\u05f3\7\64\2\2\u05f3\u05f4\7\u00e1\2\2\u05f4\u05f6"+
		"\7-\2\2\u05f5\u05f2\3\2\2\2\u05f5\u05f6\3\2\2\2\u05f6\u0600\3\2\2\2\u05f7"+
		"\u05f9\t\6\2\2\u05f8\u05f7\3\2\2\2\u05f9\u05fa\3\2\2\2\u05fa\u05f8\3\2"+
		"\2\2\u05fa\u05fb\3\2\2\2\u05fb\u0601\3\2\2\2\u05fc\u05fe\7\7\2\2\u05fd"+
		"\u05ff\7]\2\2\u05fe\u05fd\3\2\2\2\u05fe\u05ff\3\2\2\2\u05ff\u0601\3\2"+
		"\2\2\u0600\u05f8\3\2\2\2\u0600\u05fc\3\2\2\2\u0601\u0602\3\2\2\2\u0602"+
		"\u0618\7\u00df\2\2\u0603\u0608\7k\2\2\u0604\u0606\5\u0196\u00cc\2\u0605"+
		"\u0607\7\u0151\2\2\u0606\u0605\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0609"+
		"\3\2\2\2\u0608\u0604\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u0608\3\2\2\2\u060a"+
		"\u060b\3\2\2\2\u060b\u0619\3\2\2\2\u060c\u060d\7\7\2\2\u060d\u060e\7l"+
		"\2\2\u060e\u060f\7<\2\2\u060f\u0614\7j\2\2\u0610\u0612\5\u0098M\2\u0611"+
		"\u0613\7\u0151\2\2\u0612\u0611\3\2\2\2\u0612\u0613\3\2\2\2\u0613\u0615"+
		"\3\2\2\2\u0614\u0610\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0614\3\2\2\2\u0616"+
		"\u0617\3\2\2\2\u0617\u0619\3\2\2\2\u0618\u0603\3\2\2\2\u0618\u060c\3\2"+
		"\2\2\u0619\u061a\3\2\2\2\u061a\u061b\5\64\33\2\u061b\u0711\3\2\2\2\u061c"+
		"\u0620\7g\2\2\u061d\u061e\7\64\2\2\u061e\u061f\7\u00e1\2\2\u061f\u0621"+
		"\7-\2\2\u0620\u061d\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u062b\3\2\2\2\u0622"+
		"\u0624\t\n\2\2\u0623\u0622\3\2\2\2\u0624\u0625\3\2\2\2\u0625\u0623\3\2"+
		"\2\2\u0625\u0626\3\2\2\2\u0626\u062c\3\2\2\2\u0627\u0629\7\7\2\2\u0628"+
		"\u062a\7]\2\2\u0629\u0628\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062c\3\2"+
		"\2\2\u062b\u0623\3\2\2\2\u062b\u0627\3\2\2\2\u062c\u062d\3\2\2\2\u062d"+
		"\u062e\7\u00df\2\2\u062e\u0633\7\33\2\2\u062f\u0631\5\u0098M\2\u0630\u0632"+
		"\7\u0151\2\2\u0631\u0630\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0634\3\2\2"+
		"\2\u0633\u062f\3\2\2\2\u0634\u0635\3\2\2\2\u0635\u0633\3\2\2\2\u0635\u0636"+
		"\3\2\2\2\u0636\u0637\3\2\2\2\u0637\u0638\5\64\33\2\u0638\u0711\3\2\2\2"+
		"\u0639\u063d\7g\2\2\u063a\u063b\7\64\2\2\u063b\u063c\7\u00e1\2\2\u063c"+
		"\u063e\7-\2\2\u063d\u063a\3\2\2\2\u063d\u063e\3\2\2\2\u063e\u0644\3\2"+
		"\2\2\u063f\u0645\7\u0080\2\2\u0640\u0642\7\7\2\2\u0641\u0643\7]\2\2\u0642"+
		"\u0641\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0645\3\2\2\2\u0644\u063f\3\2"+
		"\2\2\u0644\u0640\3\2\2\2\u0645\u0646\3\2\2\2\u0646\u0647\7\u00df\2\2\u0647"+
		"\u0648\7.\2\2\u0648\u0649\7\u00a2\2\2\u0649\u064e\7\u011d\2\2\u064a\u064c"+
		"\5\u0196\u00cc\2\u064b\u064d\7\u0151\2\2\u064c\u064b\3\2\2\2\u064c\u064d"+
		"\3\2\2\2\u064d\u064f\3\2\2\2\u064e\u064a\3\2\2\2\u064f\u0650\3\2\2\2\u0650"+
		"\u064e\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0652\3\2\2\2\u0652\u0653\5\64"+
		"\33\2\u0653\u0711\3\2\2\2\u0654\u0658\7g\2\2\u0655\u0656\7\64\2\2\u0656"+
		"\u0657\7\u00e1\2\2\u0657\u0659\7-\2\2\u0658\u0655\3\2\2\2\u0658\u0659"+
		"\3\2\2\2\u0659\u065f\3\2\2\2\u065a\u0660\7\u0080\2\2\u065b\u065d\7\7\2"+
		"\2\u065c\u065e\7]\2\2\u065d\u065c\3\2\2\2\u065d\u065e\3\2\2\2\u065e\u0660"+
		"\3\2\2\2\u065f\u065a\3\2\2\2\u065f\u065b\3\2\2\2\u0660\u0661\3\2\2\2\u0661"+
		"\u0662\7\u00df\2\2\u0662\u0663\7.\2\2\u0663\u0668\7\u00f9\2\2\u0664\u0666"+
		"\5\u0098M\2\u0665\u0667\7\u0151\2\2\u0666\u0665\3\2\2\2\u0666\u0667\3"+
		"\2\2\2\u0667\u0669\3\2\2\2\u0668\u0664\3\2\2\2\u0669\u066a\3\2\2\2\u066a"+
		"\u0668\3\2\2\2\u066a\u066b\3\2\2\2\u066b\u066c\3\2\2\2\u066c\u066d\5\64"+
		"\33\2\u066d\u0711\3\2\2\2\u066e\u0672\7g\2\2\u066f\u0670\7\64\2\2\u0670"+
		"\u0671\7\u00e1\2\2\u0671\u0673\7-\2\2\u0672\u066f\3\2\2\2\u0672\u0673"+
		"\3\2\2\2\u0673\u0679\3\2\2\2\u0674\u067a\7*\2\2\u0675\u0677\7\7\2\2\u0676"+
		"\u0678\7]\2\2\u0677\u0676\3\2\2\2\u0677\u0678\3\2\2\2\u0678\u067a\3\2"+
		"\2\2\u0679\u0674\3\2\2\2\u0679\u0675\3\2\2\2\u067a\u067b\3\2\2\2\u067b"+
		"\u067e\7\u00df\2\2\u067c\u067f\5F$\2\u067d\u067f\5H%\2\u067e\u067c\3\2"+
		"\2\2\u067e\u067d\3\2\2\2\u067f\u0680\3\2\2\2\u0680\u0681\5\64\33\2\u0681"+
		"\u0711\3\2\2\2\u0682\u0686\7g\2\2\u0683\u0684\7\64\2\2\u0684\u0685\7\u00e1"+
		"\2\2\u0685\u0687\7-\2\2\u0686\u0683\3\2\2\2\u0686\u0687\3\2\2\2\u0687"+
		"\u068d\3\2\2\2\u0688\u068e\7\u0080\2\2\u0689\u068b\7\7\2\2\u068a\u068c"+
		"\7]\2\2\u068b\u068a\3\2\2\2\u068b\u068c\3\2\2\2\u068c\u068e\3\2\2\2\u068d"+
		"\u0688\3\2\2\2\u068d\u0689\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0690\7\u00df"+
		"\2\2\u0690\u0695\7\u00c7\2\2\u0691\u0693\5\u0098M\2\u0692\u0694\7\u0151"+
		"\2\2\u0693\u0692\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u0696\3\2\2\2\u0695"+
		"\u0691\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0695\3\2\2\2\u0697\u0698\3\2"+
		"\2\2\u0698\u0699\3\2\2\2\u0699\u069a\5\64\33\2\u069a\u0711\3\2\2\2\u069b"+
		"\u069f\7g\2\2\u069c\u069d\7\64\2\2\u069d\u069e\7\u00e1\2\2\u069e\u06a0"+
		"\7-\2\2\u069f\u069c\3\2\2\2\u069f\u06a0\3\2\2\2\u06a0\u06ae\3\2\2\2\u06a1"+
		"\u06a7\7m\2\2\u06a2\u06a4\7\177\2\2\u06a3\u06a5\7\u0151\2\2\u06a4\u06a3"+
		"\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a7\3\2\2\2\u06a6\u06a1\3\2\2\2\u06a6"+
		"\u06a2\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8\u06a6\3\2\2\2\u06a8\u06a9\3\2"+
		"\2\2\u06a9\u06af\3\2\2\2\u06aa\u06ac\7\7\2\2\u06ab\u06ad\7]\2\2\u06ac"+
		"\u06ab\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06af\3\2\2\2\u06ae\u06a6\3\2"+
		"\2\2\u06ae\u06aa\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b1\7\u00df\2\2\u06b1"+
		"\u06b2\7\u00c8\2\2\u06b2\u06b7\7\u00de\2\2\u06b3\u06b5\5\u0098M\2\u06b4"+
		"\u06b6\7\u0151\2\2\u06b5\u06b4\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06b8"+
		"\3\2\2\2\u06b7\u06b3\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06b7\3\2\2\2\u06b9"+
		"\u06ba\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc\5\64\33\2\u06bc\u0711\3"+
		"\2\2\2\u06bd\u06c1\7g\2\2\u06be\u06bf\7\64\2\2\u06bf\u06c0\7\u00e1\2\2"+
		"\u06c0\u06c2\7-\2\2\u06c1\u06be\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06cf"+
		"\3\2\2\2\u06c3\u06c5\t\13\2\2\u06c4\u06c6\7\u0151\2\2\u06c5\u06c4\3\2"+
		"\2\2\u06c5\u06c6\3\2\2\2\u06c6\u06c8\3\2\2\2\u06c7\u06c3\3\2\2\2\u06c8"+
		"\u06c9\3\2\2\2\u06c9\u06c7\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06d0\3\2"+
		"\2\2\u06cb\u06cd\7\7\2\2\u06cc\u06ce\7]\2\2\u06cd\u06cc\3\2\2\2\u06cd"+
		"\u06ce\3\2\2\2\u06ce\u06d0\3\2\2\2\u06cf\u06c7\3\2\2\2\u06cf\u06cb\3\2"+
		"\2\2\u06d0\u06d1\3\2\2\2\u06d1\u06d2\7\u00df\2\2\u06d2\u06d7\7j\2\2\u06d3"+
		"\u06d5\5\u0098M\2\u06d4\u06d6\7\u0151\2\2\u06d5\u06d4\3\2\2\2\u06d5\u06d6"+
		"\3\2\2\2\u06d6\u06d8\3\2\2\2\u06d7\u06d3\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9"+
		"\u06d7\3\2\2\2\u06d9\u06da\3\2\2\2\u06da\u06db\3\2\2\2\u06db\u06dc\5\64"+
		"\33\2\u06dc\u0711\3\2\2\2\u06dd\u06e1\7g\2\2\u06de\u06df\7\64\2\2\u06df"+
		"\u06e0\7\u00e1\2\2\u06e0\u06e2\7-\2\2\u06e1\u06de\3\2\2\2\u06e1\u06e2"+
		"\3\2\2\2\u06e2\u06e8\3\2\2\2\u06e3\u06e9\7\31\2\2\u06e4\u06e6\7\7\2\2"+
		"\u06e5\u06e7\7]\2\2\u06e6\u06e5\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u06e9"+
		"\3\2\2\2\u06e8\u06e3\3\2\2\2\u06e8\u06e4\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea"+
		"\u06eb\7\u00df\2\2\u06eb\u06f0\7\u0105\2\2\u06ec\u06ee\5\u0098M\2\u06ed"+
		"\u06ef\7\u0151\2\2\u06ee\u06ed\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef\u06f1"+
		"\3\2\2\2\u06f0\u06ec\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f0\3\2\2\2\u06f2"+
		"\u06f3\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u06f5\5\64\33\2\u06f5\u0711\3"+
		"\2\2\2\u06f6\u06fa\7g\2\2\u06f7\u06f8\7\u0089\2\2\u06f8\u06f9\7\u00e1"+
		"\2\2\u06f9\u06fb\7-\2\2\u06fa\u06f7\3\2\2\2\u06fa\u06fb\3\2\2\2\u06fb"+
		"\u0700\3\2\2\2\u06fc\u06fe\5\u0098M\2\u06fd\u06ff\7\u0151\2\2\u06fe\u06fd"+
		"\3\2\2\2\u06fe\u06ff\3\2\2\2\u06ff\u0701\3\2\2\2\u0700\u06fc\3\2\2\2\u0701"+
		"\u0702\3\2\2\2\u0702\u0700\3\2\2\2\u0702\u0703\3\2\2\2\u0703\u0704\3\2"+
		"\2\2\u0704\u0709\7\62\2\2\u0705\u0707\5\u0098M\2\u0706\u0708\7\u0151\2"+
		"\2\u0707\u0706\3\2\2\2\u0707\u0708\3\2\2\2\u0708\u070a\3\2\2\2\u0709\u0705"+
		"\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u0709\3\2\2\2\u070b\u070c\3\2\2\2\u070c"+
		"\u070e\3\2\2\2\u070d\u070f\t\2\2\2\u070e\u070d\3\2\2\2\u070e\u070f\3\2"+
		"\2\2\u070f\u0711\3\2\2\2\u0710\u0595\3\2\2\2\u0710\u05bc\3\2\2\2\u0710"+
		"\u05f1\3\2\2\2\u0710\u061c\3\2\2\2\u0710\u0639\3\2\2\2\u0710\u0654\3\2"+
		"\2\2\u0710\u066e\3\2\2\2\u0710\u0682\3\2\2\2\u0710\u069b\3\2\2\2\u0710"+
		"\u06bd\3\2\2\2\u0710\u06dd\3\2\2\2\u0710\u06f6\3\2\2\2\u0711\63\3\2\2"+
		"\2\u0712\u071b\7\62\2\2\u0713\u0715\7\65\2\2\u0714\u0713\3\2\2\2\u0714"+
		"\u0715\3\2\2\2\u0715\u0716\3\2\2\2\u0716\u071c\5\u0098M\2\u0717\u0719"+
		"\7\u00ea\2\2\u0718\u071a\7\u0151\2\2\u0719\u0718\3\2\2\2\u0719\u071a\3"+
		"\2\2\2\u071a\u071c\3\2\2\2\u071b\u0714\3\2\2\2\u071b\u0717\3\2\2\2\u071c"+
		"\u071d\3\2\2\2\u071d\u071b\3\2\2\2\u071d\u071e\3\2\2\2\u071e\u0720\3\2"+
		"\2\2\u071f\u0721\t\2\2\2\u0720\u071f\3\2\2\2\u0720\u0721\3\2\2\2\u0721"+
		"\65\3\2\2\2\u0722\u072f\7\64\2\2\u0723\u0725\t\5\2\2\u0724\u0726\7\u0151"+
		"\2\2\u0725\u0724\3\2\2\2\u0725\u0726\3\2\2\2\u0726\u0728\3\2\2\2\u0727"+
		"\u0723\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u0727\3\2\2\2\u0729\u072a\3\2"+
		"\2\2\u072a\u0730\3\2\2\2\u072b\u072d\7\7\2\2\u072c\u072e\7]\2\2\u072d"+
		"\u072c\3\2\2\2\u072d\u072e\3\2\2\2\u072e\u0730\3\2\2\2\u072f\u0727\3\2"+
		"\2\2\u072f\u072b\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u0749\7\u00df\2\2\u0732"+
		"\u0734\7t\2\2\u0733\u0732\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u0739\3\2"+
		"\2\2\u0735\u0737\5\u0196\u00cc\2\u0736\u0738\7\u0151\2\2\u0737\u0736\3"+
		"\2\2\2\u0737\u0738\3\2\2\2\u0738\u073a\3\2\2\2\u0739\u0735\3\2\2\2\u073a"+
		"\u073b\3\2\2\2\u073b\u0739\3\2\2\2\u073b\u073c\3\2\2\2\u073c\u074a\3\2"+
		"\2\2\u073d\u073e\7\7\2\2\u073e\u073f\7\u0106\2\2\u073f\u0740\7<\2\2\u0740"+
		"\u0745\7j\2\2\u0741\u0743\5\u0098M\2\u0742\u0744\7\u0151\2\2\u0743\u0742"+
		"\3\2\2\2\u0743\u0744\3\2\2\2\u0744\u0746\3\2\2\2\u0745\u0741\3\2\2\2\u0746"+
		"\u0747\3\2\2\2\u0747\u0745\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u074a\3\2"+
		"\2\2\u0749\u0733\3\2\2\2\u0749\u073d\3\2\2\2\u074a\u074b\3\2\2\2\u074b"+
		"\u074c\58\35\2\u074c\u086b\3\2\2\2\u074d\u0767\7\64\2\2\u074e\u0753\t"+
		"\t\2\2\u074f\u0751\5\u0098M\2\u0750\u0752\7\u0151\2\2\u0751\u0750\3\2"+
		"\2\2\u0751\u0752\3\2\2\2\u0752\u0754\3\2\2\2\u0753\u074f\3\2\2\2\u0754"+
		"\u0755\3\2\2\2\u0755\u0753\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0758\3\2"+
		"\2\2\u0757\u074e\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u0757\3\2\2\2\u0759"+
		"\u075a\3\2\2\2\u075a\u0768\3\2\2\2\u075b\u075d\7\7\2\2\u075c\u075e\7]"+
		"\2\2\u075d\u075c\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u0763\3\2\2\2\u075f"+
		"\u0761\5\u0098M\2\u0760\u0762\7\u0151\2\2\u0761\u0760\3\2\2\2\u0761\u0762"+
		"\3\2\2\2\u0762\u0764\3\2\2\2\u0763\u075f\3\2\2\2\u0764\u0765\3\2\2\2\u0765"+
		"\u0763\3\2\2\2\u0765\u0766\3\2\2\2\u0766\u0768\3\2\2\2\u0767\u0757\3\2"+
		"\2\2\u0767\u075b\3\2\2\2\u0768\u0769\3\2\2\2\u0769\u0771\7\u00df\2\2\u076a"+
		"\u076c\7t\2\2\u076b\u076a\3\2\2\2\u076b\u076c\3\2\2\2\u076c\u076d\3\2"+
		"\2\2\u076d\u076f\5\u0196\u00cc\2\u076e\u0770\7\u0151\2\2\u076f\u076e\3"+
		"\2\2\2\u076f\u0770\3\2\2\2\u0770\u0772\3\2\2\2\u0771\u076b\3\2\2\2\u0772"+
		"\u0773\3\2\2\2\u0773\u0771\3\2\2\2\u0773\u0774\3\2\2\2\u0774\u0775\3\2"+
		"\2\2\u0775\u0776\58\35\2\u0776\u086b\3\2\2\2\u0777\u0784\7\64\2\2\u0778"+
		"\u077a\t\6\2\2\u0779\u077b\7\u0151\2\2\u077a\u0779\3\2\2\2\u077a\u077b"+
		"\3\2\2\2\u077b\u077d\3\2\2\2\u077c\u0778\3\2\2\2\u077d\u077e\3\2\2\2\u077e"+
		"\u077c\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0785\3\2\2\2\u0780\u0782\7\7"+
		"\2\2\u0781\u0783\7]\2\2\u0782\u0781\3\2\2\2\u0782\u0783\3\2\2\2\u0783"+
		"\u0785\3\2\2\2\u0784\u077c\3\2\2";
	private static final String _serializedATNSegment1 =
		"\2\u0784\u0780\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u079c\7\u00df\2\2\u0787"+
		"\u0788\7k\2\2\u0788\u078a\5\u0098M\2\u0789\u078b\7\u0151\2\2\u078a\u0789"+
		"\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078d\3\2\2\2\u078c\u0787\3\2\2\2\u078d"+
		"\u078e\3\2\2\2\u078e\u078c\3\2\2\2\u078e\u078f\3\2\2\2\u078f\u079d\3\2"+
		"\2\2\u0790\u0791\7\7\2\2\u0791\u0792\7l\2\2\u0792\u0793\7<\2\2\u0793\u0798"+
		"\7j\2\2\u0794\u0796\5\u0098M\2\u0795\u0797\7\u0151\2\2\u0796\u0795\3\2"+
		"\2\2\u0796\u0797\3\2\2\2\u0797\u0799\3\2\2\2\u0798\u0794\3\2\2\2\u0799"+
		"\u079a\3\2\2\2\u079a\u0798\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u079d\3\2"+
		"\2\2\u079c\u078c\3\2\2\2\u079c\u0790\3\2\2\2\u079d\u079e\3\2\2\2\u079e"+
		"\u079f\58\35\2\u079f\u086b\3\2\2\2\u07a0\u07ad\7\64\2\2\u07a1\u07a3\t"+
		"\n\2\2\u07a2\u07a4\7\u0151\2\2\u07a3\u07a2\3\2\2\2\u07a3\u07a4\3\2\2\2"+
		"\u07a4\u07a6\3\2\2\2\u07a5\u07a1\3\2\2\2\u07a6\u07a7\3\2\2\2\u07a7\u07a5"+
		"\3\2\2\2\u07a7\u07a8\3\2\2\2\u07a8\u07ae\3\2\2\2\u07a9\u07ab\7\7\2\2\u07aa"+
		"\u07ac\7]\2\2\u07ab\u07aa\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07ae\3\2"+
		"\2\2\u07ad\u07a5\3\2\2\2\u07ad\u07a9\3\2\2\2\u07ae\u07af\3\2\2\2\u07af"+
		"\u07b0\7\u00df\2\2\u07b0\u07b5\7\33\2\2\u07b1\u07b3\5\u0098M\2\u07b2\u07b4"+
		"\7\u0151\2\2\u07b3\u07b2\3\2\2\2\u07b3\u07b4\3\2\2\2\u07b4\u07b6\3\2\2"+
		"\2\u07b5\u07b1\3\2\2\2\u07b6\u07b7\3\2\2\2\u07b7\u07b5\3\2\2\2\u07b7\u07b8"+
		"\3\2\2\2\u07b8\u07b9\3\2\2\2\u07b9\u07ba\58\35\2\u07ba\u086b\3\2\2\2\u07bb"+
		"\u07c1\7\64\2\2\u07bc\u07c2\7\u0080\2\2\u07bd\u07bf\7\7\2\2\u07be\u07c0"+
		"\7]\2\2\u07bf\u07be\3\2\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c2\3\2\2\2\u07c1"+
		"\u07bc\3\2\2\2\u07c1\u07bd\3\2\2\2\u07c2\u07c3\3\2\2\2\u07c3\u07c4\7\u00df"+
		"\2\2\u07c4\u07c5\7.\2\2\u07c5\u07c6\7\u00a2\2\2\u07c6\u07cb\7\u011d\2"+
		"\2\u07c7\u07c9\5\u0098M\2\u07c8\u07ca\7\u0151\2\2\u07c9\u07c8\3\2\2\2"+
		"\u07c9\u07ca\3\2\2\2\u07ca\u07cc\3\2\2\2\u07cb\u07c7\3\2\2\2\u07cc\u07cd"+
		"\3\2\2\2\u07cd\u07cb\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07cf\3\2\2\2\u07cf"+
		"\u07d0\58\35\2\u07d0\u086b\3\2\2\2\u07d1\u07d7\7\64\2\2\u07d2\u07d8\7"+
		"\u0080\2\2\u07d3\u07d5\7\7\2\2\u07d4\u07d6\7]\2\2\u07d5\u07d4\3\2\2\2"+
		"\u07d5\u07d6\3\2\2\2\u07d6\u07d8\3\2\2\2\u07d7\u07d2\3\2\2\2\u07d7\u07d3"+
		"\3\2\2\2\u07d8\u07d9\3\2\2\2\u07d9\u07da\7\u00df\2\2\u07da\u07db\7.\2"+
		"\2\u07db\u07e0\7\u00f9\2\2\u07dc\u07de\5\u0098M\2\u07dd\u07df\7\u0151"+
		"\2\2\u07de\u07dd\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e1\3\2\2\2\u07e0"+
		"\u07dc\3\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e0\3\2\2\2\u07e2\u07e3\3\2"+
		"\2\2\u07e3\u07e4\3\2\2\2\u07e4\u07e5\58\35\2\u07e5\u086b\3\2\2\2\u07e6"+
		"\u07ec\7\64\2\2\u07e7\u07ed\7*\2\2\u07e8\u07ea\7\7\2\2\u07e9\u07eb\7]"+
		"\2\2\u07ea\u07e9\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07ed\3\2\2\2\u07ec"+
		"\u07e7\3\2\2\2\u07ec\u07e8\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07f1\7\u00df"+
		"\2\2\u07ef\u07f2\5F$\2\u07f0\u07f2\5H%\2\u07f1\u07ef\3\2\2\2\u07f1\u07f0"+
		"\3\2\2\2\u07f2\u07f3\3\2\2\2\u07f3\u07f4\58\35\2\u07f4\u086b\3\2\2\2\u07f5"+
		"\u07fb\7\64\2\2\u07f6\u07fc\7\u0080\2\2\u07f7\u07f9\7\7\2\2\u07f8\u07fa"+
		"\7]\2\2\u07f9\u07f8\3\2\2\2\u07f9\u07fa\3\2\2\2\u07fa\u07fc\3\2\2\2\u07fb"+
		"\u07f6\3\2\2\2\u07fb\u07f7\3\2\2\2\u07fc\u07fd\3\2\2\2\u07fd\u07fe\7\u00df"+
		"\2\2\u07fe\u0803\7\u00c7\2\2\u07ff\u0801\5\u0098M\2\u0800\u0802\7\u0151"+
		"\2\2\u0801\u0800\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0804\3\2\2\2\u0803"+
		"\u07ff\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0803\3\2\2\2\u0805\u0806\3\2"+
		"\2\2\u0806\u0807\3\2\2\2\u0807\u0808\58\35\2\u0808\u086b\3\2\2\2\u0809"+
		"\u0816\7\64\2\2\u080a\u080c\t\f\2\2\u080b\u080d\7\u0151\2\2\u080c\u080b"+
		"\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u080f\3\2\2\2\u080e\u080a\3\2\2\2\u080f"+
		"\u0810\3\2\2\2\u0810\u080e\3\2\2\2\u0810\u0811\3\2\2\2\u0811\u0817\3\2"+
		"\2\2\u0812\u0814\7\7\2\2\u0813\u0815\7]\2\2\u0814\u0813\3\2\2\2\u0814"+
		"\u0815\3\2\2\2\u0815\u0817\3\2\2\2\u0816\u080e\3\2\2\2\u0816\u0812\3\2"+
		"\2\2\u0817\u0818\3\2\2\2\u0818\u0819\7\u00df\2\2\u0819\u081a\7\u00c8\2"+
		"\2\u081a\u081f\7\u00de\2\2\u081b\u081d\5\u0098M\2\u081c\u081e\7\u0151"+
		"\2\2\u081d\u081c\3\2\2\2\u081d\u081e\3\2\2\2\u081e\u0820\3\2\2\2\u081f"+
		"\u081b\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u081f\3\2\2\2\u0821\u0822\3\2"+
		"\2\2\u0822\u0823\3\2\2\2\u0823\u0824\58\35\2\u0824\u086b\3\2\2\2\u0825"+
		"\u0832\7\64\2\2\u0826\u0828\t\13\2\2\u0827\u0829\7\u0151\2\2\u0828\u0827"+
		"\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u082b\3\2\2\2\u082a\u0826\3\2\2\2\u082b"+
		"\u082c\3\2\2\2\u082c\u082a\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u0833\3\2"+
		"\2\2\u082e\u0830\7\7\2\2\u082f\u0831\7]\2\2\u0830\u082f\3\2\2\2\u0830"+
		"\u0831\3\2\2\2\u0831\u0833\3\2\2\2\u0832\u082a\3\2\2\2\u0832\u082e\3\2"+
		"\2\2\u0833\u0834\3\2\2\2\u0834\u0835\7\u00df\2\2\u0835\u083a\7j\2\2\u0836"+
		"\u0838\5\u0098M\2\u0837\u0839\7\u0151\2\2\u0838\u0837\3\2\2\2\u0838\u0839"+
		"\3\2\2\2\u0839\u083b\3\2\2\2\u083a\u0836\3\2\2\2\u083b\u083c\3\2\2\2\u083c"+
		"\u083a\3\2\2\2\u083c\u083d\3\2\2\2\u083d\u083e\3\2\2\2\u083e\u083f\58"+
		"\35\2\u083f\u086b\3\2\2\2\u0840\u0846\7\64\2\2\u0841\u0847\7\31\2\2\u0842"+
		"\u0844\7\7\2\2\u0843\u0845\7]\2\2\u0844\u0843\3\2\2\2\u0844\u0845\3\2"+
		"\2\2\u0845\u0847\3\2\2\2\u0846\u0841\3\2\2\2\u0846\u0842\3\2\2\2\u0847"+
		"\u0848\3\2\2\2\u0848\u0849\7\u00df\2\2\u0849\u084e\7\u0105\2\2\u084a\u084c"+
		"\5\u0098M\2\u084b\u084d\7\u0151\2\2\u084c\u084b\3\2\2\2\u084c\u084d\3"+
		"\2\2\2\u084d\u084f\3\2\2\2\u084e\u084a\3\2\2\2\u084f\u0850\3\2\2\2\u0850"+
		"\u084e\3\2\2\2\u0850\u0851\3\2\2\2\u0851\u0852\3\2\2\2\u0852\u0853\58"+
		"\35\2\u0853\u0858\7\64\2\2\u0854\u0856\5\u0098M\2\u0855\u0857\7\u0151"+
		"\2\2\u0856\u0855\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0859\3\2\2\2\u0858"+
		"\u0854\3\2\2\2\u0859\u085a\3\2\2\2\u085a\u0858\3\2\2\2\u085a\u085b\3\2"+
		"\2\2\u085b\u085c\3\2\2\2\u085c\u0861\7\u010d\2\2\u085d\u085f\5\u0098M"+
		"\2\u085e\u0860\7\u0151\2\2\u085f\u085e\3\2\2\2\u085f\u0860\3\2\2\2\u0860"+
		"\u0862\3\2\2\2\u0861\u085d\3\2\2\2\u0862\u0863\3\2\2\2\u0863\u0861\3\2"+
		"\2\2\u0863\u0864\3\2\2\2\u0864\u0868\3\2\2\2\u0865\u0866\7\u0087\2\2\u0866"+
		"\u0867\7\u0089\2\2\u0867\u0869\7\u00e1\2\2\u0868\u0865\3\2\2\2\u0868\u0869"+
		"\3\2\2\2\u0869\u086b\3\2\2\2\u086a\u0722\3\2\2\2\u086a\u074d\3\2\2\2\u086a"+
		"\u0777\3\2\2\2\u086a\u07a0\3\2\2\2\u086a\u07bb\3\2\2\2\u086a\u07d1\3\2"+
		"\2\2\u086a\u07e6\3\2\2\2\u086a\u07f5\3\2\2\2\u086a\u0809\3\2\2\2\u086a"+
		"\u0825\3\2\2\2\u086a\u0840\3\2\2\2\u086b\67\3\2\2\2\u086c\u0877\7\u010d"+
		"\2\2\u086d\u086f\7\65\2\2\u086e\u086d\3\2\2\2\u086e\u086f\3\2\2\2\u086f"+
		"\u0872\3\2\2\2\u0870\u0873\5\u0098M\2\u0871\u0873\7\u00ea\2\2\u0872\u0870"+
		"\3\2\2\2\u0872\u0871\3\2\2\2\u0873\u0875\3\2\2\2\u0874\u0876\7\u0151\2"+
		"\2\u0875\u0874\3\2\2\2\u0875\u0876\3\2\2\2\u0876\u0878\3\2\2\2\u0877\u086e"+
		"\3\2\2\2\u0878\u0879\3\2\2\2\u0879\u0877\3\2\2\2\u0879\u087a\3\2\2\2\u087a"+
		"\u087e\3\2\2\2\u087b\u087c\7\u0087\2\2\u087c\u087d\7\64\2\2\u087d\u087f"+
		"\7\u00e1\2\2\u087e\u087b\3\2\2\2\u087e\u087f\3\2\2\2\u087f9\3\2\2\2\u0880"+
		"\u0881\7\u0098\2\2\u0881\u08f8\7\u00df\2\2\u0882\u0883\7\4\2\2\u0883\u0884"+
		"\5\u0196\u00cc\2\u0884\u088b\7\u0158\2\2\u0885\u0887\5\u00aaV\2\u0886"+
		"\u0888\7\u0151\2\2\u0887\u0886\3\2\2\2\u0887\u0888\3\2\2\2\u0888\u088a"+
		"\3\2\2\2\u0889\u0885\3\2\2\2\u088a\u088d\3\2\2\2\u088b\u0889\3\2\2\2\u088b"+
		"\u088c\3\2\2\2\u088c\u088e\3\2\2\2\u088d\u088b\3\2\2\2\u088e\u088f\7\u0159"+
		"\2\2\u088f\u08f9\3\2\2\2\u0890\u0891\7\22\2\2\u0891\u0892\7\u0158\2\2"+
		"\u0892\u0893\5\u00aaV\2\u0893\u0894\7\6\2\2\u0894\u0895\5\u00aaV\2\u0895"+
		"\u0896\7\u0159\2\2\u0896\u08f9\3\2\2\2\u0897\u0898\7\24\2\2\u0898\u08f9"+
		"\5\u0196\u00cc\2\u0899\u089a\7\u0097\2\2\u089a\u08f9\5\u0196\u00cc\2\u089b"+
		"\u089c\7\26\2\2\u089c\u089d\5\u0196\u00cc\2\u089d\u089e\7\u00df\2\2\u089e"+
		"\u089f\5\u0196\u00cc\2\u089f\u08f9\3\2\2\2\u08a0\u08a1\7\30\2\2\u08a1"+
		"\u08f9\5\u0196\u00cc\2\u08a2\u08a3\7\33\2\2\u08a3\u08f9\5\u0196\u00cc"+
		"\2\u08a4\u08a5\7#\2\2\u08a5\u08f9\5\u0196\u00cc\2\u08a6\u08a7\7+\2\2\u08a7"+
		"\u08f9\5\u0196\u00cc\2\u08a8\u08a9\7.\2\2\u08a9\u08aa\7\u00a2\2\2\u08aa"+
		"\u08ab\7\u011d\2\2\u08ab\u08f9\5\u0196\u00cc\2\u08ac\u08ad\7.\2\2\u08ad"+
		"\u08ae\7t\2\2\u08ae\u08f9\5\u0196\u00cc\2\u08af\u08f9\5F$\2\u08b0\u08b1"+
		"\7\u00bd\2\2\u08b1\u08f9\5\u0196\u00cc\2\u08b2\u08b3\7\u00c8\2\2\u08b3"+
		"\u08b4\7\u00de\2\2\u08b4\u08f9\5\u0098M\2\u08b5\u08b6\7V\2\2\u08b6\u08b7"+
		"\5\u0196\u00cc\2\u08b7\u08b8\7\u0158\2\2\u08b8\u08b9\5\u00aaV\2\u08b9"+
		"\u08ba\7\u0151\2\2\u08ba\u08bb\5\u00aaV\2\u08bb\u08bc\7\u0159\2\2\u08bc"+
		"\u08f9\3\2\2\2\u08bd\u08be\7V\2\2\u08be\u08bf\7\u0090\2\2\u08bf\u08c0"+
		"\5\u0196\u00cc\2\u08c0\u08c1\7\u0081\2\2\u08c1\u08c2\5\u0098M\2\u08c2"+
		"\u08f9\3\2\2\2\u08c3\u08c4\7V\2\2\u08c4\u08c5\7\u00b4\2\2\u08c5\u08c6"+
		"\5\u0196\u00cc\2\u08c6\u08c7\7\u0081\2\2\u08c7\u08c8\5\u0098M\2\u08c8"+
		"\u08f9\3\2\2\2\u08c9\u08cb\7_\2\2\u08ca\u08c9\3\2\2\2\u08ca\u08cb\3\2"+
		"\2\2\u08cb\u08cc\3\2\2\2\u08cc\u08cd\7\u00c7\2\2\u08cd\u08f9\5\u0196\u00cc"+
		"\2\u08ce\u08cf\7`\2\2\u08cf\u08f9\5\u0196\u00cc\2\u08d0\u08d1\7i\2\2\u08d1"+
		"\u08d2\5\u0196\u00cc\2\u08d2\u08d3\7\u00df\2\2\u08d3\u08d4\5\u0196\u00cc"+
		"\2\u08d4\u08f9\3\2\2\2\u08d5\u08d6\7j\2\2\u08d6\u08f9\5\u0196\u00cc\2"+
		"\u08d7\u08d8\7k\2\2\u08d8\u08f9\5\u0196\u00cc\2\u08d9\u08da\7\u00f9\2"+
		"\2\u08da\u08f9\5\u0196\u00cc\2\u08db\u08dc\7t\2\2\u08dc\u08f9\5\u0196"+
		"\u00cc\2\u08dd\u08de\7\u0105\2\2\u08de\u08f9\5\u0196\u00cc\2\u08df\u08e0"+
		"\7\u013e\2\2\u08e0\u08e1\7\u00f6\2\2\u08e1\u08e2\7\u009c\2\2\u08e2\u08f9"+
		"\5\u0196\u00cc\2\u08e3\u08e4\7\u013e\2\2\u08e4\u08e5\7\u00f6\2\2\u08e5"+
		"\u08e6\7\u00a7\2\2\u08e6\u08f9\5\u0196\u00cc\2\u08e7\u08e8\7\u013e\2\2"+
		"\u08e8\u08e9\7\u00f6\2\2\u08e9\u08ea\7\u00e4\2\2\u08ea\u08f9\5\u0196\u00cc"+
		"\2\u08eb\u08ec\7\u013e\2\2\u08ec\u08ed\7\u00f6\2\2\u08ed\u08ee\7\u0107"+
		"\2\2\u08ee\u08f9\5\u0196\u00cc\2\u08ef\u08f0\7z\2\2\u08f0\u08f1\5\u0196"+
		"\u00cc\2\u08f1\u08f2\7\u00df\2\2\u08f2\u08f3\5\u0196\u00cc\2\u08f3\u08f9"+
		"\3\2\2\2\u08f4\u08f5\7\u010e\2\2\u08f5\u08f9\5\u0196\u00cc\2\u08f6\u08f7"+
		"\7\u0084\2\2\u08f7\u08f9\5\u0196\u00cc\2\u08f8\u0882\3\2\2\2\u08f8\u0890"+
		"\3\2\2\2\u08f8\u0897\3\2\2\2\u08f8\u0899\3\2\2\2\u08f8\u089b\3\2\2\2\u08f8"+
		"\u08a0\3\2\2\2\u08f8\u08a2\3\2\2\2\u08f8\u08a4\3\2\2\2\u08f8\u08a6\3\2"+
		"\2\2\u08f8\u08a8\3\2\2\2\u08f8\u08ac\3\2\2\2\u08f8\u08af\3\2\2\2\u08f8"+
		"\u08b0\3\2\2\2\u08f8\u08b2\3\2\2\2\u08f8\u08b5\3\2\2\2\u08f8\u08bd\3\2"+
		"\2\2\u08f8\u08c3\3\2\2\2\u08f8\u08ca\3\2\2\2\u08f8\u08ce\3\2\2\2\u08f8"+
		"\u08d0\3\2\2\2\u08f8\u08d5\3\2\2\2\u08f8\u08d7\3\2\2\2\u08f8\u08d9\3\2"+
		"\2\2\u08f8\u08db\3\2\2\2\u08f8\u08dd\3\2\2\2\u08f8\u08df\3\2\2\2\u08f8"+
		"\u08e3\3\2\2\2\u08f8\u08e7\3\2\2\2\u08f8\u08eb\3\2\2\2\u08f8\u08ef\3\2"+
		"\2\2\u08f8\u08f4\3\2\2\2\u08f8\u08f6\3\2\2\2\u08f9\u08fa\3\2\2\2\u08fa"+
		"\u08fb\7G\2\2\u08fb\u08fc\7\u016d\2\2\u08fc;\3\2\2\2\u08fd\u0900\7\31"+
		"\2\2\u08fe\u08ff\7W\2\2\u08ff\u0901\7d\2\2\u0900\u08fe\3\2\2\2\u0900\u0901"+
		"\3\2\2\2\u0901\u0902\3\2\2\2\u0902\u0903\7\60\2\2\u0903\u0904\5\u0196"+
		"\u00cc\2\u0904\u0918\5> \2\u0905\u0908\7f\2\2\u0906\u0909\5\u00fa~\2\u0907"+
		"\u0909\5\u00aaV\2\u0908\u0906\3\2\2\2\u0908\u0907\3\2\2\2\u0909\u0919"+
		"\3\2\2\2\u090a\u090b\7f\2\2\u090b\u090c\7t\2\2\u090c\u0912\7\u0158\2\2"+
		"\u090d\u090e\5\u0098M\2\u090e\u0910\5\u00aaV\2\u090f\u0911\7\u0151\2\2"+
		"\u0910\u090f\3\2\2\2\u0910\u0911\3\2\2\2\u0911\u0913\3\2\2\2\u0912\u090d"+
		"\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0912\3\2\2\2\u0914\u0915\3\2\2\2\u0915"+
		"\u0916\3\2\2\2\u0916\u0917\7\u0159\2\2\u0917\u0919\3\2\2\2\u0918\u0905"+
		"\3\2\2\2\u0918\u090a\3\2\2\2\u0918\u0919\3\2\2\2\u0919\u094f\3\2\2\2\u091a"+
		"\u091b\7\u00c7\2\2\u091b\u0950\5\u0098M\2\u091c\u0950\7\u011c\2\2\u091d"+
		"\u0950\7;\2\2\u091e\u0950\7\u00fd\2\2\u091f\u0950\7\u011a\2\2\u0920\u0921"+
		"\7\u008f\2\2\u0921\u0922\7\u00df\2\2\u0922\u0923\7Q\2\2\u0923\u0950\7"+
		"\u00c0\2\2\u0924\u0925\7f\2\2\u0925\u0926\7Q\2\2\u0926\u0927\7\u00df\2"+
		"\2\u0927\u0928\7Q\2\2\u0928\u0950\7\u00c0\2\2\u0929\u0950\7r\2\2\u092a"+
		"\u092c\7\u00b2\2\2\u092b\u092a\3\2\2\2\u092b\u092c\3\2\2\2\u092c\u092d"+
		"\3\2\2\2\u092d\u092e\7\u00f8\2\2\u092e\u0950\7F\2\2\u092f\u0931\7\u00b2"+
		"\2\2\u0930\u092f\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0932\3\2\2\2\u0932"+
		"\u0933\7\u00f8\2\2\u0933\u0950\7\u00a6\2\2\u0934\u0935\7\u009d\2\2\u0935"+
		"\u0950\7\u0166\2\2\u0936\u0937\7b\2\2\u0937\u0950\7\u0166\2\2\u0938\u0939"+
		"\7\u00fa\2\2\u0939\u0940\5\u0098M\2\u093a\u093b\7\u010d\2\2\u093b\u0941"+
		"\5\u0098M\2\u093c\u093d\7\u014e\2\2\u093d\u0941\5\u0098M\2\u093e\u093f"+
		"\7\62\2\2\u093f\u0941\7\u00a0\2\2\u0940\u093a\3\2\2\2\u0940\u093c\3\2"+
		"\2\2\u0940\u093e\3\2\2\2\u0941\u0946\3\2\2\2\u0942\u0943\7\u0151\2\2\u0943"+
		"\u0945\5\u0098M\2\u0944\u0942\3\2\2\2\u0945\u0948\3\2\2\2\u0946\u0944"+
		"\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u0950\3\2\2\2\u0948\u0946\3\2\2\2\u0949"+
		"\u094a\7\6\2\2\u094a\u0950\5@!\2\u094b\u094c\7\6\2\2\u094c\u094d\7\u016d"+
		"\2\2\u094d\u094e\7\u0151\2\2\u094e\u0950\7\u016d\2\2\u094f\u091a\3\2\2"+
		"\2\u094f\u091c\3\2\2\2\u094f\u091d\3\2\2\2\u094f\u091e\3\2\2\2\u094f\u091f"+
		"\3\2\2\2\u094f\u0920\3\2\2\2\u094f\u0924\3\2\2\2\u094f\u0929\3\2\2\2\u094f"+
		"\u092b\3\2\2\2\u094f\u0930\3\2\2\2\u094f\u0934\3\2\2\2\u094f\u0936\3\2"+
		"\2\2\u094f\u0938\3\2\2\2\u094f\u0949\3\2\2\2\u094f\u094b\3\2\2\2\u0950"+
		"\u0951\3\2\2\2\u0951\u094f\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u095f\3\2"+
		"\2\2\u0953\u0954\7\u0087\2\2\u0954\u0959\7\u0158\2\2\u0955\u0957\5B\""+
		"\2\u0956\u0958\7\u0151\2\2\u0957\u0956\3\2\2\2\u0957\u0958\3\2\2\2\u0958"+
		"\u095a\3\2\2\2\u0959\u0955\3\2\2\2\u095a\u095b\3\2\2\2\u095b\u0959\3\2"+
		"\2\2\u095b\u095c\3\2\2\2\u095c\u095d\3\2\2\2\u095d\u095e\7\u0159\2\2\u095e"+
		"\u0960\3\2\2\2\u095f\u0953\3\2\2\2\u095f\u0960\3\2\2\2\u0960=\3\2\2\2"+
		"\u0961\u097b\7\u0158\2\2\u0962\u0964\5D#\2\u0963\u0962\3\2\2\2\u0963\u0964"+
		"\3\2\2\2\u0964\u0966\3\2\2\2\u0965\u0967\5\u0098M\2\u0966\u0965\3\2\2"+
		"\2\u0966\u0967\3\2\2\2\u0967\u096a\3\2\2\2\u0968\u096b\5\u00aaV\2\u0969"+
		"\u096b\5\u0098M\2\u096a\u0968\3\2\2\2\u096a\u0969\3\2\2\2\u096b\u0974"+
		"\3\2\2\2\u096c\u096e\t\r\2\2\u096d\u096f\7\u0158\2\2\u096e\u096d\3\2\2"+
		"\2\u096e\u096f\3\2\2\2\u096f\u0970\3\2\2\2\u0970\u0972\5\u00fa~\2\u0971"+
		"\u0973\7\u0158\2\2\u0972\u0971\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0975"+
		"\3\2\2\2\u0974\u096c\3\2\2\2\u0974\u0975\3\2\2\2\u0975\u0977\3\2\2\2\u0976"+
		"\u0978\7\u0151\2\2\u0977\u0976\3\2\2\2\u0977\u0978\3\2\2\2\u0978\u097a"+
		"\3\2\2\2\u0979\u0963\3\2\2\2\u097a\u097d\3\2\2\2\u097b\u0979\3\2\2\2\u097b"+
		"\u097c\3\2\2\2\u097c\u097e\3\2\2\2\u097d\u097b\3\2\2\2\u097e\u097f\7\u0159"+
		"\2\2\u097f?\3\2\2\2\u0980\u0981\7\u0170\2\2\u0981\u0982\7\u0174\2\2\u0982"+
		"\u0983\7\u0175\2\2\u0983A\3\2\2\2\u0984\u0985\t\16\2\2\u0985C\3\2\2\2"+
		"\u0986\u0987\t\17\2\2\u0987E\3\2\2\2\u0988\u0989\7\60\2\2\u0989\u098a"+
		"\5\u0098M\2\u098a\u099a\7\u0158\2\2\u098b\u098d\5D#\2\u098c\u098b\3\2"+
		"\2\2\u098c\u098d\3\2\2\2\u098d\u098f\3\2\2\2\u098e\u0990\5\u0098M\2\u098f"+
		"\u098e\3\2\2\2\u098f\u0990\3\2\2\2\u0990\u0993\3\2\2\2\u0991\u0994\5\u00aa"+
		"V\2\u0992\u0994\5\u00fa~\2\u0993\u0991\3\2\2\2\u0993\u0992\3\2\2\2\u0994"+
		"\u0996\3\2\2\2\u0995\u0997\7\u0151\2\2\u0996\u0995\3\2\2\2\u0996\u0997"+
		"\3\2\2\2\u0997\u0999\3\2\2\2\u0998\u098c\3\2\2\2\u0999\u099c\3\2\2\2\u099a"+
		"\u0998\3\2\2\2\u099a\u099b\3\2\2\2\u099b\u099d\3\2\2\2\u099c\u099a\3\2"+
		"\2\2\u099d\u099e\7\u0159\2\2\u099eG\3\2\2\2\u099f\u09a0\7\7\2\2\u09a0"+
		"\u09a1\7\61\2\2\u09a1\u09a2\7<\2\2\u09a2\u09a7\7j\2\2\u09a3\u09a5\5\u0098"+
		"M\2\u09a4\u09a6\7\u0151\2\2\u09a5\u09a4\3\2\2\2\u09a5\u09a6\3\2\2\2\u09a6"+
		"\u09a8\3\2\2\2\u09a7\u09a3\3\2\2\2\u09a8\u09a9\3\2\2\2\u09a9\u09a7\3\2"+
		"\2\2\u09a9\u09aa\3\2\2\2\u09aaI\3\2\2\2\u09ab\u09ad\7\31\2\2\u09ac\u09ae"+
		"\t\20\2\2\u09ad\u09ac\3\2\2\2\u09ad\u09ae\3\2\2\2\u09ae\u09af\3\2\2\2"+
		"\u09af\u09b0\7k\2\2\u09b0\u09b4\5\u0196\u00cc\2\u09b1\u09b3\5L\'\2\u09b2"+
		"\u09b1\3\2\2\2\u09b3\u09b6\3\2\2\2\u09b4\u09b2\3\2\2\2\u09b4\u09b5\3\2"+
		"\2\2\u09b5K\3\2\2\2\u09b6\u09b4\3\2\2\2\u09b7\u09b9\7\u00bf\2\2\u09b8"+
		"\u09ba\7\u008d\2\2\u09b9\u09b8\3\2\2\2\u09b9\u09ba\3\2\2\2\u09ba\u09bb"+
		"\3\2\2\2\u09bb\u09da\7\u0166\2\2\u09bc\u09bd\7\u00d5\2\2\u09bd\u09c1\7"+
		"\u0166\2\2\u09be\u09bf\7\u00d9\2\2\u09bf\u09c1\7\u00d5\2\2\u09c0\u09bc"+
		"\3\2\2\2\u09c0\u09be\3\2\2\2\u09c1\u09da\3\2\2\2\u09c2\u09c3\7\u00d0\2"+
		"\2\u09c3\u09c7\5\u00ba^\2\u09c4\u09c5\7\u00d9\2\2\u09c5\u09c7\7\u00d0"+
		"\2\2\u09c6\u09c2\3\2\2\2\u09c6\u09c4\3\2\2\2\u09c7\u09da\3\2\2\2\u09c8"+
		"\u09ca\7\u00fe\2\2\u09c9\u09cb\7\u0087\2\2\u09ca\u09c9\3\2\2\2\u09ca\u09cb"+
		"\3\2\2\2\u09cb\u09cc\3\2\2\2\u09cc\u09da\7\u0166\2\2\u09cd\u09ce\7\u008e"+
		"\2\2\u09ce\u09da\7\u0166\2\2\u09cf\u09d1\7\u00d9\2\2\u09d0\u09cf\3\2\2"+
		"\2\u09d0\u09d1\3\2\2\2\u09d1\u09d2\3\2\2\2\u09d2\u09da\7\u00a1\2\2\u09d3"+
		"\u09d4\7Y\2\2\u09d4\u09d7\7\u008d\2\2\u09d5\u09d8\5\u0196\u00cc\2\u09d6"+
		"\u09d8\7\u00da\2\2\u09d7\u09d5\3\2\2\2\u09d7\u09d6\3\2\2\2\u09d8\u09da"+
		"\3\2\2\2\u09d9\u09b7\3\2\2\2\u09d9\u09c0\3\2\2\2\u09d9\u09c6\3\2\2\2\u09d9"+
		"\u09c8\3\2\2\2\u09d9\u09cd\3\2\2\2\u09d9\u09d0\3\2\2\2\u09d9\u09d3\3\2"+
		"\2\2\u09daM\3\2\2\2\u09db\u09dc\7\31\2\2\u09dc\u09dd\7j\2\2\u09dd\u09e0"+
		"\5\u0098M\2\u09de\u09df\7\r\2\2\u09df\u09e1\5\u0098M\2\u09e0\u09de\3\2"+
		"\2\2\u09e0\u09e1\3\2\2\2\u09e1\u09e5\3\2\2\2\u09e2\u09e4\5\2\2\2\u09e3"+
		"\u09e2\3\2\2\2\u09e4\u09e7\3\2\2\2\u09e5\u09e3\3\2\2\2\u09e5\u09e6\3\2"+
		"\2\2\u09e6\u0a04\3\2\2\2\u09e7\u09e5\3\2\2\2\u09e8\u09e9\7\31\2\2\u09e9"+
		"\u09ea\7j\2\2\u09ea\u09eb\7\r\2\2\u09eb\u09ef\5\u0098M\2\u09ec\u09ee\5"+
		"\2\2\2\u09ed\u09ec\3\2\2\2\u09ee\u09f1\3\2\2\2\u09ef\u09ed\3\2\2\2\u09ef"+
		"\u09f0\3\2\2\2\u09f0\u0a04\3\2\2\2\u09f1\u09ef\3\2\2\2\u09f2\u09f3\7\31"+
		"\2\2\u09f3\u09f4\7j\2\2\u09f4\u09f5\78\2\2\u09f5\u09f6\7P\2\2\u09f6\u09f7"+
		"\7\u00b0\2\2\u09f7\u09fa\5\u0098M\2\u09f8\u09f9\7\r\2\2\u09f9\u09fb\5"+
		"\u0098M\2\u09fa\u09f8\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb\u0a04\3\2\2\2"+
		"\u09fc\u09fd\7\31\2\2\u09fd\u09fe\7j\2\2\u09fe\u09ff\78\2\2\u09ff\u0a00"+
		"\7P\2\2\u0a00\u0a01\7\u00b0\2\2\u0a01\u0a02\7\r\2\2\u0a02\u0a04\5\u0098"+
		"M\2\u0a03\u09db\3\2\2\2\u0a03\u09e8\3\2\2\2\u0a03\u09f2\3\2\2\2\u0a03"+
		"\u09fc\3\2\2\2\u0a04O\3\2\2\2\u0a05\u0a08\7\31\2\2\u0a06\u0a07\7W\2\2"+
		"\u0a07\u0a09\7d\2\2\u0a08\u0a06\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09\u0a0b"+
		"\3\2\2\2\u0a0a\u0a0c\t\20\2\2\u0a0b\u0a0a\3\2\2\2\u0a0b\u0a0c\3\2\2\2"+
		"\u0a0c\u0a0d\3\2\2\2\u0a0d\u0a0e\7\u0084\2\2\u0a0e\u0a15\5\u0196\u00cc"+
		"\2\u0a0f\u0a11\5\u0098M\2\u0a10\u0a12\7\u0151\2\2\u0a11\u0a10\3\2\2\2"+
		"\u0a11\u0a12\3\2\2\2\u0a12\u0a14\3\2\2\2\u0a13\u0a0f\3\2\2\2\u0a14\u0a17"+
		"\3\2\2\2\u0a15\u0a13\3\2\2\2\u0a15\u0a16\3\2\2\2\u0a16\u0a25\3\2\2\2\u0a17"+
		"\u0a15\3\2\2\2\u0a18\u0a19\7\u0087\2\2\u0a19\u0a1f\7\u0158\2\2\u0a1a\u0a1d"+
		"\5\u0098M\2\u0a1b\u0a1c\7\u014e\2\2\u0a1c\u0a1e\5\u0098M\2\u0a1d\u0a1b"+
		"\3\2\2\2\u0a1d\u0a1e\3\2\2\2\u0a1e\u0a20\3\2\2\2\u0a1f\u0a1a\3\2\2\2\u0a20"+
		"\u0a21\3\2\2\2\u0a21\u0a1f\3\2\2\2\u0a21\u0a22\3\2\2\2\u0a22\u0a23\3\2"+
		"\2\2\u0a23\u0a24\7\u0159\2\2\u0a24\u0a26\3\2\2\2\u0a25\u0a18\3\2\2\2\u0a25"+
		"\u0a26\3\2\2\2\u0a26\u0a27\3\2\2\2\u0a27\u0a28\7\6\2\2\u0a28\u0a29\5\u0198"+
		"\u00cd\2\u0a29Q\3\2\2\2\u0a2a\u0a30\7\31\2\2\u0a2b\u0a2d\t\21\2\2\u0a2c"+
		"\u0a2b\3\2\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e\u0a31\t\20"+
		"\2\2\u0a2f\u0a31\7\u0111\2\2\u0a30\u0a2c\3\2\2\2\u0a30\u0a2f\3\2\2\2\u0a30"+
		"\u0a31\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a36\7t\2\2\u0a33\u0a34\78\2"+
		"\2\u0a34\u0a35\7P\2\2\u0a35\u0a37\7\u00b0\2\2\u0a36\u0a33\3\2\2\2\u0a36"+
		"\u0a37\3\2\2\2\u0a37\u0a38\3\2\2\2\u0a38\u0a39\5\u0196\u00cc\2\u0a39\u0a4d"+
		"\7\u0158\2\2\u0a3a\u0a45\5T+\2\u0a3b\u0a45\5X-\2\u0a3c\u0a3d\7L\2\2\u0a3d"+
		"\u0a41\5\u0098M\2\u0a3e\u0a40\5V,\2\u0a3f\u0a3e\3\2\2\2\u0a40\u0a43\3"+
		"\2\2\2\u0a41\u0a3f\3\2\2\2\u0a41\u0a42\3\2\2\2\u0a42\u0a45\3\2\2\2\u0a43"+
		"\u0a41\3\2\2\2\u0a44\u0a3a\3\2\2\2\u0a44\u0a3b\3\2\2\2\u0a44\u0a3c\3\2"+
		"\2\2\u0a45\u0a47\3\2\2\2\u0a46\u0a48\7\u0151\2\2\u0a47\u0a46\3\2\2\2\u0a47"+
		"\u0a48\3\2\2\2\u0a48\u0a4a\3\2\2\2\u0a49\u0a44\3\2\2\2\u0a4a\u0a4b\3\2"+
		"\2\2\u0a4b\u0a49\3\2\2\2\u0a4b\u0a4c\3\2\2\2\u0a4c\u0a4e\3\2\2\2\u0a4d"+
		"\u0a49\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e\u0a4f\3\2\2\2\u0a4f\u0a5c\7\u0159"+
		"\2\2\u0a50\u0a51\7>\2\2\u0a51\u0a56\7\u0158\2\2\u0a52\u0a54\5\u0196\u00cc"+
		"\2\u0a53\u0a55\7\u0151\2\2\u0a54\u0a53\3\2\2\2\u0a54\u0a55\3\2\2\2\u0a55"+
		"\u0a57\3\2\2\2\u0a56\u0a52\3\2\2\2\u0a57\u0a58\3\2\2\2\u0a58\u0a56\3\2"+
		"\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5a\3\2\2\2\u0a5a\u0a5b\7\u0159\2\2\u0a5b"+
		"\u0a5d\3\2\2\2\u0a5c\u0a50\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a5e\3\2"+
		"\2\2\u0a5e\u0a5f\5b\62\2\u0a5f\u0a60\5d\63\2\u0a60\u0a61\5f\64\2\u0a61"+
		"\u0a90\3\2\2\2\u0a62\u0a68\7\31\2\2\u0a63\u0a65\t\21\2\2\u0a64\u0a63\3"+
		"\2\2\2\u0a64\u0a65\3\2\2\2\u0a65\u0a66\3\2\2\2\u0a66\u0a69\t\20\2\2\u0a67"+
		"\u0a69\7\u0111\2\2\u0a68\u0a64\3\2\2\2\u0a68\u0a67\3\2\2\2\u0a68\u0a69"+
		"\3\2\2\2\u0a69\u0a6a\3\2\2\2\u0a6a\u0a6e\7t\2\2\u0a6b\u0a6c\78\2\2\u0a6c"+
		"\u0a6d\7P\2\2\u0a6d\u0a6f\7\u00b0\2\2\u0a6e\u0a6b\3\2\2\2\u0a6e\u0a6f"+
		"\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a71\5\u0196\u00cc\2\u0a71\u0a72\7"+
		"R\2\2\u0a72\u0a89\5\u0098M\2\u0a73\u0a83\7\u0158\2\2\u0a74\u0a75\5\u0098"+
		"M\2\u0a75\u0a76\7\u0087\2\2\u0a76\u0a7a\7\u00e2\2\2\u0a77\u0a79\5Z.\2"+
		"\u0a78\u0a77\3\2\2\2\u0a79\u0a7c\3\2\2\2\u0a7a\u0a78\3\2\2\2\u0a7a\u0a7b"+
		"\3\2\2\2\u0a7b\u0a7f\3\2\2\2\u0a7c\u0a7a\3\2\2\2\u0a7d\u0a7f\5X-\2\u0a7e"+
		"\u0a74\3\2\2\2\u0a7e\u0a7d\3\2\2\2\u0a7f\u0a81\3\2\2\2\u0a80\u0a82\7\u0151"+
		"\2\2\u0a81\u0a80\3\2\2\2\u0a81\u0a82\3\2\2\2\u0a82\u0a84\3\2\2\2\u0a83"+
		"\u0a7e\3\2\2\2\u0a84\u0a85\3\2\2\2\u0a85\u0a83\3\2\2\2\u0a85\u0a86\3\2"+
		"\2\2\u0a86\u0a87\3\2\2\2\u0a87\u0a88\7\u0159\2\2\u0a88\u0a8a\3\2\2\2\u0a89"+
		"\u0a73\3\2\2\2\u0a89\u0a8a\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8c\5b"+
		"\62\2\u0a8c\u0a8d\5d\63\2\u0a8d\u0a8e\5f\64\2\u0a8e\u0a90\3\2\2\2\u0a8f"+
		"\u0a2a\3\2\2\2\u0a8f\u0a62\3\2\2\2\u0a90S\3\2\2\2\u0a91\u0a92\5\u0098"+
		"M\2\u0a92\u0a95\5\u00aaV\2\u0a93\u0a94\7\23\2\2\u0a94\u0a96\5\u0098M\2"+
		"\u0a95\u0a93\3\2\2\2\u0a95\u0a96\3\2\2\2\u0a96\u0a9a\3\2\2\2\u0a97\u0a99"+
		"\5Z.\2\u0a98\u0a97\3\2\2\2\u0a99\u0a9c\3\2\2\2\u0a9a\u0a98\3\2\2\2\u0a9a"+
		"\u0a9b\3\2\2\2\u0a9bU\3\2\2\2\u0a9c\u0a9a\3\2\2\2\u0a9d\u0a9e\t\22\2\2"+
		"\u0a9e\u0a9f\t\23\2\2\u0a9fW\3\2\2\2\u0aa0\u0aa1\7\26\2\2\u0aa1\u0aa3"+
		"\5\u0098M\2\u0aa2\u0aa0\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0b07\3\2\2"+
		"\2\u0aa4\u0b08\5\\/\2\u0aa5\u0aa6\7~\2\2\u0aa6\u0aab\7\u0158\2\2\u0aa7"+
		"\u0aa9\5\u0098M\2\u0aa8\u0aaa\7\u0151\2\2\u0aa9\u0aa8\3\2\2\2\u0aa9\u0aaa"+
		"\3\2\2\2\u0aaa\u0aac\3\2\2\2\u0aab\u0aa7\3\2\2\2\u0aac\u0aad\3\2\2\2\u0aad"+
		"\u0aab\3\2\2\2\u0aad\u0aae\3\2\2\2\u0aae\u0aaf\3\2\2\2\u0aaf\u0ab0\7\u0159"+
		"\2\2\u0ab0\u0ab1\5j\66\2\u0ab1\u0b08\3\2\2\2\u0ab2\u0ab3\7\\\2\2\u0ab3"+
		"\u0ab4\7I\2\2\u0ab4\u0ab9\7\u0158\2\2\u0ab5\u0ab7\5\u0098M\2\u0ab6\u0ab8"+
		"\7\u0151\2\2\u0ab7\u0ab6\3\2\2\2\u0ab7\u0ab8\3\2\2\2\u0ab8\u0aba\3\2\2"+
		"\2\u0ab9\u0ab5\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u0ab9\3\2\2\2\u0abb\u0abc"+
		"\3\2\2\2\u0abc\u0abd\3\2\2\2\u0abd\u0abe\7\u0159\2\2\u0abe\u0abf\5j\66"+
		"\2\u0abf\u0b08\3\2\2\2\u0ac0\u0ac3\7(\2\2\u0ac1\u0ac2\7\u0081\2\2\u0ac2"+
		"\u0ac4\5\u0098M\2\u0ac3\u0ac1\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0ac5"+
		"\3\2\2\2\u0ac5\u0ac6\7\u0158\2\2\u0ac6\u0ac7\5\u0098M\2\u0ac7\u0acc\7"+
		"\u0087\2\2\u0ac8\u0aca\5\u0098M\2\u0ac9\u0acb\7\u0151\2\2\u0aca\u0ac9"+
		"\3\2\2\2\u0aca\u0acb\3\2\2\2\u0acb\u0acd\3\2\2\2\u0acc\u0ac8\3\2\2\2\u0acd"+
		"\u0ace\3\2\2\2\u0ace\u0acc\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad0\3\2"+
		"\2\2\u0ad0\u0ad1\7\u0159\2\2\u0ad1\u0ad7\5j\66\2\u0ad2\u0ad3\7\u0086\2"+
		"\2\u0ad3\u0ad4\7\u0158\2\2\u0ad4\u0ad5\5\u0098M\2\u0ad5\u0ad6\7\u0159"+
		"\2\2\u0ad6\u0ad8\3\2\2\2\u0ad7\u0ad2\3\2\2\2\u0ad7\u0ad8\3\2\2\2\u0ad8"+
		"\u0b08\3\2\2\2\u0ad9\u0ada\7.\2\2\u0ada\u0adb\7I\2\2\u0adb\u0ae0\7\u0158"+
		"\2\2\u0adc\u0ade\5\u0098M\2\u0add\u0adf\7\u0151\2\2\u0ade\u0add\3\2\2"+
		"\2\u0ade\u0adf\3\2\2\2\u0adf\u0ae1\3\2\2\2\u0ae0\u0adc\3\2\2\2\u0ae1\u0ae2"+
		"\3\2\2\2\u0ae2\u0ae0\3\2\2\2\u0ae2\u0ae3\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4"+
		"\u0ae5\7\u0159\2\2\u0ae5\u0ae6\7c\2\2\u0ae6\u0af2\5\u0196\u00cc\2\u0ae7"+
		"\u0aec\7\u0158\2\2\u0ae8\u0aea\5\u0098M\2\u0ae9\u0aeb\7\u0151\2\2\u0aea"+
		"\u0ae9\3\2\2\2\u0aea\u0aeb\3\2\2\2\u0aeb\u0aed\3\2\2\2\u0aec\u0ae8\3\2"+
		"\2\2\u0aed\u0aee\3\2\2\2\u0aee\u0aec\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef"+
		"\u0af0\3\2\2\2\u0af0\u0af1\7\u0159\2\2\u0af1\u0af3\3\2\2\2\u0af2\u0ae7"+
		"\3\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u0b04\3\2\2\2\u0af4\u0af5\7\u00ce\2"+
		"\2\u0af5\u0afb\7/\2\2\u0af6\u0af7\7\u00ce\2\2\u0af7\u0afb\7\u00e5\2\2"+
		"\u0af8\u0af9\7\u00ce\2\2\u0af9\u0afb\7\u00fc\2\2\u0afa\u0af4\3\2\2\2\u0afa"+
		"\u0af6\3\2\2\2\u0afa\u0af8\3\2\2\2\u0afb\u0b03\3\2\2\2\u0afc\u0afd\7\u00df"+
		"\2\2\u0afd\u0afe\7 \2\2\u0afe\u0b03\5h\65\2\u0aff\u0b00\7\u00df\2\2\u0b00"+
		"\u0b01\7\177\2\2\u0b01\u0b03\5h\65\2\u0b02\u0afa\3\2\2\2\u0b02\u0afc\3"+
		"\2\2\2\u0b02\u0aff\3\2\2\2\u0b03\u0b06\3\2\2\2\u0b04\u0b02\3\2\2\2\u0b04"+
		"\u0b05\3\2\2\2\u0b05\u0b08\3\2\2\2\u0b06\u0b04\3\2\2\2\u0b07\u0aa4\3\2"+
		"\2\2\u0b07\u0aa5\3\2\2\2\u0b07\u0ab2\3\2\2\2\u0b07\u0ac0\3\2\2\2\u0b07"+
		"\u0ad9\3\2\2\2\u0b08\u0b0c\3\2\2\2\u0b09\u0b0d\7\36\2\2\u0b0a\u0b0b\7"+
		"P\2\2\u0b0b\u0b0d\7\36\2\2\u0b0c\u0b09\3\2\2\2\u0b0c\u0b0a\3\2\2\2\u0b0c"+
		"\u0b0d\3\2\2\2\u0b0d\u0b12\3\2\2\2\u0b0e\u0b0f\7?\2\2\u0b0f\u0b13\7\37"+
		"\2\2\u0b10\u0b11\7?\2\2\u0b11\u0b13\7:\2\2\u0b12\u0b0e\3\2\2\2\u0b12\u0b10"+
		"\3\2\2\2\u0b12\u0b13\3\2\2\2\u0b13Y\3\2\2\2\u0b14\u0b15\7\26\2\2\u0b15"+
		"\u0b17\5\u0098M\2\u0b16\u0b14\3\2\2\2\u0b16\u0b17\3\2\2\2\u0b17\u0b3b"+
		"\3\2\2\2\u0b18\u0b19\7P\2\2\u0b19\u0b3c\7Q\2\2\u0b1a\u0b3c\7Q\2\2\u0b1b"+
		"\u0b3c\5\\/\2\u0b1c\u0b1f\7\34\2\2\u0b1d\u0b20\5\u00aaV\2\u0b1e\u0b20"+
		"\5\u00fa~\2\u0b1f\u0b1d\3\2\2\2\u0b1f\u0b1e\3\2\2\2\u0b20\u0b3c\3\2\2"+
		"\2\u0b21\u0b22\7~\2\2\u0b22\u0b3c\5j\66\2\u0b23\u0b24\7\\\2\2\u0b24\u0b25"+
		"\7I\2\2\u0b25\u0b3c\5j\66\2\u0b26\u0b27\7c\2\2\u0b27\u0b28\5\u0196\u00cc"+
		"\2\u0b28\u0b2f\5\u0098M\2\u0b29\u0b2a\7\u00ce\2\2\u0b2a\u0b30\7/\2\2\u0b2b"+
		"\u0b2c\7\u00ce\2\2\u0b2c\u0b30\7\u00e5\2\2\u0b2d\u0b2e\7\u00ce\2\2\u0b2e"+
		"\u0b30\7\u00fc\2\2\u0b2f\u0b29\3\2\2\2\u0b2f\u0b2b\3\2\2\2\u0b2f\u0b2d"+
		"\3\2\2\2\u0b2f\u0b30\3\2\2\2\u0b30\u0b34\3\2\2\2\u0b31\u0b32\7\u00df\2"+
		"\2\u0b32\u0b33\7 \2\2\u0b33\u0b35\5h\65\2\u0b34\u0b31\3\2\2\2\u0b34\u0b35"+
		"\3\2\2\2\u0b35\u0b39\3\2\2\2\u0b36\u0b37\7\u00df\2\2\u0b37\u0b38\7\177"+
		"\2\2\u0b38\u0b3a\5h\65\2\u0b39\u0b36\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a"+
		"\u0b3c\3\2\2\2\u0b3b\u0b18\3\2\2\2\u0b3b\u0b1a\3\2\2\2\u0b3b\u0b1b\3\2"+
		"\2\2\u0b3b\u0b1c\3\2\2\2\u0b3b\u0b21\3\2\2\2\u0b3b\u0b23\3\2\2\2\u0b3b"+
		"\u0b26\3\2\2\2\u0b3c\u0b40\3\2\2\2\u0b3d\u0b41\7\36\2\2\u0b3e\u0b3f\7"+
		"P\2\2\u0b3f\u0b41\7\36\2\2\u0b40\u0b3d\3\2\2\2\u0b40\u0b3e\3\2\2\2\u0b40"+
		"\u0b41\3\2\2\2\u0b41\u0b46\3\2\2\2\u0b42\u0b43\7?\2\2\u0b43\u0b47\7\37"+
		"\2\2\u0b44\u0b45\7?\2\2\u0b45\u0b47\7:\2\2\u0b46\u0b42\3\2\2\2\u0b46\u0b44"+
		"\3\2\2\2\u0b46\u0b47\3\2\2\2\u0b47[\3\2\2\2\u0b48\u0b49\7\u0093\2\2\u0b49"+
		"\u0b4a\7\u0158\2\2\u0b4a\u0b4b\5\u0124\u0093\2\u0b4b\u0b4c\7\u0159\2\2"+
		"\u0b4c]\3\2\2\2\u0b4d\u0b56\7\u0158\2\2\u0b4e\u0b51\5\u0098M\2\u0b4f\u0b50"+
		"\7\u014e\2\2\u0b50\u0b52\5\u0098M\2\u0b51\u0b4f\3\2\2\2\u0b51\u0b52\3"+
		"\2\2\2\u0b52\u0b54\3\2\2\2\u0b53\u0b55\7\u0151\2\2\u0b54\u0b53\3\2\2\2"+
		"\u0b54\u0b55\3\2\2\2\u0b55\u0b57\3\2\2\2\u0b56\u0b4e\3\2\2\2\u0b57\u0b58"+
		"\3\2\2\2\u0b58\u0b56\3\2\2\2\u0b58\u0b59\3\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a"+
		"\u0b5b\7\u0159\2\2\u0b5b_\3\2\2\2\u0b5c\u0b5d\7\u0087\2\2\u0b5d\u0b5e"+
		"\5^\60\2\u0b5ea\3\2\2\2\u0b5f\u0b65\5`\61\2\u0b60\u0b61\7\u0087\2\2\u0b61"+
		"\u0b65\7S\2\2\u0b62\u0b63\7\u0088\2\2\u0b63\u0b65\7S\2\2\u0b64\u0b5f\3"+
		"\2\2\2\u0b64\u0b60\3\2\2\2\u0b64\u0b62\3\2\2\2\u0b64\u0b65\3\2\2\2\u0b65"+
		"c\3\2\2\2\u0b66\u0b67\7\u00df\2\2\u0b67\u0b6d\7\u009a\2\2\u0b68\u0b69"+
		"\7[\2\2\u0b69\u0b6e\7b\2\2\u0b6a\u0b6b\7 \2\2\u0b6b\u0b6e\7b\2\2\u0b6c"+
		"\u0b6e\7\u00ab\2\2\u0b6d\u0b68\3\2\2\2\u0b6d\u0b6a\3\2\2\2\u0b6d\u0b6c"+
		"\3\2\2\2\u0b6e\u0b70\3\2\2\2\u0b6f\u0b66\3\2\2\2\u0b6f\u0b70\3\2\2\2\u0b70"+
		"e\3\2\2\2\u0b71\u0b72\7\u0105\2\2\u0b72\u0b74\5\u0098M\2\u0b73\u0b71\3"+
		"\2\2\2\u0b73\u0b74\3\2\2\2\u0b74g\3\2\2\2\u0b75\u0b7c\7e\2\2\u0b76\u0b7c"+
		"\7\21\2\2\u0b77\u0b78\7\u00fa\2\2\u0b78\u0b7c\7Q\2\2\u0b79\u0b7a\7\u00fa"+
		"\2\2\u0b7a\u0b7c\7\34\2\2\u0b7b\u0b75\3\2\2\2\u0b7b\u0b76\3\2\2\2\u0b7b"+
		"\u0b77\3\2\2\2\u0b7b\u0b79\3\2\2\2\u0b7ci\3\2\2\2\u0b7d\u0b7f\5`\61\2"+
		"\u0b7e\u0b7d\3\2\2\2\u0b7e\u0b7f\3\2\2\2\u0b7f\u0b84\3\2\2\2\u0b80\u0b81"+
		"\7\u0081\2\2\u0b81\u0b82\7\u00bd\2\2\u0b82\u0b83\7\u0105\2\2\u0b83\u0b85"+
		"\5\u0098M\2\u0b84\u0b80\3\2\2\2\u0b84\u0b85\3\2\2\2\u0b85k\3\2\2\2\u0b86"+
		"\u0b87\7\u0158\2\2\u0b87\u0b8c\5n8\2\u0b88\u0b89\7\u0151\2\2\u0b89\u0b8b"+
		"\5n8\2\u0b8a\u0b88\3\2\2\2\u0b8b\u0b8e\3\2\2\2\u0b8c\u0b8a\3\2\2\2\u0b8c"+
		"\u0b8d\3\2\2\2\u0b8d\u0b8f\3\2\2\2\u0b8e\u0b8c\3\2\2\2\u0b8f\u0b90\7\u0159"+
		"\2\2\u0b90m\3\2\2\2\u0b91\u0b92\5\u0098M\2\u0b92\u0b93\5p9\2\u0b93o\3"+
		"\2\2\2\u0b94\u0b95\5\u00aaV\2\u0b95q\3\2\2\2\u0b96\u0b97\7\u0087\2\2\u0b97"+
		"\u0b98\7\u0158\2\2\u0b98\u0b9d\5t;\2\u0b99\u0b9a\7\u0151\2\2\u0b9a\u0b9c"+
		"\5t;\2\u0b9b\u0b99\3\2\2\2\u0b9c\u0b9f\3\2\2\2\u0b9d\u0b9b\3\2\2\2\u0b9d"+
		"\u0b9e\3\2\2\2\u0b9e\u0ba0\3\2\2\2\u0b9f\u0b9d\3\2\2\2\u0ba0\u0ba1\7\u0159"+
		"\2\2\u0ba1s\3\2\2\2\u0ba2\u0ba3\5\u0098M\2\u0ba3\u0ba4\7\u014e\2\2\u0ba4"+
		"\u0ba5\5\u00fe\u0080\2\u0ba5u\3\2\2\2\u0ba6\u0ba7\7\u0081\2\2\u0ba7\u0ba8"+
		"\5\u0098M\2\u0ba8w\3\2\2\2\u0ba9\u0baa\7\u0105\2\2\u0baa\u0bab\5z>\2\u0bab"+
		"y\3\2\2\2\u0bac\u0bad\5\u0098M\2\u0bad{\3\2\2\2\u0bae\u0bb3\5~@\2\u0baf"+
		"\u0bb3\5\u0084C\2\u0bb0\u0bb3\5\u008cG\2\u0bb1\u0bb3\5\u0092J\2\u0bb2"+
		"\u0bae\3\2\2\2\u0bb2\u0baf\3\2\2\2\u0bb2\u0bb0\3\2\2\2\u0bb2\u0bb1\3\2"+
		"\2\2\u0bb3}\3\2\2\2\u0bb4\u0bb5\7\u00e6\2\2\u0bb5\u0bb6\7\u008d\2\2\u0bb6"+
		"\u0bb7\7\u00ed\2\2\u0bb7\u0bb8\7\u0158\2\2\u0bb8\u0bb9\5\u01a8\u00d5\2"+
		"\u0bb9\u0bba\7\u0159\2\2\u0bba\u0bbb\7\u0158\2\2\u0bbb\u0bbc\5\u0080A"+
		"\2\u0bbc\u0bbd\7\u0159\2\2\u0bbd\177\3\2\2\2\u0bbe\u0bc3\5\u0082B\2\u0bbf"+
		"\u0bc0\7\u0151\2\2\u0bc0\u0bc2\5\u0082B\2\u0bc1\u0bbf\3\2\2\2\u0bc2\u0bc5"+
		"\3\2\2\2\u0bc3\u0bc1\3\2\2\2\u0bc3\u0bc4\3\2\2\2\u0bc4\u0081\3\2\2\2\u0bc5"+
		"\u0bc3\3\2\2\2\u0bc6\u0bc7\7\u00e6\2\2\u0bc7\u0bc8\5\u0094K\2\u0bc8\u0bc9"+
		"\7\u0115\2\2\u0bc9\u0bca\7\u00ca\2\2\u0bca\u0bd6\7\u0108\2\2\u0bcb\u0bcc"+
		"\7\u0158\2\2\u0bcc\u0bcd\5\u00fa~\2\u0bcd\u0bce\7\u0159\2\2\u0bce\u0bd7"+
		"\3\2\2\2\u0bcf\u0bd1\7\u0158\2\2\u0bd0\u0bcf\3\2\2\2\u0bd0\u0bd1\3\2\2"+
		"\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd4\7\u00d0\2\2\u0bd3\u0bd5\7\u0159\2\2"+
		"\u0bd4\u0bd3\3\2\2\2\u0bd4\u0bd5\3\2\2\2\u0bd5\u0bd7\3\2\2\2\u0bd6\u0bcb"+
		"\3\2\2\2\u0bd6\u0bd0\3\2\2\2\u0bd7\u0083\3\2\2\2\u0bd8\u0bd9\7\u00e6\2"+
		"\2\u0bd9\u0bda\7\u008d\2\2\u0bda\u0bdb\7\u00ba\2\2\u0bdb\u0bdc\7\u0158"+
		"\2\2\u0bdc\u0bdd\5\u01a8\u00d5\2\u0bdd\u0be3\7\u0159\2\2\u0bde\u0bdf\7"+
		"\u0158\2\2\u0bdf\u0be0\5\u0086D\2\u0be0\u0be1\7\u0159\2\2\u0be1\u0be4"+
		"\3\2\2\2\u0be2\u0be4\5\u008aF\2\u0be3\u0bde\3\2\2\2\u0be3\u0be2\3\2\2"+
		"\2\u0be4\u0085\3\2\2\2\u0be5\u0bea\5\u0088E\2\u0be6\u0be7\7\u0151\2\2"+
		"\u0be7\u0be9\5\u0088E\2\u0be8\u0be6\3\2\2\2\u0be9\u0bec\3\2\2\2\u0bea"+
		"\u0be8\3\2\2\2\u0bea\u0beb\3\2\2\2\u0beb\u0087\3\2\2\2\u0bec\u0bea\3\2"+
		"\2\2\u0bed\u0bee\7\u00e6\2\2\u0bee\u0bef\5\u0094K\2\u0bef\u0089\3\2\2"+
		"\2\u0bf0\u0bf1\7\u00e7\2\2\u0bf1\u0bf2\5\u00fe\u0080\2\u0bf2\u008b\3\2"+
		"\2\2\u0bf3\u0bf4\7\u00e6\2\2\u0bf4\u0bf5\7\u008d\2\2\u0bf5\u0bf6\7\u00cb"+
		"\2\2\u0bf6\u0bf7\7\u0158\2\2\u0bf7\u0bf8\5\u01a8\u00d5\2\u0bf8\u0bf9\7"+
		"\u0159\2\2\u0bf9\u0bfa\7\u0158\2\2\u0bfa\u0bfb\5\u008eH\2\u0bfb\u0bfc"+
		"\7\u0159\2\2\u0bfc\u008d\3\2\2\2\u0bfd\u0c02\5\u0090I\2\u0bfe\u0bff\7"+
		"\u0151\2\2\u0bff\u0c01\5\u0090I\2\u0c00\u0bfe\3\2\2\2\u0c01\u0c04\3\2"+
		"\2\2\u0c02\u0c00\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03\u008f\3\2\2\2\u0c04"+
		"\u0c02\3\2\2\2\u0c05\u0c06\7\u00e6\2\2\u0c06\u0c07\5\u0094K\2\u0c07\u0c09"+
		"\7\u0115\2\2\u0c08\u0c0a\7<\2\2\u0c09\u0c08\3\2\2\2\u0c09\u0c0a\3\2\2"+
		"\2\u0c0a\u0c0b\3\2\2\2\u0c0b\u0c0c\7\u0158\2\2\u0c0c\u0c0d\5\u01c0\u00e1"+
		"\2\u0c0d\u0c0e\7\u0159\2\2\u0c0e\u0091\3\2\2\2\u0c0f\u0c10\7\u00e6\2\2"+
		"\u0c10\u0c11\7\u008d\2\2\u0c11\u0c12\7\u0097\2\2\u0c12\u0c13\5l\67\2\u0c13"+
		"\u0093\3\2\2\2\u0c14\u0c15\5\u0098M\2\u0c15\u0095\3\2\2\2\u0c16\u0c17"+
		"\7\u00ab\2\2\u0c17\u0c18\7t\2\2\u0c18\u0c1a\5\u0196\u00cc\2\u0c19\u0c1b"+
		"\7\u00eb\2\2\u0c1a\u0c19\3\2\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0097\3\2\2"+
		"\2\u0c1c\u0c26\7\u016a\2\2\u0c1d\u0c26\7\u016b\2\2\u0c1e\u0c20\7\u0163"+
		"\2\2\u0c1f\u0c1e\3\2\2\2\u0c1f\u0c20\3\2\2\2\u0c20\u0c21\3\2\2\2\u0c21"+
		"\u0c23\5\u009aN\2\u0c22\u0c24\7\u0163\2\2\u0c23\u0c22\3\2\2\2\u0c23\u0c24"+
		"\3\2\2\2\u0c24\u0c26\3\2\2\2\u0c25\u0c1c\3\2\2\2\u0c25\u0c1d\3\2\2\2\u0c25"+
		"\u0c1f\3\2\2\2\u0c26\u0099\3\2\2\2\u0c27\u0c28\t\24\2\2\u0c28\u009b\3"+
		"\2\2\2\u0c29\u0c2c\5\u00d2j\2\u0c2a\u0c2c\5\u009eP\2\u0c2b\u0c29\3\2\2"+
		"\2\u0c2b\u0c2a\3\2\2\2\u0c2c\u009d\3\2\2\2\u0c2d\u0c31\7\u016d\2\2\u0c2e"+
		"\u0c31\5\u00a0Q\2\u0c2f\u0c31\5\u00a8U\2\u0c30\u0c2d\3\2\2\2\u0c30\u0c2e"+
		"\3\2\2\2\u0c30\u0c2f\3\2\2\2\u0c31\u009f\3\2\2\2\u0c32\u0c36\5\u00a4S"+
		"\2\u0c33\u0c36\5\u00a2R\2\u0c34\u0c36\5\u00a6T\2\u0c35\u0c32\3\2\2\2\u0c35"+
		"\u0c33\3\2\2\2\u0c35\u0c34\3\2\2\2\u0c36\u00a1\3\2\2\2\u0c37\u0c38\7\u013a"+
		"\2\2\u0c38\u0c39\7\u016d\2\2\u0c39\u00a3\3\2\2\2\u0c3a\u0c3b\7\u013c\2"+
		"\2\u0c3b\u0c3c\7\u016d\2\2\u0c3c\u00a5\3\2\2\2\u0c3d\u0c3e\7\u0139\2\2"+
		"\u0c3e\u0c3f\7\u016d\2\2\u0c3f\u00a7\3\2\2\2\u0c40\u0c41\t\25\2\2\u0c41"+
		"\u00a9\3\2\2\2\u0c42\u0c46\5\u00acW\2\u0c43\u0c44\7o\2\2\u0c44\u0c46\5"+
		"\u0098M\2\u0c45\u0c42\3\2\2\2\u0c45\u0c43\3\2\2\2\u0c46\u00ab\3\2\2\2"+
		"\u0c47\u0c57\5\u00b2Z\2\u0c48\u0c57\5\u00b6\\\2\u0c49\u0c57\5\u00b8]\2"+
		"\u0c4a\u0c57\5\u00ba^\2\u0c4b\u0c57\5\u00c2b\2\u0c4c\u0c57\5\u00c4c\2"+
		"\u0c4d\u0c57\5\u00c6d\2\u0c4e\u0c57\5\u00c8e\2\u0c4f\u0c57\5\u00b0Y\2"+
		"\u0c50\u0c57\5\u00aeX\2\u0c51\u0c57\7\u00ee\2\2\u0c52\u0c57\7z\2\2\u0c53"+
		"\u0c57\7\u013f\2\2\u0c54\u0c57\7\u0147\2\2\u0c55\u0c57\7\u0145\2\2\u0c56"+
		"\u0c47\3\2\2\2\u0c56\u0c48\3\2\2\2\u0c56\u0c49\3\2\2\2\u0c56\u0c4a\3\2"+
		"\2\2\u0c56\u0c4b\3\2\2\2\u0c56\u0c4c\3\2\2\2\u0c56\u0c4d\3\2\2\2\u0c56"+
		"\u0c4e\3\2\2\2\u0c56\u0c4f\3\2\2\2\u0c56\u0c50\3\2\2\2\u0c56\u0c51\3\2"+
		"\2\2\u0c56\u0c52\3\2\2\2\u0c56\u0c53\3\2\2\2\u0c56\u0c54\3\2\2\2\u0c56"+
		"\u0c55\3\2\2\2\u0c57\u00ad\3\2\2\2\u0c58\u0c59\7\u0130\2\2\u0c59\u00af"+
		"\3\2\2\2\u0c5a\u0c5b\7\u0144\2\2\u0c5b\u00b1\3\2\2\2\u0c5c\u0c5e\7\u0092"+
		"\2\2\u0c5d\u0c5f\5\u00b4[\2\u0c5e\u0c5d\3\2\2\2\u0c5e\u0c5f\3\2\2\2\u0c5f"+
		"\u0c75\3\2\2\2\u0c60\u0c62\7\u0135\2\2\u0c61\u0c63\5\u00b4[\2\u0c62\u0c61"+
		"\3\2\2\2\u0c62\u0c63\3\2\2\2\u0c63\u0c75\3\2\2\2\u0c64\u0c65\7\u0092\2"+
		"\2\u0c65\u0c67\7\u0118\2\2\u0c66\u0c68\5\u00b4[\2\u0c67\u0c66\3\2\2\2"+
		"\u0c67\u0c68\3\2\2\2\u0c68\u0c75\3\2\2\2\u0c69\u0c6a\7\u0135\2\2\u0c6a"+
		"\u0c6c\7\u0118\2\2\u0c6b\u0c6d\5\u00b4[\2\u0c6c\u0c6b\3\2\2\2\u0c6c\u0c6d"+
		"\3\2\2\2\u0c6d\u0c75\3\2\2\2\u0c6e\u0c70\7\u0136\2\2\u0c6f\u0c71\5\u00b4"+
		"[\2\u0c70\u0c6f\3\2\2\2\u0c70\u0c71\3\2\2\2\u0c71\u0c75\3\2\2\2\u0c72"+
		"\u0c75\7\u013e\2\2\u0c73\u0c75\7\u0146\2\2\u0c74\u0c5c\3\2\2\2\u0c74\u0c60"+
		"\3\2\2\2\u0c74\u0c64\3\2\2\2\u0c74\u0c69\3\2\2\2\u0c74\u0c6e\3\2\2\2\u0c74"+
		"\u0c72\3\2\2\2\u0c74\u0c73\3\2\2\2\u0c75\u00b3\3\2\2\2\u0c76\u0c77\7\u0158"+
		"\2\2\u0c77\u0c78\7\u0166\2\2\u0c78\u0c79\7\u0159\2\2\u0c79\u00b5\3\2\2"+
		"\2\u0c7a\u0c7b\7\u00d8\2\2\u0c7b\u0c7d\7\u0092\2\2\u0c7c\u0c7e\5\u00b4"+
		"[\2\u0c7d\u0c7c\3\2\2\2\u0c7d\u0c7e\3\2\2\2\u0c7e\u0c9e\3\2\2\2\u0c7f"+
		"\u0c80\7\u00d8\2\2\u0c80\u0c82\7\u0135\2\2\u0c81\u0c83\5\u00b4[\2\u0c82"+
		"\u0c81\3\2\2\2\u0c82\u0c83\3\2\2\2\u0c83\u0c9e\3\2\2\2\u0c84\u0c86\7\u0137"+
		"\2\2\u0c85\u0c87\5\u00b4[\2\u0c86\u0c85\3\2\2\2\u0c86\u0c87\3\2\2\2\u0c87"+
		"\u0c9e\3\2\2\2\u0c88\u0c89\7\u00d8\2\2\u0c89\u0c8a\7\u0092\2\2\u0c8a\u0c8c"+
		"\7\u0118\2\2\u0c8b\u0c8d\5\u00b4[\2\u0c8c\u0c8b\3\2\2\2\u0c8c\u0c8d\3"+
		"\2\2\2\u0c8d\u0c9e\3\2\2\2\u0c8e\u0c8f\7\u00d8\2\2\u0c8f\u0c90\7\u0135"+
		"\2\2\u0c90\u0c92\7\u0118\2\2\u0c91\u0c93\5\u00b4[\2\u0c92\u0c91\3\2\2"+
		"\2\u0c92\u0c93\3\2\2\2\u0c93\u0c9e\3\2\2\2\u0c94\u0c95\7\u0137\2\2\u0c95"+
		"\u0c97\7\u0118\2\2\u0c96\u0c98\5\u00b4[\2\u0c97\u0c96\3\2\2\2\u0c97\u0c98"+
		"\3\2\2\2\u0c98\u0c9e\3\2\2\2\u0c99\u0c9b\7\u0138\2\2\u0c9a\u0c9c\5\u00b4"+
		"[\2\u0c9b\u0c9a\3\2\2\2\u0c9b\u0c9c\3\2\2\2\u0c9c\u0c9e\3\2\2\2\u0c9d"+
		"\u0c7a\3\2\2\2\u0c9d\u0c7f\3\2\2\2\u0c9d\u0c84\3\2\2\2\u0c9d\u0c88\3\2"+
		"\2\2\u0c9d\u0c8e\3\2\2\2\u0c9d\u0c94\3\2\2\2\u0c9d\u0c99\3\2\2\2\u0c9e"+
		"\u00b7\3\2\2\2\u0c9f\u0ca1\7\u0142\2\2\u0ca0\u0ca2\5\u00b4[\2\u0ca1\u0ca0"+
		"\3\2\2\2\u0ca1\u0ca2\3\2\2\2\u0ca2\u0ca8\3\2\2\2\u0ca3\u0ca5\7\u0143\2"+
		"\2\u0ca4\u0ca6\5\u00b4[\2\u0ca5\u0ca4\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6"+
		"\u0ca8\3\2\2\2\u0ca7\u0c9f\3\2\2\2\u0ca7\u0ca3\3\2\2\2\u0ca8\u00b9\3\2"+
		"\2\2\u0ca9\u0cac\5\u00bc_\2\u0caa\u0cac\5\u00be`\2\u0cab\u0ca9\3\2\2\2"+
		"\u0cab\u0caa\3\2\2\2\u0cac\u00bb\3\2\2\2\u0cad\u0caf\7\u0133\2\2\u0cae"+
		"\u0cb0\5\u00c0a\2\u0caf\u0cae\3\2\2\2\u0caf\u0cb0\3\2\2\2\u0cb0\u0cc3"+
		"\3\2\2\2\u0cb1\u0cb3\7\u0134\2\2\u0cb2\u0cb4\5\u00c0a\2\u0cb3\u0cb2\3"+
		"\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cc3\3\2\2\2\u0cb5\u0cb7\7\u00a4\2\2"+
		"\u0cb6\u0cb8\5\u00c0a\2\u0cb7\u0cb6\3\2\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8"+
		"\u0cc3\3\2\2\2\u0cb9\u0cc3\7\u0124\2\2\u0cba\u0cc3\7\u0128\2\2\u0cbb\u0cc3"+
		"\7\u0125\2\2\u0cbc\u0cc3\7\u0129\2\2\u0cbd\u0cc3\7\u0126\2\2\u0cbe\u0cc3"+
		"\7\u012a\2\2\u0cbf\u0cc3\7\u012b\2\2\u0cc0\u0cc3\7\u0127\2\2\u0cc1\u0cc3"+
		"\7\u012c\2\2\u0cc2\u0cad\3\2\2\2\u0cc2\u0cb1\3\2\2\2\u0cc2\u0cb5\3\2\2"+
		"\2\u0cc2\u0cb9\3\2\2\2\u0cc2\u0cba\3\2\2\2\u0cc2\u0cbb\3\2\2\2\u0cc2\u0cbc"+
		"\3\2\2\2\u0cc2\u0cbd\3\2\2\2\u0cc2\u0cbe\3\2\2\2\u0cc2\u0cbf\3\2\2\2\u0cc2"+
		"\u0cc0\3\2\2\2\u0cc2\u0cc1\3\2\2\2\u0cc3\u00bd\3\2\2\2\u0cc4\u0cc6\7\u0131"+
		"\2\2\u0cc5\u0cc7\5\u00c0a\2\u0cc6\u0cc5\3\2\2\2\u0cc6\u0cc7\3\2\2\2\u0cc7"+
		"\u0ccf\3\2\2\2\u0cc8\u0ccf\7\u012d\2\2\u0cc9\u0ccf\7\u012f\2\2\u0cca\u0ccf"+
		"\7\u012e\2\2\u0ccb\u0ccf\7\u0132\2\2\u0ccc\u0ccd\7\u0132\2\2\u0ccd\u0ccf"+
		"\7\u00e9\2\2\u0cce\u0cc4\3\2\2\2\u0cce\u0cc8\3\2\2\2\u0cce\u0cc9\3\2\2"+
		"\2\u0cce\u0cca\3\2\2\2\u0cce\u0ccb\3\2\2\2\u0cce\u0ccc\3\2\2\2\u0ccf\u00bf"+
		"\3\2\2\2\u0cd0\u0cd1\7\u0158\2\2\u0cd1\u0cd2\7\u0166\2\2\u0cd2\u0cd9\7"+
		"\u0159\2\2\u0cd3\u0cd4\7\u0158\2\2\u0cd4\u0cd5\7\u0166\2\2\u0cd5\u0cd6"+
		"\7\u0151\2\2\u0cd6\u0cd7\7\u0166\2\2\u0cd7\u0cd9\7\u0159\2\2\u0cd8\u0cd0"+
		"\3\2\2\2\u0cd8\u0cd3\3\2\2\2\u0cd9\u00c1\3\2\2\2\u0cda\u0cdb\t\26\2\2"+
		"\u0cdb\u00c3\3\2\2\2\u0cdc\u0cee\7\u0139\2\2\u0cdd\u0cee\7\u013a\2\2\u0cde"+
		"\u0cdf\7\u013a\2\2\u0cdf\u0ce0\7\u0087\2\2\u0ce0\u0ce1\7\u013a\2\2\u0ce1"+
		"\u0cee\7\u011f\2\2\u0ce2\u0cee\7\u013b\2\2\u0ce3\u0cee\7\u013c\2\2\u0ce4"+
		"\u0ce5\7\u013c\2\2\u0ce5\u0ce6\7\u0087\2\2\u0ce6\u0ce7\7\u013a\2\2\u0ce7"+
		"\u0cee\7\u011f\2\2\u0ce8\u0ce9\7\u013c\2\2\u0ce9\u0cea\7\u0088\2\2\u0cea"+
		"\u0ceb\7\u013a\2\2\u0ceb\u0cee\7\u011f\2\2\u0cec\u0cee\7\u013d\2\2\u0ced"+
		"\u0cdc\3\2\2\2\u0ced\u0cdd\3\2\2\2\u0ced\u0cde\3\2\2\2\u0ced\u0ce2\3\2"+
		"\2\2\u0ced\u0ce3\3\2\2\2\u0ced\u0ce4\3\2\2\2\u0ced\u0ce8\3\2\2\2\u0ced"+
		"\u0cec\3\2\2\2\u0cee\u00c5\3\2\2\2\u0cef\u0cf1\7\u0122\2\2\u0cf0\u0cf2"+
		"\5\u00b4[\2\u0cf1\u0cf0\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cfd\3\2\2"+
		"\2\u0cf3\u0cf5\7\u0123\2\2\u0cf4\u0cf6\5\u00b4[\2\u0cf5\u0cf4\3\2\2\2"+
		"\u0cf5\u0cf6\3\2\2\2\u0cf6\u0cfd\3\2\2\2\u0cf7\u0cf8\7\u0122\2\2\u0cf8"+
		"\u0cfa\7\u0118\2\2\u0cf9\u0cfb\5\u00b4[\2\u0cfa\u0cf9\3\2\2\2\u0cfa\u0cfb"+
		"\3\2\2\2\u0cfb\u0cfd\3\2\2\2\u0cfc\u0cef\3\2\2\2\u0cfc\u0cf3\3\2\2\2\u0cfc"+
		"\u0cf7\3\2\2\2\u0cfd\u00c7\3\2\2\2\u0cfe\u0d00\7\u0140\2\2\u0cff\u0d01"+
		"\5\u00b4[\2\u0d00\u0cff\3\2\2\2\u0d00\u0d01\3\2\2\2\u0d01\u0d0c\3\2\2"+
		"\2\u0d02\u0d03\7\u0140\2\2\u0d03\u0d05\7\u0118\2\2\u0d04\u0d06\5\u00b4"+
		"[\2\u0d05\u0d04\3\2\2\2\u0d05\u0d06\3\2\2\2\u0d06\u0d0c\3\2\2\2\u0d07"+
		"\u0d09\7\u0141\2\2\u0d08\u0d0a\5\u00b4[\2\u0d09\u0d08\3\2\2\2\u0d09\u0d0a"+
		"\3\2\2\2\u0d0a\u0d0c\3\2\2\2\u0d0b\u0cfe\3\2\2\2\u0d0b\u0d02\3\2\2\2\u0d0b"+
		"\u0d07\3\2\2\2\u0d0c\u00c9\3\2\2\2\u0d0d\u0d10\5\u00ccg\2\u0d0e\u0d10"+
		"\5\u00ceh\2\u0d0f\u0d0d\3\2\2\2\u0d0f\u0d0e\3\2\2\2\u0d10\u00cb\3\2\2"+
		"\2\u0d11\u0d12\7\u0158\2\2\u0d12\u0d13\5\u00fa~\2\u0d13\u0d14\7\u0159"+
		"\2\2\u0d14\u00cd\3\2\2\2\u0d15\u0d1e\5\u00d0i\2\u0d16\u0d1e\5\u01a4\u00d3"+
		"\2\u0d17\u0d1e\5\u00d6l\2\u0d18\u0d1e\5\u01aa\u00d6\2\u0d19\u0d1e\5\u00e2"+
		"r\2\u0d1a\u0d1e\5\u00f4{\2\u0d1b\u0d1e\5\u01de\u00f0\2\u0d1c\u0d1e\7Q"+
		"\2\2\u0d1d\u0d15\3\2\2\2\u0d1d\u0d16\3\2\2\2\u0d1d\u0d17\3\2\2\2\u0d1d"+
		"\u0d18\3\2\2\2\u0d1d\u0d19\3\2\2\2\u0d1d\u0d1a\3\2\2\2\u0d1d\u0d1b\3\2"+
		"\2\2\u0d1d\u0d1c\3\2\2\2\u0d1e\u00cf\3\2\2\2\u0d1f\u0d20\5\u009cO\2\u0d20"+
		"\u00d1\3\2\2\2\u0d21\u0d22\t\27\2\2\u0d22\u00d3\3\2\2\2\u0d23\u0d25\5"+
		"\u0108\u0085\2\u0d24\u0d23\3\2\2\2\u0d24\u0d25\3\2\2\2\u0d25\u0d26\3\2"+
		"\2\2\u0d26\u0d27\5\u00d2j\2\u0d27\u00d5\3\2\2\2\u0d28\u0d29\5\u00d8m\2"+
		"\u0d29\u00d7\3\2\2\2\u0d2a\u0d2b\7\u009e\2\2\u0d2b\u0d2c\7\u0158\2\2\u0d2c"+
		"\u0d2d\7\u015c\2\2\u0d2d\u0d33\7\u0159\2\2\u0d2e\u0d30\5\u00dan\2\u0d2f"+
		"\u0d31\5\u00dep\2\u0d30\u0d2f\3\2\2\2\u0d30\u0d31\3\2\2\2\u0d31\u0d33"+
		"\3\2\2\2\u0d32\u0d2a\3\2\2\2\u0d32\u0d2e\3\2\2\2\u0d33\u00d9\3\2\2\2\u0d34"+
		"\u0d35\5\u00dco\2\u0d35\u0d37\7\u0158\2\2\u0d36\u0d38\5\u01a2\u00d2\2"+
		"\u0d37\u0d36\3\2\2\2\u0d37\u0d38\3\2\2\2\u0d38\u0d39\3\2\2\2\u0d39\u0d3a"+
		"\5\u00fa~\2\u0d3a\u0d3b\7\u0159\2\2\u0d3b\u00db\3\2\2\2\u0d3c\u0d3d\t"+
		"\30\2\2\u0d3d\u00dd\3\2\2\2\u0d3e\u0d3f\7\u00b5\2\2\u0d3f\u0d40\7\u0158"+
		"\2\2\u0d40\u0d41\7\u0086\2\2\u0d41\u0d42\5\u016c\u00b7\2\u0d42\u0d43\7"+
		"\u0159\2\2\u0d43\u00df\3\2\2\2\u0d44\u0d45\7\u00b9\2\2\u0d45\u0d46\7\u0158"+
		"\2\2\u0d46\u0d47\5\u01a8\u00d5\2\u0d47\u0d48\7\u0159\2\2\u0d48\u00e1\3"+
		"\2\2\2\u0d49\u0d4a\5\u00e6t\2\u0d4a\u00e3\3\2\2\2\u0d4b\u0d4c\7\u00db"+
		"\2\2\u0d4c\u0d4d\7\u0158\2\2\u0d4d\u0d4e\5\u00fe\u0080\2\u0d4e\u0d4f\7"+
		"\u0151\2\2\u0d4f\u0d50\5\u0124\u0093\2\u0d50\u0d51\7\u0159\2\2\u0d51\u0d5e"+
		"\3\2\2\2\u0d52\u0d53\7\u0096\2\2\u0d53\u0d54\7\u0158\2\2\u0d54\u0d57\5"+
		"\u00fe\u0080\2\u0d55\u0d56\7\u0151\2\2\u0d56\u0d58\5\u0124\u0093\2\u0d57"+
		"\u0d55\3\2\2\2\u0d58\u0d59\3\2\2\2\u0d59\u0d57\3\2\2\2\u0d59\u0d5a\3\2"+
		"\2\2\u0d5a\u0d5b\3\2\2\2\u0d5b\u0d5c\7\u0159\2\2\u0d5c\u0d5e\3\2\2\2\u0d5d"+
		"\u0d4b\3\2\2\2\u0d5d\u0d52\3\2\2\2\u0d5e\u00e5\3\2\2\2\u0d5f\u0d62\5\u00e8"+
		"u\2\u0d60\u0d62\5\u00eav\2\u0d61\u0d5f\3\2\2\2\u0d61\u0d60\3\2\2\2\u0d62"+
		"\u00e7\3\2\2\2\u0d63\u0d64\7\20\2\2\u0d64\u0d66\5\u0124\u0093\2\u0d65"+
		"\u0d67\5\u00ecw\2\u0d66\u0d65\3\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u0d66"+
		"\3\2\2\2\u0d68\u0d69\3\2\2\2\u0d69\u0d6b\3\2\2\2\u0d6a\u0d6c\5\u00f0y"+
		"\2\u0d6b\u0d6a\3\2\2\2\u0d6b\u0d6c\3\2\2\2\u0d6c\u0d6d\3\2\2\2\u0d6d\u0d6e"+
		"\7%\2\2\u0d6e\u00e9\3\2\2\2\u0d6f\u0d71\7\20\2\2\u0d70\u0d72\5\u00eex"+
		"\2\u0d71\u0d70\3\2\2\2\u0d72\u0d73\3\2\2\2\u0d73\u0d71\3\2\2\2\u0d73\u0d74"+
		"\3\2\2\2\u0d74\u0d76\3\2\2\2\u0d75\u0d77\5\u00f0y\2\u0d76\u0d75\3\2\2"+
		"\2\u0d76\u0d77\3\2\2\2\u0d77\u0d78\3\2\2\2\u0d78\u0d79\7%\2\2\u0d79\u00eb"+
		"\3\2\2\2\u0d7a\u0d7b\7\u0085\2\2\u0d7b\u0d7c\5\u016c\u00b7\2\u0d7c\u0d7d"+
		"\7w\2\2\u0d7d\u0d7e\5\u00f2z\2\u0d7e\u00ed\3\2\2\2\u0d7f\u0d80\7\u0085"+
		"\2\2\u0d80\u0d81\5\u016c\u00b7\2\u0d81\u0d82\7w\2\2\u0d82\u0d83\5\u00f2"+
		"z\2\u0d83\u00ef\3\2\2\2\u0d84\u0d85\7&\2\2\u0d85\u0d86\5\u00f2z\2\u0d86"+
		"\u00f1\3\2\2\2\u0d87\u0d8a\5\u00fa~\2\u0d88\u0d8a\7Q\2\2\u0d89\u0d87\3"+
		"\2\2\2\u0d89\u0d88\3\2\2\2\u0d8a\u00f3\3\2\2\2\u0d8b\u0d8c\7\22\2\2\u0d8c"+
		"\u0d8d\7\u0158\2\2\u0d8d\u0d8e\5\u00f6|\2\u0d8e\u0d8f\7\6\2\2\u0d8f\u0d90"+
		"\5\u00f8}\2\u0d90\u0d91\7\u0159\2\2\u0d91\u00f5\3\2\2\2\u0d92\u0d93\5"+
		"\u00fa~\2\u0d93\u00f7\3\2\2\2\u0d94\u0d95\5\u00aaV\2\u0d95\u00f9\3\2\2"+
		"\2\u0d96\u0d9a\5\u00fc\177\2\u0d97\u0d9a\5\u0138\u009d\2\u0d98\u0d9a\5"+
		"\u0124\u0093\2\u0d99\u0d96\3\2\2\2\u0d99\u0d97\3\2\2\2\u0d99\u0d98\3\2"+
		"\2\2\u0d9a\u00fb\3\2\2\2\u0d9b\u0d9f\5\u00fe\u0080\2\u0d9c\u0d9f\5\u0114"+
		"\u008b\2\u0d9d\u0d9f\7Q\2\2\u0d9e\u0d9b\3\2\2\2\u0d9e\u0d9c\3\2\2\2\u0d9e"+
		"\u0d9d\3\2\2\2\u0d9f\u00fd\3\2\2\2\u0da0\u0da5\5\u0100\u0081\2\u0da1\u0da2"+
		"\t\31\2\2\u0da2\u0da4\5\u0100\u0081\2\u0da3\u0da1\3\2\2\2\u0da4\u0da7"+
		"\3\2\2\2\u0da5\u0da3\3\2\2\2\u0da5\u0da6\3\2\2\2\u0da6\u00ff\3\2\2\2\u0da7"+
		"\u0da5\3\2\2\2\u0da8\u0dad\5\u0102\u0082\2\u0da9\u0daa\t\32\2\2\u0daa"+
		"\u0dac\5\u0102\u0082\2\u0dab\u0da9\3\2\2\2\u0dac\u0daf\3\2\2\2\u0dad\u0dab"+
		"\3\2\2\2\u0dad\u0dae\3\2\2\2\u0dae\u0101\3\2\2\2\u0daf\u0dad\3\2\2\2\u0db0"+
		"\u0db2\5\u0108\u0085\2\u0db1\u0db0\3\2\2\2\u0db1\u0db2\3\2\2\2\u0db2\u0db3"+
		"\3\2\2\2\u0db3\u0db4\5\u0106\u0084\2\u0db4\u0103\3\2\2\2\u0db5\u0db6\7"+
		"\u0158\2\2\u0db6\u0dbb\5\u00fe\u0080\2\u0db7\u0db8\7\u0151\2\2\u0db8\u0dba"+
		"\5\u00fe\u0080\2\u0db9\u0db7\3\2\2\2\u0dba\u0dbd\3\2\2\2\u0dbb\u0db9\3"+
		"\2\2\2\u0dbb\u0dbc\3\2\2\2\u0dbc\u0dbe\3\2\2\2\u0dbd\u0dbb\3\2\2\2\u0dbe"+
		"\u0dbf\7\u0159\2\2\u0dbf\u0105\3\2\2\2\u0dc0\u0dc5\5\u00caf\2\u0dc1\u0dc2"+
		"\7\u014c\2\2\u0dc2\u0dc4\5\u00f8}\2\u0dc3\u0dc1\3\2\2\2\u0dc4\u0dc7\3"+
		"\2\2\2\u0dc5\u0dc3\3\2\2\2\u0dc5\u0dc6\3\2\2\2\u0dc6\u0dca\3\2\2\2\u0dc7"+
		"\u0dc5\3\2\2\2\u0dc8\u0dca\5\u010a\u0086\2\u0dc9\u0dc0\3\2\2\2\u0dc9\u0dc8"+
		"\3\2\2\2\u0dca\u0107\3\2\2\2\u0dcb\u0dcc\t\31\2\2\u0dcc\u0109\3\2\2\2"+
		"\u0dcd\u0dce\5\u010c\u0087\2\u0dce\u010b\3\2\2\2\u0dcf\u0dd0\7\u00b3\2"+
		"\2\u0dd0\u0dd1\7\u0158\2\2\u0dd1\u0dd2\5\u010e\u0088\2\u0dd2\u0dd3\7\62"+
		"\2\2\u0dd3\u0dd4\5\u0112\u008a\2\u0dd4\u0dd5\7\u0159\2\2\u0dd5\u010d\3"+
		"\2\2\2\u0dd6\u0dda\5\u01d8\u00ed\2\u0dd7\u0dda\5\u0110\u0089\2\u0dd8\u0dda"+
		"\5\u01dc\u00ef\2\u0dd9\u0dd6\3\2\2\2\u0dd9\u0dd7\3\2\2\2\u0dd9\u0dd8\3"+
		"\2\2\2\u0dda\u010f\3\2\2\2\u0ddb\u0ddc\t\33\2\2\u0ddc\u0111\3\2\2\2\u0ddd"+
		"\u0de0\5\u01a4\u00d3\2\u0dde\u0de0\5\u00a0Q\2\u0ddf\u0ddd\3\2\2\2\u0ddf"+
		"\u0dde\3\2\2\2\u0de0\u0113\3\2\2\2\u0de1\u0de2\5\u0116\u008c\2\u0de2\u0115"+
		"\3\2\2\2\u0de3\u0de8\5\u0118\u008d\2\u0de4\u0de5\7\u0152\2\2\u0de5\u0de7"+
		"\5\u0118\u008d\2\u0de6\u0de4\3\2\2\2\u0de7\u0dea\3\2\2\2\u0de8\u0de6\3"+
		"\2\2\2\u0de8\u0de9\3\2\2\2\u0de9\u0117\3\2\2\2\u0dea\u0de8\3\2\2\2\u0deb"+
		"\u0dec\5\u011a\u008e\2\u0dec\u0119\3\2\2\2\u0ded\u0df0\5\u00caf\2\u0dee"+
		"\u0df0\5\u011c\u008f\2\u0def\u0ded\3\2\2\2\u0def\u0dee\3\2\2\2\u0df0\u011b"+
		"\3\2\2\2\u0df1\u0df2\5\u011e\u0090\2\u0df2\u011d\3\2\2\2\u0df3\u0df4\7"+
		"\u010c\2\2\u0df4\u0df5\7\u0158\2\2\u0df5\u0df6\5\u0120\u0091\2\u0df6\u0df7"+
		"\7\u0159\2\2\u0df7\u011f\3\2\2\2\u0df8\u0dfa\5\u0122\u0092\2\u0df9\u0df8"+
		"\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa\u0dfc\3\2\2\2\u0dfb\u0dfd\5\u0116\u008c"+
		"\2\u0dfc\u0dfb\3\2\2\2\u0dfc\u0dfd\3\2\2\2\u0dfd\u0dfe\3\2\2\2\u0dfe\u0e00"+
		"\7\62\2\2\u0dff\u0df9\3\2\2\2\u0dff\u0e00\3\2\2\2\u0e00\u0e01\3\2\2\2"+
		"\u0e01\u0e07\5\u0116\u008c\2\u0e02\u0e03\5\u0116\u008c\2\u0e03\u0e04\7"+
		"\u0151\2\2\u0e04\u0e05\5\u0116\u008c\2\u0e05\u0e07\3\2\2\2\u0e06\u0dff"+
		"\3\2\2\2\u0e06\u0e02\3\2\2\2\u0e07\u0121\3\2\2\2\u0e08\u0e09\t\34\2\2"+
		"\u0e09\u0123\3\2\2\2\u0e0a\u0e0b\5\u0126\u0094\2\u0e0b\u0125\3\2\2\2\u0e0c"+
		"\u0e11\5\u0128\u0095\2\u0e0d\u0e0e\7W\2\2\u0e0e\u0e10\5\u0126\u0094\2"+
		"\u0e0f\u0e0d\3\2\2\2\u0e10\u0e13\3\2\2\2\u0e11\u0e0f\3\2\2\2\u0e11\u0e12"+
		"\3\2\2\2\u0e12\u0127\3\2\2\2\u0e13\u0e11\3\2\2\2\u0e14\u0e19\5\u012a\u0096"+
		"\2\u0e15\u0e16\7\t\2\2\u0e16\u0e18\5\u0128\u0095\2\u0e17\u0e15\3\2\2\2"+
		"\u0e18\u0e1b\3\2\2\2\u0e19\u0e17\3\2\2\2\u0e19\u0e1a\3\2\2\2\u0e1a\u0129"+
		"\3\2\2\2\u0e1b\u0e19\3\2\2\2\u0e1c\u0e20\5\u012c\u0097\2\u0e1d\u0e1e\7"+
		"P\2\2\u0e1e\u0e20\5\u012c\u0097\2\u0e1f\u0e1c\3\2\2\2\u0e1f\u0e1d\3\2"+
		"\2\2\u0e20\u012b\3\2\2\2\u0e21\u0e23\5\u0132\u009a\2\u0e22\u0e24\5\u012e"+
		"\u0098\2\u0e23\u0e22\3\2\2\2\u0e23\u0e24\3\2\2\2\u0e24\u012d\3\2\2\2\u0e25"+
		"\u0e27\7G\2\2\u0e26\u0e28\7P\2\2\u0e27\u0e26\3\2\2\2\u0e27\u0e28\3\2\2"+
		"\2\u0e28\u0e29\3\2\2\2\u0e29\u0e2a\5\u0130\u0099\2\u0e2a\u012f\3\2\2\2"+
		"\u0e2b\u0e2c\t\25\2\2\u0e2c\u0131\3\2\2\2\u0e2d\u0e30\5\u01b2\u00da\2"+
		"\u0e2e\u0e30\5\u0134\u009b\2\u0e2f\u0e2d\3\2\2\2\u0e2f\u0e2e\3\2\2\2\u0e30"+
		"\u0133\3\2\2\2\u0e31\u0e34\5\u0136\u009c\2\u0e32\u0e34\5\u00ceh\2\u0e33"+
		"\u0e31\3\2\2\2\u0e33\u0e32\3\2\2\2\u0e34\u0135\3\2\2\2\u0e35\u0e36\7\u0158"+
		"\2\2\u0e36\u0e37\5\u0124\u0093\2\u0e37\u0e38\7\u0159\2\2\u0e38\u0137\3"+
		"\2\2\2\u0e39\u0e3c\5\u013a\u009e\2\u0e3a\u0e3c\5\u013c\u009f\2\u0e3b\u0e39"+
		"\3\2\2\2\u0e3b\u0e3a\3\2\2\2\u0e3c\u0139\3\2\2\2\u0e3d\u0e3e\5\u00ceh"+
		"\2\u0e3e\u013b\3\2\2\2\u0e3f\u0e40\7Q\2\2\u0e40\u013d\3\2\2\2\u0e41\u0e44"+
		"\5\u013a\u009e\2\u0e42\u0e44\5\u0140\u00a1\2\u0e43\u0e41\3\2\2\2\u0e43"+
		"\u0e42\3\2\2\2\u0e44\u013f\3\2\2\2\u0e45\u0e48\5\u00fc\177\2\u0e46\u0e48"+
		"\5\u0134\u009b\2\u0e47\u0e45\3\2\2\2\u0e47\u0e46\3\2\2\2\u0e48\u0141\3"+
		"\2\2\2\u0e49\u0e4b\5\u0144\u00a3\2\u0e4a\u0e4c\5\u016a\u00b6\2\u0e4b\u0e4a"+
		"\3\2\2\2\u0e4b\u0e4c\3\2\2\2\u0e4c\u0e4e\3\2\2\2\u0e4d\u0e4f\5\u016e\u00b8"+
		"\2\u0e4e\u0e4d\3\2\2\2\u0e4e\u0e4f\3\2\2\2\u0e4f\u0e51\3\2\2\2\u0e50\u0e52"+
		"\5\u017e\u00c0\2\u0e51\u0e50\3\2\2\2\u0e51\u0e52\3\2\2\2\u0e52\u0e54\3"+
		"\2\2\2\u0e53\u0e55\5\u01e6\u00f4\2\u0e54\u0e53\3\2\2\2\u0e54\u0e55\3\2"+
		"\2\2\u0e55\u0e57\3\2\2\2\u0e56\u0e58\5\u01f0\u00f9\2\u0e57\u0e56\3\2\2"+
		"\2\u0e57\u0e58\3\2\2\2\u0e58\u0143\3\2\2\2\u0e59\u0e5a\7\62\2\2\u0e5a"+
		"\u0e5b\5\u0146\u00a4\2\u0e5b\u0145\3\2\2\2\u0e5c\u0e66\5\u0148\u00a5\2"+
		"\u0e5d\u0e60\7\u0158\2\2\u0e5e\u0e61\n\35\2\2\u0e5f\u0e61\5\u0146\u00a4"+
		"\2\u0e60\u0e5e\3\2\2\2\u0e60\u0e5f\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62\u0e60"+
		"\3\2\2\2\u0e62\u0e63\3\2\2\2\u0e63\u0e64\3\2\2\2\u0e64\u0e66\7\u0159\2"+
		"\2\u0e65\u0e5c\3\2\2\2\u0e65\u0e5d\3\2\2\2\u0e66\u0147\3\2\2\2\u0e67\u0e6c"+
		"\5\u014a\u00a6\2\u0e68\u0e69\7\u0151\2\2\u0e69\u0e6b\5\u014a\u00a6\2\u0e6a"+
		"\u0e68\3\2\2\2\u0e6b\u0e6e\3\2\2\2\u0e6c\u0e6a\3\2\2\2\u0e6c\u0e6d\3\2"+
		"\2\2\u0e6d\u0149\3\2\2\2\u0e6e\u0e6c\3\2\2\2\u0e6f\u0e72\5\u014c\u00a7"+
		"\2\u0e70\u0e72\5\u0164\u00b3\2\u0e71\u0e6f\3\2\2\2\u0e71\u0e70\3\2\2\2"+
		"\u0e72\u014b\3\2\2\2\u0e73\u0e75\5\u0164\u00b3\2\u0e74\u0e76\5\u014e\u00a8"+
		"\2\u0e75\u0e74\3\2\2\2\u0e76\u0e77\3\2\2\2\u0e77\u0e75\3\2\2\2\u0e77\u0e78"+
		"\3\2\2\2\u0e78\u014d\3\2\2\2\u0e79\u0e7a\7\32\2\2\u0e7a\u0e7b\7H\2\2\u0e7b"+
		"\u0e8d\5\u0164\u00b3\2\u0e7c\u0e7e\5\u0158\u00ad\2\u0e7d\u0e7c\3\2\2\2"+
		"\u0e7d\u0e7e\3\2\2\2\u0e7e\u0e7f\3\2\2\2\u0e7f\u0e80\7H\2\2\u0e80\u0e81"+
		"\5\u0164\u00b3\2\u0e81\u0e82\5\u015e\u00b0\2\u0e82\u0e8d\3\2\2\2\u0e83"+
		"\u0e85\7O\2\2\u0e84\u0e86\5\u0158\u00ad\2\u0e85\u0e84\3\2\2\2\u0e85\u0e86"+
		"\3\2\2\2\u0e86\u0e87\3\2\2\2\u0e87\u0e88\7H\2\2\u0e88\u0e8d\5\u0164\u00b3"+
		"\2\u0e89\u0e8a\7}\2\2\u0e8a\u0e8b\7H\2\2\u0e8b\u0e8d\5\u0164\u00b3\2\u0e8c"+
		"\u0e79\3\2\2\2\u0e8c\u0e7d\3\2\2\2\u0e8c\u0e83\3\2\2\2\u0e8c\u0e89\3\2"+
		"\2\2\u0e8d\u014f\3\2\2\2\u0e8e\u0e8f\7\32\2\2\u0e8f\u0e90\7H\2\2\u0e90"+
		"\u0e91\5\u0164\u00b3\2\u0e91\u0151\3\2\2\2\u0e92\u0e94\5\u0158\u00ad\2"+
		"\u0e93\u0e92\3\2\2\2\u0e93\u0e94\3\2\2\2\u0e94\u0e95\3\2\2\2\u0e95\u0e96"+
		"\7H\2\2\u0e96\u0e97\5\u0164\u00b3\2\u0e97\u0e98\5\u015e\u00b0\2\u0e98"+
		"\u0153\3\2\2\2\u0e99\u0e9b\7O\2\2\u0e9a\u0e9c\5\u0158\u00ad\2\u0e9b\u0e9a"+
		"\3\2\2\2\u0e9b\u0e9c\3\2\2\2\u0e9c\u0e9d\3\2\2\2\u0e9d\u0e9e\7H\2\2\u0e9e"+
		"\u0e9f\5\u0164\u00b3\2\u0e9f\u0155\3\2\2\2\u0ea0\u0ea1\7}\2\2\u0ea1\u0ea2"+
		"\7H\2\2\u0ea2\u0ea3\5\u0164\u00b3\2\u0ea3\u0157\3\2\2\2\u0ea4\u0ea7\7"+
		"A\2\2\u0ea5\u0ea7\5\u015a\u00ae\2\u0ea6\u0ea4\3\2\2\2\u0ea6\u0ea5\3\2"+
		"\2\2\u0ea7\u0159\3\2\2\2\u0ea8\u0eaa\5\u015c\u00af\2\u0ea9\u0eab\7T\2"+
		"\2\u0eaa\u0ea9\3\2\2\2\u0eaa\u0eab\3\2\2\2\u0eab\u015b\3\2\2\2\u0eac\u0ead"+
		"\t\36\2\2\u0ead\u015d\3\2\2\2\u0eae\u0eb1\5\u0160\u00b1\2\u0eaf\u0eb1"+
		"\5\u0162\u00b2\2\u0eb0\u0eae\3\2\2\2\u0eb0\u0eaf\3\2\2\2\u0eb1\u015f\3"+
		"\2\2\2\u0eb2\u0eb3\7\u00df\2\2\u0eb3\u0eb4\5\u016c\u00b7\2\u0eb4\u0161"+
		"\3\2\2\2\u0eb5\u0eb6\7\u0081\2\2\u0eb6\u0eb7\7\u0158\2\2\u0eb7\u0eb8\5"+
		"\u01a8\u00d5\2\u0eb8\u0eb9\7\u0159\2\2\u0eb9\u0163\3\2\2\2\u0eba\u0ebf"+
		"\5\u0194\u00cb\2\u0ebb\u0ebd\7\6\2\2\u0ebc\u0ebb\3\2\2\2\u0ebc\u0ebd\3"+
		"\2\2\2\u0ebd\u0ebe\3\2\2\2\u0ebe\u0ec0\5\u0098M\2\u0ebf\u0ebc\3\2\2\2"+
		"\u0ebf\u0ec0\3\2\2\2\u0ec0\u0ec5\3\2\2\2\u0ec1\u0ec2\7\u0158\2\2\u0ec2"+
		"\u0ec3\5\u0166\u00b4\2\u0ec3\u0ec4\7\u0159\2\2\u0ec4\u0ec6\3\2\2\2\u0ec5"+
		"\u0ec1\3\2\2\2\u0ec5\u0ec6\3\2\2\2\u0ec6\u0ed3\3\2\2\2\u0ec7\u0ec9\5\u0168"+
		"\u00b5\2\u0ec8\u0eca\7\6\2\2\u0ec9\u0ec8\3\2\2\2\u0ec9\u0eca\3\2\2\2\u0eca"+
		"\u0ecb\3\2\2\2\u0ecb\u0ed0\5\u0098M\2\u0ecc\u0ecd\7\u0158\2\2\u0ecd\u0ece"+
		"\5\u0166\u00b4\2\u0ece\u0ecf\7\u0159\2\2\u0ecf\u0ed1\3\2\2\2\u0ed0\u0ecc"+
		"\3\2\2\2\u0ed0\u0ed1\3\2\2\2\u0ed1\u0ed3\3\2\2\2\u0ed2\u0eba\3\2\2\2\u0ed2"+
		"\u0ec7\3\2\2\2\u0ed3\u0165\3\2\2\2\u0ed4\u0ed9\5\u0098M\2\u0ed5\u0ed6"+
		"\7\u0151\2\2\u0ed6\u0ed8\5\u0098M\2\u0ed7\u0ed5\3\2\2\2\u0ed8\u0edb\3"+
		"\2\2\2\u0ed9\u0ed7\3\2\2\2\u0ed9\u0eda\3\2\2\2\u0eda\u0167\3\2\2\2\u0edb"+
		"\u0ed9\3\2\2\2\u0edc\u0edd\5\u01ae\u00d8\2\u0edd\u0169\3\2\2\2\u0ede\u0edf"+
		"\7\u0086\2\2\u0edf\u0ee0\5\u016c\u00b7\2\u0ee0\u016b\3\2\2\2\u0ee1\u0ee2"+
		"\5\u00fa~\2\u0ee2\u016d\3\2\2\2\u0ee3\u0ee4\7\65\2\2\u0ee4\u0ee5\7\u008d"+
		"\2\2\u0ee5\u0ee6\5\u0170\u00b9\2\u0ee6\u016f\3\2\2\2\u0ee7\u0eec\5\u0172"+
		"\u00ba\2\u0ee8\u0ee9\7\u0151\2\2\u0ee9\u0eeb\5\u0172\u00ba\2\u0eea\u0ee8"+
		"\3\2\2\2\u0eeb\u0eee\3\2\2\2\u0eec\u0eea\3\2\2\2\u0eec\u0eed\3\2\2\2\u0eed"+
		"\u0171\3\2\2\2\u0eee\u0eec\3\2\2\2\u0eef\u0ef4\5\u0178\u00bd\2\u0ef0\u0ef4"+
		"\5\u017a\u00be\2\u0ef1\u0ef4\5\u017c\u00bf\2\u0ef2\u0ef4\5\u0174\u00bb"+
		"\2\u0ef3\u0eef\3\2\2\2\u0ef3\u0ef0\3\2\2\2\u0ef3\u0ef1\3\2\2\2\u0ef3\u0ef2"+
		"\3\2\2\2\u0ef4\u0173\3\2\2\2\u0ef5\u0efb\5\u013e\u00a0\2\u0ef6\u0ef7\7"+
		"\u0158\2\2\u0ef7\u0ef8\5\u0180\u00c1\2\u0ef8\u0ef9\7\u0159\2\2\u0ef9\u0efb"+
		"\3\2\2\2\u0efa\u0ef5\3\2\2\2\u0efa\u0ef6\3\2\2\2\u0efb\u0175\3\2\2\2\u0efc"+
		"\u0f01\5\u0174\u00bb\2\u0efd\u0efe\7\u0151\2\2\u0efe\u0f00\5\u0174\u00bb"+
		"\2\u0eff\u0efd\3\2\2\2\u0f00\u0f03\3\2\2\2\u0f01\u0eff\3\2\2\2\u0f01\u0f02"+
		"\3\2\2\2\u0f02\u0177\3\2\2\2\u0f03\u0f01\3\2\2\2\u0f04\u0f05\7\u00f5\2"+
		"\2\u0f05\u0f06\7\u0158\2\2\u0f06\u0f07\5\u0176\u00bc\2\u0f07\u0f08\7\u0159"+
		"\2\2\u0f08\u0179\3\2\2\2\u0f09\u0f0a\7\u009f\2\2\u0f0a\u0f0b\7\u0158\2"+
		"\2\u0f0b\u0f0c\5\u0176\u00bc\2\u0f0c\u0f0d\7\u0159\2\2\u0f0d\u017b\3\2"+
		"\2\2\u0f0e\u0f0f\7\u0158\2\2\u0f0f\u0f10\7\u0159\2\2\u0f10\u017d\3\2\2"+
		"\2\u0f11\u0f12\7\66\2\2\u0f12\u0f13\5\u0124\u0093\2\u0f13\u017f\3\2\2"+
		"\2\u0f14\u0f19\5\u013e\u00a0\2\u0f15\u0f16\7\u0151\2\2\u0f16\u0f18\5\u013e"+
		"\u00a0\2\u0f17\u0f15\3\2\2\2\u0f18\u0f1b\3\2\2\2\u0f19\u0f17\3\2\2\2\u0f19"+
		"\u0f1a\3\2\2\2\u0f1a\u0181\3\2\2\2\u0f1b\u0f19\3\2\2\2\u0f1c\u0f1d\5\u0184"+
		"\u00c3\2\u0f1d\u0183\3\2\2\2\u0f1e\u0f21\5\u0186\u00c4\2\u0f1f\u0f21\5"+
		"\u014c\u00a7\2\u0f20\u0f1e\3\2\2\2\u0f20\u0f1f\3\2\2\2\u0f21\u0185\3\2"+
		"\2\2\u0f22\u0f2b\5\u018a\u00c6\2\u0f23\u0f24\5\u014c\u00a7\2\u0f24\u0f26"+
		"\t\37\2\2\u0f25\u0f27\t \2\2\u0f26\u0f25\3\2\2\2\u0f26\u0f27\3\2\2\2\u0f27"+
		"\u0f28\3\2\2\2\u0f28\u0f29\5\u0188\u00c5\2\u0f29\u0f2b\3\2\2\2\u0f2a\u0f22"+
		"\3\2\2\2\u0f2a\u0f23\3\2\2\2\u0f2b\u0f33\3\2\2\2\u0f2c\u0f2e\t\37\2\2"+
		"\u0f2d\u0f2f\t \2\2\u0f2e\u0f2d\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f30"+
		"\3\2\2\2\u0f30\u0f32\5\u0188\u00c5\2\u0f31\u0f2c\3\2\2\2\u0f32\u0f35\3"+
		"\2\2\2\u0f33\u0f31\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0187\3\2\2\2\u0f35"+
		"\u0f33\3\2\2\2\u0f36\u0f39\5\u018a\u00c6\2\u0f37\u0f39\5\u014c\u00a7\2"+
		"\u0f38\u0f36\3\2\2\2\u0f38\u0f37\3\2\2\2\u0f39\u0189\3\2\2\2\u0f3a\u0f43"+
		"\5\u018e\u00c8\2\u0f3b\u0f3c\5\u014c\u00a7\2\u0f3c\u0f3e\7B\2\2\u0f3d"+
		"\u0f3f\t \2\2\u0f3e\u0f3d\3\2\2\2\u0f3e\u0f3f\3\2\2\2\u0f3f\u0f40\3\2"+
		"\2\2\u0f40\u0f41\5\u018c\u00c7\2\u0f41\u0f43\3\2\2\2\u0f42\u0f3a\3\2\2"+
		"\2\u0f42\u0f3b\3\2\2\2\u0f43\u0f4b\3\2\2\2\u0f44\u0f46\7B\2\2\u0f45\u0f47"+
		"\t \2\2\u0f46\u0f45\3\2\2\2\u0f46\u0f47\3\2\2\2\u0f47\u0f48\3\2\2\2\u0f48"+
		"\u0f4a\5\u018c\u00c7\2\u0f49\u0f44\3\2\2\2\u0f4a\u0f4d\3\2\2\2\u0f4b\u0f49"+
		"\3\2\2\2\u0f4b\u0f4c\3\2\2\2\u0f4c\u018b\3\2\2\2\u0f4d\u0f4b\3\2\2\2\u0f4e"+
		"\u0f51\5\u018e\u00c8\2\u0f4f\u0f51\5\u014c\u00a7\2\u0f50\u0f4e\3\2\2\2"+
		"\u0f50\u0f4f\3\2\2\2\u0f51\u018d\3\2\2\2\u0f52\u0f58\5\u0190\u00c9\2\u0f53"+
		"\u0f54\7\u0158\2\2\u0f54\u0f55\5\u0186\u00c4\2\u0f55\u0f56\7\u0159\2\2"+
		"\u0f56\u0f58\3\2\2\2\u0f57\u0f52\3\2\2\2\u0f57\u0f53\3\2\2\2\u0f58\u018f"+
		"\3\2\2\2\u0f59\u0f5c\5\u0198\u00cd\2\u0f5a\u0f5c\5\u0192\u00ca\2\u0f5b"+
		"\u0f59\3\2\2\2\u0f5b\u0f5a\3\2\2\2\u0f5c\u0191\3\2\2\2\u0f5d\u0f5e\7t"+
		"\2\2\u0f5e\u0f5f\5\u0194\u00cb\2\u0f5f\u0193\3\2\2\2\u0f60\u0f63\5\u0196"+
		"\u00cc\2\u0f61\u0f63\5\u0098M\2\u0f62\u0f60\3\2\2\2\u0f62\u0f61\3\2\2"+
		"\2\u0f63\u0195\3\2\2\2\u0f64\u0f6b\5\u0098M\2\u0f65\u0f66\7\u015f\2\2"+
		"\u0f66\u0f69\5\u0098M\2\u0f67\u0f68\7\u015f\2\2\u0f68\u0f6a\5\u0098M\2"+
		"\u0f69\u0f67\3\2\2\2\u0f69\u0f6a\3\2\2\2\u0f6a\u0f6c\3\2\2\2\u0f6b\u0f65"+
		"\3\2\2\2\u0f6b\u0f6c\3\2\2\2\u0f6c\u0197\3\2\2\2\u0f6d\u0f6f\7m\2\2\u0f6e"+
		"\u0f70\5\u01a2\u00d2\2\u0f6f\u0f6e\3\2\2\2\u0f6f\u0f70\3\2\2\2\u0f70\u0f71"+
		"\3\2\2\2\u0f71\u0f73\5\u019a\u00ce\2\u0f72\u0f74\5\u0142\u00a2\2\u0f73"+
		"\u0f72\3\2\2\2\u0f73\u0f74\3\2\2\2\u0f74\u0199\3\2\2\2\u0f75\u0f7a\5\u019c"+
		"\u00cf\2\u0f76\u0f77\7\u0151\2\2\u0f77\u0f79\5\u019c\u00cf\2\u0f78\u0f76"+
		"\3\2\2\2\u0f79\u0f7c\3\2\2\2\u0f7a\u0f78\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b"+
		"\u019b\3\2\2\2\u0f7c\u0f7a\3\2\2\2\u0f7d\u0f80\5\u019e\u00d0\2\u0f7e\u0f80"+
		"\5\u01a0\u00d1\2\u0f7f\u0f7d\3\2\2\2\u0f7f\u0f7e\3\2\2\2\u0f80\u019d\3"+
		"\2\2\2\u0f81\u0f83\5\u00fa~\2\u0f82\u0f84\5\u01a6\u00d4\2\u0f83\u0f82"+
		"\3\2\2\2\u0f83\u0f84\3\2\2\2\u0f84\u019f\3\2\2\2\u0f85\u0f86\7\u016a\2"+
		"\2\u0f86\u0f88\7\u015f\2\2\u0f87\u0f85\3\2\2\2\u0f87\u0f88\3\2\2\2\u0f88"+
		"\u0f89\3\2\2\2\u0f89\u0f8a\7\u015c\2\2\u0f8a\u01a1\3\2\2\2\u0f8b\u0f8c"+
		"\t \2\2\u0f8c\u01a3\3\2\2\2\u0f8d\u0f8e\5\u0098M\2\u0f8e\u0f8f\7\u015f"+
		"\2\2\u0f8f\u0f91\3\2\2\2\u0f90\u0f8d\3\2\2\2\u0f90\u0f91\3\2\2\2\u0f91"+
		"\u0f92\3\2\2\2\u0f92\u0f93\5\u0098M\2\u0f93\u01a5\3\2\2\2\u0f94\u0f96"+
		"\7\6\2\2\u0f95\u0f94\3\2\2\2\u0f95\u0f96\3\2\2\2\u0f96\u0f97\3\2\2\2\u0f97"+
		"\u0f98\5\u0098M\2\u0f98\u01a7\3\2\2\2\u0f99\u0f9e\5\u01a4\u00d3\2\u0f9a"+
		"\u0f9b\7\u0151\2\2\u0f9b\u0f9d\5\u01a4\u00d3\2\u0f9c\u0f9a\3\2\2\2\u0f9d"+
		"\u0fa0\3\2\2\2\u0f9e\u0f9c\3\2\2\2\u0f9e\u0f9f\3\2\2\2\u0f9f\u01a9\3\2"+
		"\2\2\u0fa0\u0f9e\3\2\2\2\u0fa1\u0fa2\5\u01b0\u00d9\2\u0fa2\u01ab\3\2\2"+
		"\2\u0fa3\u0fa4\5\u01b0\u00d9\2\u0fa4\u01ad\3\2\2\2\u0fa5\u0fa6\5\u01b0"+
		"\u00d9\2\u0fa6\u01af\3\2\2\2\u0fa7\u0fa8\7\u0158\2\2\u0fa8\u0fa9\5\u0182"+
		"\u00c2\2\u0fa9\u0faa\7\u0159\2\2\u0faa\u01b1\3\2\2\2\u0fab\u0fb2\5\u01b4"+
		"\u00db\2\u0fac\u0fb2\5\u01b8\u00dd\2\u0fad\u0fb2\5\u01bc\u00df\2\u0fae"+
		"\u0fb2\5\u01c2\u00e2\2\u0faf\u0fb2\5\u01ca\u00e6\2\u0fb0\u0fb2\5\u01d4"+
		"\u00eb\2\u0fb1\u0fab\3\2\2\2\u0fb1\u0fac\3\2\2\2\u0fb1\u0fad\3\2\2\2\u0fb1"+
		"\u0fae\3\2\2\2\u0fb1\u0faf\3\2\2\2\u0fb1\u0fb0\3\2\2\2\u0fb2\u01b3\3\2"+
		"\2\2\u0fb3\u0fb4\5\u013e\u00a0\2\u0fb4\u0fb5\5\u01b6\u00dc\2\u0fb5\u0fb6"+
		"\5\u013e\u00a0\2\u0fb6\u01b5\3\2\2\2\u0fb7\u0fb8\t!\2\2\u0fb8\u01b7\3"+
		"\2\2\2\u0fb9\u0fba\5\u013e\u00a0\2\u0fba\u0fbb\5\u01ba\u00de\2\u0fbb\u01b9"+
		"\3\2\2\2\u0fbc\u0fbe\7P\2\2\u0fbd\u0fbc\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe"+
		"\u0fbf\3\2\2\2\u0fbf\u0fc1\7\u008c\2\2\u0fc0\u0fc2\t\"\2\2\u0fc1\u0fc0"+
		"\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fc3\3\2\2\2\u0fc3\u0fc4\5\u013e\u00a0"+
		"\2\u0fc4\u0fc5\7\t\2\2\u0fc5\u0fc6\5\u013e\u00a0\2\u0fc6\u01bb\3\2\2\2"+
		"\u0fc7\u0fc9\5\u00fe\u0080\2\u0fc8\u0fca\7P\2\2\u0fc9\u0fc8\3\2\2\2\u0fc9"+
		"\u0fca\3\2\2\2\u0fca\u0fcb\3\2\2\2\u0fcb\u0fcc\7<\2\2\u0fcc\u0fcd\5\u01be"+
		"\u00e0\2\u0fcd\u01bd\3\2\2\2\u0fce\u0fd4\5\u01ae\u00d8\2\u0fcf\u0fd0\7"+
		"\u0158\2\2\u0fd0\u0fd1\5\u01c0\u00e1\2\u0fd1\u0fd2\7\u0159\2\2\u0fd2\u0fd4"+
		"\3\2\2\2\u0fd3\u0fce\3\2\2\2\u0fd3\u0fcf\3\2\2\2\u0fd4\u01bf\3\2\2\2\u0fd5"+
		"\u0fda\5\u0138\u009d\2\u0fd6\u0fd7\7\u0151\2\2\u0fd7\u0fd9\5\u0138\u009d"+
		"\2\u0fd8\u0fd6\3\2\2\2\u0fd9\u0fdc\3\2\2\2\u0fda\u0fd8\3\2\2\2\u0fda\u0fdb"+
		"\3\2\2\2\u0fdb\u01c1\3\2\2\2\u0fdc\u0fda\3\2\2\2\u0fdd\u0fde\5\u013e\u00a0"+
		"\2\u0fde\u0fdf\5\u01c4\u00e3\2\u0fdf\u0fe0\7\u016d\2\2\u0fe0\u01c3\3\2"+
		"\2\2\u0fe1\u0fe3\7P\2\2\u0fe2\u0fe1\3\2\2\2\u0fe2\u0fe3\3\2\2\2\u0fe3"+
		"\u0fe4\3\2\2\2\u0fe4\u0fe7\5\u01c6\u00e4\2\u0fe5\u0fe7\5\u01c8\u00e5\2"+
		"\u0fe6\u0fe2\3\2\2\2\u0fe6\u0fe5\3\2\2\2\u0fe7\u01c5\3\2\2\2\u0fe8\u0fef"+
		"\7L\2\2\u0fe9\u0fef\79\2\2\u0fea\u0feb\7\u00fb\2\2\u0feb\u0fef\7\u010d"+
		"\2\2\u0fec\u0fef\7\u00ef\2\2\u0fed\u0fef\7\u00f4\2\2\u0fee\u0fe8\3\2\2"+
		"\2\u0fee\u0fe9\3\2\2\2\u0fee\u0fea\3\2\2\2\u0fee\u0fec\3\2\2\2\u0fee\u0fed"+
		"\3\2\2\2\u0fef\u01c7\3\2\2\2\u0ff0\u0ff1\t#\2\2\u0ff1\u01c9\3\2\2\2\u0ff2"+
		"\u0ff3\5\u013e\u00a0\2\u0ff3\u0ff5\7G\2\2\u0ff4\u0ff6\7P\2\2\u0ff5\u0ff4"+
		"\3\2\2\2\u0ff5\u0ff6\3\2\2\2\u0ff6\u0ff7\3\2\2\2\u0ff7\u0ff8\7Q\2\2\u0ff8"+
		"\u01cb\3\2\2\2\u0ff9\u0ffa\5\u00fe\u0080\2\u0ffa\u0ffb\5\u01b6\u00dc\2"+
		"\u0ffb\u0ffc\5\u01ce\u00e8\2\u0ffc\u0ffd\5\u01ae\u00d8\2\u0ffd\u01cd\3"+
		"\2\2\2\u0ffe\u1001\5\u01d0\u00e9\2\u0fff\u1001\5\u01d2\u00ea\2\u1000\u0ffe"+
		"\3\2\2\2\u1000\u0fff\3\2\2\2\u1001\u01cf\3\2\2\2\u1002\u1003\7\7\2\2\u1003"+
		"\u01d1\3\2\2\2\u1004\u1005\t$\2\2\u1005\u01d3\3\2\2\2\u1006\u1008\7P\2"+
		"\2\u1007\u1006\3\2\2\2\u1007\u1008\3\2\2\2\u1008\u1009\3\2\2\2\u1009\u100a"+
		"\7\u00b0\2\2\u100a\u100b\5\u01ae\u00d8\2\u100b\u01d5\3\2\2\2\u100c\u100d"+
		"\7~\2\2\u100d\u100e\5\u01ae\u00d8\2\u100e\u01d7\3\2\2\2\u100f\u1012\5"+
		"\u01da\u00ee\2\u1010\u1012\7\u00f7\2\2\u1011\u100f\3\2\2\2\u1011\u1010"+
		"\3\2\2\2\u1012\u01d9\3\2\2\2\u1013\u1014\t%\2\2\u1014\u01db\3\2\2\2\u1015"+
		"\u1016\t&\2\2\u1016\u01dd\3\2\2\2\u1017\u1018\5\u01e2\u00f2\2\u1018\u101a"+
		"\7\u0158\2\2\u1019\u101b\5\u01e4\u00f3\2\u101a\u1019\3\2\2\2\u101a\u101b"+
		"\3\2\2\2\u101b\u101c\3\2\2\2\u101c\u101d\7\u0159\2\2\u101d\u01df\3\2\2"+
		"\2\u101e\u101f\t\'\2\2\u101f\u01e1\3\2\2\2\u1020\u1023\5\u0196\u00cc\2"+
		"\u1021\u1023\5\u01e0\u00f1\2\u1022\u1020\3\2\2\2\u1022\u1021\3\2\2\2\u1023"+
		"\u01e3\3\2\2\2\u1024\u1029\5\u00fa~\2\u1025\u1026\7\u0151\2\2\u1026\u1028"+
		"\5\u00fa~\2\u1027\u1025\3\2\2\2\u1028\u102b\3\2\2\2\u1029\u1027\3\2\2"+
		"\2\u1029\u102a\3\2\2\2\u102a\u01e5\3\2\2\2\u102b\u1029\3\2\2\2\u102c\u102d"+
		"\7X\2\2\u102d\u102e\7\u008d\2\2\u102e\u102f\5\u01ea\u00f6\2\u102f\u01e7"+
		"\3\2\2\2\u1030\u103a\5\u01ea\u00f6\2\u1031\u1034\7\u0158\2\2\u1032\u1035"+
		"\n\35\2\2\u1033\u1035\5\u01e8\u00f5\2\u1034\u1032\3\2\2\2\u1034\u1033"+
		"\3\2\2\2\u1035\u1036\3\2\2\2\u1036\u1034\3\2\2\2\u1036\u1037\3\2\2\2\u1037"+
		"\u1038\3\2\2\2\u1038\u103a\7\u0159\2\2\u1039\u1030\3\2\2\2\u1039\u1031"+
		"\3\2\2\2\u103a\u01e9\3\2\2\2\u103b\u1040\5\u01ec\u00f7\2\u103c\u103d\7"+
		"\u0151\2\2\u103d\u103f\5\u01ec\u00f7\2\u103e\u103c\3\2\2\2\u103f\u1042"+
		"\3\2\2\2\u1040\u103e\3\2\2\2\u1040\u1041\3\2\2\2\u1041\u01eb\3\2\2\2\u1042"+
		"\u1040\3\2\2\2\u1043\u1045\5\u013e\u00a0\2\u1044\u1046\5\u01ee\u00f8\2"+
		"\u1045\u1044\3\2\2\2\u1045\u1046\3\2\2\2\u1046\u1048\3\2\2\2\u1047\u1049"+
		"\5\u01f2\u00fa\2\u1048\u1047\3\2\2\2\u1048\u1049\3\2\2\2\u1049\u01ed\3"+
		"\2\2\2\u104a\u104b\t(\2\2\u104b\u01ef\3\2\2\2\u104c\u104d\7M\2\2\u104d"+
		"\u104e\5\u00fe\u0080\2\u104e\u01f1\3\2\2\2\u104f\u1050\7Q\2\2\u1050\u1054"+
		"\7\u00b6\2\2\u1051\u1052\7Q\2\2\u1052\u1054\7\u00c9\2\2\u1053\u104f\3"+
		"\2\2\2\u1053\u1051\3\2\2\2\u1054\u01f3\3\2\2\2\u1055\u1057\7\u00c1\2\2"+
		"\u1056\u1058\7\u00e3\2\2\u1057\u1056\3\2\2\2\u1057\u1058\3\2\2\2\u1058"+
		"\u1059\3\2\2\2\u1059\u105a\7C\2\2\u105a\u105f\5\u0196\u00cc\2\u105b\u105c"+
		"\7\u0158\2\2\u105c\u105d\5\u0166\u00b4\2\u105d\u105e\7\u0159\2\2\u105e"+
		"\u1060\3\2\2\2\u105f\u105b\3\2\2\2\u105f\u1060\3\2\2\2\u1060\u1061\3\2"+
		"\2\2\u1061\u1062\5\u0182\u00c2\2\u1062\u1073\3\2\2\2\u1063\u1065\7\u00c1"+
		"\2\2\u1064\u1066\7\u00e3\2\2\u1065\u1064\3\2\2\2\u1065\u1066\3\2\2\2\u1066"+
		"\u1067\3\2\2\2\u1067\u1068\7C\2\2\u1068\u1069\7\u00cc\2\2\u1069\u106f"+
		"\7\u016d\2\2\u106a\u106b\7\u0081\2\2\u106b\u106d\5\u0098M\2\u106c\u106e"+
		"\5r:\2\u106d\u106c\3\2\2\2\u106d\u106e\3\2\2\2\u106e\u1070\3\2\2\2\u106f"+
		"\u106a\3\2\2\2\u106f\u1070\3\2\2\2\u1070\u1071\3\2\2\2\u1071\u1073\5\u0182"+
		"\u00c2\2\u1072\u1055\3\2\2\2\u1072\u1063\3\2\2\2\u1073\u01f5\3\2\2\2\u025d"+
		"\u01f8\u01fc\u020a\u021a\u0222\u022b\u022e\u0248\u0258\u025c\u0266\u026e"+
		"\u0273\u0278\u027c\u0280\u0285\u028a\u028e\u02a2\u02a6\u02ab\u02af\u02b3"+
		"\u02b7\u02bc\u02c2\u02c6\u02ca\u02d3\u02db\u02e5\u02ee\u02f7\u02fb\u0301"+
		"\u0308\u030c\u0312\u0320\u032b\u0335\u033c\u0366\u036a\u037d\u0381\u038c"+
		"\u0392\u0394\u03a6\u03ab\u03ba\u03c5\u03ce\u03d2\u03d4\u03da\u03de\u03e0"+
		"\u03e7\u03eb\u03ef\u03f1\u03f9\u03fd\u0401\u0403\u040c\u040e\u0417\u0419"+
		"\u0422\u0426\u042a\u042e\u0430\u0439\u043d\u0441\u0445\u0447\u0450\u0455"+
		"\u0457\u0460\u0465\u0467\u046c\u0472\u0478\u047b\u047d\u047f\u0486\u0491"+
		"\u049c\u04a3\u04a7\u04ab\u04ae\u04b4\u04b8\u04bc\u04c0\u04c7\u04cb\u04cf"+
		"\u04d3\u04d7\u04dc\u04df\u04e6\u04e9\u04ec\u04f4\u04f8\u04fa\u0508\u050c"+
		"\u0510\u0514\u0516\u051e\u0528\u052b\u052f\u0533\u053a\u053d\u0541\u0543"+
		"\u0547\u054f\u0558\u055c\u055e\u0560\u0563\u0567\u056d\u0572\u0578\u057c"+
		"\u0580\u0584\u058c\u0590\u0599\u059e\u05a2\u05a4\u05a8\u05ad\u05b6\u05b8"+
		"\u05c0\u05c6\u05ca\u05d0\u05d4\u05d9\u05dd\u05e1\u05e5\u05e9\u05ed\u05f5"+
		"\u05fa\u05fe\u0600\u0606\u060a\u0612\u0616\u0618\u0620\u0625\u0629\u062b"+
		"\u0631\u0635\u063d\u0642\u0644\u064c\u0650\u0658\u065d\u065f\u0666\u066a"+
		"\u0672\u0677\u0679\u067e\u0686\u068b\u068d\u0693\u0697\u069f\u06a4\u06a6"+
		"\u06a8\u06ac\u06ae\u06b5\u06b9\u06c1\u06c5\u06c9\u06cd\u06cf\u06d5\u06d9"+
		"\u06e1\u06e6\u06e8\u06ee\u06f2\u06fa\u06fe\u0702\u0707\u070b\u070e\u0710"+
		"\u0714\u0719\u071b\u071d\u0720\u0725\u0729\u072d\u072f\u0733\u0737\u073b"+
		"\u0743\u0747\u0749\u0751\u0755\u0759\u075d\u0761\u0765\u0767\u076b\u076f"+
		"\u0773\u077a\u077e\u0782\u0784\u078a\u078e\u0796\u079a\u079c\u07a3\u07a7"+
		"\u07ab\u07ad\u07b3\u07b7\u07bf\u07c1\u07c9\u07cd\u07d5\u07d7\u07de\u07e2"+
		"\u07ea\u07ec\u07f1\u07f9\u07fb\u0801\u0805\u080c\u0810\u0814\u0816\u081d"+
		"\u0821\u0828\u082c\u0830\u0832\u0838\u083c\u0844\u0846\u084c\u0850\u0856"+
		"\u085a\u085f\u0863\u0868\u086a\u086e\u0872\u0875\u0879\u087e\u0887\u088b"+
		"\u08ca\u08f8\u0900\u0908\u0910\u0914\u0918\u092b\u0930\u0940\u0946\u094f"+
		"\u0951\u0957\u095b\u095f\u0963\u0966\u096a\u096e\u0972\u0974\u0977\u097b"+
		"\u098c\u098f\u0993\u0996\u099a\u09a5\u09a9\u09ad\u09b4\u09b9\u09c0\u09c6"+
		"\u09ca\u09d0\u09d7\u09d9\u09e0\u09e5\u09ef\u09fa\u0a03\u0a08\u0a0b\u0a11"+
		"\u0a15\u0a1d\u0a21\u0a25\u0a2c\u0a30\u0a36\u0a41\u0a44\u0a47\u0a4b\u0a4d"+
		"\u0a54\u0a58\u0a5c\u0a64\u0a68\u0a6e\u0a7a\u0a7e\u0a81\u0a85\u0a89\u0a8f"+
		"\u0a95\u0a9a\u0aa2\u0aa9\u0aad\u0ab7\u0abb\u0ac3\u0aca\u0ace\u0ad7\u0ade"+
		"\u0ae2\u0aea\u0aee\u0af2\u0afa\u0b02\u0b04\u0b07\u0b0c\u0b12\u0b16\u0b1f"+
		"\u0b2f\u0b34\u0b39\u0b3b\u0b40\u0b46\u0b51\u0b54\u0b58\u0b64\u0b6d\u0b6f"+
		"\u0b73\u0b7b\u0b7e\u0b84\u0b8c\u0b9d\u0bb2\u0bc3\u0bd0\u0bd4\u0bd6\u0be3"+
		"\u0bea\u0c02\u0c09\u0c1a\u0c1f\u0c23\u0c25\u0c2b\u0c30\u0c35\u0c45\u0c56"+
		"\u0c5e\u0c62\u0c67\u0c6c\u0c70\u0c74\u0c7d\u0c82\u0c86\u0c8c\u0c92\u0c97"+
		"\u0c9b\u0c9d\u0ca1\u0ca5\u0ca7\u0cab\u0caf\u0cb3\u0cb7\u0cc2\u0cc6\u0cce"+
		"\u0cd8\u0ced\u0cf1\u0cf5\u0cfa\u0cfc\u0d00\u0d05\u0d09\u0d0b\u0d0f\u0d1d"+
		"\u0d24\u0d30\u0d32\u0d37\u0d59\u0d5d\u0d61\u0d68\u0d6b\u0d73\u0d76\u0d89"+
		"\u0d99\u0d9e\u0da5\u0dad\u0db1\u0dbb\u0dc5\u0dc9\u0dd9\u0ddf\u0de8\u0def"+
		"\u0df9\u0dfc\u0dff\u0e06\u0e11\u0e19\u0e1f\u0e23\u0e27\u0e2f\u0e33\u0e3b"+
		"\u0e43\u0e47\u0e4b\u0e4e\u0e51\u0e54\u0e57\u0e60\u0e62\u0e65\u0e6c\u0e71"+
		"\u0e77\u0e7d\u0e85\u0e8c\u0e93\u0e9b\u0ea6\u0eaa\u0eb0\u0ebc\u0ebf\u0ec5"+
		"\u0ec9\u0ed0\u0ed2\u0ed9\u0eec\u0ef3\u0efa\u0f01\u0f19\u0f20\u0f26\u0f2a"+
		"\u0f2e\u0f33\u0f38\u0f3e\u0f42\u0f46\u0f4b\u0f50\u0f57\u0f5b\u0f62\u0f69"+
		"\u0f6b\u0f6f\u0f73\u0f7a\u0f7f\u0f83\u0f87\u0f90\u0f95\u0f9e\u0fb1\u0fbd"+
		"\u0fc1\u0fc9\u0fd3\u0fda\u0fe2\u0fe6\u0fee\u0ff5\u1000\u1007\u1011\u101a"+
		"\u1022\u1029\u1034\u1036\u1039\u1040\u1045\u1048\u1053\u1057\u105f\u1065"+
		"\u106d\u106f\u1072";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}